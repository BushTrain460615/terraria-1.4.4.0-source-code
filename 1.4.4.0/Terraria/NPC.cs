using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using ReLogic.Content;
using ReLogic.Utilities;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Creative;
using Terraria.GameContent.Drawing;
using Terraria.GameContent.Events;
using Terraria.GameContent.ItemDropRules;
using Terraria.GameContent.RGB;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI;
using Terraria.Graphics.CameraModifiers;
using Terraria.Graphics.Effects;
using Terraria.ID;
using Terraria.Localization;
using Terraria.Utilities;
using Terraria.WorldBuilding;

namespace Terraria
{
	public class NPC : Entity
	{
		private const int NPC_TARGETS_START = 300;

		public bool IsABestiaryIconDummy;

		public bool ForcePartyHatOn;

		public float waterMovementSpeed = 0.5f;

		public float lavaMovementSpeed = 0.5f;

		public float honeyMovementSpeed = 0.25f;

		public float shimmerMovementSpeed = 0.375f;

		public static readonly int[,,,] MoonLordAttacksArray = InitializeMoonLordAttacks();

		public static readonly int[,] MoonLordAttacksArray2 = InitializeMoonLordAttacks2();

		public static int MoonLordFightingDistance = 4500;

		public static int MoonLordCountdown = 0;

		public static int MaxMoonLordCountdown = 3600;

		public const int NaturalMoonlordCountdownTime = 3600;

		public const int ItemMoonlordCountdownTime = 720;

		public int teleportStyle;

		public float teleportTime;

		public static int immuneTime = 20;

		public static int maxAI = 4;

		public int netSpam;

		public static int goldCritterChance = 400;

		public static int[] killCount = new int[688];

		public static float totalInvasionPoints = 0f;

		public static float waveKills = 0f;

		public static int waveNumber = 0;

		public const float nameOverIncrement = 0.025f;

		public const float nameOverDistance = 350f;

		public float nameOver;

		public bool SpawnedFromStatue;

		public bool dripping;

		public bool drippingSlime;

		public bool drippingSparkleSlime;

		public static readonly int AFKTimeNeededForNoWorms = 300;

		public static HashSet<int> ShimmeredTownNPCs = new HashSet<int>();

		public int altTexture;

		public int townNpcVariationIndex;

		public Vector2 netOffset = Vector2.Zero;

		public short catchItem;

		public short releaseOwner = 255;

		public int rarity;

		public static bool taxCollector = false;

		public bool[] playerInteraction = new bool[256];

		public int lastInteraction = 255;

		public float takenDamageMultiplier = 1f;

		public static bool freeCake = false;

		private static int spawnSpaceX = 3;

		private static int spawnSpaceY = 3;

		public float gfxOffY;

		public float stepSpeed;

		private static float gravity = 0.3f;

		public bool teleporting;

		private static int maxAttack = 20;

		private static int[] attackNPC = new int[maxAttack];

		public bool stairFall;

		public static int fireFlyFriendly = 0;

		public static int fireFlyChance = 0;

		public static int fireFlyMultiple = 0;

		public static int butterflyChance = 0;

		public static int stinkBugChance = 0;

		private int netStream;

		private int[] streamPlayer = new int[255];

		private bool needsUniqueInfoUpdate = true;

		public Vector2[] oldPos = new Vector2[10];

		public float[] oldRot = new float[10];

		public bool setFrameSize;

		public static int golemBoss = -1;

		public static int plantBoss = -1;

		public static int crimsonBoss = -1;

		public static int deerclopsBoss = -1;

		public int netSkip;

		public bool netAlways;

		public int realLife = -1;

		private string _givenName = "";

		public static int sWidth = 1920;

		public static int sHeight = 1080;

		private static int spawnRangeX = (int)((double)(sWidth / 16) * 0.7);

		private static int spawnRangeY = (int)((double)(sHeight / 16) * 0.7);

		public static int safeRangeX = (int)((double)(sWidth / 16) * 0.52);

		public static int safeRangeY = (int)((double)(sHeight / 16) * 0.52);

		private static int activeRangeX = (int)((double)sWidth * 2.1);

		private static int activeRangeY = (int)((double)sHeight * 2.1);

		private static int townRangeX = sWidth;

		private static int townRangeY = sHeight;

		public float npcSlots = 1f;

		private static bool noSpawnCycle = false;

		private static int activeTime = 750;

		private static int defaultSpawnRate = 600;

		private static int defaultMaxSpawns = 5;

		public float shimmerTransparency;

		public bool dontCountMe;

		public const int maxBuffs = 20;

		public int[] buffType = new int[20];

		public int[] buffTime = new int[20];

		public bool[] buffImmune = new bool[355];

		public bool midas;

		public bool ichor;

		public bool onFire;

		public bool onFire2;

		public bool onFire3;

		public bool onFrostBurn;

		public bool onFrostBurn2;

		public bool poisoned;

		public bool markedByScytheWhip;

		public bool venom;

		public bool shadowFlame;

		public bool soulDrain;

		public bool shimmering;

		public int lifeRegen;

		public int lifeRegenCount;

		public int lifeRegenExpectedLossPerSecond = -1;

		public bool confused;

		public bool loveStruck;

		public bool stinky;

		public bool dryadWard;

		public bool immortal;

		public bool chaseable = true;

		public bool canGhostHeal = true;

		public bool javelined;

		public bool tentacleSpiked;

		public bool bloodButchered;

		public bool celled;

		public bool dryadBane;

		public bool daybreak;

		public bool dontTakeDamageFromHostiles;

		public bool betsysCurse;

		public bool oiled;

		public static bool savedTaxCollector = false;

		public static bool savedGoblin = false;

		public static bool savedWizard = false;

		public static bool savedMech = false;

		public static bool savedAngler = false;

		public static bool savedStylist = false;

		public static bool savedBartender = false;

		public static bool savedGolfer = false;

		public static bool boughtCat = false;

		public static bool boughtDog = false;

		public static bool boughtBunny = false;

		public static bool unlockedSlimeBlueSpawn = false;

		public static bool unlockedSlimeGreenSpawn = false;

		public static bool unlockedSlimeOldSpawn = false;

		public static bool unlockedSlimePurpleSpawn = false;

		public static bool unlockedSlimeRainbowSpawn = false;

		public static bool unlockedSlimeRedSpawn = false;

		public static bool unlockedSlimeYellowSpawn = false;

		public static bool unlockedSlimeCopperSpawn = false;

		public static bool unlockedMerchantSpawn = false;

		public static bool unlockedDemolitionistSpawn = false;

		public static bool unlockedPartyGirlSpawn = false;

		public static bool unlockedDyeTraderSpawn = false;

		public static bool unlockedTruffleSpawn = false;

		public static bool unlockedArmsDealerSpawn = false;

		public static bool unlockedNurseSpawn = false;

		public static bool unlockedPrincessSpawn = false;

		public static bool combatBookWasUsed = false;

		public static bool combatBookVolumeTwoWasUsed = false;

		public static bool peddlersSatchelWasUsed = false;

		public static bool downedBoss1 = false;

		public static bool downedBoss2 = false;

		public static bool downedBoss3 = false;

		public static bool downedQueenBee = false;

		public static bool downedSlimeKing = false;

		public static bool downedGoblins = false;

		public static bool downedFrost = false;

		public static bool downedPirates = false;

		public static bool downedClown = false;

		public static bool downedPlantBoss = false;

		public static bool downedGolemBoss = false;

		public static bool downedMartians = false;

		public static bool downedFishron = false;

		public static bool downedHalloweenTree = false;

		public static bool downedHalloweenKing = false;

		public static bool downedChristmasIceQueen = false;

		public static bool downedChristmasTree = false;

		public static bool downedChristmasSantank = false;

		public static bool downedAncientCultist = false;

		public static bool downedMoonlord = false;

		public static bool downedTowerSolar = false;

		public static bool downedTowerVortex = false;

		public static bool downedTowerNebula = false;

		public static bool downedTowerStardust = false;

		public static bool downedEmpressOfLight = false;

		public static bool downedQueenSlime = false;

		public static bool downedDeerclops = false;

		public static int ShieldStrengthTowerSolar = 0;

		public static int ShieldStrengthTowerVortex = 0;

		public static int ShieldStrengthTowerNebula = 0;

		public static int ShieldStrengthTowerStardust = 0;

		public static int LunarShieldPowerNormal = 100;

		public static int LunarShieldPowerMax = 100;

		public static bool TowerActiveSolar = false;

		public static bool TowerActiveVortex = false;

		public static bool TowerActiveNebula = false;

		public static bool TowerActiveStardust = false;

		public static bool LunarApocalypseIsUp = false;

		public static bool downedMechBossAny = false;

		public static bool downedMechBoss1 = false;

		public static bool downedMechBoss2 = false;

		public static bool downedMechBoss3 = false;

		public static bool[] npcsFoundForCheckActive = new bool[688];

		public static int[] lazyNPCOwnedProjectileSearchArray = new int[200];

		private static int spawnRate = defaultSpawnRate;

		private static int maxSpawns = defaultMaxSpawns;

		public int soundDelay;

		public static CoinLossRevengeSystem RevengeManager = new CoinLossRevengeSystem();

		public int[] immune = new int[256];

		public int directionY = 1;

		public int type;

		public float[] ai = new float[maxAI];

		public float[] localAI = new float[maxAI];

		public int aiAction;

		public int aiStyle;

		public bool justHit;

		public int timeLeft;

		public int target = -1;

		public int damage;

		public int defense;

		public int defDamage;

		public int defDefense;

		public bool coldDamage;

		public bool trapImmune;

		public LegacySoundStyle HitSound;

		public LegacySoundStyle DeathSound;

		public int life;

		public int lifeMax;

		public Rectangle targetRect;

		public double frameCounter;

		public Rectangle frame;

		public Color color;

		public int alpha;

		public bool hide;

		public float scale = 1f;

		public float knockBackResist = 1f;

		public int oldDirectionY;

		public int oldTarget;

		public float rotation;

		public bool noGravity;

		public bool noTileCollide;

		public bool netUpdate;

		public bool netUpdate2;

		public bool collideX;

		public bool collideY;

		public bool boss;

		public int spriteDirection = -1;

		public bool behindTiles;

		public bool lavaImmune;

		public float value;

		public int extraValue;

		public bool dontTakeDamage;

		private int catchableNPCTempImmunityCounter;

		public int netID;

		public int statsAreScaledForThisManyPlayers;

		public float strengthMultiplier = 1f;

		public bool townNPC;

		public static bool travelNPC = false;

		public bool homeless;

		public int homeTileX = -1;

		public int homeTileY = -1;

		public int housingCategory;

		public bool oldHomeless;

		public int oldHomeTileX = -1;

		public int oldHomeTileY = -1;

		public bool friendly;

		public bool closeDoor;

		public int doorX;

		public int doorY;

		public int friendlyRegen;

		public int breath;

		public const int breathMax = 200;

		public int breathCounter;

		public bool reflectsProjectiles;

		public int lastPortalColorIndex;

		public bool despawnEncouraged;

		private bool netShimmer;

		public static int[,] cavernMonsterType = new int[2, 3];

		public static int mechQueen = -1;

		public static int brainOfGravity = -1;

		public static bool empressRageMode = false;

		private static readonly int[] _deerclopsAttack1Frames = new int[12]
		{
			12, 13, 14, 13, 14, 13, 14, 13, 14, 15,
			16, 17
		};

		private static readonly int[] _deerclopsAttack2Frames = new int[13]
		{
			12, 15, 16, 17, 17, 17, 17, 13, 18, 18,
			18, 18, 12
		};

		private static readonly int[] _deerclopsAttack3Frames = new int[16]
		{
			19, 20, 21, 22, 21, 22, 21, 22, 23, 24,
			23, 24, 23, 24, 20, 19
		};

		public static int[] MoonEventRequiredPointsPerWaveLookup = new int[21]
		{
			0, 25, 40, 50, 80, 100, 160, 180, 200, 250,
			300, 375, 450, 525, 675, 850, 1025, 1325, 1550, 2000,
			0
		};

		private static bool EoCKilledToday;

		private static bool WoFKilledToday;

		public static bool fairyLog = false;

		private static bool dayTimeHax;

		private static bool rainingHax;

		private static float cloudAlphaHax;

		private static int ignorePlayerInteractions = 0;

		public static int ladyBugGoodLuckTime = 43200;

		public static int ladyBugBadLuckTime = -10800;

		private static int ladyBugRainTime = 1800;

		private static int maximumAmountOfTimesLadyBugRainCanStack = 10 * ladyBugRainTime;

		public static int offSetDelayTime = 60;

		public static bool PreventJojaColaDialog = false;

		public static int RerollDryadText = 0;

		public bool CanTalk
		{
			get
			{
				if (isLikeATownNPC && aiStyle == 7 && velocity.Y == 0f)
				{
					return !NPCID.Sets.IsTownPet[type];
				}
				return false;
			}
		}

		public bool CanBeTalkedTo
		{
			get
			{
				if (isLikeATownNPC && aiStyle == 7)
				{
					return velocity.Y == 0f;
				}
				return false;
			}
		}

		public bool HasValidTarget
		{
			get
			{
				if (!HasPlayerTarget || !Main.player[target].active || Main.player[target].dead || Main.player[target].ghost)
				{
					if (SupportsNPCTargets && HasNPCTarget)
					{
						return Main.npc[TranslatedTargetIndex].active;
					}
					return false;
				}
				return true;
			}
		}

		public bool HasPlayerTarget
		{
			get
			{
				if (target >= 0)
				{
					return target < 255;
				}
				return false;
			}
		}

		public bool HasNPCTarget
		{
			get
			{
				if (target >= 300)
				{
					return target < 500;
				}
				return false;
			}
		}

		public bool SupportsNPCTargets => NPCID.Sets.UsesNewTargetting[type];

		public int TranslatedTargetIndex
		{
			get
			{
				if (HasNPCTarget)
				{
					return target - 300;
				}
				return target;
			}
		}

		public int WhoAmIToTargettingIndex => whoAmI + 300;

		public bool IsShimmerVariant
		{
			get
			{
				if (townNpcVariationIndex == 1)
				{
					return NPCID.Sets.ShimmerTownTransform[type];
				}
				return false;
			}
		}

		public string TypeName => Lang.GetNPCNameValue(netID);

		public string FullName
		{
			get
			{
				if (!HasGivenName)
				{
					return TypeName;
				}
				return Language.GetTextValue("Game.NPCTitle", _givenName, TypeName);
			}
		}

		public bool HasGivenName => _givenName.Length != 0;

		public string GivenOrTypeName
		{
			get
			{
				if (!HasGivenName)
				{
					return TypeName;
				}
				return _givenName;
			}
		}

		public string GivenName
		{
			get
			{
				return _givenName;
			}
			set
			{
				_givenName = value ?? "";
			}
		}

		public static bool downedTowers
		{
			get
			{
				if (downedTowerSolar && downedTowerVortex && downedTowerNebula)
				{
					return downedTowerStardust;
				}
				return false;
			}
		}

		public static int ShieldStrengthTowerMax
		{
			get
			{
				int num = LunarShieldPowerNormal;
				if (downedMoonlord)
				{
					num /= 2;
				}
				return num;
			}
		}

		public static bool TowersDefeated
		{
			get
			{
				if (TowerActiveSolar && TowerActiveVortex && TowerActiveNebula)
				{
					return TowerActiveStardust;
				}
				return false;
			}
		}

		public float Opacity
		{
			get
			{
				return 1f - (float)alpha / 255f;
			}
			set
			{
				alpha = (int)MathHelper.Clamp((1f - value) * 255f, 0f, 255f);
			}
		}

		public bool isLikeATownNPC
		{
			get
			{
				if (type == 453)
				{
					return true;
				}
				return townNPC;
			}
		}

		public static bool IsMechQueenUp
		{
			get
			{
				if (mechQueen >= 0 && mechQueen < 200)
				{
					if (Main.npc[mechQueen].active && Main.npc[mechQueen].type == 127)
					{
						return true;
					}
					mechQueen = -1;
					return false;
				}
				return false;
			}
		}

		public static bool TooWindyForButterflies => Math.Abs(Main.windSpeedTarget) >= 0.4f;

		public bool CountsAsACritter
		{
			get
			{
				if (lifeMax <= 5 && damage == 0 && type != 594)
				{
					return type != 686;
				}
				return false;
			}
		}

		public NPCAimedTarget GetTargetData(bool ignorePlayerTankPets = true)
		{
			if (!HasValidTarget)
			{
				return default(NPCAimedTarget);
			}
			if (SupportsNPCTargets && HasNPCTarget)
			{
				return new NPCAimedTarget(Main.npc[TranslatedTargetIndex]);
			}
			return new NPCAimedTarget(Main.player[target], ignorePlayerTankPets);
		}

		public static int[,,,] InitializeMoonLordAttacks()
		{
			int[,,,] array = null;
			if (MoonLordAttacksArray != null)
			{
				array = MoonLordAttacksArray;
				for (int i = 0; i < array.GetLength(0); i++)
				{
					for (int j = 0; j < array.GetLength(1); j++)
					{
						for (int k = 0; k < array.GetLength(2); k++)
						{
							for (int l = 0; l < array.GetLength(3); l++)
							{
								array[i, j, k, l] = 0;
							}
						}
					}
				}
			}
			else
			{
				array = new int[3, 3, 2, 5];
			}
			array[0, 0, 0, 0] = 0;
			array[0, 0, 1, 0] = 50;
			array[0, 0, 0, 1] = 1;
			array[0, 0, 1, 1] = 70;
			array[0, 0, 0, 2] = 2;
			array[0, 0, 1, 2] = 330;
			array[0, 0, 0, 3] = 0;
			array[0, 0, 1, 3] = 60;
			array[0, 0, 0, 4] = 3;
			array[0, 0, 1, 4] = 90;
			array[0, 1, 0, 0] = 1;
			array[0, 1, 1, 0] = 70;
			array[0, 1, 0, 1] = 0;
			array[0, 1, 1, 1] = 50;
			array[0, 1, 0, 2] = 3;
			array[0, 1, 1, 2] = 90;
			array[0, 1, 0, 3] = 0;
			array[0, 1, 1, 3] = 60;
			array[0, 1, 0, 4] = 2;
			array[0, 1, 1, 4] = 330;
			array[0, 2, 0, 0] = 3;
			array[0, 2, 1, 0] = 180;
			array[0, 2, 0, 1] = 0;
			array[0, 2, 1, 1] = 30;
			array[0, 2, 0, 2] = 2;
			array[0, 2, 1, 2] = 435;
			array[0, 2, 0, 3] = 3;
			array[0, 2, 1, 3] = 180;
			array[0, 2, 0, 4] = 1;
			array[0, 2, 1, 4] = 375;
			array[1, 0, 0, 0] = 0;
			array[1, 0, 1, 0] = 0;
			array[1, 0, 0, 1] = 0;
			array[1, 0, 1, 1] = 0;
			array[1, 0, 0, 2] = 0;
			array[1, 0, 1, 2] = 0;
			array[1, 0, 0, 3] = 0;
			array[1, 0, 1, 3] = 0;
			array[1, 0, 0, 4] = 0;
			array[1, 0, 1, 4] = 0;
			array[1, 1, 0, 0] = 0;
			array[1, 1, 1, 0] = 0;
			array[1, 1, 0, 1] = 0;
			array[1, 1, 1, 1] = 0;
			array[1, 1, 0, 2] = 0;
			array[1, 1, 1, 2] = 0;
			array[1, 1, 0, 3] = 0;
			array[1, 1, 1, 3] = 0;
			array[1, 1, 0, 4] = 0;
			array[1, 1, 1, 4] = 0;
			array[1, 2, 0, 0] = 0;
			array[1, 2, 1, 0] = 0;
			array[1, 2, 0, 1] = 0;
			array[1, 2, 1, 1] = 0;
			array[1, 2, 0, 2] = 0;
			array[1, 2, 1, 2] = 0;
			array[1, 2, 0, 3] = 0;
			array[1, 2, 1, 3] = 0;
			array[1, 2, 0, 4] = 0;
			array[1, 2, 1, 4] = 0;
			array[2, 0, 0, 0] = 0;
			array[2, 0, 1, 0] = 0;
			array[2, 0, 0, 1] = 0;
			array[2, 0, 1, 1] = 0;
			array[2, 0, 0, 2] = 0;
			array[2, 0, 1, 2] = 0;
			array[2, 0, 0, 3] = 0;
			array[2, 0, 1, 3] = 0;
			array[2, 0, 0, 4] = 0;
			array[2, 0, 1, 4] = 0;
			array[2, 1, 0, 0] = 0;
			array[2, 1, 1, 0] = 0;
			array[2, 1, 0, 1] = 0;
			array[2, 1, 1, 1] = 0;
			array[2, 1, 0, 2] = 0;
			array[2, 1, 1, 2] = 0;
			array[2, 1, 0, 3] = 0;
			array[2, 1, 1, 3] = 0;
			array[2, 1, 0, 4] = 0;
			array[2, 1, 1, 4] = 0;
			array[2, 2, 0, 0] = 0;
			array[2, 2, 1, 0] = 0;
			array[2, 2, 0, 1] = 0;
			array[2, 2, 1, 1] = 0;
			array[2, 2, 0, 2] = 0;
			array[2, 2, 1, 2] = 0;
			array[2, 2, 0, 3] = 0;
			array[2, 2, 1, 3] = 0;
			array[2, 2, 0, 4] = 0;
			array[2, 2, 1, 4] = 0;
			InitializeMoonLordAttacks2();
			return array;
		}

		public static int[,] InitializeMoonLordAttacks2()
		{
			int[,] array = null;
			if (MoonLordAttacksArray2 != null)
			{
				array = MoonLordAttacksArray2;
				for (int i = 0; i < array.GetLength(0); i++)
				{
					for (int j = 0; j < array.GetLength(1); j++)
					{
						array[i, j] = 0;
					}
				}
			}
			else
			{
				array = new int[2, 10];
			}
			array[0, 0] = 0;
			array[1, 0] = 90;
			array[0, 1] = 1;
			array[1, 1] = 90;
			array[0, 2] = 0;
			array[1, 2] = 90;
			array[0, 3] = 2;
			array[1, 3] = 135;
			array[0, 4] = 0;
			array[1, 4] = 90;
			array[0, 5] = 3;
			array[1, 5] = 200;
			array[0, 6] = 0;
			array[1, 6] = 90;
			array[0, 7] = 4;
			array[1, 7] = 375;
			array[0, 8] = 0;
			array[1, 8] = 90;
			array[0, 9] = 2;
			array[1, 9] = 135;
			return array;
		}

		public static string GetFullnameByID(int npcID)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == npcID)
				{
					return Main.npc[i].FullName;
				}
			}
			return Lang.GetNPCNameValue(npcID);
		}

		public static bool BusyWithAnyInvasionOfSorts()
		{
			if (Main.slimeRainTime == 0.0 && !Main.bloodMoon && !Main.eclipse && !Main.snowMoon && !Main.pumpkinMoon && Main.invasionType == 0)
			{
				return DD2Event.Ongoing;
			}
			return true;
		}

		public int GetAttackDamage_ScaledByStrength(float normalDamage)
		{
			return (int)(normalDamage * Main.GameModeInfo.EnemyDamageMultiplier * strengthMultiplier);
		}

		public float GetAttackDamage_LerpBetweenFinalValuesFloat(float normalDamage, float expertDamage)
		{
			float amount = (Main.expertMode ? 1 : 0);
			if (Main.GameModeInfo.IsJourneyMode)
			{
				amount = MathHelper.Clamp(strengthMultiplier - 1f, 0f, 1f);
			}
			return MathHelper.Lerp(normalDamage, expertDamage, amount);
		}

		public int GetAttackDamage_LerpBetweenFinalValues(float normalDamage, float expertDamage)
		{
			float amount = (Main.expertMode ? 1 : 0);
			if (Main.GameModeInfo.IsJourneyMode)
			{
				amount = MathHelper.Clamp(strengthMultiplier - 1f, 0f, 1f);
			}
			return (int)MathHelper.Lerp(normalDamage, expertDamage, amount);
		}

		public int GetAttackDamage_ForProjectiles(float normalDamage, float expertDamage)
		{
			float amount = (Main.expertMode ? 1 : 0);
			if (Main.GameModeInfo.IsJourneyMode)
			{
				amount = MathHelper.Clamp(strengthMultiplier - 1f, 0f, 1f);
			}
			return (int)MathHelper.Lerp(normalDamage, expertDamage, amount);
		}

		public int GetAttackDamage_ForProjectiles_MultiLerp(float normalDamage, float expertDamage, float masterDamage)
		{
			float percent = (Main.masterMode ? 1f : (Main.expertMode ? 0.5f : 0f));
			if (Main.GameModeInfo.IsJourneyMode)
			{
				percent = MathHelper.Clamp(strengthMultiplier - 1f, 0f, 2f);
				percent /= 2f;
			}
			return (int)Utils.MultiLerp(percent, normalDamage, expertDamage, masterDamage);
		}

		public static bool SpawnAllowed_Demolitionist()
		{
			if (unlockedDemolitionistSpawn)
			{
				return true;
			}
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (!player.active)
				{
					continue;
				}
				for (int j = 0; j < 58; j++)
				{
					Item item = player.inventory[j];
					if (item != null && item.stack > 0 && ItemID.Sets.ItemsThatCountAsBombsForDemolitionistToSpawn[item.type])
					{
						return true;
					}
				}
			}
			return false;
		}

		public static bool SpawnAllowed_ArmsDealer()
		{
			if (unlockedArmsDealerSpawn)
			{
				return true;
			}
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (!player.active)
				{
					continue;
				}
				for (int j = 0; j < 58; j++)
				{
					Item item = player.inventory[j];
					if (item != null && item.stack > 0 && (item.ammo == AmmoID.Bullet || item.useAmmo == AmmoID.Bullet))
					{
						return true;
					}
				}
			}
			return false;
		}

		public static bool SpawnAllowed_DyeTrader()
		{
			if (unlockedDyeTraderSpawn)
			{
				return true;
			}
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (!player.active)
				{
					continue;
				}
				for (int j = 0; j < 58; j++)
				{
					Item item = player.inventory[j];
					if (item != null && item.stack > 0 && (item.dye > 0 || (item.type >= 1107 && item.type <= 1120) || (item.type >= 3385 && item.type <= 3388)))
					{
						return true;
					}
				}
				for (int k = 0; k < 10; k++)
				{
					Item item2 = player.dye[k];
					if (item2 != null && item2.stack > 0 && item2.dye > 0)
					{
						return true;
					}
				}
				for (int l = 0; l < 5; l++)
				{
					Item item3 = player.miscDyes[l];
					if (item3 != null && item3.stack > 0 && item3.dye > 0)
					{
						return true;
					}
				}
			}
			return false;
		}

		public static bool SpawnAllowed_Nurse()
		{
			if (unlockedNurseSpawn)
			{
				return true;
			}
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (player.active && player.statLifeMax / 20 > 5)
				{
					return true;
				}
			}
			return false;
		}

		public static bool SpawnAllowed_Merchant()
		{
			if (unlockedMerchantSpawn)
			{
				return true;
			}
			double num = 5000.0;
			int num2 = 0;
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (!player.active)
				{
					continue;
				}
				for (int j = 0; j < 58; j++)
				{
					Item item = player.inventory[j];
					if (item != null && item.stack > 0)
					{
						if (item.type == 71)
						{
							num2 += item.stack;
						}
						if (item.type == 72)
						{
							num2 += item.stack * 100;
						}
						if (item.type == 73)
						{
							num2 += item.stack * 10000;
						}
						if (item.type == 74)
						{
							num2 += item.stack * 1000000;
						}
						if ((double)num2 >= num)
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		public static void ClearFoundActiveNPCs()
		{
			for (int i = 0; i < npcsFoundForCheckActive.Length; i++)
			{
				npcsFoundForCheckActive[i] = false;
			}
		}

		public static void UpdateFoundActiveNPCs()
		{
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.active && nPC.type >= 0 && nPC.type < 688)
				{
					npcsFoundForCheckActive[nPC.type] = true;
				}
			}
			UpdateRGBPeriheralProbe();
		}

		public static void ClearFoundNPCTypesForBestiary()
		{
			for (int i = 0; i < npcsFoundForCheckActive.Length; i++)
			{
				npcsFoundForCheckActive[i] = false;
			}
		}

		public static void UpdateRGBPeriheralProbe()
		{
			int highestTierBossOrEvent = 0;
			bool zoneOverworldHeight = Main.LocalPlayer.ZoneOverworldHeight;
			if (npcsFoundForCheckActive[4])
			{
				highestTierBossOrEvent = 4;
			}
			if (npcsFoundForCheckActive[50])
			{
				highestTierBossOrEvent = 50;
			}
			if (zoneOverworldHeight && Main.invasionType == 1)
			{
				highestTierBossOrEvent = -1;
			}
			if (npcsFoundForCheckActive[13])
			{
				highestTierBossOrEvent = 13;
			}
			if (npcsFoundForCheckActive[266])
			{
				highestTierBossOrEvent = 266;
			}
			if (npcsFoundForCheckActive[222])
			{
				highestTierBossOrEvent = 222;
			}
			if (npcsFoundForCheckActive[35])
			{
				highestTierBossOrEvent = 35;
			}
			if (npcsFoundForCheckActive[113])
			{
				highestTierBossOrEvent = 113;
			}
			if (zoneOverworldHeight && Main.invasionType == 2)
			{
				highestTierBossOrEvent = -2;
			}
			if (npcsFoundForCheckActive[657])
			{
				highestTierBossOrEvent = 657;
			}
			if (npcsFoundForCheckActive[126] || npcsFoundForCheckActive[125])
			{
				highestTierBossOrEvent = 126;
			}
			if (npcsFoundForCheckActive[134])
			{
				highestTierBossOrEvent = 134;
			}
			if (npcsFoundForCheckActive[127])
			{
				highestTierBossOrEvent = 127;
			}
			if (zoneOverworldHeight && Main.invasionType == 3)
			{
				highestTierBossOrEvent = -3;
			}
			if (npcsFoundForCheckActive[262])
			{
				highestTierBossOrEvent = 262;
			}
			if (npcsFoundForCheckActive[245])
			{
				highestTierBossOrEvent = 245;
			}
			if (npcsFoundForCheckActive[636])
			{
				highestTierBossOrEvent = 636;
			}
			if (npcsFoundForCheckActive[668] && IsDeerclopsHostile())
			{
				highestTierBossOrEvent = 668;
			}
			if (DD2Event.Ongoing)
			{
				highestTierBossOrEvent = -6;
			}
			if (zoneOverworldHeight && Main.invasionType == 4)
			{
				highestTierBossOrEvent = -4;
			}
			if (npcsFoundForCheckActive[439])
			{
				highestTierBossOrEvent = 439;
			}
			if (npcsFoundForCheckActive[370])
			{
				highestTierBossOrEvent = 370;
			}
			if (npcsFoundForCheckActive[398])
			{
				highestTierBossOrEvent = 398;
			}
			CommonConditions.Boss.HighestTierBossOrEvent = highestTierBossOrEvent;
		}

		public void SpawnWithHigherTime(int timeMult)
		{
			timeLeft = activeTime * timeMult;
		}

		public void EncourageDespawn(int despawnTime)
		{
			if (timeLeft > despawnTime)
			{
				timeLeft = despawnTime;
			}
			despawnEncouraged = true;
		}

		public void DiscourageDespawn(int despawnTime)
		{
			if (timeLeft < despawnTime)
			{
				timeLeft = despawnTime;
			}
			despawnEncouraged = false;
		}

		public static bool WouldBeEncouragedToDespawn(int aistyle, int type)
		{
			if (aistyle == 4)
			{
				return Main.dayTime;
			}
			return false;
		}

		public static string getNewNPCName(int npcType)
		{
			return getNewNPCNameInner(npcType);
		}

		private static string getNewNPCNameInner(int npcType)
		{
			return npcType switch
			{
				17 => Language.RandomFromCategory("MerchantNames", WorldGen.genRand).Value, 
				18 => Language.RandomFromCategory("NurseNames", WorldGen.genRand).Value, 
				19 => Language.RandomFromCategory("ArmsDealerNames", WorldGen.genRand).Value, 
				20 => Language.RandomFromCategory("DryadNames", WorldGen.genRand).Value, 
				22 => Language.RandomFromCategory("GuideNames", WorldGen.genRand).Value, 
				38 => Language.RandomFromCategory("DemolitionistNames", WorldGen.genRand).Value, 
				54 => Language.RandomFromCategory("ClothierNames", WorldGen.genRand).Value, 
				107 => Language.RandomFromCategory("GoblinTinkererNames", WorldGen.genRand).Value, 
				108 => Language.RandomFromCategory("WizardNames", WorldGen.genRand).Value, 
				124 => Language.RandomFromCategory("MechanicNames", WorldGen.genRand).Value, 
				160 => Language.RandomFromCategory("TruffleNames", WorldGen.genRand).Value, 
				178 => Language.RandomFromCategory("SteampunkerNames", WorldGen.genRand).Value, 
				207 => Language.RandomFromCategory("DyeTraderNames", WorldGen.genRand).Value, 
				208 => Language.RandomFromCategory("PartyGirlNames", WorldGen.genRand).Value, 
				209 => Language.RandomFromCategory("CyborgNames", WorldGen.genRand).Value, 
				227 => Language.RandomFromCategory("PainterNames", WorldGen.genRand).Value, 
				228 => Language.RandomFromCategory("WitchDoctorNames", WorldGen.genRand).Value, 
				229 => Language.RandomFromCategory("PirateNames", WorldGen.genRand).Value, 
				353 => Language.RandomFromCategory("StylistNames", WorldGen.genRand).Value, 
				368 => Language.RandomFromCategory("TravelingMerchantNames", WorldGen.genRand).Value, 
				369 => Language.RandomFromCategory("AnglerNames", WorldGen.genRand).Value, 
				453 => Language.RandomFromCategory("SkeletonMerchantNames", WorldGen.genRand).Value, 
				441 => Language.RandomFromCategory("TaxCollectorNames", WorldGen.genRand).Value, 
				550 => Language.RandomFromCategory("BartenderNames", WorldGen.genRand).Value, 
				588 => Language.RandomFromCategory("GolferNames", WorldGen.genRand).Value, 
				633 => Language.RandomFromCategory("BestiaryGirlNames", WorldGen.genRand).Value, 
				663 => Language.RandomFromCategory("PrincessNames", WorldGen.genRand).Value, 
				637 => Language.RandomFromCategory("CatNames_Siamese", WorldGen.genRand).Value, 
				638 => Language.RandomFromCategory("DogNames_Labrador", WorldGen.genRand).Value, 
				656 => Language.RandomFromCategory("BunnyNames_White", WorldGen.genRand).Value, 
				670 => Language.RandomFromCategory("SlimeNames_Blue", WorldGen.genRand).Value, 
				678 => Language.RandomFromCategory("SlimeNames_Green", WorldGen.genRand).Value, 
				679 => Language.RandomFromCategory("SlimeNames_Old", WorldGen.genRand).Value, 
				680 => Language.RandomFromCategory("SlimeNames_Purple", WorldGen.genRand).Value, 
				681 => Language.RandomFromCategory("SlimeNames_Rainbow", WorldGen.genRand).Value, 
				682 => Language.RandomFromCategory("SlimeNames_Red", WorldGen.genRand).Value, 
				683 => Language.RandomFromCategory("SlimeNames_Yellow", WorldGen.genRand).Value, 
				684 => Language.RandomFromCategory("SlimeNames_Copper", WorldGen.genRand).Value, 
				_ => "", 
			};
		}

		public NetworkText GetTypeNetName()
		{
			return NetworkText.FromKey(Lang.GetNPCName(netID).Key);
		}

		public void GetLifeStats(out int statLife, out int statLifeMax)
		{
			statLife = life;
			statLifeMax = lifeMax;
			if (realLife != -1)
			{
				statLife = Main.npc[realLife].life;
				statLifeMax = Main.npc[realLife].lifeMax;
			}
		}

		public float GetLifePercent()
		{
			GetLifeStats(out var statLife, out var statLifeMax);
			return (float)statLife / (float)statLifeMax;
		}

		public NetworkText GetFullNetName()
		{
			if (!HasGivenName)
			{
				return GetTypeNetName();
			}
			return NetworkText.FromKey("Game.NPCTitle", GetGivenNetName(), GetTypeNetName());
		}

		public NetworkText GetGivenOrTypeNetName()
		{
			if (!HasGivenName)
			{
				return GetTypeNetName();
			}
			return GetGivenNetName();
		}

		public NetworkText GetGivenNetName()
		{
			return NetworkText.FromLiteral(_givenName);
		}

		public static void setNPCName(string newName, int npcType, bool resetExtras = false)
		{
			bool flag = false;
			for (int i = 0; i < 200; i++)
			{
				if (!Main.npc[i].active || Main.npc[i].type != npcType)
				{
					continue;
				}
				if (flag)
				{
					Main.npc[i].GivenName = getNewNPCName(npcType);
					Main.npc[i].needsUniqueInfoUpdate = true;
					continue;
				}
				Main.npc[i].GivenName = newName;
				if (!resetExtras)
				{
					break;
				}
				flag = true;
			}
		}

		public static string firstNPCName(int npcType)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == npcType)
				{
					return Main.npc[i].GivenOrTypeName;
				}
			}
			return getNewNPCName(npcType);
		}

		public static string GetFirstNPCNameOrNull(int npcType)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == npcType)
				{
					return Main.npc[i].GivenOrTypeName;
				}
			}
			return null;
		}

		public static bool MechSpawn(float x, float y, int type)
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (!Main.npc[i].active)
				{
					continue;
				}
				bool flag = false;
				if (Main.npc[i].type == type)
				{
					flag = true;
				}
				else if (type == 74 || type == 297 || type == 298)
				{
					if (Main.npc[i].type == 74 || Main.npc[i].type == 297 || Main.npc[i].type == 298)
					{
						flag = true;
					}
				}
				else if (type == 46 || type == 540 || type == 303 || type == 337)
				{
					if (Main.npc[i].type == 46 || Main.npc[i].type == 540 || Main.npc[i].type == 303 || Main.npc[i].type == 337)
					{
						flag = true;
					}
				}
				else if (type == 362 || type == 364)
				{
					if (Main.npc[i].type == 362 || Main.npc[i].type == 363 || Main.npc[i].type == 364 || Main.npc[i].type == 365)
					{
						flag = true;
					}
				}
				else if (type == 602)
				{
					if (Main.npc[i].type == 602 || Main.npc[i].type == 603)
					{
						flag = true;
					}
				}
				else if (type == 608)
				{
					if (Main.npc[i].type == 608 || Main.npc[i].type == 609)
					{
						flag = true;
					}
				}
				else if (type == 616 || type == 617)
				{
					if (Main.npc[i].type == 616 || Main.npc[i].type == 617)
					{
						flag = true;
					}
				}
				else if (type == 55 && Main.npc[i].type == 230)
				{
					flag = true;
				}
				else if (NPCID.Sets.IsDragonfly[type] && NPCID.Sets.IsDragonfly[Main.npc[i].type])
				{
					flag = true;
				}
				if (flag)
				{
					num++;
					Vector2 vector = new Vector2(x, y);
					float num4 = Main.npc[i].position.X - vector.X;
					float num5 = Main.npc[i].position.Y - vector.Y;
					float num6 = (float)Math.Sqrt(num4 * num4 + num5 * num5);
					if (num6 < 200f)
					{
						num2++;
					}
					if (num6 < 600f)
					{
						num3++;
					}
				}
			}
			if (num2 >= 3 || num3 >= 6 || num >= 10)
			{
				return false;
			}
			return true;
		}

		public static int TypeToDefaultHeadIndex(int type)
		{
			return type switch
			{
				0 => 0, 
				17 => 2, 
				18 => 3, 
				19 => 6, 
				20 => 5, 
				22 => 1, 
				38 => 4, 
				54 => 7, 
				107 => 9, 
				108 => 10, 
				124 => 8, 
				142 => 11, 
				160 => 12, 
				178 => 13, 
				207 => 14, 
				208 => 15, 
				209 => 16, 
				227 => 17, 
				228 => 18, 
				229 => 19, 
				353 => 20, 
				368 => 21, 
				369 => 22, 
				441 => 23, 
				550 => 24, 
				588 => 25, 
				633 => 26, 
				663 => 45, 
				637 => 27, 
				638 => 33, 
				656 => 39, 
				670 => 46, 
				678 => 47, 
				679 => 48, 
				680 => 49, 
				681 => 50, 
				682 => 51, 
				683 => 52, 
				684 => 53, 
				_ => -1, 
			};
		}

		public int GetBossHeadTextureIndex()
		{
			int result = NPCID.Sets.BossHeadTextures[type];
			switch (type)
			{
			case 4:
				if (ai[0] >= 2f)
				{
					result = 1;
				}
				break;
			case 266:
				if (ai[0] < 0f)
				{
					result = -1;
				}
				break;
			case 262:
				if (life <= lifeMax / 2)
				{
					result = 12;
				}
				break;
			case 125:
				if (ai[0] >= 3f)
				{
					result = 16;
				}
				break;
			case 126:
				if (ai[0] >= 3f)
				{
					result = 21;
				}
				break;
			case 439:
				if (ai[0] == 5f && alpha == 255)
				{
					result = -1;
				}
				break;
			case 440:
				if (ai[0] != 5f || alpha == 255)
				{
					result = -1;
				}
				break;
			}
			return result;
		}

		public float GetBossHeadRotation()
		{
			float result = 0f;
			switch (type)
			{
			case 68:
			case 262:
				result = rotation;
				break;
			case 35:
			case 127:
				if (ai[1] == 1f || ai[1] == 2f)
				{
					result = rotation;
				}
				break;
			case 345:
				if (ai[0] == 2f)
				{
					result = rotation;
				}
				break;
			}
			return result;
		}

		public SpriteEffects GetBossHeadSpriteEffects()
		{
			SpriteEffects result = SpriteEffects.None;
			int num = type;
			if (num == 491 && spriteDirection == 1)
			{
				result = SpriteEffects.FlipHorizontally;
			}
			return result;
		}

		public int BannerID()
		{
			if (netID >= -10)
			{
				return netID;
			}
			return type;
		}

		private void SetDefaultsFromNetId(int id, NPCSpawnParams spawnparams = default(NPCSpawnParams))
		{
			bool flag = false;
			int num = NPCID.FromNetId(id);
			SetDefaults(0);
			switch (id)
			{
			case -1:
				SetDefaults_ForNetId(num, 0.6f);
				flag = true;
				damage = 45;
				defense = 10;
				life = 90;
				knockBackResist *= 1.2f;
				value = 100f;
				break;
			case -2:
				SetDefaults_ForNetId(num, 0.9f);
				flag = true;
				damage = 45;
				defense = 20;
				life = 90;
				knockBackResist *= 1.2f;
				value = 100f;
				break;
			case -3:
				SetDefaults_ForNetId(num, 0.9f);
				flag = true;
				damage = 6;
				defense = 0;
				life = 14;
				knockBackResist *= 1.2f;
				color = new Color(0, 220, 40, 100);
				value = 3f;
				break;
			case -4:
				SetDefaults_ForNetId(num, 0.6f);
				flag = true;
				damage = 5;
				defense = 5;
				life = 150;
				knockBackResist *= 1.4f;
				color = new Color(250, 30, 90, 90);
				value = 10000f;
				rarity = 2;
				break;
			case -5:
				SetDefaults_ForNetId(num, 0.9f);
				flag = true;
				damage = 13;
				defense = 4;
				life = 30;
				knockBackResist *= 0.95f;
				alpha = 120;
				color = new Color(0, 0, 0, 50);
				value = 10f;
				break;
			case -6:
				SetDefaults_ForNetId(num, 1.05f);
				flag = true;
				damage = 15;
				defense = 4;
				life = 45;
				color = new Color(0, 0, 0, 50);
				value = 20f;
				break;
			case -7:
				SetDefaults_ForNetId(num, 1.2f);
				flag = true;
				damage = 12;
				defense = 6;
				life = 40;
				knockBackResist *= 0.9f;
				color = new Color(200, 0, 255, 150);
				value = 10f;
				break;
			case -8:
				SetDefaults_ForNetId(num, 1.025f);
				flag = true;
				damage = 12;
				defense = 4;
				life = 35;
				color = new Color(255, 30, 0, 100);
				value = 8f;
				break;
			case -9:
				SetDefaults_ForNetId(num, 1.2f);
				flag = true;
				damage = 15;
				defense = 7;
				life = 45;
				color = new Color(255, 255, 0, 100);
				value = 10f;
				break;
			case -10:
				SetDefaults_ForNetId(num, 1.1f);
				flag = true;
				damage = 18;
				defense = 6;
				life = 60;
				color = new Color(143, 215, 93, 100);
				value = 500f;
				break;
			case -11:
			{
				float num5 = 0.85f;
				if (Main.remixWorld)
				{
					num5 *= 1.3f;
				}
				SetDefaults_ForNetId(num, spawnparams, num5);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			}
			case -12:
			{
				float num4 = 1.15f;
				if (Main.remixWorld || Main.getGoodWorld)
				{
					num4 *= 1.3f;
				}
				SetDefaults_ForNetId(num, spawnparams, num4);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			}
			case -13:
				SetDefaults_ForNetId(num, spawnparams, 0.9f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				break;
			case -14:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((double)((float)damage * scale) * 1.1);
				life = (int)((double)((float)life * scale) * 1.1);
				value = (int)(value * scale);
				npcSlots = 2f;
				knockBackResist *= 2f - scale;
				break;
			case -15:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((double)((float)damage * scale) * 1.1);
				life = 400;
				value = (int)(value * scale);
				npcSlots = 2f;
				knockBackResist *= 2f - scale;
				height = 44;
				break;
			case -16:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -17:
				SetDefaults_ForNetId(num, spawnparams, 1.2f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -18:
				SetDefaults_ForNetId(num, spawnparams, 0.8f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -19:
				SetDefaults_ForNetId(num, spawnparams, 0.9f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -20:
				SetDefaults_ForNetId(num, 1.1f);
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -21:
				SetDefaults_ForNetId(num, spawnparams, 1.2f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -22:
			{
				float num3 = 0.85f;
				if (Main.remixWorld)
				{
					num3 *= 1.3f;
				}
				SetDefaults_ForNetId(num, spawnparams, num3);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			}
			case -23:
			{
				float num2 = 1.15f;
				if (Main.remixWorld)
				{
					num2 *= 1.3f;
				}
				SetDefaults_ForNetId(num, spawnparams, num2);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			}
			case -24:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -25:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -26:
				SetDefaults_ForNetId(num, spawnparams, 0.9f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -27:
				SetDefaults_ForNetId(num, spawnparams, 1.1f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -28:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -29:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -30:
				SetDefaults_ForNetId(num, spawnparams, 0.93f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -31:
				SetDefaults_ForNetId(num, spawnparams, 1.13f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -32:
				SetDefaults_ForNetId(num, spawnparams, 0.89f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -33:
				SetDefaults_ForNetId(num, spawnparams, 1.11f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -34:
				SetDefaults_ForNetId(num, spawnparams, 0.87f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -35:
				SetDefaults_ForNetId(num, spawnparams, 1.13f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -36:
				SetDefaults_ForNetId(num, spawnparams, 0.92f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -37:
				SetDefaults_ForNetId(num, spawnparams, 1.08f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -38:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -39:
				SetDefaults_ForNetId(num, spawnparams, 1.1f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -40:
				SetDefaults_ForNetId(num, spawnparams, 0.9f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -41:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -42:
				SetDefaults_ForNetId(num, spawnparams, 1.1f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -43:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -44:
				SetDefaults_ForNetId(num, spawnparams, 0.87f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -45:
				SetDefaults_ForNetId(num, spawnparams, 1.05f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -46:
				SetDefaults_ForNetId(num, spawnparams, 0.9f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -47:
				SetDefaults_ForNetId(num, spawnparams, 1.1f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -48:
				SetDefaults_ForNetId(num, spawnparams, 0.93f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -49:
				SetDefaults_ForNetId(num, spawnparams, 1.07f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -50:
				SetDefaults_ForNetId(num, spawnparams, 0.87f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -51:
				SetDefaults_ForNetId(num, spawnparams, 1.13f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -52:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -53:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -54:
				SetDefaults_ForNetId(num, spawnparams, 0.9f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -55:
				SetDefaults_ForNetId(num, spawnparams, 1.1f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -56:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -57:
				SetDefaults_ForNetId(num, spawnparams, 1.25f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -58:
				SetDefaults_ForNetId(num, spawnparams, 0.8f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -59:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -60:
				SetDefaults_ForNetId(num, spawnparams, 0.92f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -61:
				SetDefaults_ForNetId(num, spawnparams, 1.1f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -62:
				SetDefaults_ForNetId(num, spawnparams, 0.78f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -63:
				SetDefaults_ForNetId(num, spawnparams, 1.16f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -64:
				SetDefaults_ForNetId(num, spawnparams, 0.87f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -65:
				SetDefaults_ForNetId(num, spawnparams, 1.21f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			default:
				return;
			}
			netID = id;
			lifeMax = life;
			defDamage = damage;
			defDefense = defense;
			if (flag)
			{
				ScaleStats(spawnparams.playerCountForMultiplayerDifficultyOverride, spawnparams.gameModeData, spawnparams.strengthMultiplierOverride);
				life = lifeMax;
			}
		}

		public void SetDefaultsKeepPlayerInteraction(int Type)
		{
			bool[] array = new bool[playerInteraction.Length];
			for (int i = 0; i < playerInteraction.Length; i++)
			{
				array[i] = playerInteraction[i];
			}
			SetDefaults(Type);
			for (int j = 0; j < playerInteraction.Length; j++)
			{
				playerInteraction[j] = array[j];
			}
		}

		public void SetDefaults_ForNetId(int Type, float scaleOverride)
		{
			SetDefaults(Type, new NPCSpawnParams
			{
				playerCountForMultiplayerDifficultyOverride = 1,
				sizeScaleOverride = scaleOverride,
				strengthMultiplierOverride = 1f
			});
		}

		public void SetDefaults_ForNetId(int Type, NPCSpawnParams spawnparams, float scaleOverride)
		{
			SetDefaults(Type, spawnparams.WithScale(scaleOverride));
		}

		public void SetNetShimmerEffect()
		{
			netShimmer = true;
			shimmerTransparency = 1f;
		}

		public void SetDefaults(int Type, NPCSpawnParams spawnparams = default(NPCSpawnParams))
		{
			if (spawnparams.gameModeData == null)
			{
				spawnparams.gameModeData = Main.GameModeInfo;
			}
			if (Main.getGoodWorld && spawnparams.sizeScaleOverride.HasValue)
			{
				spawnparams.sizeScaleOverride = (spawnparams.sizeScaleOverride + spawnparams.sizeScaleOverride * spawnparams.sizeScaleOverride) / 2f;
			}
			if (Type < 0)
			{
				SetDefaultsFromNetId(Type, spawnparams);
				return;
			}
			waterMovementSpeed = (lavaMovementSpeed = 0.5f);
			honeyMovementSpeed = 0.25f;
			netOffset *= 0f;
			altTexture = 0;
			townNpcVariationIndex = 0;
			nameOver = 0f;
			takenDamageMultiplier = 1f;
			extraValue = 0;
			for (int i = 0; i < playerInteraction.Length; i++)
			{
				playerInteraction[i] = false;
			}
			rarity = 0;
			dontCountMe = false;
			releaseOwner = 255;
			catchItem = 0;
			needsUniqueInfoUpdate = true;
			netStream = 32;
			netID = 0;
			netAlways = false;
			netSpam = 0;
			SpawnedFromStatue = false;
			shimmerTransparency = 0f;
			if (netShimmer)
			{
				shimmerTransparency = 1f;
				netShimmer = false;
			}
			statsAreScaledForThisManyPlayers = 0;
			strengthMultiplier = 1f;
			int num = 10;
			if (Type >= 0)
			{
				num = NPCID.Sets.TrailCacheLength[Type];
			}
			if (num != oldPos.Length)
			{
				Array.Resize(ref oldPos, num);
				Array.Resize(ref oldRot, num);
			}
			for (int j = 0; j < oldPos.Length; j++)
			{
				oldRot[j] = 0f;
				oldPos[j].X = 0f;
				oldPos[j].Y = 0f;
			}
			for (int k = 0; k < 20; k++)
			{
				buffTime[k] = 0;
				buffType[k] = 0;
			}
			for (int l = 0; l < 355; l++)
			{
				buffImmune[l] = false;
			}
			setFrameSize = false;
			netSkip = -2;
			realLife = -1;
			lifeRegen = 0;
			lifeRegenExpectedLossPerSecond = -1;
			lifeRegenCount = 0;
			markedByScytheWhip = false;
			poisoned = false;
			soulDrain = false;
			venom = false;
			shadowFlame = false;
			onFire = false;
			midas = false;
			ichor = false;
			onFrostBurn = false;
			onFrostBurn2 = false;
			shimmering = false;
			confused = false;
			loveStruck = false;
			dontTakeDamageFromHostiles = false;
			stinky = false;
			dryadWard = false;
			onFire2 = false;
			onFire3 = false;
			justHit = false;
			dontTakeDamage = false;
			catchableNPCTempImmunityCounter = 0;
			npcSlots = 1f;
			lavaImmune = false;
			lavaWet = false;
			wetCount = 0;
			wet = false;
			townNPC = false;
			homeless = false;
			homeTileX = -1;
			homeTileY = -1;
			housingCategory = 0;
			friendly = false;
			behindTiles = false;
			boss = false;
			noTileCollide = false;
			rotation = 0f;
			active = true;
			alpha = 0;
			color = default(Color);
			collideX = false;
			collideY = false;
			direction = 0;
			oldDirection = direction;
			frameCounter = 0.0;
			netUpdate = true;
			netUpdate2 = false;
			knockBackResist = 1f;
			GivenName = "";
			noGravity = false;
			scale = 1f;
			HitSound = null;
			DeathSound = null;
			spriteDirection = -1;
			target = 255;
			oldTarget = target;
			targetRect = default(Rectangle);
			timeLeft = activeTime;
			type = Type;
			value = 0f;
			coldDamage = false;
			trapImmune = false;
			hide = false;
			immortal = false;
			chaseable = true;
			breath = 200;
			breathCounter = 0;
			reflectsProjectiles = false;
			canGhostHeal = true;
			javelined = false;
			tentacleSpiked = false;
			bloodButchered = false;
			daybreak = false;
			celled = false;
			dryadBane = false;
			betsysCurse = false;
			oiled = false;
			despawnEncouraged = false;
			for (int m = 0; m < maxAI; m++)
			{
				ai[m] = 0f;
			}
			for (int n = 0; n < maxAI; n++)
			{
				localAI[n] = 0f;
			}
			if (type == 1)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 7;
				defense = 2;
				lifeMax = 25;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 175;
				color = new Color(0, 80, 255, 100);
				value = 25f;
			}
			else if (type == 2)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 18;
				defense = 2;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 75f;
			}
			else if (type == 3)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 60f;
			}
			else if (type == 430)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 60f;
			}
			else if (type == 431)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 80f;
			}
			else if (type == 432)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 65f;
			}
			else if (type == 433)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 13;
				defense = 6;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.55f;
				value = 55f;
			}
			else if (type == 434)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 13;
				defense = 8;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 80f;
			}
			else if (type == 435)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 4;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.55f;
				value = 70f;
			}
			else if (type == 436)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 12;
				defense = 4;
				lifeMax = 38;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 65f;
			}
			else if (type == 4)
			{
				width = 100;
				height = 110;
				aiStyle = 4;
				damage = 15;
				defense = 12;
				lifeMax = 2800;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				SpawnWithHigherTime(30);
				boss = true;
				value = 30000f;
				npcSlots = 5f;
			}
			else if (type == 5)
			{
				width = 20;
				height = 20;
				aiStyle = 5;
				damage = 12;
				defense = 0;
				lifeMax = 8;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
			}
			else if (type == 6)
			{
				npcSlots = 1f;
				width = 30;
				height = 30;
				aiStyle = 5;
				damage = 22;
				defense = 8;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				knockBackResist = 0.5f;
				value = 90f;
				if (Main.remixWorld)
				{
					scale *= 1.3f;
					damage = (int)((float)damage * scale);
					defense = (int)((float)defense * scale);
					lifeMax = (int)((float)lifeMax * scale);
					value = (int)(value * scale);
				}
				else if (Main.getGoodWorld)
				{
					scale *= 1.3f;
				}
			}
			else if (type == 7)
			{
				npcSlots = 3.5f;
				width = 22;
				height = 22;
				aiStyle = 6;
				damage = 31;
				defense = 2;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 140f;
				netAlways = true;
				if (Main.remixWorld)
				{
					scale *= 1.3f;
					damage = (int)((float)damage * scale);
					defense = (int)((float)defense * scale);
					lifeMax = (int)((float)lifeMax * scale);
					value = (int)(value * scale);
				}
			}
			else if (type == 8)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 16;
				defense = 6;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 140f;
				dontCountMe = true;
				if (Main.remixWorld)
				{
					scale *= 1.3f;
					damage = (int)((float)damage * scale);
					defense = (int)((float)defense * scale);
					lifeMax = (int)((float)lifeMax * scale);
					value = (int)(value * scale);
				}
			}
			else if (type == 9)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 13;
				defense = 10;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 140f;
				dontCountMe = true;
				if (Main.remixWorld)
				{
					scale *= 1.3f;
					damage = (int)((float)damage * scale);
					defense = (int)((float)defense * scale);
					lifeMax = (int)((float)lifeMax * scale);
					value = (int)(value * scale);
				}
			}
			else if (type == 10)
			{
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 8;
				defense = 0;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 40f;
			}
			else if (type == 11)
			{
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 4;
				defense = 4;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 40f;
				dontCountMe = true;
			}
			else if (type == 12)
			{
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 4;
				defense = 6;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 40f;
				dontCountMe = true;
			}
			else if (type == 13)
			{
				npcSlots = 5f;
				width = 38;
				height = 38;
				aiStyle = 6;
				netAlways = true;
				damage = 22;
				defense = 2;
				lifeMax = 150;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 800f;
				scale = 1f;
				alpha = 255;
			}
			else if (type == 14)
			{
				width = 38;
				height = 38;
				aiStyle = 6;
				netAlways = true;
				damage = 13;
				defense = 4;
				lifeMax = 150;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 800f;
				scale = 1f;
				dontCountMe = true;
				alpha = 255;
			}
			else if (type == 15)
			{
				width = 38;
				height = 38;
				aiStyle = 6;
				netAlways = true;
				damage = 11;
				defense = 8;
				lifeMax = 150;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 800f;
				scale = 1f;
				dontCountMe = true;
				alpha = 255;
			}
			else if (type == 16)
			{
				npcSlots = 2f;
				width = 36;
				height = 24;
				aiStyle = 1;
				damage = 20;
				defense = 7;
				lifeMax = 90;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 120;
				color = new Color(0, 0, 0, 50);
				value = 75f;
				scale = 1.25f;
				knockBackResist = 0.6f;
			}
			else if (type == 17)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 18)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 19)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 20)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 21)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 100f;
			}
			else if (type == 22)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 23)
			{
				width = 22;
				height = 22;
				aiStyle = 5;
				damage = 40;
				defense = 6;
				lifeMax = 26;
				HitSound = SoundID.NPCHit3;
				DeathSound = SoundID.NPCDeath3;
				noGravity = true;
				noTileCollide = true;
				value = 80f;
				knockBackResist = 0.4f;
			}
			else if (type == 24)
			{
				npcSlots = 3f;
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 30;
				defense = 16;
				lifeMax = 70;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				lavaImmune = true;
				value = 350f;
			}
			else if (type == 25)
			{
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 30;
				defense = 0;
				lifeMax = 1;
				HitSound = SoundID.NPCHit3;
				DeathSound = SoundID.NPCDeath3;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				alpha = 100;
			}
			else if (type == 31)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 26;
				defense = 8;
				lifeMax = 80;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.8f;
				value = 130f;
			}
			else if (type == 32)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 20;
				defense = 2;
				lifeMax = 50;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 140f;
				npcSlots = 2f;
			}
			else if (type == 33)
			{
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 20;
				defense = 0;
				lifeMax = 1;
				HitSound = SoundID.NPCHit3;
				DeathSound = SoundID.NPCDeath3;
				noGravity = true;
				noTileCollide = true;
				alpha = 255;
				knockBackResist = 0f;
			}
			else if (type == 34)
			{
				width = 26;
				height = 28;
				aiStyle = 10;
				damage = 35;
				defense = 6;
				lifeMax = 40;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				noGravity = true;
				noTileCollide = true;
				value = 150f;
				knockBackResist = 0.2f;
				npcSlots = 0.75f;
			}
			else if (type == 35)
			{
				width = 80;
				height = 102;
				aiStyle = 11;
				damage = 32;
				defense = 10;
				lifeMax = 4400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				noGravity = true;
				noTileCollide = true;
				value = 50000f;
				knockBackResist = 0f;
				boss = true;
				npcSlots = 6f;
			}
			else if (type == 36)
			{
				width = 52;
				height = 52;
				aiStyle = 12;
				damage = 20;
				defense = 14;
				lifeMax = 600;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
			}
			else if (type == 37)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 38)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 39)
			{
				npcSlots = 6f;
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 36;
				defense = 12;
				lifeMax = 300;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath5;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 1200f;
				if (Main.getGoodWorld)
				{
					lifeMax += 100;
					defense += 2;
					damage += 4;
					scale = 1.1f;
					if (Main.remixWorld)
					{
						lifeMax += 50;
						scale *= 1.2f;
						defense += 4;
					}
				}
			}
			else if (type == 40)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 20;
				defense = 18;
				lifeMax = 300;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath5;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 1200f;
				dontCountMe = true;
				if (Main.getGoodWorld)
				{
					lifeMax += 100;
					defense += 2;
					damage += 4;
					scale = 1.1f;
					if (Main.remixWorld)
					{
						lifeMax += 50;
						scale *= 1.2f;
						defense += 4;
					}
				}
			}
			else if (type == 41)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 16;
				defense = 18;
				lifeMax = 300;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath5;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 1200f;
				dontCountMe = true;
				if (Main.getGoodWorld)
				{
					lifeMax += 100;
					defense += 2;
					damage += 4;
					scale = 1.1f;
					if (Main.remixWorld)
					{
						lifeMax += 50;
						scale *= 1.2f;
						defense += 4;
					}
				}
			}
			else if (type == 42)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 26;
				defense = 12;
				lifeMax = 48;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.5f;
				DeathSound = SoundID.NPCDeath1;
				value = 200f;
				noGravity = true;
			}
			else if (type == 43)
			{
				noGravity = true;
				noTileCollide = true;
				width = 30;
				height = 30;
				aiStyle = 13;
				damage = 34;
				defense = 10;
				lifeMax = 110;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath1;
				value = 350f;
			}
			else if (type == 44)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 9;
				lifeMax = 70;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 250f;
				rarity = 1;
			}
			else if (type == 45)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 20;
				defense = 4;
				lifeMax = 200;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 5000f;
				rarity = 4;
			}
			else if (type == 46 || type == 303 || type == 337 || type == 540)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2019;
			}
			else if (type == 47)
			{
				width = 18;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 4;
				lifeMax = 70;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
			}
			else if (type == 48)
			{
				width = 24;
				height = 34;
				aiStyle = 14;
				damage = 25;
				defense = 8;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath1;
				value = 300f;
			}
			else if (type == 49)
			{
				npcSlots = 0.5f;
				width = 22;
				height = 18;
				aiStyle = 14;
				damage = 13;
				defense = 2;
				lifeMax = 16;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath4;
				value = 90f;
			}
			else if (type == 50)
			{
				boss = true;
				width = 98;
				height = 92;
				aiStyle = 15;
				damage = 40;
				defense = 10;
				lifeMax = 2000;
				knockBackResist = 0f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 30;
				value = 10000f;
				scale = 1.25f;
				SpawnWithHigherTime(30);
				npcSlots = 5f;
			}
			else if (type == 51)
			{
				npcSlots = 0.5f;
				width = 22;
				height = 18;
				aiStyle = 14;
				damage = 20;
				defense = 4;
				lifeMax = 34;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath4;
				value = 80f;
			}
			else if (type == 52)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 1000f;
				rarity = 2;
			}
			else if (type == 53)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 8;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 1000f;
				rarity = 2;
			}
			else if (type == 54)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 55)
			{
				noGravity = true;
				width = 20;
				height = 18;
				aiStyle = 16;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				catchItem = 261;
			}
			else if (type == 56)
			{
				noTileCollide = true;
				noGravity = true;
				width = 30;
				height = 30;
				aiStyle = 13;
				damage = 25;
				defense = 10;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath1;
				value = 90f;
			}
			else if (type == 57)
			{
				noGravity = true;
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 30;
				defense = 6;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
			}
			else if (type == 58)
			{
				npcSlots = 0.5f;
				noGravity = true;
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 25;
				defense = 2;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 50f;
			}
			else if (type == 59)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 15;
				defense = 10;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				scale = 1.1f;
				alpha = 50;
				lavaImmune = true;
				value = 120f;
				if (Main.remixWorld)
				{
					damage = 7;
					defense = 2;
					lifeMax = 25;
					value = 25f;
				}
			}
			else if (type == 60)
			{
				npcSlots = 0.5f;
				width = 22;
				height = 18;
				aiStyle = 14;
				damage = 35;
				defense = 8;
				lifeMax = 46;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath4;
				value = 120f;
				scale = 1.1f;
				lavaImmune = true;
			}
			else if (type == 61)
			{
				width = 36;
				height = 36;
				aiStyle = 17;
				damage = 15;
				defense = 4;
				lifeMax = 40;
				knockBackResist = 0.8f;
				HitSound = SoundID.NPCHit28;
				DeathSound = SoundID.NPCDeath31;
				value = 60f;
			}
			else if (type == 62)
			{
				npcSlots = 2f;
				width = 28;
				height = 48;
				aiStyle = 14;
				damage = 32;
				defense = 8;
				lifeMax = 120;
				HitSound = SoundID.NPCHit21;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath24;
				value = 300f;
				lavaImmune = true;
			}
			else if (type == 63)
			{
				noGravity = true;
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 25;
				defense = 4;
				lifeMax = 34;
				HitSound = SoundID.NPCHit25;
				DeathSound = SoundID.NPCDeath28;
				value = 100f;
				alpha = 20;
			}
			else if (type == 64)
			{
				noGravity = true;
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 30;
				defense = 6;
				lifeMax = 70;
				HitSound = SoundID.NPCHit25;
				DeathSound = SoundID.NPCDeath28;
				value = 100f;
				alpha = 20;
			}
			else if (type == 65)
			{
				noGravity = true;
				width = 100;
				height = 24;
				aiStyle = 16;
				damage = 40;
				defense = 2;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 400f;
				knockBackResist = 0.7f;
			}
			else if (type == 66)
			{
				npcSlots = 2f;
				width = 28;
				height = 48;
				aiStyle = 14;
				damage = 32;
				defense = 8;
				lifeMax = 140;
				HitSound = SoundID.NPCHit21;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath24;
				value = 1000f;
				lavaImmune = true;
				rarity = 1;
			}
			else if (type == 67)
			{
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 60f;
			}
			else if (type == 68)
			{
				width = 80;
				height = 102;
				aiStyle = 11;
				damage = 1000;
				defense = 9999;
				lifeMax = 9999;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
			}
			else if (type == 69)
			{
				width = 24;
				height = 24;
				aiStyle = 19;
				damage = 10;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit31;
				DeathSound = SoundID.NPCDeath34;
				knockBackResist = 0f;
				value = 60f;
				behindTiles = true;
			}
			else if (type == 70)
			{
				npcSlots = 0.3f;
				width = 34;
				height = 34;
				aiStyle = 20;
				damage = 32;
				defense = 100;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				scale = 1.5f;
			}
			else if (type == 71)
			{
				npcSlots = 2f;
				width = 36;
				height = 24;
				aiStyle = 1;
				damage = 30;
				defense = 7;
				lifeMax = 150;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 60;
				value = 150f;
				scale = 1.25f;
				knockBackResist = 0.6f;
				rarity = 1;
			}
			else if (type == 72)
			{
				npcSlots = 0.3f;
				width = 34;
				height = 34;
				aiStyle = 21;
				damage = 24;
				defense = 100;
				lifeMax = 100;
				alpha = 100;
				behindTiles = true;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				noGravity = true;
				dontTakeDamage = true;
				scale = 1.2f;
			}
			else if (type == 73)
			{
				scale = 0.95f;
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 6;
				lifeMax = 80;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.7f;
				value = 200f;
				rarity = 1;
			}
			else if (type == 74 || type == 297 || type == 298)
			{
				width = 14;
				height = 14;
				aiStyle = 24;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				if (type == 74)
				{
					catchItem = 2015;
				}
				if (type == 297)
				{
					catchItem = 2016;
				}
				if (type == 298)
				{
					catchItem = 2017;
				}
				npcSlots = 0.4f;
			}
			else if (type == 75)
			{
				noGravity = true;
				width = 20;
				height = 20;
				aiStyle = 22;
				damage = 55;
				defense = 20;
				lifeMax = 150;
				HitSound = SoundID.NPCHit5;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath7;
				value = 350f;
			}
			else if (type == 77)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 28;
				lifeMax = 260;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 400f;
			}
			else if (type == 78)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 16;
				lifeMax = 130;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.6f;
				value = 600f;
			}
			else if (type == 79)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 18;
				lifeMax = 180;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				value = 700f;
			}
			else if (type == 80)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 55;
				defense = 18;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.55f;
				value = 700f;
			}
			else if (type == 81)
			{
				width = 40;
				height = 30;
				aiStyle = 1;
				damage = 55;
				defense = 20;
				lifeMax = 170;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 55;
				value = 400f;
				scale = 1.1f;
			}
			else if (type == 82)
			{
				noGravity = true;
				noTileCollide = true;
				width = 24;
				height = 44;
				aiStyle = 22;
				damage = 65;
				defense = 16;
				lifeMax = 160;
				HitSound = SoundID.NPCHit54;
				DeathSound = SoundID.NPCDeath52;
				alpha = 100;
				value = 500f;
				knockBackResist = 0.7f;
				if (Main.remixWorld)
				{
					scale *= 1.2f;
					damage = (int)((float)damage * scale);
					defense = (int)((float)defense * scale);
					lifeMax = (int)((float)lifeMax * scale);
					value = (int)(value * scale);
				}
			}
			else if (type == 83)
			{
				width = 40;
				height = 40;
				aiStyle = 23;
				damage = 80;
				defense = 18;
				lifeMax = 200;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = 1000f;
				knockBackResist = 0.4f;
			}
			else if (type == 84)
			{
				width = 40;
				height = 40;
				aiStyle = 23;
				damage = 80;
				defense = 18;
				lifeMax = 200;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = 1000f;
				knockBackResist = 0.4f;
			}
			else if (type == 85)
			{
				width = 24;
				height = 24;
				aiStyle = 25;
				damage = 80;
				defense = 30;
				lifeMax = 500;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = 100000f;
				knockBackResist = 0.3f;
				rarity = 4;
				if (Main.remixWorld && !Main.hardMode)
				{
					damage = 30;
					defense = 16;
					lifeMax = 270;
					value = Item.buyPrice(0, 2);
				}
			}
			else if (type == 86)
			{
				width = 46;
				height = 42;
				aiStyle = 26;
				damage = 65;
				defense = 30;
				lifeMax = 400;
				HitSound = SoundID.NPCHit12;
				DeathSound = SoundID.NPCDeath18;
				knockBackResist = 0.3f;
				value = 1000f;
			}
			else if (type == 87)
			{
				noTileCollide = true;
				npcSlots = 5f;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 80;
				defense = 10;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
			}
			else if (type == 88)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				dontCountMe = true;
			}
			else if (type == 89)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath8;
				noGravity = true;
				knockBackResist = 0f;
				value = 2000f;
				scale = 1f;
				dontCountMe = true;
			}
			else if (type == 90)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				dontCountMe = true;
			}
			else if (type == 91)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				dontCountMe = true;
			}
			else if (type == 92)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				dontCountMe = true;
			}
			else if (type == 93)
			{
				npcSlots = 0.5f;
				width = 26;
				height = 20;
				aiStyle = 14;
				damage = 45;
				defense = 16;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.75f;
				DeathSound = SoundID.NPCDeath4;
				value = 400f;
			}
			else if (type == 94)
			{
				npcSlots = 1f;
				width = 44;
				height = 44;
				aiStyle = 5;
				damage = 60;
				defense = 32;
				lifeMax = 230;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				knockBackResist = 0.55f;
				value = 500f;
			}
			else if (type == 95)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 45;
				defense = 10;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				scale = 0.9f;
				value = 300f;
			}
			else if (type == 96)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 28;
				defense = 20;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				scale = 0.9f;
				value = 300f;
				dontCountMe = true;
			}
			else if (type == 97)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 26;
				defense = 30;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				scale = 0.9f;
				value = 300f;
				dontCountMe = true;
			}
			else if (type == 98)
			{
				npcSlots = 3.5f;
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 70;
				defense = 36;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
			}
			else if (type == 99)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 55;
				defense = 40;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
				dontCountMe = true;
			}
			else if (type == 100)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 44;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
				dontCountMe = true;
			}
			else if (type == 101)
			{
				noGravity = true;
				noTileCollide = true;
				behindTiles = true;
				width = 30;
				height = 30;
				aiStyle = 13;
				damage = 70;
				defense = 30;
				lifeMax = 320;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.2f;
				DeathSound = SoundID.NPCDeath1;
				value = 600f;
			}
			else if (type == 102)
			{
				npcSlots = 0.5f;
				noGravity = true;
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 80;
				defense = 22;
				lifeMax = 90;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
			}
			else if (type == 103)
			{
				noGravity = true;
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 80;
				defense = 30;
				lifeMax = 120;
				HitSound = SoundID.NPCHit25;
				DeathSound = SoundID.NPCDeath28;
				value = 800f;
				alpha = 20;
			}
			else if (type == 104)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 38;
				lifeMax = 350;
				HitSound = SoundID.NPCHit6;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
				value = 1000f;
			}
			else if (type == 105)
			{
				friendly = true;
				width = 18;
				height = 34;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				rarity = 1;
			}
			else if (type == 106)
			{
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				rarity = 1;
			}
			else if (type == 107)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 108)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 109)
			{
				width = 34;
				height = 78;
				aiStyle = 3;
				damage = 60;
				defense = 25;
				lifeMax = 800;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.2f;
				value = 10000f;
				rarity = 1;
			}
			else if (type == 110)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 45;
				defense = 14;
				lifeMax = 210;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.55f;
				value = 400f;
			}
			else if (type == 112)
			{
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 65;
				defense = 0;
				lifeMax = 1;
				HitSound = null;
				DeathSound = SoundID.NPCDeath9;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				scale = 0.9f;
				alpha = 80;
			}
			else if (type == 113)
			{
				npcSlots = 10f;
				width = 100;
				height = 100;
				aiStyle = 27;
				damage = 50;
				defense = 12;
				lifeMax = 8000;
				HitSound = SoundID.NPCHit8;
				DeathSound = SoundID.NPCDeath10;
				noGravity = true;
				noTileCollide = true;
				behindTiles = true;
				knockBackResist = 0f;
				scale = 1.2f;
				boss = true;
				value = 80000f;
			}
			else if (type == 114)
			{
				width = 100;
				height = 100;
				aiStyle = 28;
				damage = 50;
				defense = 0;
				lifeMax = 8000;
				HitSound = SoundID.NPCHit8;
				DeathSound = SoundID.NPCDeath10;
				noGravity = true;
				noTileCollide = true;
				behindTiles = true;
				knockBackResist = 0f;
				scale = 1.2f;
				value = 80000f;
			}
			else if (type == 115)
			{
				width = 30;
				height = 30;
				aiStyle = 29;
				damage = 30;
				defense = 10;
				lifeMax = 240;
				HitSound = SoundID.NPCHit9;
				DeathSound = SoundID.NPCDeath11;
				noGravity = true;
				behindTiles = true;
				noTileCollide = true;
				knockBackResist = 1.1f;
			}
			else if (type == 116)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 30;
				defense = 6;
				lifeMax = 80;
				HitSound = SoundID.NPCHit9;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath12;
			}
			else if (type == 117)
			{
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 26;
				defense = 2;
				lifeMax = 60;
				HitSound = SoundID.NPCHit9;
				DeathSound = SoundID.NPCDeath12;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
			}
			else if (type == 118)
			{
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 22;
				defense = 6;
				lifeMax = 60;
				if (Main.getGoodWorld)
				{
					damage += 10;
					defense += 14;
					lifeMax *= 3;
				}
				HitSound = SoundID.NPCHit9;
				DeathSound = SoundID.NPCDeath12;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
			}
			else if (type == 119)
			{
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 18;
				defense = 10;
				lifeMax = 60;
				HitSound = SoundID.NPCHit9;
				DeathSound = SoundID.NPCDeath12;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
			}
			else if (type == 120)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 30;
				lifeMax = 370;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.4f;
				value = 600f;
			}
			else if (type == 121)
			{
				width = 40;
				height = 30;
				aiStyle = 14;
				damage = 45;
				defense = 20;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				alpha = 55;
				knockBackResist = 0.8f;
				scale = 1.1f;
			}
			else if (type == 122)
			{
				noGravity = true;
				width = 20;
				height = 20;
				aiStyle = 22;
				damage = 60;
				defense = 22;
				lifeMax = 220;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 600f;
			}
			else if (type == 123)
			{
				friendly = true;
				width = 18;
				height = 34;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				scale = 0.9f;
				rarity = 1;
			}
			else if (type == 124)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 125)
			{
				width = 100;
				height = 110;
				aiStyle = 30;
				defense = 10;
				damage = 45;
				lifeMax = 20000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath14;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				SpawnWithHigherTime(30);
				boss = true;
				value = 120000f;
				npcSlots = 5f;
			}
			else if (type == 126)
			{
				width = 100;
				height = 110;
				aiStyle = 31;
				defense = 10;
				damage = 50;
				lifeMax = 23000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath14;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				SpawnWithHigherTime(30);
				boss = true;
				value = 120000f;
				npcSlots = 5f;
			}
			else if (type == 127)
			{
				width = 80;
				height = 102;
				aiStyle = 32;
				damage = 47;
				defense = 24;
				lifeMax = 28000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				value = 120000f;
				knockBackResist = 0f;
				boss = true;
				npcSlots = 6f;
			}
			else if (type == 128)
			{
				width = 52;
				height = 52;
				aiStyle = 35;
				damage = 30;
				defense = 23;
				lifeMax = 7000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				netAlways = true;
			}
			else if (type == 129)
			{
				width = 52;
				height = 52;
				aiStyle = 33;
				damage = 56;
				defense = 38;
				lifeMax = 9000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				netAlways = true;
			}
			else if (type == 130)
			{
				width = 52;
				height = 52;
				aiStyle = 34;
				damage = 52;
				defense = 34;
				lifeMax = 9000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				netAlways = true;
			}
			else if (type == 131)
			{
				width = 52;
				height = 52;
				aiStyle = 36;
				damage = 29;
				defense = 20;
				lifeMax = 6000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				netAlways = true;
			}
			else if (type == 132)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 15;
				defense = 5;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 65f;
			}
			else if (type == 133)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 40;
				defense = 20;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
			}
			else if (type == 134)
			{
				npcSlots = 5f;
				width = 38;
				height = 38;
				aiStyle = 37;
				defense = 0;
				damage = 70;
				lifeMax = 80000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 120000f;
				scale = 1.25f;
				boss = true;
				netAlways = true;
				alpha = 255;
			}
			else if (type == 135)
			{
				npcSlots = 5f;
				width = 38;
				height = 38;
				aiStyle = 37;
				damage = 55;
				defense = 30;
				lifeMax = 80000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				netAlways = true;
				scale = 1.25f;
				dontCountMe = true;
				alpha = 255;
			}
			else if (type == 136)
			{
				npcSlots = 5f;
				width = 38;
				height = 38;
				aiStyle = 37;
				damage = 40;
				defense = 35;
				lifeMax = 80000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				scale = 1.25f;
				netAlways = true;
				dontCountMe = true;
				alpha = 255;
			}
			else if (type == 139)
			{
				npcSlots = 1f;
				width = 30;
				height = 30;
				aiStyle = 5;
				damage = 50;
				defense = 20;
				lifeMax = 200;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				knockBackResist = 0.8f;
				noTileCollide = true;
			}
			else if (type == 137)
			{
				width = 26;
				height = 20;
				aiStyle = 14;
				damage = 75;
				defense = 30;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.75f;
				DeathSound = SoundID.NPCDeath6;
				value = 500f;
			}
			else if (type == 138)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 70;
				defense = 30;
				lifeMax = 180;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				alpha = 100;
				value = 400f;
				knockBackResist = 0.85f;
				scale = 1.05f;
			}
			else if (type == 140)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 55;
				defense = 28;
				lifeMax = 260;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.4f;
				value = 400f;
			}
			else if (type == 141)
			{
				width = 34;
				height = 28;
				aiStyle = 1;
				damage = 50;
				defense = 18;
				lifeMax = 150;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 55;
				value = 400f;
				scale = 1.1f;
				knockBackResist = 0.8f;
			}
			else if (type == 142)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 143)
			{
				width = 26;
				height = 40;
				aiStyle = 38;
				damage = 50;
				defense = 20;
				lifeMax = 200;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath15;
				knockBackResist = 0.6f;
				value = 400f;
				coldDamage = true;
			}
			else if (type == 144)
			{
				width = 26;
				height = 40;
				aiStyle = 38;
				damage = 65;
				defense = 26;
				lifeMax = 240;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath15;
				knockBackResist = 0.6f;
				value = 400f;
				coldDamage = true;
			}
			else if (type == 145)
			{
				width = 26;
				height = 40;
				aiStyle = 38;
				damage = 55;
				defense = 22;
				lifeMax = 220;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath15;
				knockBackResist = 0.6f;
				value = 400f;
				coldDamage = true;
			}
			else if (type == 147)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 8;
				defense = 4;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 50;
				value = 50f;
				coldDamage = true;
			}
			else if (type == 148)
			{
				width = 16;
				height = 34;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2205;
			}
			else if (type == 149)
			{
				width = 16;
				height = 34;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2205;
			}
			else if (type == 150)
			{
				npcSlots = 0.5f;
				width = 22;
				height = 22;
				aiStyle = 14;
				damage = 18;
				defense = 6;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath4;
				value = 250f;
				coldDamage = true;
			}
			else if (type == 151)
			{
				npcSlots = 0.5f;
				width = 22;
				height = 22;
				aiStyle = 14;
				damage = 50;
				defense = 16;
				lifeMax = 160;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath4;
				value = 400f;
				scale = 1.15f;
				lavaImmune = true;
			}
			else if (type == 152)
			{
				npcSlots = 0.5f;
				width = 38;
				height = 34;
				aiStyle = 14;
				damage = 80;
				defense = 24;
				lifeMax = 220;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.65f;
				DeathSound = SoundID.NPCDeath4;
				value = 400f;
			}
			else if (type == 153)
			{
				npcSlots = 2f;
				width = 46;
				height = 32;
				aiStyle = 39;
				damage = 80;
				defense = 30;
				lifeMax = 470;
				HitSound = SoundID.NPCHit24;
				knockBackResist = 0.3f;
				DeathSound = SoundID.NPCDeath27;
				value = 500f;
				noGravity = false;
			}
			else if (type == 154)
			{
				npcSlots = 1.5f;
				width = 46;
				height = 32;
				aiStyle = 39;
				damage = 55;
				defense = 28;
				lifeMax = 400;
				HitSound = SoundID.NPCHit24;
				knockBackResist = 0.3f;
				DeathSound = SoundID.NPCDeath27;
				value = 450f;
				noGravity = false;
				coldDamage = true;
			}
			else if (type == 155)
			{
				width = 46;
				height = 30;
				aiStyle = 26;
				damage = 65;
				defense = 30;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 1000f;
			}
			else if (type == 156)
			{
				npcSlots = 2f;
				width = 28;
				height = 48;
				aiStyle = 14;
				damage = 50;
				defense = 40;
				lifeMax = 600;
				HitSound = SoundID.NPCHit21;
				knockBackResist = 0.5f;
				DeathSound = SoundID.NPCDeath24;
				value = 1200f;
				lavaImmune = true;
			}
			else if (type == 157)
			{
				npcSlots = 0.5f;
				noGravity = true;
				width = 74;
				height = 20;
				aiStyle = 16;
				damage = 75;
				defense = 30;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
			}
			else if (type == 160)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 161)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 80f;
			}
			else if (type == 163)
			{
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 90;
				defense = 40;
				lifeMax = 350;
				HitSound = SoundID.NPCHit29;
				DeathSound = SoundID.NPCDeath32;
				knockBackResist = 0.25f;
				value = 500f;
				npcSlots = 0.5f;
				SpawnWithHigherTime(2);
			}
			else if (type == 238)
			{
				noGravity = true;
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 100;
				defense = 40;
				lifeMax = 350;
				HitSound = SoundID.NPCHit29;
				DeathSound = SoundID.NPCDeath32;
				knockBackResist = 0.25f;
				value = 500f;
				SpawnWithHigherTime(2);
				npcSlots = 0.5f;
			}
			else if (type == 164)
			{
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 30;
				defense = 10;
				lifeMax = 80;
				HitSound = SoundID.NPCHit29;
				DeathSound = SoundID.NPCDeath32;
				knockBackResist = 0.25f;
				value = 100f;
				SpawnWithHigherTime(2);
				npcSlots = 0.5f;
			}
			else if (type == 165)
			{
				noGravity = true;
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 30;
				defense = 10;
				lifeMax = 80;
				HitSound = SoundID.NPCHit29;
				DeathSound = SoundID.NPCDeath32;
				knockBackResist = 0.25f;
				value = 100f;
				SpawnWithHigherTime(2);
				npcSlots = 0.5f;
			}
			else if (type == 167)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 24;
				defense = 10;
				lifeMax = 70;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 200f;
			}
			else if (type == 168)
			{
				width = 16;
				height = 34;
				aiStyle = 3;
				damage = 20;
				defense = 4;
				lifeMax = 70;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
			}
			else if (type == 169)
			{
				noGravity = true;
				width = 18;
				height = 40;
				aiStyle = 22;
				damage = 55;
				defense = 20;
				lifeMax = 200;
				HitSound = SoundID.NPCHit5;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath7;
				value = 1500f;
				coldDamage = true;
			}
			else if (type == 170)
			{
				width = 44;
				height = 36;
				aiStyle = 2;
				damage = 70;
				defense = 16;
				lifeMax = 210;
				HitSound = SoundID.NPCHit27;
				DeathSound = SoundID.NPCDeath30;
				knockBackResist = 0.5f;
				value = 2000f;
			}
			else if (type == 171)
			{
				width = 44;
				height = 36;
				aiStyle = 2;
				damage = 70;
				defense = 16;
				lifeMax = 210;
				HitSound = SoundID.NPCHit27;
				DeathSound = SoundID.NPCDeath30;
				knockBackResist = 0.5f;
				value = 2000f;
			}
			else if (type == 172)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 200;
				defense = 30;
				lifeMax = 600;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = 5000f;
				rarity = 4;
			}
			else if (type == 173)
			{
				npcSlots = 1f;
				width = 30;
				height = 30;
				aiStyle = 5;
				damage = 22;
				defense = 8;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				knockBackResist = 0.5f;
				value = 90f;
				if (Main.remixWorld)
				{
					scale *= 1.3f;
					damage = (int)((float)damage * scale);
					defense = (int)((float)defense * scale);
					lifeMax = (int)((float)lifeMax * scale);
					value = (int)(value * scale);
				}
			}
			else if (type == 174)
			{
				npcSlots = 1f;
				width = 52;
				height = 26;
				aiStyle = 41;
				damage = 65;
				defense = 26;
				lifeMax = 220;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 450f;
			}
			else if (type == 175)
			{
				noGravity = true;
				noTileCollide = true;
				width = 30;
				height = 30;
				aiStyle = 13;
				damage = 100;
				defense = 30;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.25f;
				DeathSound = SoundID.NPCDeath1;
				value = 650f;
			}
			else if (type == 176)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 70;
				defense = 22;
				lifeMax = 220;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.5f;
				DeathSound = SoundID.NPCDeath1;
				value = 600f;
				noGravity = true;
				npcSlots = 1.5f;
			}
			else if (type == 177)
			{
				npcSlots = 1f;
				width = 58;
				height = 44;
				aiStyle = 41;
				damage = 80;
				defense = 26;
				lifeMax = 300;
				HitSound = SoundID.NPCHit22;
				DeathSound = SoundID.NPCDeath25;
				knockBackResist = 0.5f;
				value = 500f;
			}
			else if (type == 178)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 179)
			{
				width = 40;
				height = 40;
				aiStyle = 23;
				damage = 80;
				defense = 18;
				lifeMax = 200;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = 1000f;
				knockBackResist = 0.4f;
			}
			else if (type == 180)
			{
				width = 44;
				height = 36;
				aiStyle = 2;
				damage = 70;
				defense = 16;
				lifeMax = 210;
				HitSound = SoundID.NPCHit27;
				DeathSound = SoundID.NPCDeath30;
				knockBackResist = 0.5f;
				value = 4000f;
			}
			else if (type == 181)
			{
				width = 18;
				height = 44;
				aiStyle = 3;
				damage = 25;
				defense = 10;
				lifeMax = 70;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 200f;
				if (Main.remixWorld)
				{
					scale *= 1.1f;
					damage = (int)((double)((float)damage * scale) * 1.2);
					defense = (int)((double)((float)defense * scale) * 1.2);
					lifeMax = (int)((double)((float)lifeMax * scale) * 1.2);
					value = (int)((double)(value * scale) * 1.2);
				}
			}
			else if (type == 182)
			{
				noGravity = true;
				noTileCollide = true;
				width = 24;
				height = 62;
				aiStyle = 22;
				damage = 65;
				defense = 18;
				lifeMax = 240;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				alpha = 100;
				value = 500f;
				knockBackResist = 0.7f;
			}
			else if (type == 183)
			{
				width = 40;
				height = 30;
				aiStyle = 1;
				damage = 60;
				defense = 26;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 55;
				value = 400f;
				scale = 1.1f;
			}
			else if (type == 184)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 12;
				defense = 8;
				lifeMax = 60;
				scale = 1.1f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 50;
				value = 200f;
				coldDamage = true;
			}
			else if (type == 185)
			{
				width = 28;
				height = 28;
				aiStyle = 3;
				damage = 26;
				defense = 12;
				lifeMax = 70;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 1.1f;
				value = 200f;
				coldDamage = true;
			}
			else if (type == 186)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 65f;
			}
			else if (type == 187)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 13;
				defense = 6;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.55f;
				value = 55f;
			}
			else if (type == 188)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 13;
				defense = 8;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 80f;
			}
			else if (type == 189)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 4;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.55f;
				value = 70f;
			}
			else if (type == 190)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 18;
				defense = 4;
				lifeMax = 65;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.7f;
				DeathSound = SoundID.NPCDeath1;
				value = 75f;
			}
			else if (type == 191)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 16;
				defense = 2;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.85f;
				DeathSound = SoundID.NPCDeath1;
				value = 75f;
			}
			else if (type == 192)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 18;
				defense = 2;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 75f;
			}
			else if (type == 193)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 20;
				defense = 0;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 75f;
			}
			else if (type == 194)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 14;
				defense = 4;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 75f;
			}
			else if (type == 195)
			{
				width = 18;
				height = 40;
				aiStyle = 42;
				damage = 10;
				defense = 30;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				rarity = 2;
				value = Item.buyPrice(0, 2);
			}
			else if (type == 196)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 35;
				defense = 16;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = Item.buyPrice(0, 2);
				rarity = 2;
			}
			else if (type == 197)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 28;
				lifeMax = 280;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 500f;
			}
			else if (type == 198)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 38;
				defense = 20;
				lifeMax = 400;
				HitSound = SoundID.NPCHit26;
				DeathSound = SoundID.NPCDeath29;
				knockBackResist = 0.4f;
				value = 650f;
			}
			else if (type == 199)
			{
				width = 42;
				height = 30;
				aiStyle = 3;
				damage = 60;
				defense = 30;
				lifeMax = 400;
				HitSound = SoundID.NPCHit26;
				DeathSound = SoundID.NPCDeath29;
				knockBackResist = 0f;
				value = 650f;
			}
			else if (type == 200)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 12;
				defense = 4;
				lifeMax = 38;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 65f;
			}
			else if (type == 201)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 12;
				lifeMax = 55;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 130f;
			}
			else if (type == 202)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 18;
				defense = 8;
				lifeMax = 65;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 120f;
			}
			else if (type == 203)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 110f;
			}
			else if (type == 204)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 28;
				defense = 8;
				lifeMax = 65;
				scale = 1.15f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 50;
				value = 300f;
			}
			else if (type == 205)
			{
				width = 40;
				height = 40;
				aiStyle = 5;
				damage = 70;
				defense = 28;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.4f;
				DeathSound = SoundID.NPCDeath1;
				value = 600f;
				noGravity = true;
				rarity = 2;
			}
			else if (type == 206)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 30;
				lifeMax = 280;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				value = 500f;
				coldDamage = true;
			}
			else if (type == 207)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 208)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 209)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 210)
			{
				width = 12;
				height = 12;
				aiStyle = 5;
				damage = 20;
				defense = 5;
				lifeMax = 20;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.5f;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
			}
			else if (type == 211)
			{
				width = 8;
				height = 8;
				aiStyle = 5;
				damage = 15;
				defense = 2;
				lifeMax = 10;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.5f;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
			}
			else if (type == 212)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 35;
				defense = 17;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
				value = 700f;
			}
			else if (type == 213)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 22;
				lifeMax = 450;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.2f;
				value = 1000f;
			}
			else if (type == 214)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 30;
				defense = 14;
				lifeMax = 225;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 1000f;
			}
			else if (type == 215)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 35;
				defense = 20;
				lifeMax = 350;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.35f;
				value = 1500f;
			}
			else if (type == 216)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 30;
				lifeMax = 3000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				value = 50000f;
				rarity = 1;
			}
			else if (type == 217)
			{
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath16;
				value = 60f;
				rarity = 1;
			}
			else if (type == 218)
			{
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath16;
				value = 60f;
				rarity = 1;
			}
			else if (type == 219)
			{
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath16;
				value = 60f;
				rarity = 1;
			}
			else if (type == 220)
			{
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 60f;
				rarity = 2;
			}
			else if (type == 221)
			{
				noGravity = true;
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 20;
				defense = 2;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 100f;
				alpha = 20;
				rarity = 1;
			}
			else if (type == 222)
			{
				width = 66;
				height = 66;
				aiStyle = 43;
				damage = 30;
				defense = 8;
				lifeMax = 3400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath66;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				SpawnWithHigherTime(30);
				boss = true;
				value = 50000f;
				npcSlots = 7f;
			}
			else if (type == 223)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 70f;
			}
			else if (type == 224)
			{
				width = 32;
				height = 18;
				aiStyle = 44;
				damage = 9;
				defense = 4;
				lifeMax = 20;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 300f;
			}
			if (type == 225)
			{
				width = 38;
				height = 26;
				aiStyle = 1;
				damage = 10;
				defense = 5;
				lifeMax = 35;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.75f;
				value = 200f;
			}
			else if (type == 226)
			{
				npcSlots = 0.5f;
				width = 34;
				height = 50;
				aiStyle = 14;
				damage = 85;
				defense = 28;
				lifeMax = 260;
				HitSound = SoundID.NPCHit23;
				knockBackResist = 0.65f;
				DeathSound = SoundID.NPCDeath26;
				value = 400f;
			}
			else if (type == 227)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 228)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 229)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 230)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 261;
			}
			else if (type == 231)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 22;
				defense = 16;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.3f;
				DeathSound = SoundID.NPCDeath1;
				value = 200f;
				noGravity = true;
			}
			else if (type == 232)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 28;
				defense = 12;
				lifeMax = 42;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath1;
				value = 200f;
				noGravity = true;
			}
			else if (type == 233)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 30;
				defense = 14;
				lifeMax = 38;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.45f;
				DeathSound = SoundID.NPCDeath1;
				value = 200f;
				noGravity = true;
			}
			else if (type == 234)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 32;
				defense = 6;
				lifeMax = 42;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.55f;
				DeathSound = SoundID.NPCDeath1;
				value = 200f;
				noGravity = true;
			}
			else if (type == 235)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 34;
				defense = 4;
				lifeMax = 38;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath1;
				value = 200f;
				noGravity = true;
			}
			else if (type == 236)
			{
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 100;
				defense = 28;
				lifeMax = 400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.25f;
				value = 1000f;
				SpawnWithHigherTime(2);
				npcSlots = 0.75f;
			}
			else if (type == 237)
			{
				noGravity = true;
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 100;
				defense = 28;
				lifeMax = 400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.25f;
				value = 1000f;
				SpawnWithHigherTime(2);
				npcSlots = 0.75f;
			}
			else if (type == 239)
			{
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 30;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit20;
				DeathSound = SoundID.NPCDeath23;
				knockBackResist = 0.5f;
				value = 130f;
				SpawnWithHigherTime(2);
			}
			else if (type == 240)
			{
				noGravity = true;
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 30;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit20;
				DeathSound = SoundID.NPCDeath23;
				knockBackResist = 0.5f;
				value = 130f;
				SpawnWithHigherTime(2);
			}
			else if (type == 241)
			{
				npcSlots = 0.5f;
				noGravity = true;
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 50;
				defense = 20;
				lifeMax = 150;
				HitSound = SoundID.NPCHit13;
				DeathSound = SoundID.NPCDeath19;
				value = 500f;
			}
			else if (type == 242)
			{
				noGravity = true;
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 75;
				defense = 20;
				lifeMax = 150;
				HitSound = SoundID.NPCHit13;
				DeathSound = SoundID.NPCDeath19;
				value = 800f;
				alpha = 20;
			}
			else if (type == 243)
			{
				width = 30;
				height = 114;
				aiStyle = 3;
				damage = 60;
				defense = 32;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit5;
				DeathSound = SoundID.NPCDeath7;
				knockBackResist = 0.05f;
				value = Item.buyPrice(0, 1, 50);
				coldDamage = true;
				rarity = 2;
			}
			else if (type == 244)
			{
				width = 60;
				height = 42;
				aiStyle = 1;
				damage = 85;
				defense = 26;
				lifeMax = 400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 175;
				value = Item.buyPrice(0, 0, 20);
				knockBackResist = 0.3f;
				rarity = 1;
			}
			else if (type == 245)
			{
				width = 140;
				height = 140;
				aiStyle = 45;
				damage = 72;
				defense = 26;
				lifeMax = 15000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				knockBackResist = 0f;
				value = Item.buyPrice(0, 15);
				alpha = 255;
				boss = true;
				npcSlots = 5f;
			}
			else if (type == 246)
			{
				noGravity = true;
				width = 70;
				height = 70;
				aiStyle = 46;
				damage = 64;
				defense = 20;
				lifeMax = 25000;
				HitSound = SoundID.NPCHit4;
				DeathSound = null;
				knockBackResist = 0f;
				alpha = 255;
			}
			else if (type == 247 || type == 248)
			{
				noGravity = true;
				width = 40;
				height = 30;
				aiStyle = 47;
				damage = 59;
				defense = 28;
				lifeMax = 10000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				alpha = 255;
				knockBackResist = 0f;
			}
			else if (type == 249)
			{
				noGravity = true;
				width = 70;
				height = 70;
				aiStyle = 48;
				damage = 80;
				defense = 32;
				lifeMax = 16000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				knockBackResist = 0f;
				dontTakeDamage = true;
			}
			else if (type == 250)
			{
				width = 34;
				height = 26;
				aiStyle = 49;
				damage = 50;
				defense = 24;
				lifeMax = 300;
				HitSound = SoundID.NPCHit30;
				DeathSound = SoundID.NPCDeath33;
				knockBackResist = 0.3f;
				value = 300f;
			}
			else if (type == 251)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 30;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = Item.buyPrice(0, 0, 50);
				rarity = 2;
			}
			else if (type == 252)
			{
				noGravity = true;
				npcSlots = 0.5f;
				width = 32;
				height = 32;
				aiStyle = 5;
				damage = 80;
				defense = 12;
				lifeMax = 100;
				HitSound = SoundID.NPCHit46;
				knockBackResist = 0.7f;
				DeathSound = SoundID.NPCDeath48;
				value = 500f;
			}
			else if (type == 254)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 10;
				lifeMax = 180;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.4f;
				value = 1000f;
			}
			else if (type == 255)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 38;
				defense = 16;
				lifeMax = 220;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.3f;
				value = 1200f;
			}
			else if (type == 256)
			{
				noGravity = true;
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 90;
				defense = 20;
				lifeMax = 140;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				value = 1200f;
				alpha = 20;
				npcSlots = 0.3f;
			}
			else if (type == 257)
			{
				width = 44;
				height = 34;
				aiStyle = 3;
				damage = 38;
				defense = 24;
				lifeMax = 230;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.3f;
				value = 1300f;
				npcSlots = 0.3f;
			}
			else if (type == 258)
			{
				width = 30;
				height = 24;
				aiStyle = 3;
				damage = 60;
				defense = 16;
				lifeMax = 220;
				HitSound = SoundID.NPCHit45;
				DeathSound = SoundID.NPCDeath47;
				knockBackResist = 0.3f;
				value = 1500f;
				npcSlots = 0.3f;
			}
			else if (type == 259)
			{
				noGravity = true;
				noTileCollide = true;
				width = 20;
				height = 20;
				aiStyle = 13;
				damage = 24;
				defense = 4;
				lifeMax = 90;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath1;
				value = 350f;
				npcSlots = 0.3f;
			}
			else if (type == 260)
			{
				noGravity = true;
				noTileCollide = true;
				width = 36;
				height = 36;
				aiStyle = 13;
				damage = 70;
				defense = 20;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath1;
				value = 1250f;
				npcSlots = 0.3f;
			}
			else if (type == 261)
			{
				width = 12;
				height = 12;
				aiStyle = 50;
				damage = 80;
				defense = 0;
				lifeMax = 1;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				npcSlots = 0f;
			}
			else if (type == 262)
			{
				noTileCollide = true;
				width = 86;
				height = 86;
				aiStyle = 51;
				damage = 50;
				defense = 14;
				lifeMax = 30000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				value = Item.buyPrice(0, 15);
				noGravity = true;
				boss = true;
				npcSlots = 16f;
			}
			else if (type == 263)
			{
				noTileCollide = true;
				noGravity = true;
				width = 40;
				height = 40;
				aiStyle = 52;
				damage = 60;
				defense = 24;
				lifeMax = 4000;
				dontTakeDamage = true;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
			}
			else if (type == 264)
			{
				width = 24;
				height = 24;
				aiStyle = 53;
				damage = 60;
				defense = 20;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
			}
			else if (type == 265)
			{
				width = 18;
				height = 18;
				aiStyle = 50;
				damage = 70;
				defense = 0;
				lifeMax = 1;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				npcSlots = 0f;
			}
			else if (type == 266)
			{
				dontTakeDamage = true;
				width = 160;
				height = 110;
				aiStyle = 54;
				damage = 30;
				defense = 14;
				lifeMax = 1250;
				HitSound = SoundID.NPCHit9;
				DeathSound = SoundID.NPCDeath11;
				knockBackResist = 0.45f;
				noGravity = true;
				noTileCollide = true;
				SpawnWithHigherTime(30);
				boss = true;
				value = 50000f;
				npcSlots = 6f;
			}
			else if (type == 267)
			{
				width = 30;
				height = 30;
				aiStyle = 55;
				damage = 20;
				defense = 10;
				lifeMax = 100;
				HitSound = SoundID.NPCHit9;
				DeathSound = SoundID.NPCDeath11;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.8f;
			}
			else if (type == 268)
			{
				noGravity = true;
				width = 28;
				height = 56;
				aiStyle = 22;
				damage = 55;
				defense = 20;
				lifeMax = 340;
				HitSound = SoundID.NPCHit13;
				DeathSound = SoundID.NPCDeath19;
				knockBackResist = 0.6f;
				value = 450f;
			}
			else if (type == 269)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 34;
				lifeMax = 550;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = 1000f;
			}
			else if (type == 270)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 55;
				defense = 50;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.2f;
				value = 1000f;
			}
			else if (type == 271)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 40;
				lifeMax = 450;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.25f;
				value = 1000f;
			}
			else if (type == 272)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 75;
				defense = 28;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.35f;
				value = 1000f;
			}
			else if (type == 273)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 45;
				defense = 50;
				lifeMax = 500;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.15f;
				value = 1000f;
			}
			else if (type == 274)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 65;
				defense = 34;
				lifeMax = 350;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 1000f;
			}
			else if (type == 275)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 45;
				defense = 50;
				lifeMax = 550;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.15f;
				value = 1000f;
			}
			else if (type == 276)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 85;
				defense = 54;
				lifeMax = 500;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.2f;
				value = 1000f;
			}
			else if (type == 277)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 32;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 1000f;
			}
			else if (type == 278)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 65;
				defense = 48;
				lifeMax = 450;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = 1000f;
			}
			else if (type == 279)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 54;
				lifeMax = 500;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.2f;
				value = 1000f;
			}
			else if (type == 280)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 75;
				defense = 34;
				lifeMax = 500;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 1000f;
			}
			else if (type == 281)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 40;
				defense = 20;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 1500f;
				npcSlots = 2f;
			}
			else if (type == 282)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 35;
				defense = 28;
				lifeMax = 450;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 1500f;
				npcSlots = 2f;
			}
			else if (type == 283)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 50;
				defense = 18;
				lifeMax = 300;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.55f;
				value = 1500f;
				npcSlots = 2f;
			}
			else if (type == 284)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 35;
				defense = 24;
				lifeMax = 450;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 1500f;
				npcSlots = 2f;
			}
			else if (type == 285)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 50;
				defense = 12;
				lifeMax = 200;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.7f;
				value = 1500f;
				npcSlots = 2f;
			}
			else if (type == 286)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 60;
				defense = 10;
				lifeMax = 250;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.65f;
				value = 1500f;
				npcSlots = 2f;
			}
			else if (type == 287)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 90;
				defense = 42;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = 2000f;
				rarity = 1;
			}
			else if (type == 288)
			{
				width = 20;
				height = 20;
				aiStyle = 56;
				damage = 70;
				defense = 30;
				lifeMax = 200;
				knockBackResist = 0.2f;
				HitSound = SoundID.NPCHit36;
				DeathSound = SoundID.NPCDeath39;
				value = 500f;
				noTileCollide = true;
				noGravity = true;
			}
			else if (type == 289)
			{
				width = 44;
				height = 44;
				aiStyle = 10;
				damage = 60;
				defense = 20;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				noGravity = true;
				noTileCollide = true;
				value = 150f;
				knockBackResist = 0.2f;
				npcSlots = 0.75f;
			}
			else if (type == 290)
			{
				width = 34;
				height = 62;
				aiStyle = 3;
				damage = 100;
				defense = 50;
				lifeMax = 5000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0f;
				value = 50000f;
				rarity = 2;
			}
			else if (type == 291)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 28;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 1000f;
				rarity = 1;
			}
			else if (type == 292)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 28;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 1000f;
				rarity = 1;
			}
			else if (type == 293)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 28;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 1000f;
				rarity = 1;
			}
			else if (type == 294)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 34;
				defense = 6;
				lifeMax = 70;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.9f;
				value = 130f;
			}
			else if (type == 295)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 28;
				defense = 12;
				lifeMax = 70;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.7f;
				value = 130f;
			}
			else if (type == 296)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 24;
				defense = 14;
				lifeMax = 120;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 130f;
			}
			else if (type == 299)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2018;
			}
			else if (type == 300)
			{
				width = 14;
				height = 12;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath4;
				npcSlots = 0.25f;
				catchItem = 2003;
			}
			else if (type == 301)
			{
				width = 36;
				height = 26;
				aiStyle = 17;
				damage = 12;
				defense = 2;
				lifeMax = 35;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.85f;
				DeathSound = SoundID.NPCDeath1;
				value = 50f;
			}
			if (type == 302)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 7;
				defense = 2;
				lifeMax = 25;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 25f;
			}
			else if (type == 304)
			{
				width = 34;
				height = 28;
				aiStyle = 1;
				damage = 80;
				defense = 20;
				lifeMax = 175;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
				scale = 1.1f;
				knockBackResist = 0.5f;
				npcSlots = 0.3f;
			}
			else if (type >= 305 && type <= 314)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				value = 1200f;
				npcSlots = 0.5f;
				if (type == 305 || type == 310)
				{
					damage = 60;
					defense = 18;
					lifeMax = 500;
					knockBackResist = 0.4f;
				}
				else if (type == 306 || type == 311)
				{
					damage = 52;
					defense = 14;
					lifeMax = 400;
					knockBackResist = 0.2f;
					scale = 1.05f;
				}
				else if (type == 307 || type == 312)
				{
					damage = 78;
					defense = 16;
					lifeMax = 600;
					knockBackResist = 0.25f;
					scale = 0.9f;
				}
				else if (type == 308 || type == 313)
				{
					damage = 66;
					defense = 14;
					lifeMax = 650;
					knockBackResist = 0.35f;
					scale = 0.95f;
				}
				else if (type == 309 || type == 314)
				{
					damage = 52;
					defense = 26;
					lifeMax = 450;
					knockBackResist = 0.5f;
					scale = 1.1f;
				}
			}
			else if (type == 315)
			{
				width = 74;
				height = 70;
				aiStyle = 26;
				damage = 130;
				defense = 40;
				lifeMax = 5000;
				HitSound = SoundID.NPCHit12;
				DeathSound = SoundID.NPCDeath18;
				knockBackResist = 0f;
				value = 10000f;
			}
			else if (type == 316)
			{
				noGravity = true;
				noTileCollide = true;
				width = 24;
				height = 44;
				aiStyle = 22;
				damage = 15;
				defense = 4;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				alpha = 100;
				value = 90f;
				knockBackResist = 0.5f;
			}
			else if (type == 317)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 16;
				defense = 6;
				lifeMax = 75;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.7f;
				DeathSound = SoundID.NPCDeath1;
				value = 100f;
			}
			else if (type == 318)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 20;
				defense = 4;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.65f;
				DeathSound = SoundID.NPCDeath1;
				value = 100f;
			}
			else if (type == 319)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 6;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 85f;
				scale = 0.9f;
			}
			else if (type == 320)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 15;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 105f;
				scale = 1.05f;
			}
			else if (type == 321)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 14;
				lifeMax = 34;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = 120f;
				scale = 1.1f;
			}
			else if (type == 322)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 23;
				defense = 0;
				lifeMax = 115;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.65f;
				value = 130f;
			}
			else if (type == 323)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 18;
				defense = 10;
				lifeMax = 65;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 120f;
			}
			else if (type == 324)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 10;
				lifeMax = 70;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 130f;
				scale = 1.05f;
			}
			else if (type == 325)
			{
				width = 164;
				height = 154;
				aiStyle = 57;
				damage = 120;
				defense = 34;
				lifeMax = 14000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0f;
				value = 10000f;
				npcSlots = 3f;
			}
			else if (type == 326)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 100;
				defense = 32;
				lifeMax = 1200;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.2f;
				value = 2000f;
			}
			else if (type == 327)
			{
				width = 100;
				height = 100;
				aiStyle = 58;
				damage = 50;
				defense = 40;
				lifeMax = 26000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				value = 50000f;
				knockBackResist = 0f;
				npcSlots = 5f;
			}
			else if (type == 328)
			{
				width = 80;
				height = 80;
				aiStyle = 59;
				damage = 65;
				defense = 14;
				lifeMax = 5000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				dontTakeDamage = true;
				npcSlots = 0f;
				dontCountMe = true;
			}
			else if (type == 329)
			{
				width = 46;
				height = 30;
				aiStyle = 26;
				damage = 80;
				defense = 38;
				lifeMax = 1800;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0.3f;
				value = 3000f;
			}
			else if (type == 330)
			{
				noGravity = true;
				noTileCollide = true;
				width = 24;
				height = 44;
				aiStyle = 22;
				damage = 90;
				defense = 44;
				lifeMax = 1250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				alpha = 100;
				value = 4500f;
				knockBackResist = 0.4f;
			}
			else if (type == 331)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 60f;
			}
			else if (type == 332)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 60f;
			}
			if (type == 333)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 7;
				defense = 2;
				lifeMax = 25;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 25f;
			}
			if (type == 334)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 6;
				defense = 2;
				lifeMax = 23;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				scale = 0.9f;
				value = 25f;
			}
			if (type == 335)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 8;
				defense = 3;
				lifeMax = 29;
				scale = 1.05f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 25f;
			}
			if (type == 336)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 5;
				defense = 1;
				lifeMax = 22;
				scale = 0.85f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 25f;
			}
			else if (type >= 338 && type <= 340)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 1200f;
				npcSlots = 0.5f;
				if (type == 338)
				{
					damage = 65;
					defense = 18;
					lifeMax = 600;
					knockBackResist = 0.4f;
				}
				else if (type == 339)
				{
					damage = 52;
					defense = 24;
					lifeMax = 700;
					knockBackResist = 0.2f;
					scale = 1.05f;
				}
				else if (type == 340)
				{
					damage = 78;
					defense = 14;
					lifeMax = 500;
					knockBackResist = 0.25f;
					scale = 0.9f;
				}
			}
			else if (type == 341)
			{
				width = 24;
				height = 24;
				aiStyle = 25;
				damage = 100;
				defense = 32;
				lifeMax = 900;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = Item.buyPrice(0, 0, 20);
				knockBackResist = 0.25f;
			}
			else if (type == 342)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 90;
				defense = 26;
				lifeMax = 750;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.2f;
				value = 1800f;
			}
			else if (type == 343)
			{
				width = 38;
				height = 78;
				aiStyle = 3;
				damage = 140;
				defense = 50;
				lifeMax = 3500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				value = 3000f;
				npcSlots = 2f;
				coldDamage = true;
			}
			else if (type == 344)
			{
				width = 172;
				height = 130;
				aiStyle = 57;
				damage = 110;
				defense = 38;
				lifeMax = 13000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0f;
				value = 10000f;
				npcSlots = 3f;
			}
			else if (type == 345)
			{
				width = 130;
				height = 140;
				aiStyle = 60;
				damage = 120;
				defense = 38;
				lifeMax = 34000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0f;
				value = 50000f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 5f;
				coldDamage = true;
			}
			else if (type == 346)
			{
				width = 112;
				height = 140;
				aiStyle = 61;
				damage = 120;
				defense = 56;
				lifeMax = 18000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				knockBackResist = 0f;
				value = 10000f;
				npcSlots = 4f;
			}
			else if (type == 347)
			{
				width = 50;
				height = 50;
				aiStyle = 62;
				damage = 60;
				defense = 28;
				lifeMax = 1200;
				HitSound = SoundID.NPCHit4;
				knockBackResist = 0.4f;
				DeathSound = SoundID.NPCDeath14;
				value = 1000f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 1.5f;
			}
			else if (type == 348)
			{
				width = 28;
				height = 76;
				aiStyle = 3;
				damage = 80;
				defense = 26;
				lifeMax = 1800;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
				value = 1500f;
				npcSlots = 1.5f;
			}
			else if (type == 349)
			{
				width = 28;
				height = 76;
				aiStyle = 3;
				damage = 100;
				defense = 42;
				lifeMax = 1800;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.1f;
				value = 1500f;
				npcSlots = 1.5f;
			}
			else if (type == 350)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 30;
				lifeMax = 900;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.45f;
				value = 900f;
			}
			else if (type == 351)
			{
				width = 18;
				height = 90;
				aiStyle = 3;
				damage = 100;
				defense = 40;
				lifeMax = 2500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.1f;
				value = 3000f;
				npcSlots = 1.75f;
			}
			else if (type == 352)
			{
				width = 54;
				height = 54;
				aiStyle = 63;
				damage = 75;
				defense = 8;
				lifeMax = 450;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				value = 500f;
				knockBackResist = 0.4f;
				noGravity = true;
				noTileCollide = true;
				npcSlots = 2f;
				coldDamage = true;
			}
			else if (type == 353)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 354)
			{
				friendly = true;
				width = 18;
				height = 34;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				scale = 0.9f;
				rarity = 1;
			}
			else if (type == 355)
			{
				width = 10;
				height = 10;
				aiStyle = 64;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.2f;
				noGravity = true;
				catchItem = 1992;
			}
			else if (type == 356)
			{
				width = 10;
				height = 10;
				aiStyle = 65;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				noGravity = true;
				catchItem = 1994;
			}
			else if (type == 357)
			{
				width = 10;
				height = 4;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.1f;
				catchItem = 2002;
				friendly = true;
			}
			else if (type == 358)
			{
				width = 12;
				height = 12;
				aiStyle = 64;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.2f;
				noGravity = true;
				catchItem = 2004;
			}
			else if (type == 359)
			{
				width = 12;
				height = 12;
				aiStyle = 67;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.5f;
				noGravity = true;
				catchItem = 2006;
			}
			else if (type == 360)
			{
				width = 14;
				height = 14;
				aiStyle = 67;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.5f;
				noGravity = true;
				catchItem = 2007;
			}
			else if (type == 361)
			{
				width = 12;
				height = 10;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2121;
			}
			else if (type == 362)
			{
				width = 22;
				height = 26;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2122;
			}
			else if (type == 363)
			{
				width = 28;
				height = 22;
				aiStyle = 68;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2122;
			}
			else if (type == 364)
			{
				width = 22;
				height = 26;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2123;
			}
			else if (type == 365)
			{
				width = 28;
				height = 22;
				aiStyle = 68;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2123;
			}
			else if (type == 366 || type == 367)
			{
				width = 26;
				height = 18;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = (short)(2156 + type - 366);
			}
			else if (type == 368)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 369)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
			}
			else if (type == 370)
			{
				width = 150;
				height = 100;
				aiStyle = 69;
				damage = 100;
				defense = 50;
				lifeMax = 60000;
				knockBackResist = 0f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 10f;
				HitSound = SoundID.NPCHit14;
				DeathSound = SoundID.NPCDeath20;
				value = 250000f;
				boss = true;
				netAlways = true;
				SpawnWithHigherTime(30);
			}
			else if (type == 371)
			{
				width = 36;
				height = 36;
				aiStyle = 70;
				damage = 100;
				defense = 0;
				lifeMax = 1;
				HitSound = SoundID.NPCHit3;
				DeathSound = SoundID.NPCDeath3;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				alpha = 255;
			}
			else if (type == 372)
			{
				noGravity = true;
				width = 120;
				height = 24;
				aiStyle = 71;
				damage = 100;
				defense = 100;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				alpha = 255;
			}
			else if (type == 373)
			{
				noGravity = true;
				width = 100;
				height = 24;
				aiStyle = 71;
				damage = 120;
				defense = 100;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				alpha = 255;
			}
			else if (type == 374)
			{
				width = 20;
				height = 10;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.15f;
				catchItem = 2673;
				rarity = 4;
				dontTakeDamageFromHostiles = true;
			}
			else if (type == 375)
			{
				width = 10;
				height = 10;
				aiStyle = 6;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				npcSlots = 0.15f;
				catchItem = 2673;
				rarity = 4;
				dontTakeDamageFromHostiles = true;
			}
			else if (type == 376)
			{
				friendly = true;
				width = 34;
				height = 8;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				scale = 0.9f;
				rarity = 1;
			}
			else if (type == 377)
			{
				width = 14;
				height = 10;
				aiStyle = 1;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				friendly = true;
				catchItem = 2740;
				npcSlots = 0.1f;
			}
			else if (type == 378)
			{
				npcSlots = 1f;
				width = 20;
				height = 26;
				aiStyle = 41;
				damage = 120;
				defense = 30;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				value = 450f;
			}
			else if (type >= 379 && type <= 380)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 45;
				defense = 14;
				lifeMax = 210;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.55f;
				value = 1000f;
				npcSlots = 0f;
				lavaImmune = true;
				netAlways = true;
				chaseable = false;
			}
			else if (type >= 381 && type <= 382)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 25;
				lifeMax = 350;
				HitSound = SoundID.NPCHit39;
				DeathSound = SoundID.NPCDeath57;
				knockBackResist = 0.35f;
				value = 1000f;
			}
			else if (type == 383)
			{
				lifeMax = 300;
				defense = 50;
				damage = 75;
				width = 18;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit39;
				DeathSound = SoundID.NPCDeath57;
				value = 1200f;
				knockBackResist = 0.25f;
			}
			else if (type == 384)
			{
				lifeMax = 1000;
				width = 18;
				defense = 20;
				height = 40;
				aiStyle = 72;
				HitSound = SoundID.NPCHit43;
				DeathSound = SoundID.NPCDeath45;
				npcSlots = 0f;
				noTileCollide = true;
				canGhostHeal = false;
			}
			else if (type == 385)
			{
				lifeMax = 750;
				defense = 30;
				damage = 80;
				width = 18;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit39;
				DeathSound = SoundID.NPCDeath57;
				value = 600f;
				knockBackResist = 0f;
				npcSlots = 0.75f;
			}
			else if (type == 386)
			{
				lifeMax = 400;
				defense = 34;
				damage = 40;
				width = 18;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit39;
				DeathSound = SoundID.NPCDeath57;
				value = 1200f;
				knockBackResist = 0.4f;
			}
			else if (type == 387)
			{
				width = 20;
				height = 50;
				aiStyle = 73;
				damage = 10;
				defense = 40;
				lifeMax = 200;
				HitSound = SoundID.NPCHit53;
				DeathSound = SoundID.NPCDeath56;
				knockBackResist = 0f;
				canGhostHeal = false;
			}
			else if (type == 388)
			{
				width = 40;
				height = 30;
				aiStyle = 74;
				damage = 60;
				defense = 16;
				lifeMax = 300;
				HitSound = SoundID.NPCHit42;
				knockBackResist = 0.4f;
				DeathSound = SoundID.NPCDeath44;
				value = 1000f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 1.5f;
				canGhostHeal = false;
			}
			else if (type == 389)
			{
				lifeMax = 600;
				defense = 38;
				damage = 75;
				width = 18;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit39;
				DeathSound = SoundID.NPCDeath57;
				value = 1200f;
				npcSlots = 0.5f;
				knockBackResist = 0.3f;
			}
			else if (type == 390)
			{
				damage = 65;
				defense = 30;
				lifeMax = 350;
				width = 18;
				height = 40;
				aiStyle = 75;
				HitSound = SoundID.NPCHit39;
				DeathSound = SoundID.NPCDeath57;
				value = 1200f;
				npcSlots = 0.5f;
			}
			else if (type == 391)
			{
				lifeMax = 600;
				defense = 30;
				damage = 85;
				width = 60;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit51;
				DeathSound = SoundID.NPCDeath54;
				value = 1200f;
				npcSlots = 0.5f;
				knockBackResist = 0.1f;
			}
			else if (type == 392)
			{
				lifeMax = 100;
				defense = 100;
				damage = 50;
				width = 150;
				height = 80;
				aiStyle = 75;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				value = 0f;
				npcSlots = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				netAlways = true;
			}
			else if (type == 393)
			{
				lifeMax = 5000;
				defense = 20;
				damage = 60;
				width = 40;
				height = 16;
				aiStyle = 75;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				value = 0f;
				npcSlots = 1f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				netAlways = true;
			}
			else if (type == 394)
			{
				lifeMax = 3500;
				defense = 20;
				damage = 60;
				width = 46;
				height = 36;
				aiStyle = 75;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				value = 0f;
				npcSlots = 1f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				netAlways = true;
			}
			else if (type == 395)
			{
				lifeMax = 10000;
				defense = 0;
				damage = 80;
				width = 120;
				height = 90;
				aiStyle = 76;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				value = 0f;
				npcSlots = 6f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				boss = true;
				netAlways = true;
			}
			else if (type == 399)
			{
				defense = 5;
				damage = 5;
				lifeMax = 500;
				aiStyle = 80;
				width = 42;
				height = 72;
				value = 0f;
				knockBackResist = 0f;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				npcSlots = 0f;
				noGravity = true;
				SpawnWithHigherTime(30);
				chaseable = false;
				netAlways = true;
				rarity = 1;
			}
			else if (type == 396)
			{
				lifeMax = 45000;
				defense = 50;
				damage = 0;
				width = 38;
				height = 56;
				aiStyle = 79;
				HitSound = SoundID.NPCHit57;
				DeathSound = SoundID.NPCDeath62;
				value = 0f;
				npcSlots = 6f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				boss = true;
				hide = true;
				netAlways = true;
			}
			else if (type == 397)
			{
				lifeMax = 25000;
				defense = 40;
				damage = 0;
				width = 46;
				height = 66;
				aiStyle = 78;
				HitSound = SoundID.NPCHit57;
				DeathSound = SoundID.NPCDeath62;
				value = 0f;
				npcSlots = 6f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				boss = true;
				hide = true;
				netAlways = true;
			}
			else if (type == 398)
			{
				lifeMax = 50000;
				defense = 70;
				damage = 0;
				width = 46;
				height = 66;
				aiStyle = 77;
				HitSound = SoundID.NPCHit57;
				DeathSound = null;
				value = 1000000f;
				npcSlots = 6f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				boss = true;
				behindTiles = true;
				hide = true;
				netAlways = true;
			}
			else if (type == 400)
			{
				defense = 0;
				damage = 60;
				lifeMax = 100;
				aiStyle = 81;
				width = 60;
				height = 60;
				value = 0f;
				knockBackResist = 0f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0f;
				noGravity = true;
				dontTakeDamage = true;
				noTileCollide = true;
				netAlways = true;
			}
			else if (type == 401)
			{
				lifeMax = 400;
				defense = 0;
				damage = 0;
				width = 30;
				height = 30;
				aiStyle = 82;
				HitSound = SoundID.NPCHit57;
				DeathSound = SoundID.NPCDeath62;
				value = 0f;
				npcSlots = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				hide = true;
			}
			else if (type == 437)
			{
				lifeMax = 400;
				defense = 0;
				damage = 0;
				width = 54;
				height = 54;
				aiStyle = 83;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				value = 0f;
				npcSlots = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				netAlways = true;
				chaseable = false;
			}
			else if (type == 438)
			{
				lifeMax = 400;
				defense = 0;
				damage = 0;
				width = 22;
				height = 40;
				aiStyle = 83;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				npcSlots = 0f;
				knockBackResist = 0f;
				lavaImmune = true;
				netAlways = true;
				chaseable = false;
			}
			else if (type == 439)
			{
				width = 24;
				height = 50;
				aiStyle = 84;
				damage = 50;
				defense = 42;
				lifeMax = 32000;
				knockBackResist = 0f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 10f;
				HitSound = SoundID.NPCHit55;
				DeathSound = SoundID.NPCDeath59;
				value = 100000f;
				boss = true;
				netAlways = true;
				SpawnWithHigherTime(30);
			}
			else if (type == 440)
			{
				width = 24;
				height = 50;
				aiStyle = 84;
				damage = 0;
				defense = 35;
				lifeMax = 10000;
				knockBackResist = 0f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 0f;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				netAlways = true;
				SpawnWithHigherTime(30);
				chaseable = false;
			}
			else if (type == 442)
			{
				width = 14;
				height = 14;
				aiStyle = 24;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2889;
				npcSlots = 0.4f;
				rarity = 3;
			}
			else if (type == 443)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2890;
				rarity = 3;
			}
			else if (type == 444)
			{
				width = 10;
				height = 10;
				aiStyle = 65;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				noGravity = true;
				catchItem = 2891;
				rarity = 3;
			}
			else if (type == 445)
			{
				width = 12;
				height = 10;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2892;
				rarity = 3;
			}
			else if (type == 446)
			{
				width = 14;
				height = 10;
				aiStyle = 1;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				friendly = true;
				catchItem = 2893;
				npcSlots = 0.1f;
				rarity = 3;
			}
			else if (type == 447)
			{
				width = 14;
				height = 12;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath4;
				npcSlots = 0.25f;
				catchItem = 2894;
				rarity = 3;
			}
			else if (type == 448)
			{
				width = 10;
				height = 4;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.1f;
				catchItem = 2895;
				friendly = true;
				rarity = 3;
			}
			else if (type == 449)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 100f;
			}
			else if (type == 450)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 12;
				lifeMax = 55;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 130f;
			}
			else if (type == 451)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 18;
				defense = 8;
				lifeMax = 65;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 120f;
			}
			else if (type == 452)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 110f;
			}
			else if (type == 453)
			{
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 30;
				lifeMax = 250;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				npcSlots = 7f;
				rarity = 1;
			}
			else if (type == 454)
			{
				noTileCollide = true;
				npcSlots = 5f;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 100;
				defense = 15;
				lifeMax = 10000;
				HitSound = SoundID.NPCHit56;
				DeathSound = SoundID.NPCDeath60;
				noGravity = true;
				knockBackResist = 0f;
				value = 0f;
				scale = 1f;
				alpha = 255;
			}
			else if (type == 459)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 50;
				defense = 30;
				lifeMax = 10000;
				HitSound = SoundID.NPCHit56;
				DeathSound = SoundID.NPCDeath60;
				noGravity = true;
				knockBackResist = 0f;
				value = 0f;
				scale = 1f;
				alpha = 255;
				dontCountMe = true;
			}
			else if (type == 455 || type == 456 || type == 457 || type == 458)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 50;
				defense = 30;
				lifeMax = 10000;
				HitSound = SoundID.NPCHit56;
				DeathSound = SoundID.NPCDeath60;
				noGravity = true;
				knockBackResist = 0f;
				value = 0f;
				scale = 1f;
				alpha = 255;
				dontCountMe = true;
			}
			else if (type == 464)
			{
				width = 18;
				height = 20;
				aiStyle = 3;
				damage = 21;
				defense = 5;
				lifeMax = 75;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
			}
			else if (type == 465)
			{
				noGravity = true;
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 31;
				defense = 7;
				lifeMax = 110;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
			}
			else if (type == 470)
			{
				width = 16;
				height = 34;
				aiStyle = 3;
				damage = 21;
				defense = 5;
				lifeMax = 75;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
			}
			else if (type == 473 || type == 474 || type == 475 || type == 476)
			{
				width = 28;
				height = 44;
				aiStyle = 87;
				damage = 90;
				defense = 34;
				lifeMax = 3500;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = 30000f;
				knockBackResist = 0.1f;
				rarity = 5;
			}
			else if (type == 480)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 30;
				defense = 20;
				lifeMax = 400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.15f;
				value = 1000f;
				rarity = 1;
			}
			else if (type == 481)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 10;
				lifeMax = 70;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 300f;
			}
			else if (type == 482)
			{
				width = 28;
				height = 48;
				aiStyle = 3;
				damage = 30;
				defense = 18;
				lifeMax = 110;
				HitSound = SoundID.NPCHit41;
				DeathSound = SoundID.NPCDeath43;
				knockBackResist = 0.35f;
				value = 500f;
			}
			else if (type == 483)
			{
				npcSlots = 0.5f;
				width = 20;
				height = 30;
				aiStyle = 91;
				damage = 24;
				defense = 8;
				lifeMax = 40;
				HitSound = SoundID.NPCHit7;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath6;
				value = 1000f;
			}
			else if (type >= 484 && type <= 487)
			{
				width = 10;
				height = 4;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.1f;
				catchItem = (short)(3191 + type - 484);
				friendly = true;
			}
			else if (type == 488)
			{
				width = 18;
				height = 40;
				aiStyle = 92;
				damage = 0;
				defense = 0;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit15;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0f;
				value = 0f;
				immortal = true;
				netAlways = true;
			}
			else if (type == 489)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 8;
				lifeMax = 75;
				HitSound = SoundID.NPCHit18;
				DeathSound = SoundID.NPCDeath21;
				knockBackResist = 0.4f;
				value = 150f;
			}
			else if (type == 490)
			{
				noGravity = true;
				width = 28;
				height = 30;
				aiStyle = 22;
				damage = 28;
				defense = 14;
				lifeMax = 50;
				HitSound = SoundID.NPCHit19;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath22;
				value = 150f;
			}
			else if (type == 491)
			{
				noGravity = true;
				width = 350;
				height = 120;
				aiStyle = 93;
				damage = 0;
				defense = 100;
				lifeMax = 50;
				HitSound = SoundID.NPCHit19;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath22;
				value = 0f;
				dontTakeDamage = true;
				netAlways = true;
			}
			else if (type == 492)
			{
				lifeMax = 2000;
				defense = 20;
				damage = 30;
				width = 30;
				height = 30;
				aiStyle = 75;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				value = 0f;
				npcSlots = 1f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				hide = true;
				netAlways = true;
			}
			else if (type >= 494 && type <= 495)
			{
				width = 28;
				height = 22;
				aiStyle = 3;
				damage = 28;
				defense = 6;
				lifeMax = 50;
				HitSound = SoundID.NPCHit33;
				DeathSound = SoundID.NPCDeath36;
				value = 120f;
			}
			else if (type >= 496 && type <= 497)
			{
				width = 28;
				height = 22;
				aiStyle = 39;
				damage = 16;
				defense = 12;
				lifeMax = 50;
				HitSound = SoundID.NPCHit38;
				DeathSound = SoundID.NPCDeath41;
				knockBackResist = 0.75f;
				value = 120f;
			}
			else if (type >= 498 && type <= 506)
			{
				width = 24;
				height = 44;
				aiStyle = 3;
				damage = 18;
				defense = 10;
				lifeMax = 65;
				HitSound = SoundID.NPCHit50;
				DeathSound = SoundID.NPCDeath53;
				knockBackResist = 0.45f;
				value = 120f;
			}
			else if (type == 441)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 513)
			{
				npcSlots = 4f;
				width = 22;
				height = 22;
				aiStyle = 6;
				damage = 18;
				defense = 0;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 130f;
			}
			else if (type == 514)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 7;
				defense = 12;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 130f;
				dontCountMe = true;
				npcSlots = 0f;
			}
			else if (type == 515)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 7;
				defense = 14;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 130f;
				dontCountMe = true;
				npcSlots = 0f;
			}
			else if (type == 510)
			{
				npcSlots = 5f;
				width = 34;
				height = 34;
				aiStyle = 6;
				damage = 58;
				defense = 18;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
			}
			else if (type == 511)
			{
				width = 34;
				height = 34;
				aiStyle = 6;
				netAlways = true;
				damage = 54;
				defense = 28;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
				dontCountMe = true;
				npcSlots = 0f;
			}
			else if (type == 512)
			{
				width = 34;
				height = 34;
				aiStyle = 6;
				netAlways = true;
				damage = 50;
				defense = 34;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
				dontCountMe = true;
				npcSlots = 0f;
			}
			else if (type == 508)
			{
				width = 50;
				height = 31;
				aiStyle = 3;
				damage = 38;
				defense = 16;
				lifeMax = 110;
				HitSound = SoundID.NPCHit31;
				DeathSound = SoundID.NPCDeath34;
				knockBackResist = 0.4f;
				value = 175f;
			}
			else if (type == 509)
			{
				width = 40;
				height = 31;
				aiStyle = 44;
				damage = 34;
				defense = 12;
				lifeMax = 90;
				knockBackResist = 0.3f;
				HitSound = SoundID.NPCHit32;
				DeathSound = SoundID.NPCDeath35;
				value = 195f;
			}
			else if (type == 580)
			{
				width = 26;
				height = 26;
				aiStyle = 3;
				damage = 25;
				defense = 10;
				lifeMax = 80;
				HitSound = SoundID.NPCHit31;
				DeathSound = SoundID.NPCDeath34;
				knockBackResist = 0.5f;
				value = 80f;
				npcSlots = 0.8f;
			}
			else if (type == 581)
			{
				width = 30;
				height = 22;
				aiStyle = 44;
				damage = 29;
				defense = 8;
				lifeMax = 60;
				knockBackResist = 0.5f;
				HitSound = SoundID.NPCHit32;
				DeathSound = SoundID.NPCDeath35;
				value = 90f;
				npcSlots = 0.8f;
			}
			else if (type >= 524 && type <= 527)
			{
				width = 24;
				height = 44;
				aiStyle = 3;
				damage = 50;
				defense = 26;
				lifeMax = 180;
				HitSound = SoundID.NPCHit37;
				DeathSound = SoundID.NPCDeath40;
				knockBackResist = 0.6f;
				value = 500f;
				npcSlots = 0.5f;
				switch (type - 524)
				{
				case 1:
					lifeMax += 70;
					defense += 4;
					damage += 10;
					knockBackResist -= 0.1f;
					value += 150f;
					break;
				case 2:
					lifeMax += 40;
					defense += 6;
					damage += 14;
					knockBackResist -= 0.1f;
					value += 150f;
					break;
				case 3:
					lifeMax += 120;
					defense += 6;
					damage += 4;
					knockBackResist -= 0.2f;
					value += 250f;
					break;
				}
			}
			else if (type >= 528 && type <= 529)
			{
				width = 24;
				height = 44;
				aiStyle = 3;
				damage = 52;
				defense = 28;
				lifeMax = 350;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.35f;
				value = 600f;
			}
			else if (type == 530)
			{
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 66;
				defense = 24;
				lifeMax = 320;
				HitSound = SoundID.NPCHit13;
				DeathSound = SoundID.NPCDeath19;
				knockBackResist = 0.5f;
				value = 600f;
				SpawnWithHigherTime(2);
			}
			else if (type == 531)
			{
				noGravity = true;
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 66;
				defense = 24;
				lifeMax = 320;
				HitSound = SoundID.NPCHit13;
				DeathSound = SoundID.NPCDeath19;
				knockBackResist = 0.5f;
				value = 600f;
				SpawnWithHigherTime(2);
			}
			else if (type == 532)
			{
				width = 32;
				height = 31;
				aiStyle = 3;
				damage = 65;
				defense = 34;
				lifeMax = 270;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 800f;
				npcSlots = 0.75f;
			}
			else if (type == 533)
			{
				width = 28;
				height = 62;
				aiStyle = 8;
				damage = 40;
				defense = 20;
				lifeMax = 220;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0f;
				value = 1200f;
				npcSlots = 2f;
			}
			else if (type == 493)
			{
				lifeMax = 20000;
				defense = 20;
				damage = 0;
				width = 130;
				height = 270;
				aiStyle = 94;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				npcSlots = 0f;
			}
			else if (type == 402)
			{
				noTileCollide = true;
				npcSlots = 1f;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 80;
				defense = 10;
				lifeMax = 1200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				knockBackResist = 0f;
				value = 0f;
				scale = 1f;
			}
			else if (type == 405)
			{
				width = 44;
				height = 44;
				aiStyle = 85;
				damage = 120;
				defense = 50;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				noGravity = true;
				npcSlots = 2f;
			}
			else if (type == 406)
			{
				width = 22;
				height = 22;
				aiStyle = 95;
				damage = 70;
				defense = 0;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
				noGravity = true;
			}
			else if (type == 411)
			{
				width = 22;
				height = 56;
				aiStyle = 3;
				damage = 80;
				defense = 34;
				lifeMax = 700;
				HitSound = SoundID.NPCHit6;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
			}
			else if (type == 409)
			{
				width = 34;
				height = 42;
				aiStyle = 3;
				damage = 70;
				defense = 40;
				lifeMax = 800;
				HitSound = SoundID.NPCHit6;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
				npcSlots = 3f;
			}
			else if (type == 410)
			{
				width = 22;
				height = 22;
				aiStyle = 26;
				damage = 80;
				defense = 10;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0.3f;
				npcSlots = 0.5f;
			}
			else if (type == 407)
			{
				width = 40;
				height = 60;
				aiStyle = 96;
				damage = 70;
				defense = 38;
				lifeMax = 1500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				knockBackResist = 0.03f;
				npcSlots = 3f;
			}
			else if (type == 507)
			{
				lifeMax = 20000;
				defense = 20;
				damage = 0;
				width = 130;
				height = 270;
				aiStyle = 94;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				npcSlots = 0f;
			}
			else if (type == 423)
			{
				width = 50;
				height = 44;
				aiStyle = 26;
				damage = 90;
				defense = 46;
				lifeMax = 850;
				HitSound = SoundID.NPCHit6;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.2f;
				npcSlots = 1f;
			}
			else if (type == 421)
			{
				width = 44;
				height = 44;
				aiStyle = 85;
				damage = 70;
				defense = 34;
				lifeMax = 330;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				noGravity = true;
				npcSlots = 1f;
			}
			else if (type == 424)
			{
				width = 22;
				height = 56;
				aiStyle = 3;
				damage = 80;
				defense = 30;
				lifeMax = 700;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0.6f;
				npcSlots = 2f;
			}
			else if (type == 420)
			{
				width = 40;
				height = 40;
				aiStyle = 97;
				damage = 75;
				defense = 20;
				lifeMax = 1300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 3f;
			}
			else if (type == 422)
			{
				lifeMax = 20000;
				defense = 20;
				damage = 0;
				width = 130;
				height = 270;
				aiStyle = 94;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				npcSlots = 0f;
			}
			else if (type == 425)
			{
				width = 30;
				height = 56;
				aiStyle = 3;
				damage = 100;
				defense = 40;
				lifeMax = 800;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.4f;
			}
			else if (type == 429)
			{
				width = 22;
				height = 56;
				aiStyle = 3;
				damage = 90;
				defense = 34;
				lifeMax = 700;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0.6f;
				npcSlots = 2f;
			}
			else if (type == 428)
			{
				width = 24;
				height = 26;
				aiStyle = 3;
				damage = 50;
				defense = 6;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
			}
			else if (type == 427)
			{
				width = 40;
				height = 28;
				aiStyle = 3;
				damage = 75;
				defense = 20;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				npcSlots = 0.5f;
			}
			else if (type == 426)
			{
				width = 50;
				height = 62;
				aiStyle = 3;
				damage = 100;
				defense = 44;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.3f;
			}
			else if (type == 517)
			{
				lifeMax = 20000;
				defense = 20;
				damage = 0;
				width = 130;
				height = 270;
				aiStyle = 94;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				npcSlots = 0f;
			}
			else if (type == 412)
			{
				width = 20;
				height = 20;
				aiStyle = 6;
				netAlways = true;
				damage = 120;
				defense = 1000;
				lifeMax = 10000;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath22;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				dontTakeDamage = true;
				npcSlots = 2f;
			}
			else if (type == 413)
			{
				width = 20;
				height = 20;
				aiStyle = 6;
				netAlways = true;
				damage = 80;
				defense = 1000;
				lifeMax = 10000;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath22;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				dontCountMe = true;
				dontTakeDamage = true;
				npcSlots = 0f;
			}
			else if (type == 414)
			{
				width = 20;
				height = 20;
				aiStyle = 6;
				netAlways = true;
				damage = 50;
				defense = 0;
				lifeMax = 10000;
				HitSound = SoundID.NPCHit8;
				DeathSound = SoundID.NPCDeath22;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				dontCountMe = true;
				takenDamageMultiplier = 10f;
				npcSlots = 0f;
			}
			else if (type == 415)
			{
				lifeMax = 800;
				defense = 32;
				damage = 55;
				width = 60;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.2f;
			}
			else if (type == 416)
			{
				damage = 80;
				defense = 28;
				lifeMax = 800;
				width = 18;
				height = 40;
				aiStyle = 75;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.2f;
			}
			else if (type == 518)
			{
				lifeMax = 1000;
				defense = 28;
				damage = 80;
				width = 22;
				height = 56;
				aiStyle = 3;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
			}
			else if (type == 417)
			{
				npcSlots = 2f;
				width = 46;
				height = 52;
				aiStyle = 39;
				damage = 80;
				defense = 34;
				lifeMax = 700;
				HitSound = SoundID.NPCHit7;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath5;
			}
			else if (type == 418)
			{
				width = 38;
				height = 38;
				aiStyle = 74;
				damage = 70;
				defense = 26;
				lifeMax = 600;
				HitSound = SoundID.NPCHit3;
				DeathSound = SoundID.NPCDeath3;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.2f;
			}
			else if (type == 419)
			{
				lifeMax = 800;
				defense = 30;
				damage = 90;
				width = 22;
				height = 56;
				aiStyle = 3;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
			}
			else if (type == 516)
			{
				width = 26;
				height = 26;
				aiStyle = 9;
				damage = 100;
				defense = 0;
				lifeMax = 1;
				HitSound = null;
				DeathSound = null;
				noGravity = true;
				noTileCollide = false;
				alpha = 0;
				knockBackResist = 0f;
			}
			else if (type == 519)
			{
				width = 26;
				height = 26;
				aiStyle = 99;
				damage = 120;
				defense = 0;
				lifeMax = 1;
				HitSound = null;
				DeathSound = null;
				noGravity = true;
				noTileCollide = false;
				alpha = 0;
				knockBackResist = 0f;
			}
			else if (type == 162)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 65;
				defense = 18;
				lifeMax = 350;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = 600f;
			}
			else if (type == 166)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 26;
				lifeMax = 450;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.2f;
				value = 1000f;
			}
			else if (type == 253)
			{
				noGravity = true;
				noTileCollide = true;
				width = 24;
				height = 44;
				aiStyle = 22;
				damage = 80;
				defense = 22;
				lifeMax = 700;
				HitSound = SoundID.NPCHit49;
				DeathSound = SoundID.NPCDeath51;
				alpha = 100;
				value = 1500f;
				knockBackResist = 0.6f;
			}
			else if (type == 158)
			{
				npcSlots = 2f;
				width = 22;
				height = 22;
				aiStyle = 14;
				damage = 60;
				defense = 32;
				lifeMax = 750;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.75f;
				DeathSound = SoundID.NPCDeath6;
				value = 5000f;
			}
			else if (type == 159)
			{
				npcSlots = 2f;
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 80;
				defense = 24;
				lifeMax = 750;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.4f;
				value = 5000f;
			}
			else if (type == 460)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 30;
				lifeMax = 700;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath17;
				knockBackResist = 0.25f;
				value = 1000f;
			}
			else if (type == 461)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 22;
				lifeMax = 400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 1000f;
			}
			else if (type == 462)
			{
				width = 20;
				height = 24;
				aiStyle = 3;
				damage = 70;
				defense = 14;
				lifeMax = 270;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.7f;
				value = 600f;
				npcSlots = 0.5f;
			}
			else if (type == 463)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 100;
				defense = 34;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.1f;
				value = 3000f;
			}
			else if (type == 466)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 40;
				lifeMax = 550;
				HitSound = SoundID.NPCHit48;
				DeathSound = SoundID.NPCDeath50;
				knockBackResist = 0.5f;
				value = 1500f;
			}
			else if (type == 467)
			{
				width = 22;
				height = 22;
				aiStyle = 85;
				damage = 100;
				defense = 80;
				lifeMax = 350;
				HitSound = SoundID.NPCHit34;
				DeathSound = SoundID.NPCDeath37;
				value = 900f;
				knockBackResist = 0.7f;
				noGravity = true;
			}
			else if (type == 469)
			{
				width = 38;
				height = 26;
				aiStyle = 3;
				damage = 68;
				defense = 28;
				lifeMax = 600;
				HitSound = SoundID.NPCHit47;
				DeathSound = SoundID.NPCDeath49;
				knockBackResist = 0.35f;
				value = 1300f;
			}
			else if (type == 468)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 65;
				defense = 24;
				lifeMax = 500;
				HitSound = SoundID.NPCHit35;
				DeathSound = SoundID.NPCDeath38;
				knockBackResist = 0.6f;
				value = 1300f;
			}
			else if (type == 477)
			{
				noGravity = true;
				netAlways = true;
				width = 80;
				height = 50;
				aiStyle = 88;
				damage = 80;
				defense = 30;
				lifeMax = 6000;
				HitSound = SoundID.NPCHit44;
				DeathSound = SoundID.NPCDeath46;
				value = 50000f;
				knockBackResist = 0.2f;
				rarity = 1;
			}
			else if (type == 478)
			{
				width = 34;
				height = 34;
				aiStyle = 89;
				damage = 0;
				defense = 30;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				knockBackResist = 0.7f;
				npcSlots = 0f;
			}
			else if (type == 479)
			{
				width = 46;
				height = 30;
				aiStyle = 90;
				damage = 50;
				defense = 14;
				lifeMax = 700;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 0f;
				npcSlots = 0.1f;
			}
			else if (type == 26)
			{
				scale = 0.9f;
				width = 18;
				height = 38;
				aiStyle = 3;
				damage = 12;
				defense = 4;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.8f;
				value = 100f;
			}
			else if (type == 27)
			{
				scale = 0.95f;
				width = 18;
				height = 38;
				aiStyle = 3;
				damage = 20;
				defense = 6;
				lifeMax = 80;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.7f;
				value = 200f;
			}
			else if (type == 28)
			{
				scale = 1.1f;
				width = 18;
				height = 38;
				aiStyle = 3;
				damage = 25;
				defense = 8;
				lifeMax = 110;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				value = 150f;
			}
			else if (type == 29)
			{
				width = 18;
				height = 38;
				aiStyle = 8;
				damage = 20;
				defense = 2;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.6f;
				value = 200f;
			}
			else if (type == 30)
			{
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 20;
				defense = 0;
				lifeMax = 1;
				HitSound = SoundID.NPCHit3;
				DeathSound = SoundID.NPCDeath3;
				noGravity = true;
				noTileCollide = true;
				alpha = 100;
				knockBackResist = 0f;
			}
			else if (type == 111)
			{
				scale = 0.95f;
				width = 18;
				height = 38;
				aiStyle = 3;
				damage = 20;
				defense = 6;
				lifeMax = 80;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.7f;
				value = 200f;
			}
			else if (type == 471)
			{
				width = 18;
				height = 38;
				aiStyle = 3;
				damage = 80;
				defense = 26;
				lifeMax = 2000;
				HitSound = SoundID.NPCHit40;
				DeathSound = SoundID.NPCDeath42;
				knockBackResist = 0.15f;
				value = 5000f;
				rarity = 1;
			}
			else if (type == 472)
			{
				width = 40;
				height = 24;
				aiStyle = 86;
				damage = 50;
				defense = 18;
				lifeMax = 180;
				HitSound = SoundID.NPCHit52;
				DeathSound = SoundID.NPCDeath55;
				knockBackResist = 0f;
				value = 0f;
				npcSlots = 0.1f;
			}
			else if (type == 520)
			{
				width = 34;
				height = 110;
				aiStyle = 3;
				damage = 60;
				defense = 40;
				lifeMax = 2000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				knockBackResist = 0f;
			}
			else if (type == 521)
			{
				width = 60;
				height = 60;
				aiStyle = 86;
				damage = 90;
				defense = 30;
				lifeMax = 2000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0f;
			}
			else if (type == 522)
			{
				width = 26;
				height = 26;
				aiStyle = 100;
				damage = 120;
				defense = 0;
				lifeMax = 400;
				HitSound = null;
				DeathSound = null;
				noGravity = true;
				noTileCollide = true;
				alpha = 0;
				knockBackResist = 0f;
			}
			else if (type == 523)
			{
				width = 42;
				height = 42;
				aiStyle = 101;
				damage = 30;
				defense = 0;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				noGravity = true;
				noTileCollide = true;
				alpha = 0;
				knockBackResist = 0f;
				chaseable = false;
				alpha = 255;
				canGhostHeal = false;
			}
			else if (type == 534)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 20;
				lifeMax = 400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 0f;
				lavaImmune = true;
				netAlways = true;
				rarity = 2;
			}
			else if (type == 535)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 14;
				defense = 5;
				lifeMax = 50;
				scale = 1.1f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 0;
				value = 40f;
			}
			else if (type == 536)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 8;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 1000f;
				rarity = 2;
			}
			else if (type == 537)
			{
				npcSlots = 2f;
				width = 30;
				height = 24;
				aiStyle = 1;
				damage = 15;
				defense = 5;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 50;
				color = new Color(255, 250, 0, 0) * 0.2f;
				value = 75f;
				knockBackResist = 0.7f;
			}
			else if (type == 538)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 3563;
			}
			else if (type == 539)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 3564;
				rarity = 3;
			}
			else if (type == 541)
			{
				width = 30;
				height = 76;
				aiStyle = 102;
				damage = 40;
				defense = 30;
				lifeMax = 5000;
				HitSound = SoundID.NPCHit23;
				DeathSound = SoundID.NPCDeath39;
				knockBackResist = 0.05f;
				value = Item.buyPrice(0, 1, 50);
				rarity = 2;
			}
			else if (type == 542)
			{
				noGravity = true;
				width = 100;
				height = 24;
				aiStyle = 103;
				damage = 50;
				defense = 20;
				lifeMax = 360;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 400f;
				knockBackResist = 0.9f;
				behindTiles = true;
			}
			else if (type == 543)
			{
				noGravity = true;
				width = 100;
				height = 24;
				aiStyle = 103;
				damage = 60;
				defense = 24;
				lifeMax = 380;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 400f;
				knockBackResist = 0.8f;
				behindTiles = true;
			}
			else if (type == 544)
			{
				noGravity = true;
				width = 100;
				height = 24;
				aiStyle = 103;
				damage = 64;
				defense = 22;
				lifeMax = 400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 400f;
				knockBackResist = 0.8f;
				behindTiles = true;
			}
			else if (type == 545)
			{
				noGravity = true;
				width = 100;
				height = 24;
				aiStyle = 103;
				damage = 54;
				defense = 26;
				lifeMax = 450;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 400f;
				knockBackResist = 0.7f;
				behindTiles = true;
			}
			else if (type == 546)
			{
				width = 30;
				height = 30;
				aiStyle = 26;
				damage = 30;
				defense = 6;
				lifeMax = 50;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath15;
				knockBackResist = 0.8f;
				value = 100f;
			}
			else if (type == 547)
			{
				width = 16;
				height = 16;
				aiStyle = 104;
				defense = 10;
				lifeMax = 10;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath15;
				knockBackResist = 1f;
				noGravity = true;
				noTileCollide = true;
			}
			else if (type == 548)
			{
				width = 40;
				height = 40;
				aiStyle = 105;
				defense = 14;
				lifeMax = 1000;
				HitSound = SoundID.DD2_CrystalCartImpact;
				DeathSound = SoundID.NPCDeath15;
				knockBackResist = 0f;
				friendly = true;
				npcSlots = 0f;
				hide = true;
				if (Main.hardMode && downedMechBossAny)
				{
					defense = 18;
					lifeMax = 3000;
				}
				if (downedGolemBoss && Main.hardMode)
				{
					defense = 20;
					lifeMax = 5000;
				}
				if (Main.masterMode)
				{
					lifeMax *= 3;
				}
				else if (Main.expertMode)
				{
					lifeMax *= 2;
				}
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 549)
			{
				lifeMax = 5;
				defense = 20;
				damage = 0;
				width = 78;
				height = 130;
				aiStyle = 106;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				npcSlots = 0f;
				behindTiles = true;
				dontTakeDamage = true;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 552)
			{
				lifeMax = 30;
				defense = 14;
				damage = 18;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_GoblinHurt;
				DeathSound = SoundID.DD2_GoblinDeath;
				knockBackResist = 0.2f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 553)
			{
				lifeMax = 170;
				defense = 20;
				damage = 46;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_GoblinHurt;
				DeathSound = SoundID.DD2_GoblinDeath;
				knockBackResist = 0.2f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 554)
			{
				lifeMax = 560;
				defense = 28;
				damage = 70;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_GoblinHurt;
				DeathSound = SoundID.DD2_GoblinDeath;
				knockBackResist = 0.15f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 561)
			{
				lifeMax = 60;
				defense = 18;
				damage = 30;
				width = 26;
				height = 52;
				aiStyle = 107;
				HitSound = SoundID.DD2_JavelinThrowersHurt;
				DeathSound = SoundID.DD2_JavelinThrowersDeath;
				knockBackResist = 0.1f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 562)
			{
				lifeMax = 300;
				defense = 28;
				damage = 60;
				width = 26;
				height = 52;
				aiStyle = 107;
				HitSound = SoundID.DD2_JavelinThrowersHurt;
				DeathSound = SoundID.DD2_JavelinThrowersDeath;
				knockBackResist = 0.1f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 563)
			{
				lifeMax = 1000;
				defense = 38;
				damage = 80;
				width = 26;
				height = 52;
				aiStyle = 107;
				HitSound = SoundID.DD2_JavelinThrowersHurt;
				DeathSound = SoundID.DD2_JavelinThrowersDeath;
				knockBackResist = 0.05f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 555)
			{
				lifeMax = 50;
				defense = 16;
				damage = 26;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_GoblinBomberHurt;
				DeathSound = SoundID.DD2_GoblinBomberDeath;
				knockBackResist = 0.2f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 556)
			{
				lifeMax = 200;
				defense = 26;
				damage = 55;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_GoblinBomberHurt;
				DeathSound = SoundID.DD2_GoblinBomberDeath;
				knockBackResist = 0.2f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 557)
			{
				lifeMax = 700;
				defense = 34;
				damage = 75;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_GoblinBomberHurt;
				DeathSound = SoundID.DD2_GoblinBomberDeath;
				knockBackResist = 0.15f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 558)
			{
				width = 38;
				height = 38;
				aiStyle = 108;
				damage = 30;
				defense = 4;
				lifeMax = 60;
				HitSound = SoundID.DD2_WyvernHurt;
				DeathSound = SoundID.DD2_WyvernDeath;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.2f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 559)
			{
				width = 38;
				height = 38;
				aiStyle = 108;
				damage = 75;
				defense = 16;
				lifeMax = 180;
				HitSound = SoundID.DD2_WyvernHurt;
				DeathSound = SoundID.DD2_WyvernDeath;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.2f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 560)
			{
				width = 38;
				height = 38;
				aiStyle = 108;
				damage = 100;
				defense = 30;
				lifeMax = 600;
				HitSound = SoundID.DD2_WyvernHurt;
				DeathSound = SoundID.DD2_WyvernDeath;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.05f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 550)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 576)
			{
				lifeMax = 5000;
				defense = 34;
				damage = 70;
				width = 96;
				height = 124;
				aiStyle = 107;
				HitSound = SoundID.DD2_OgreHurt;
				DeathSound = SoundID.DD2_OgreDeath;
				knockBackResist = 0f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 577)
			{
				lifeMax = 13000;
				defense = 40;
				damage = 90;
				width = 96;
				height = 124;
				aiStyle = 107;
				HitSound = SoundID.DD2_OgreHurt;
				DeathSound = SoundID.DD2_OgreDeath;
				knockBackResist = 0f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 568)
			{
				lifeMax = 500;
				defense = 30;
				damage = 50;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_WitherBeastHurt;
				DeathSound = SoundID.DD2_WitherBeastDeath;
				knockBackResist = 0.15f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 569)
			{
				lifeMax = 1400;
				defense = 40;
				damage = 80;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_WitherBeastHurt;
				DeathSound = SoundID.DD2_WitherBeastDeath;
				knockBackResist = 0.05f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 566)
			{
				lifeMax = 25;
				defense = 12;
				damage = 18;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_SkeletonHurt;
				DeathSound = SoundID.DD2_SkeletonDeath;
				knockBackResist = 0.3f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 567)
			{
				lifeMax = 480;
				defense = 22;
				damage = 70;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_SkeletonHurt;
				DeathSound = SoundID.DD2_SkeletonDeath;
				knockBackResist = 0.2f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 572)
			{
				lifeMax = 260;
				defense = 26;
				damage = 60;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_KoboldHurt;
				DeathSound = SoundID.DD2_KoboldDeath;
				knockBackResist = 0.2f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 573)
			{
				lifeMax = 800;
				defense = 32;
				damage = 80;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_KoboldHurt;
				DeathSound = SoundID.DD2_KoboldDeath;
				knockBackResist = 0.1f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 570)
			{
				lifeMax = 900;
				defense = 30;
				damage = 60;
				width = 42;
				height = 58;
				aiStyle = 107;
				HitSound = SoundID.DD2_DrakinHurt;
				DeathSound = SoundID.DD2_DrakinDeath;
				knockBackResist = 0f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 571)
			{
				lifeMax = 3000;
				defense = 40;
				damage = 90;
				width = 42;
				height = 58;
				aiStyle = 107;
				HitSound = SoundID.DD2_DrakinHurt;
				DeathSound = SoundID.DD2_DrakinDeath;
				knockBackResist = 0f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 564)
			{
				lifeMax = 800;
				defense = 18;
				damage = 40;
				width = 34;
				height = 62;
				aiStyle = 109;
				HitSound = SoundID.DD2_DarkMageHurt;
				DeathSound = SoundID.DD2_DarkMageDeath;
				knockBackResist = 0f;
				value = 0f;
				npcSlots = 0f;
				noGravity = true;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 565)
			{
				lifeMax = 4000;
				defense = 38;
				damage = 90;
				width = 34;
				height = 62;
				aiStyle = 109;
				HitSound = SoundID.DD2_DarkMageHurt;
				DeathSound = SoundID.DD2_DarkMageDeath;
				knockBackResist = 0f;
				value = 0f;
				npcSlots = 0f;
				noGravity = true;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 574)
			{
				width = 38;
				height = 38;
				aiStyle = 108;
				damage = 50;
				defense = 16;
				lifeMax = 170;
				HitSound = SoundID.DD2_KoboldFlyerHurt;
				DeathSound = SoundID.DD2_KoboldFlyerDeath;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.4f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 575)
			{
				width = 38;
				height = 38;
				aiStyle = 108;
				damage = 80;
				defense = 32;
				lifeMax = 580;
				HitSound = SoundID.DD2_KoboldFlyerHurt;
				DeathSound = SoundID.DD2_KoboldFlyerDeath;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.25f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 551)
			{
				damage = 80;
				defense = 38;
				lifeMax = 50000;
				width = 190;
				height = 90;
				aiStyle = 110;
				HitSound = SoundID.DD2_BetsyHurt;
				DeathSound = SoundID.DD2_BetsyDeath;
				knockBackResist = 0f;
				value = 0f;
				noGravity = true;
				noTileCollide = true;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 578)
			{
				width = 30;
				height = 24;
				aiStyle = 111;
				damage = 80;
				defense = 36;
				lifeMax = 500;
				HitSound = SoundID.DD2_LightningBugHurt;
				DeathSound = SoundID.DD2_LightningBugDeath;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.8f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 579)
			{
				friendly = true;
				width = 34;
				height = 8;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				scale = 1f;
				rarity = 1;
			}
			else if (type == 582)
			{
				width = 18;
				height = 18;
				aiStyle = 3;
				damage = 10;
				defense = 2;
				lifeMax = 30;
				HitSound = SoundID.NPCHit31;
				DeathSound = SoundID.NPCDeath34;
				knockBackResist = 0.75f;
				value = 40f;
				npcSlots = 0.4f;
			}
			else if (type == 583 || type == 584 || type == 585)
			{
				width = 18;
				height = 20;
				aiStyle = 112;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				switch (type)
				{
				case 583:
					catchItem = 4068;
					break;
				case 584:
					catchItem = 4069;
					break;
				case 585:
					catchItem = 4070;
					break;
				}
				noGravity = true;
				rarity = 2;
			}
			else if (type == 586)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 20;
				lifeMax = 400;
				HitSound = SoundID.NPCHit18;
				DeathSound = SoundID.NPCDeath21;
				knockBackResist = 0f;
				value = 1000f;
				alpha = 255;
				rarity = 1;
			}
			else if (type == 587)
			{
				width = 32;
				height = 18;
				aiStyle = 44;
				damage = 35;
				defense = 18;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath1;
				value = 1000f;
				alpha = 255;
				rarity = 1;
			}
			else if (type == 588)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 589)
			{
				friendly = true;
				width = 18;
				height = 34;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				rarity = 1;
			}
			else if (type == 590 || type == 591)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 60f;
			}
			else if (type == 592)
			{
				noGravity = true;
				width = 20;
				height = 18;
				aiStyle = 16;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				catchItem = 4274;
				rarity = 3;
			}
			else if (type == 593)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 4274;
				rarity = 3;
			}
			else if (type == 594)
			{
				width = 20;
				height = 20;
				aiStyle = 113;
				damage = 0;
				defense = 0;
				knockBackResist = 0.3f;
				lifeMax = 1;
				DeathSound = SoundID.NPCDeath63;
				value = 0f;
				noGravity = true;
			}
			else if (type >= 595 && type <= 601)
			{
				timeLeft *= 3;
				width = 10;
				height = 10;
				aiStyle = 114;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				noGravity = true;
				int num2 = type;
				if (num2 == 601)
				{
					rarity = 3;
				}
				catchItem = (short)(type - 595 + 4334);
			}
			else if (type == 602)
			{
				width = 22;
				height = 26;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 4359;
			}
			else if (type == 603)
			{
				width = 28;
				height = 22;
				aiStyle = 68;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 4359;
			}
			else if (type == 604 || type == 605)
			{
				width = 10;
				height = 10;
				aiStyle = 115;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				noGravity = true;
				int num2 = type;
				if (num2 == 605)
				{
					rarity = 3;
				}
				catchItem = (short)(type - 604 + 4361);
			}
			else if (type == 606)
			{
				width = 10;
				height = 4;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.1f;
				catchItem = 4363;
				friendly = true;
			}
			else if (type == 607)
			{
				noGravity = true;
				width = 20;
				height = 18;
				aiStyle = 16;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				catchItem = 4373;
			}
			else if (type == 608)
			{
				width = 22;
				height = 26;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 4374;
			}
			else if (type == 609)
			{
				width = 28;
				height = 22;
				aiStyle = 68;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 4374;
			}
			else if (type == 610)
			{
				width = 14;
				height = 12;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath4;
				npcSlots = 0.25f;
				catchItem = 4375;
			}
			else if (type == 611)
			{
				width = 18;
				height = 34;
				aiStyle = 24;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 4395;
				npcSlots = 0.4f;
			}
			else if (type == 612 || type == 613)
			{
				width = 10;
				height = 10;
				aiStyle = 116;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				int num2 = type;
				if (num2 == 613)
				{
					rarity = 3;
				}
				catchItem = (short)(type - 612 + 4418);
				waterMovementSpeed = 1f;
				lavaMovementSpeed = 1f;
				honeyMovementSpeed = 1f;
			}
			else if (type == 614)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = null;
				catchItem = 1338;
			}
			else if (type == 615)
			{
				noGravity = true;
				width = 20;
				height = 18;
				aiStyle = 16;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 616 || type == 617)
			{
				width = 22;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				catchItem = (short)(type - 616 + 4464);
			}
			else if (type == 618)
			{
				noGravity = true;
				width = 100;
				height = 100;
				aiStyle = 117;
				damage = 55;
				defense = 24;
				lifeMax = 7000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				value = Item.buyPrice(0, 2);
				noTileCollide = true;
				rarity = 1;
			}
			else if (type == 619)
			{
				npcSlots = 1f;
				width = 44;
				height = 44;
				aiStyle = 5;
				damage = 60;
				defense = 16;
				lifeMax = 750;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				knockBackResist = 0f;
				value = 500f;
				alpha = 255;
			}
			else if (type == 620)
			{
				lifeMax = 5000;
				defense = 30;
				damage = 70;
				width = 34;
				height = 58;
				aiStyle = 107;
				HitSound = SoundID.DD2_DrakinHurt;
				DeathSound = SoundID.DD2_DrakinDeath;
				knockBackResist = 0f;
				value = Item.buyPrice(0, 0, 75);
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
				alpha = 255;
				rarity = 1;
			}
			else if (type == 621)
			{
				npcSlots = 5f;
				width = 28;
				height = 28;
				aiStyle = 6;
				damage = 90;
				defense = 0;
				lifeMax = 6000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = Item.buyPrice(0, 0, 75);
				alpha = 255;
				rarity = 1;
			}
			else if (type == 622)
			{
				width = 28;
				height = 28;
				aiStyle = 6;
				netAlways = true;
				damage = 60;
				defense = 30;
				lifeMax = 6000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				dontCountMe = true;
				npcSlots = 0f;
				alpha = 255;
			}
			else if (type == 623)
			{
				width = 28;
				height = 28;
				aiStyle = 6;
				netAlways = true;
				damage = 50;
				defense = 40;
				lifeMax = 6000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				dontCountMe = true;
				npcSlots = 0f;
				alpha = 255;
			}
			else if (type == 624)
			{
				width = 14;
				height = 30;
				aiStyle = 3;
				damage = 10;
				defense = 0;
				lifeMax = 25;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 1f;
				rarity = 1;
			}
			else if (type == 625)
			{
				width = 22;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 626 || type == 627)
			{
				width = 16;
				height = 20;
				aiStyle = 118;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 1f;
				int num2 = type;
				if (num2 == 627)
				{
					rarity = 3;
				}
				catchItem = 4480;
				if (type == 627)
				{
					catchItem = 4482;
				}
			}
			else if (type == 628)
			{
				width = 22;
				height = 40;
				aiStyle = 119;
				damage = 15;
				defense = 0;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				value = 50f;
			}
			else if (type == 629)
			{
				width = 24;
				height = 24;
				aiStyle = 25;
				damage = 80;
				defense = 30;
				lifeMax = 500;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = 100000f;
				knockBackResist = 0.3f;
				rarity = 4;
				coldDamage = true;
				if (Main.remixWorld && !Main.hardMode)
				{
					damage = 30;
					defense = 16;
					lifeMax = 270;
					value = Item.buyPrice(0, 2);
				}
			}
			else if (type == 630)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 18;
				lifeMax = 180;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				value = 700f;
			}
			else if (type == 631)
			{
				width = 36;
				height = 48;
				scale = 1.1f;
				aiStyle = 3;
				damage = 85;
				defense = 35;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit41;
				DeathSound = SoundID.NPCDeath43;
				knockBackResist = 0.1f;
				value = 25000f;
			}
			else if (type == 632)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 60f;
			}
			else if (type == 633)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 634)
			{
				npcSlots = 0.5f;
				width = 22;
				height = 18;
				aiStyle = 14;
				damage = 13;
				defense = 2;
				lifeMax = 16;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath4;
				value = 90f;
			}
			else if (type == 635)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 100f;
			}
			else if (type == 636)
			{
				noGravity = true;
				width = 100;
				height = 100;
				aiStyle = 120;
				damage = 80;
				defense = 50;
				lifeMax = 70000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath65;
				knockBackResist = 0f;
				value = 250000f;
				noTileCollide = true;
				boss = true;
				Opacity = 0f;
				dontTakeDamage = true;
				npcSlots = 16f;
			}
			else if (type == 637 || type == 638)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 28;
				if (type == 637)
				{
					height = 20;
				}
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				housingCategory = 1;
			}
			else if (type >= 639 && type <= 645)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = (short)(4831 + (type - 639));
			}
			else if (type >= 646 && type <= 652)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = (short)(4838 + (type - 646));
			}
			else if (type == 653)
			{
				width = 10;
				height = 10;
				aiStyle = 65;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				noGravity = true;
				lavaImmune = true;
				catchItem = 4845;
			}
			else if (type == 654)
			{
				width = 10;
				height = 10;
				aiStyle = 64;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.2f;
				noGravity = true;
				lavaImmune = true;
				catchItem = 4847;
			}
			else if (type == 655)
			{
				width = 14;
				height = 14;
				aiStyle = 67;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.5f;
				noGravity = true;
				lavaImmune = true;
				catchItem = 4849;
			}
			else if (type == 656)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				housingCategory = 1;
			}
			else if (type == 657)
			{
				width = 114;
				height = 100;
				aiStyle = 121;
				damage = 60;
				defense = 26;
				lifeMax = 18000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath64;
				lavaImmune = true;
				knockBackResist = 0f;
				value = 60000f;
				boss = true;
				npcSlots = 5f;
			}
			else if (type == 658 || type == 659)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 40;
				defense = 35;
				lifeMax = 150;
				scale = 1f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
			}
			else if (type == 660)
			{
				width = 40;
				height = 30;
				aiStyle = 14;
				damage = 50;
				defense = 30;
				lifeMax = 120;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.8f;
				scale = 1f;
			}
			else if (type == 661)
			{
				width = 10;
				height = 10;
				aiStyle = 65;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				noGravity = true;
				lavaImmune = true;
				catchItem = 4961;
				rarity = 4;
			}
			else if (type == 662)
			{
				width = 18;
				height = 40;
				aiStyle = 122;
				damage = 75;
				defense = 22;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.2f;
				value = 0f;
				noTileCollide = true;
				lavaImmune = true;
				trapImmune = true;
				noGravity = true;
			}
			else if (type == 663)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
			}
			else if (type == 664)
			{
				lifeMax = 20;
				boss = true;
			}
			else if (type == 665)
			{
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 20;
				defense = 0;
				lifeMax = 1;
				HitSound = SoundID.NPCHit3;
				DeathSound = SoundID.NPCDeath3;
				noGravity = true;
				noTileCollide = true;
				alpha = 100;
				knockBackResist = 0f;
			}
			else if (type == 666)
			{
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 65;
				defense = 0;
				lifeMax = 1;
				HitSound = null;
				DeathSound = SoundID.NPCDeath9;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				scale = 0.9f;
				alpha = 80;
			}
			else if (type == 667)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 5;
				defense = 5;
				lifeMax = 300;
				knockBackResist *= 1.4f;
				rarity = 2;
				scale = 1f;
				value = Item.buyPrice(0, 15);
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
			}
			else if (type == 668)
			{
				width = 60;
				height = 154;
				aiStyle = 123;
				damage = 20;
				defense = 10;
				lifeMax = 7000;
				HitSound = SoundID.DeerclopsHit;
				DeathSound = SoundID.DeerclopsDeath;
				knockBackResist = 0f;
				boss = true;
				noGravity = true;
				noTileCollide = true;
				value = Item.buyPrice(0, 5);
				npcSlots = 10f;
				coldDamage = true;
			}
			else if (type == 669)
			{
				width = 10;
				height = 10;
				aiStyle = 115;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				noGravity = true;
				catchItem = 5132;
			}
			else if (type == 670)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				housingCategory = 1;
			}
			else if (type == 671)
			{
				width = 14;
				height = 14;
				aiStyle = 24;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 5212;
				npcSlots = 1f;
			}
			else if (type == 672)
			{
				width = 14;
				height = 14;
				aiStyle = 24;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 5300;
				npcSlots = 1f;
			}
			else if (type == 673)
			{
				width = 14;
				height = 14;
				aiStyle = 24;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 5311;
				npcSlots = 1f;
			}
			else if (type == 674)
			{
				width = 14;
				height = 14;
				aiStyle = 24;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 5312;
				npcSlots = 1f;
			}
			else if (type == 675)
			{
				width = 14;
				height = 14;
				aiStyle = 24;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 5313;
				npcSlots = 1f;
			}
			else if (type == 676)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 20;
				defense = 5;
				lifeMax = 80;
				scale = 1f;
				value = Item.buyPrice(0, 0, 1, 50);
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
			}
			else if (type == 677)
			{
				width = 10;
				height = 10;
				aiStyle = 64;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.2f;
				noGravity = true;
				catchItem = 5350;
				noTileCollide = true;
			}
			else if (type == 678 || type == 679 || type == 680 || type == 681 || type == 682 || type == 683 || type == 684)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				housingCategory = 1;
			}
			else if (type == 685)
			{
				width = 30;
				height = 28;
				aiStyle = 1;
				damage = 0;
				defense = 10;
				knockBackResist = 0.3f;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				value = 0f;
				rarity = 2;
				friendly = true;
			}
			else if (type == 686)
			{
				width = 20;
				height = 20;
				aiStyle = 125;
				damage = 0;
				defense = 0;
				knockBackResist = 0.3f;
				lifeMax = 1;
				DeathSound = SoundID.NPCDeath63;
				value = 0f;
				rarity = 2;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamageFromHostiles = true;
			}
			else if (type == 687)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				rarity = 2;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				catchItem = 2121;
			}
			if (Main.dedServ)
			{
				frame = default(Rectangle);
			}
			else if (TextureAssets.Npc[type] != null && TextureAssets.Npc[type].get_IsLoaded())
			{
				frame = new Rectangle(0, 0, TextureAssets.Npc[type].Width(), TextureAssets.Npc[type].Height() / Main.npcFrameCount[type]);
			}
			else
			{
				setFrameSize = true;
			}
			if (spawnparams.sizeScaleOverride.HasValue)
			{
				int num3 = (int)((float)width * scale);
				int num4 = (int)((float)height * scale);
				position.X += num3 / 2;
				position.Y += num4;
				scale = spawnparams.sizeScaleOverride.Value;
				width = (int)((float)width * scale);
				height = (int)((float)height * scale);
				if (height == 16 || height == 32)
				{
					height++;
				}
				position.X -= width / 2;
				position.Y -= height;
			}
			else
			{
				width = (int)((float)width * scale);
				height = (int)((float)height * scale);
			}
			life = lifeMax;
			defDamage = damage;
			defDefense = defense;
			netID = type;
			if (NPCID.Sets.DebuffImmunitySets.TryGetValue(type, out var nPCDebuffImmunityData) && nPCDebuffImmunityData != null)
			{
				nPCDebuffImmunityData.ApplyToNPC(this);
			}
			else
			{
				for (int num5 = 0; num5 < buffImmune.Length; num5++)
				{
					buffImmune[num5] = false;
				}
			}
			buffImmune[353] = NPCID.Sets.ShimmerImmunity[type];
			if (Main.getGoodWorld)
			{
				getGoodAdjustments();
			}
			else if (Main.tenthAnniversaryWorld)
			{
				getTenthAnniversaryAdjustments();
			}
			if (type >= 0 && type < 688 && Main.npcCatchable[type])
			{
				catchableNPCTempImmunityCounter = 90;
				friendly = true;
			}
			ScaleStats(spawnparams.playerCountForMultiplayerDifficultyOverride, spawnparams.gameModeData, spawnparams.strengthMultiplierOverride);
			life = lifeMax;
		}

		private void getTenthAnniversaryAdjustments()
		{
			float num = scale;
			float num2 = 0.5f;
			switch (type)
			{
			case 4:
				scale *= num2;
				break;
			case 13:
			case 14:
			case 15:
				scale *= num2;
				break;
			case 266:
			case 267:
				scale *= num2;
				break;
			case 35:
			case 36:
				scale *= num2;
				break;
			case 222:
				scale *= num2;
				break;
			case 113:
			case 114:
			case 115:
			case 116:
				scale *= num2;
				break;
			case 134:
			case 135:
			case 136:
			case 139:
				scale *= num2;
				break;
			case 125:
			case 126:
				scale *= num2;
				break;
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
				scale *= num2;
				break;
			case 370:
				scale *= num2;
				break;
			case 636:
				scale *= num2;
				break;
			case 422:
			case 493:
			case 507:
			case 517:
				scale *= num2;
				break;
			}
			if (IsABestiaryIconDummy)
			{
				scale = num;
				return;
			}
			width = (int)((float)width * scale);
			height = (int)((float)height * scale);
		}

		private void getGoodAdjustments()
		{
			float num = scale;
			if (type == 13)
			{
				scale *= 1.35f;
				defense += 2;
			}
			else if (type == 14)
			{
				scale *= 1.4f;
				defense += 2;
			}
			else if (type == 15)
			{
				scale *= 1.4f;
				defense += 2;
			}
			else if (type == 35)
			{
				scale *= 1.25f;
			}
			else if (type == 36)
			{
				scale *= 1.15f;
			}
			else if (type == 113)
			{
				scale *= 0.65f;
				lifeMax = (int)((double)lifeMax * 1.5);
				defense += 3;
			}
			else if (type == 114)
			{
				scale *= 0.65f;
				lifeMax = (int)((double)lifeMax * 1.5);
				defense += 3;
			}
			else if (type == 115)
			{
				scale *= 1.4f;
			}
			else if (type == 116)
			{
				scale *= 1.4f;
			}
			else if (type == 222)
			{
				scale *= 1.2f;
			}
			else if (type == 245)
			{
				scale *= 0.5f;
			}
			else if (type == 246)
			{
				scale *= 0.5f;
			}
			else if (type == 247 || type == 248)
			{
				scale *= 0.5f;
			}
			else if (type == 249)
			{
				scale *= 0.5f;
			}
			else if (type == 262)
			{
				scale *= 1.3f;
			}
			else if (type == 266)
			{
				defense = (int)((double)defense * 1.5);
				damage = (int)((double)damage * 1.2);
				scale *= 1.1f;
			}
			else if (type == 125)
			{
				scale *= 0.8f;
			}
			else if (type == 126)
			{
				scale *= 0.8f;
			}
			else if (type == 127)
			{
				scale *= 1.1f;
			}
			else if (type == 128)
			{
				scale *= 1.1f;
			}
			else if (type == 129)
			{
				scale *= 1.1f;
			}
			else if (type == 130)
			{
				scale *= 1.1f;
			}
			else if (type == 131)
			{
				scale *= 1.1f;
			}
			else if (type == 134)
			{
				scale *= 1.3f;
			}
			else if (type == 135)
			{
				scale *= 1.3f;
			}
			else if (type == 136)
			{
				scale *= 1.3f;
			}
			else
			{
				if (type != 139)
				{
					return;
				}
				scale *= 1.6f;
			}
			if (IsABestiaryIconDummy)
			{
				scale = num;
				return;
			}
			width = (int)((float)width * scale);
			height = (int)((float)height * scale);
		}

		private void LazySetLiquidMovementDD2()
		{
			waterMovementSpeed = 1f;
			lavaMovementSpeed = 1f;
			honeyMovementSpeed = 1f;
		}

		public static void SetWorldSpecificMonstersByWorldID()
		{
			UnifiedRandom unifiedRandom = new UnifiedRandom(Main.worldID);
			int num = unifiedRandom.Next(3);
			int num2 = unifiedRandom.Next(3);
			while (num == num2)
			{
				num = unifiedRandom.Next(3);
			}
			for (int i = 0; i < 2; i++)
			{
				int num3 = num;
				if (i == 1)
				{
					num3 = num2;
				}
				for (int j = 0; j < 3; j++)
				{
					switch (num3)
					{
					case 0:
						cavernMonsterType[i, j] = unifiedRandom.Next(494, 496);
						break;
					case 1:
						cavernMonsterType[i, j] = unifiedRandom.Next(496, 498);
						break;
					default:
						cavernMonsterType[i, j] = unifiedRandom.Next(498, 507);
						break;
					}
				}
			}
		}

		public NPCSpawnParams GetMatchingSpawnParams()
		{
			NPCSpawnParams result = default(NPCSpawnParams);
			result.sizeScaleOverride = -1f;
			result.playerCountForMultiplayerDifficultyOverride = statsAreScaledForThisManyPlayers;
			result.strengthMultiplierOverride = strengthMultiplier;
			return result;
		}

		public void ScaleStats(int? activePlayersCount, GameModeData gameModeData, float? strengthOverride)
		{
			if ((!NPCID.Sets.NeedsExpertScaling.IndexInRange(type) || !NPCID.Sets.NeedsExpertScaling[type]) && (lifeMax <= 5 || damage == 0 || friendly || townNPC))
			{
				return;
			}
			float strength = 1f;
			if (strengthOverride.HasValue)
			{
				strength = strengthOverride.Value;
			}
			else if (gameModeData.IsJourneyMode)
			{
				CreativePowers.DifficultySliderPower power = CreativePowerManager.Instance.GetPower<CreativePowers.DifficultySliderPower>();
				if (power != null && power.GetIsUnlocked())
				{
					strength = power.StrengthMultiplierToGiveNPCs;
				}
			}
			if (new NPCStrengthHelper(gameModeData, strength).IsExpertMode)
			{
				ScaleStats_ApplyExpertTweaks();
			}
			ScaleStats_ApplyGameMode(gameModeData);
			if (Main.expertMode)
			{
				int num = 1;
				num = (statsAreScaledForThisManyPlayers = ((!activePlayersCount.HasValue) ? GetActivePlayerCount() : activePlayersCount.Value));
				GetStatScalingFactors(num, out var balance, out var boost);
				float bossAdjustment = 1f;
				if (Main.masterMode)
				{
					bossAdjustment = 0.85f;
				}
				ScaleStats_ApplyMultiplayerStats(num, balance, boost, bossAdjustment);
			}
			strengthMultiplier = strength;
			ScaleStats_UseStrengthMultiplier(strengthMultiplier);
			if ((type < 0 || !NPCID.Sets.ProjectileNPC[type]) && lifeMax < 6)
			{
				lifeMax = 6;
			}
			life = lifeMax;
			defDamage = damage;
			defDefense = defense;
		}

		public void ScaleStats_UseStrengthMultiplier(float strength)
		{
			if (type < 0 || !NPCID.Sets.ProjectileNPC[type])
			{
				lifeMax = (int)((float)lifeMax * strength);
			}
			damage = (int)((float)damage * strength);
		}

		public static float GetBalance()
		{
			GetStatScalingFactors(GetActivePlayerCount(), out var balance, out var _);
			return balance;
		}

		public float GetMyBalance()
		{
			if (statsAreScaledForThisManyPlayers <= 1)
			{
				return 1f;
			}
			GetStatScalingFactors(statsAreScaledForThisManyPlayers, out var balance, out var _);
			return balance;
		}

		public static int GetActivePlayerCount()
		{
			if (Main.netMode == 0)
			{
				return 1;
			}
			int num = 0;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i] != null && Main.player[i].active)
				{
					num++;
				}
			}
			return num;
		}

		private void ScaleStats_ApplyExpertTweaks()
		{
			bool flag = type >= 0 && NPCID.Sets.ProjectileNPC[type];
			if (!NPCID.Sets.DontDoHardmodeScaling[type] && Main.hardMode && !boss && lifeMax < 1000)
			{
				int num = damage + defense + lifeMax / 4;
				if (num == 0)
				{
					num = 1;
				}
				int num2 = 80;
				if (downedPlantBoss)
				{
					num2 += 20;
				}
				if (num < num2)
				{
					float num3 = num2 / num;
					damage = (int)((double)((float)damage * num3) * 0.9);
					if (!flag)
					{
						defense = (int)((float)defense * num3);
						lifeMax = (int)((double)((float)lifeMax * num3) * 1.1);
						value = (int)((double)(value * num3) * 0.8);
					}
				}
			}
			if (type == 210 || type == 211)
			{
				damage = (int)((float)damage * 0.6f);
				lifeMax = (int)((float)lifeMax * 0.8f);
				defense = (int)((float)defense * 0.8f);
			}
		}

		private void ScaleStats_ApplyGameMode(GameModeData gameModeData)
		{
			bool num = type >= 0 && NPCID.Sets.ProjectileNPC[type];
			int num2 = 0;
			if (Main.getGoodWorld)
			{
				num2++;
			}
			if (!num)
			{
				value = (int)(value * (gameModeData.EnemyMoneyDropMultiplier + (float)num2));
				lifeMax = (int)((float)lifeMax * (gameModeData.EnemyMaxLifeMultiplier + (float)num2));
			}
			damage = (int)((float)damage * (gameModeData.EnemyDamageMultiplier + (float)num2));
			knockBackResist *= gameModeData.KnockbackToEnemiesMultiplier;
			if (Main.getGoodWorld && gameModeData.IsMasterMode)
			{
				damage += damage / 3;
			}
		}

		private void ScaleStats_ApplyMultiplayerStats(int numPlayers, float balance, float boost, float bossAdjustment)
		{
			int num = numPlayers - 1;
			if (type == 5)
			{
				lifeMax = (int)((float)lifeMax * 0.75f * bossAdjustment);
			}
			if (type == 4)
			{
				lifeMax = (int)((double)lifeMax * 0.65 * (double)balance * (double)bossAdjustment);
			}
			if (type >= 13 && type <= 15)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
				if (type == 13)
				{
					damage = (int)((double)damage * 1.1);
				}
				if (type == 14)
				{
					damage = (int)((double)damage * 0.8);
				}
				if (type == 15)
				{
					damage = (int)((double)damage * 0.8);
				}
				scale *= 1.2f;
				defense += 2;
			}
			if (type == 266 || type == 267)
			{
				lifeMax = (int)((double)lifeMax * 0.85 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.9);
				scale *= 1.05f;
				for (float num2 = 1f; num2 < balance; num2 += 0.34f)
				{
					if ((double)knockBackResist < 0.1)
					{
						knockBackResist = 0f;
						break;
					}
					knockBackResist *= 0.8f;
				}
			}
			if (type == 50)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.8);
			}
			if (type == 471)
			{
				lifeMax = (int)((double)lifeMax * 0.85 * (double)(balance * 2f + 1f) / 3.0);
			}
			if (type == 472)
			{
				lifeMax = (int)((double)lifeMax * 0.85 * (double)(balance + 1f) / 2.0);
				damage = (int)((double)damage * 0.8);
			}
			if (type == 222)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.9);
			}
			if (type == 210 || type == 211)
			{
				lifeMax = (int)((double)lifeMax * 0.75);
			}
			if (type == 35)
			{
				lifeMax = (int)((float)lifeMax * balance * bossAdjustment);
				damage = (int)((double)damage * 1.1);
			}
			else if (type == 36)
			{
				lifeMax = (int)((double)lifeMax * 1.3 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 1.1);
			}
			if (type == 668)
			{
				lifeMax = (int)((double)lifeMax * 0.85 * (double)balance * (double)bossAdjustment);
				damage = damage;
			}
			if (type == 113 || type == 114)
			{
				defense += 6;
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 1.5);
			}
			else if (type == 115)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance);
				if (numPlayers > 4)
				{
					knockBackResist = 0f;
				}
				else if (numPlayers > 1)
				{
					knockBackResist *= 1f - boost;
				}
				defense += 6;
			}
			else if (type == 116)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance);
				if (numPlayers > 4)
				{
					knockBackResist = 0f;
				}
				else if (numPlayers > 1)
				{
					knockBackResist *= 1f - boost;
				}
			}
			else if (type == 117 || type == 118 || type == 119)
			{
				lifeMax = (int)((double)lifeMax * 0.8);
			}
			if (type == 657)
			{
				lifeMax = (int)((float)lifeMax * 0.8f * balance * bossAdjustment);
			}
			if (type >= 658 && type <= 660)
			{
				lifeMax = (int)((float)lifeMax * 0.75f * balance * bossAdjustment);
			}
			if (type >= 134 && type <= 136)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
				if (type == 134)
				{
					damage *= 2;
				}
				if (type == 135)
				{
					damage = (int)((double)damage * 0.85);
				}
				if (type == 136)
				{
					damage = (int)((double)damage * 0.85);
				}
				scale *= 1.05f;
			}
			else if (type == 139)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)(balance * 2f + 1f) / 3.0);
				damage = (int)((double)damage * 0.8);
				scale *= 1.05f;
			}
			if (type >= 127 && type <= 131)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.85);
			}
			if (type >= 125 && type <= 126)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.85);
			}
			if (type == 262)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 1.15);
			}
			else if (type == 264)
			{
				lifeMax = (int)((float)lifeMax * balance * bossAdjustment);
				damage = (int)((double)damage * 1.15);
			}
			if (type == 636)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 1.15);
			}
			if (type >= 245 && type <= 249)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.8);
			}
			if (type == 370)
			{
				lifeMax = (int)((double)lifeMax * 0.65 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.7);
			}
			else if (type == 371 || type == 372 || type == 373)
			{
				if (type != 371)
				{
					lifeMax = (int)((double)lifeMax * 0.75);
				}
				damage = (int)((double)damage * 0.75);
			}
			if (type == 439 || type == 440 || (type >= 454 && type <= 459) || type == 522 || type == 523)
			{
				if (type != 522)
				{
					lifeMax = (int)((float)lifeMax * 0.75f * balance * bossAdjustment);
				}
				damage = (int)((double)damage * 0.75);
			}
			if (type == 397 || type == 396 || type == 398)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.75);
			}
			if (type == 551)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.65);
			}
			else if (NPCID.Sets.BelongsToInvasionOldOnesArmy[type])
			{
				int num3 = 7;
				float num4 = (balance * (float)(num3 - 1) + 1f) / (float)num3;
				lifeMax = (int)((float)lifeMax * num4 * bossAdjustment);
			}
			float num5 = 1f;
			if (num > 0)
			{
				num5 = 1.2f * (float)num;
			}
			switch (type)
			{
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 326:
			case 329:
			case 330:
				lifeMax = (int)((double)lifeMax * 0.75 * (double)num5);
				damage = (int)((double)damage * 0.75 * (double)num5);
				break;
			case 315:
			case 325:
			case 327:
				lifeMax = (int)((double)lifeMax * 0.65 * (double)bossAdjustment);
				damage = (int)((double)damage * 0.75);
				break;
			}
			switch (type)
			{
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
				lifeMax = (int)((double)lifeMax * 0.75);
				damage = (int)((double)damage * 0.75);
				break;
			case 344:
			case 345:
			case 346:
				lifeMax = (int)((double)lifeMax * 0.65 * (double)bossAdjustment);
				damage = (int)((double)damage * 0.75);
				break;
			}
			if (Main.getGoodWorld)
			{
				if (type == 6 && AnyNPCs(13))
				{
					lifeMax = (int)((double)lifeMax * 1.5 * (double)bossAdjustment);
					defense += 2;
				}
				if (type == 32 && AnyNPCs(35))
				{
					lifeMax = (int)((double)lifeMax * 1.5 * (double)bossAdjustment);
					defense += 6;
				}
				if (type == 24 && AnyNPCs(113))
				{
					lifeMax = (int)((double)lifeMax * 1.5 * (double)bossAdjustment);
					defense += 10;
				}
			}
			defDefense = defense;
			defDamage = damage;
			life = lifeMax;
		}

		public static void GetStatScalingFactors(int numPlayers, out float balance, out float boost)
		{
			balance = 1f;
			boost = 0.35f;
			for (int i = 1; i < numPlayers; i++)
			{
				balance += boost;
				boost += (1f - boost) / 3f;
			}
			if (balance > 8f)
			{
				balance = (balance * 2f + 8f) / 3f;
			}
			if (balance > 1000f)
			{
				balance = 1000f;
			}
		}

		public static bool GetNPCLocation(int i, bool seekHead, bool averageDirection, out int index, out Vector2 pos)
		{
			int num = Main.npc[i].type;
			int num2 = -1;
			int num3 = -1;
			switch (num)
			{
			case 13:
				num3 = 15;
				num2 = 0;
				break;
			case 14:
			case 15:
				num3 = 13;
				num2 = 1;
				break;
			case 134:
				num3 = 136;
				num2 = 0;
				break;
			case 135:
			case 136:
				num3 = 134;
				num2 = 1;
				break;
			case 454:
				num3 = 459;
				num2 = 0;
				break;
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
				num3 = 454;
				num2 = 1;
				break;
			case 98:
				num3 = 100;
				num2 = 0;
				break;
			case 99:
			case 100:
				num3 = 98;
				num2 = 1;
				break;
			case 39:
				num3 = 41;
				num2 = 0;
				break;
			case 40:
			case 41:
				num3 = 39;
				num2 = 1;
				break;
			case 510:
				num3 = 512;
				num2 = 0;
				break;
			case 511:
			case 512:
				num3 = 510;
				num2 = 1;
				break;
			case 621:
				num3 = 623;
				num2 = 0;
				break;
			case 622:
			case 623:
				num3 = 621;
				num2 = 1;
				break;
			case 513:
				num3 = 515;
				num2 = 0;
				break;
			case 514:
			case 515:
				num3 = 513;
				num2 = 1;
				break;
			case 87:
				num3 = 92;
				num2 = 0;
				break;
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
				num3 = 87;
				num2 = 1;
				break;
			case 117:
				num3 = 119;
				num2 = 0;
				break;
			case 118:
			case 119:
				num3 = 117;
				num2 = 1;
				break;
			case 7:
				num3 = 9;
				num2 = 0;
				break;
			case 8:
			case 9:
				num3 = 7;
				num2 = 1;
				break;
			case 95:
				num3 = 97;
				num2 = 0;
				break;
			case 96:
			case 97:
				num3 = 95;
				num2 = 1;
				break;
			case 10:
				num3 = 12;
				num2 = 0;
				break;
			case 11:
			case 12:
				num3 = 10;
				num2 = 1;
				break;
			}
			if (num2 != -1)
			{
				if (seekHead && num2 == 1)
				{
					index = -1;
					pos = Vector2.Zero;
					return false;
				}
				Vector2 center = Main.npc[i].Center;
				int num4 = -1;
				float num5 = -1f;
				int num6 = -1;
				Vector2 center2 = Main.player[Main.myPlayer].Center;
				int num7 = (int)Main.npc[i].ai[num2];
				int num8 = 0;
				while (num7 >= 0 && num7 < 200 && ++num8 < 100 && Main.npc[num7].active)
				{
					if (!averageDirection && (num6 == -1 || Main.npc[num7].Distance(center2) < num5))
					{
						num5 = Main.npc[num7].Distance(center2);
						num6 = num7;
					}
					if (Main.npc[num7].type == num3)
					{
						num4 = num7;
						break;
					}
					num7 = (int)Main.npc[num7].ai[num2];
				}
				if (num4 >= 0)
				{
					if (!averageDirection)
					{
						pos = Main.npc[num6].Center;
						index = num6;
					}
					else
					{
						center += Main.npc[num4].Center;
						pos = center / 2f;
						index = num4;
					}
					return true;
				}
				pos = Vector2.Zero;
				index = -1;
				return false;
			}
			pos = Main.npc[i].Center;
			index = i;
			return true;
		}

		public void PopAllAttachedProjectilesAndTakeDamageForThem()
		{
			bool[] isAnNPCAttachedExplosive = ProjectileID.Sets.IsAnNPCAttachedExplosive;
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == Main.myPlayer && isAnNPCAttachedExplosive[projectile.type] && projectile.IsAttachedTo(this))
				{
					projectile.Kill();
				}
			}
		}

		public bool AI_AttemptToFindTeleportSpot(ref Vector2 chosenTile, int targetTileX, int targetTileY, int rangeFromTargetTile = 20, int telefragPreventionDistanceInTiles = 5, int solidTileCheckFluff = 1, bool solidTileCheckCentered = false, bool teleportInAir = false)
		{
			int num = (int)base.Center.X / 16;
			int num2 = (int)base.Center.Y / 16;
			int num3 = 0;
			bool flag = false;
			float num4 = 20f;
			if (Math.Abs(num * 16 - targetTileX * 16) + Math.Abs(num2 * 16 - targetTileY * 16) > 2000)
			{
				num3 = 100;
				flag = false;
			}
			while (!flag && num3 < 100)
			{
				num3++;
				int num5 = Main.rand.Next(targetTileX - rangeFromTargetTile, targetTileX + rangeFromTargetTile + 1);
				for (int i = Main.rand.Next(targetTileY - rangeFromTargetTile, targetTileY + rangeFromTargetTile + 1); i < targetTileY + rangeFromTargetTile; i++)
				{
					if ((i >= num2 - 1 && i <= num2 + 1 && num5 >= num - 1 && num5 <= num + 1) || (!teleportInAir && !Main.tile[num5, i].nactive()))
					{
						continue;
					}
					bool flag2 = true;
					if ((type == 32 || (type >= 281 && type <= 286)) && !Main.wallDungeon[Main.tile[num5, i - 1].wall])
					{
						if (!AnyNPCs(35))
						{
							flag2 = false;
						}
					}
					else if (Main.tile[num5, i - 1].lava())
					{
						flag2 = false;
					}
					if (!flag2 || (!teleportInAir && !Main.tileSolid[Main.tile[num5, i].type]))
					{
						continue;
					}
					bool flag3 = false;
					if (!((!solidTileCheckCentered) ? (!Collision.SolidTiles(num5 - solidTileCheckFluff, num5 + solidTileCheckFluff, i - 3 - solidTileCheckFluff, i - 1)) : (!Collision.SolidTiles(num5 - solidTileCheckFluff, num5 + solidTileCheckFluff, i - solidTileCheckFluff, i + solidTileCheckFluff))))
					{
						continue;
					}
					Rectangle rectangle = new Rectangle(num5 * 16, i * 16, 16, 16);
					rectangle.Inflate(telefragPreventionDistanceInTiles * 16, telefragPreventionDistanceInTiles * 16);
					for (int j = 0; j < Main.player.Length; j++)
					{
						Player player = Main.player[j];
						if (player != null && player.active && !player.DeadOrGhost)
						{
							Rectangle value = player.Hitbox;
							Rectangle value2 = value.Modified((int)(player.velocity.X * num4), (int)(player.velocity.Y * num4), 0, 0);
							Rectangle.Union(ref value2, ref value, out value2);
							if (value2.Intersects(rectangle))
							{
								flag2 = false;
								flag = false;
								break;
							}
						}
					}
					if (flag2)
					{
						chosenTile = new Vector2(num5, i);
						flag = true;
					}
					break;
				}
			}
			return flag;
		}

		public static void TransformElderSlime(int npcIndex)
		{
			if (Main.netMode == 1)
			{
				NetMessage.SendData(140, -1, -1, null, 2, npcIndex);
			}
			else if (!unlockedSlimeOldSpawn && Main.npc.IndexInRange(npcIndex))
			{
				NPC nPC = Main.npc[npcIndex];
				if (nPC.type == 685)
				{
					unlockedSlimeOldSpawn = true;
					NetMessage.SendData(7);
					Vector2 vector = nPC.velocity;
					nPC.Transform(679);
					nPC.netUpdate = true;
					nPC.velocity = vector;
					ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.TownSlimeTransform, new ParticleOrchestraSettings
					{
						PositionInWorld = nPC.Center,
						MovementVector = Vector2.Zero,
						UniqueInfoPiece = 2
					});
				}
			}
		}

		public static void TransformCopperSlime(int npcIndex)
		{
			if (Main.netMode == 1)
			{
				NetMessage.SendData(140, -1, -1, null, 1, npcIndex);
			}
			else if (!unlockedSlimeCopperSpawn && Main.npc.IndexInRange(npcIndex))
			{
				NPC nPC = Main.npc[npcIndex];
				if (nPC.type == 1)
				{
					unlockedSlimeCopperSpawn = true;
					NetMessage.SendData(7);
					Vector2 vector = nPC.velocity;
					nPC.Transform(684);
					nPC.netUpdate = true;
					nPC.velocity = vector;
					ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.TownSlimeTransform, new ParticleOrchestraSettings
					{
						PositionInWorld = nPC.Center,
						MovementVector = Vector2.Zero,
						UniqueInfoPiece = 1
					});
				}
			}
		}

		public static void HaveDryadDoStardewAnimation()
		{
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (!nPC.active || nPC.type != 20)
				{
					continue;
				}
				nPC.localAI[2] = 480f;
				nPC.ai[0] = 24f;
				nPC.ai[1] = 480f;
				nPC.ai[2] = 0f;
				nPC.localAI[3] = 0f;
				nPC.netUpdate = true;
				nPC.direction = 1;
				nPC.spriteDirection = 1;
				Vector2 vector = nPC.Bottom + new Vector2(100f, 0f);
				Point p = vector.ToTileCoordinates();
				p.Y = Utils.Clamp(p.Y - 10, 10, Main.maxTilesY - 10);
				int y = p.Y;
				int num = 15;
				int num2 = p.Y + num;
				bool flag = false;
				for (int j = p.Y; j < num2; j++)
				{
					Tile tile = Main.tile[p.X, j];
					p.Y = j;
					if (tile.active() && Main.tileSolid[tile.type])
					{
						if (j == y)
						{
							flag = true;
						}
						break;
					}
				}
				Vector2 vector2 = new Vector2(0f, -52f);
				Vector2 vector3 = p.ToWorldCoordinates(8f, 0f);
				if (flag)
				{
					vector3 = vector;
				}
				Projectile.NewProjectile(new EntitySource_DebugCommand(), vector3 + vector2, Vector2.Zero, 995, 0, 0f, Main.myPlayer);
				break;
			}
		}

		private void AI_047_GolemFist()
		{
			float num = GetMyBalance();
			if (Main.getGoodWorld)
			{
				num += 3f;
			}
			if ((!Main.player[target].ZoneLihzhardTemple && !Main.player[target].ZoneJungle) || (double)Main.player[target].Center.Y < Main.worldSurface * 16.0)
			{
				num *= 2f;
			}
			if (golemBoss < 0)
			{
				StrikeNPCNoInteraction(9999, 0f, 0);
				return;
			}
			if (alpha > 0)
			{
				alpha -= 10;
				if (alpha < 0)
				{
					alpha = 0;
				}
				ai[1] = 0f;
			}
			Player player = Main.player[target];
			NPC nPC = Main.npc[golemBoss];
			Vector2 vector = nPC.Center + nPC.velocity + new Vector2(0f, -9f * scale);
			vector.X += (float)((type == 247) ? (-84) : 78) * scale;
			Vector2 vector2 = vector - base.Center;
			float num2 = vector2.Length();
			if (ai[0] == 0f)
			{
				noTileCollide = true;
				float num3 = 14f;
				if (life < lifeMax / 2)
				{
					num3 += 3f;
				}
				if (life < lifeMax / 4)
				{
					num3 += 3f;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
				{
					num3 += 8f;
				}
				num3 *= (num + 3f) / 4f;
				if (num3 > 32f)
				{
					num3 = 32f;
				}
				float x = vector2.X;
				float y = vector2.Y;
				float num4 = num2;
				if (num4 < 12f + num3)
				{
					rotation = 0f;
					velocity.X = x;
					velocity.Y = y;
					float num5 = num;
					ai[1] += num5;
					if (life < lifeMax / 2)
					{
						ai[1] += num5;
					}
					if (life < lifeMax / 4)
					{
						ai[1] += num5;
					}
					if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
					{
						ai[1] += 10f * num5;
					}
					if (ai[1] >= 60f)
					{
						TargetClosest();
						if ((type == 247 && base.Center.X + 100f > Main.player[target].Center.X) || (type == 248 && base.Center.X - 100f < Main.player[target].Center.X))
						{
							ai[1] = 0f;
							ai[0] = 1f;
						}
						else
						{
							ai[1] = 0f;
						}
					}
				}
				else
				{
					num4 = num3 / num4;
					velocity.X = x * num4;
					velocity.Y = y * num4;
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
					if (type == 247)
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					}
				}
			}
			else if (ai[0] == 1f)
			{
				ai[1] += 1f;
				base.Center = vector;
				rotation = 0f;
				velocity = Vector2.Zero;
				if (ai[1] <= 15f)
				{
					for (int i = 0; i < 1; i++)
					{
						Vector2 vector3 = Main.rand.NextVector2Circular(80f, 80f);
						Vector2 vector4 = vector3 * -1f * 0.05f;
						Vector2 vector5 = Main.rand.NextVector2Circular(20f, 20f);
						Dust dust = Dust.NewDustPerfect(base.Center + vector4 + vector3 + vector5, 228, vector4);
						dust.fadeIn = 1.5f;
						dust.scale = 0.5f;
						if (Main.getGoodWorld)
						{
							dust.noLight = true;
						}
						dust.noGravity = true;
					}
				}
				if (ai[1] >= 30f)
				{
					noTileCollide = true;
					collideX = false;
					collideY = false;
					ai[0] = 2f;
					ai[1] = 0f;
					float num6 = 12f;
					if (life < lifeMax / 2)
					{
						num6 += 4f;
					}
					if (life < lifeMax / 4)
					{
						num6 += 4f;
					}
					if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
					{
						num6 += 10f;
					}
					num6 *= (num + 3f) / 4f;
					if (num6 > 48f)
					{
						num6 = 48f;
					}
					Vector2 vector6 = new Vector2(base.Center.X, base.Center.Y);
					float num7 = Main.player[target].Center.X - vector6.X;
					float num8 = Main.player[target].Center.Y - vector6.Y;
					float num9 = (float)Math.Sqrt(num7 * num7 + num8 * num8);
					num9 = num6 / num9;
					velocity.X = num7 * num9;
					velocity.Y = num8 * num9;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					if (type == 247)
					{
						rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
					}
				}
			}
			else if (ai[0] == 2f)
			{
				if (Main.netMode != 1 && Main.getGoodWorld)
				{
					for (int j = (int)(position.X / 16f) - 1; (float)j < (position.X + (float)width) / 16f + 1f; j++)
					{
						for (int k = (int)(position.Y / 16f) - 1; (float)k < (position.Y + (float)width) / 16f + 1f; k++)
						{
							if (Main.tile[j, k].type == 4)
							{
								Main.tile[j, k].active(active: false);
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, j, k);
								}
							}
						}
					}
				}
				ai[1] += 1f;
				if (ai[1] == 1f)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
				}
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector7 = velocity * 0.5f;
					Vector2 vector8 = Main.rand.NextVector2Circular(20f, 20f);
					Dust.NewDustPerfect(base.Center + vector7 + vector8, 306, vector7, 0, Main.OurFavoriteColor).scale = 2f;
				}
				if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
				{
					if (velocity.X > 0f && base.Center.X > player.Center.X)
					{
						noTileCollide = false;
					}
					if (velocity.X < 0f && base.Center.X < player.Center.X)
					{
						noTileCollide = false;
					}
				}
				else
				{
					if (velocity.Y > 0f && base.Center.Y > player.Center.Y)
					{
						noTileCollide = false;
					}
					if (velocity.Y < 0f && base.Center.Y < player.Center.Y)
					{
						noTileCollide = false;
					}
				}
				if (num2 > 700f || collideX || collideY)
				{
					noTileCollide = true;
					ai[0] = 0f;
				}
			}
			else
			{
				if (ai[0] != 3f)
				{
					return;
				}
				noTileCollide = true;
				float num10 = 0.4f;
				Vector2 vector9 = new Vector2(base.Center.X, base.Center.Y);
				float num11 = Main.player[target].Center.X - vector9.X;
				float num12 = Main.player[target].Center.Y - vector9.Y;
				float num13 = (float)Math.Sqrt(num11 * num11 + num12 * num12);
				num13 = 12f / num13;
				num11 *= num13;
				num12 *= num13;
				if (velocity.X < num11)
				{
					velocity.X += num10;
					if (velocity.X < 0f && num11 > 0f)
					{
						velocity.X += num10 * 2f;
					}
				}
				else if (velocity.X > num11)
				{
					velocity.X -= num10;
					if (velocity.X > 0f && num11 < 0f)
					{
						velocity.X -= num10 * 2f;
					}
				}
				if (velocity.Y < num12)
				{
					velocity.Y += num10;
					if (velocity.Y < 0f && num12 > 0f)
					{
						velocity.Y += num10 * 2f;
					}
				}
				else if (velocity.Y > num12)
				{
					velocity.Y -= num10;
					if (velocity.Y > 0f && num12 < 0f)
					{
						velocity.Y -= num10 * 2f;
					}
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				if (type == 247)
				{
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
				}
			}
		}

		private void AI_045_Golem()
		{
			golemBoss = whoAmI;
			float num = GetMyBalance();
			if (Main.getGoodWorld)
			{
				num += 2f;
			}
			if ((!Main.player[target].ZoneLihzhardTemple && !Main.player[target].ZoneJungle) || (double)Main.player[target].Center.Y < Main.worldSurface * 16.0)
			{
				num *= 2f;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X - 84, (int)base.Center.Y - 9, 247);
				NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X + 78, (int)base.Center.Y - 9, 248);
				NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X - 3, (int)base.Center.Y - 57, 246);
			}
			if (target >= 0 && Main.player[target].dead)
			{
				TargetClosest();
				if (Main.player[target].dead)
				{
					noTileCollide = true;
				}
			}
			if (alpha > 0)
			{
				alpha -= 10;
				if (alpha < 0)
				{
					alpha = 0;
				}
				ai[1] = 0f;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			dontTakeDamage = false;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == 246)
				{
					flag = true;
				}
				if (Main.npc[i].active && Main.npc[i].type == 247)
				{
					flag2 = true;
				}
				if (Main.npc[i].active && Main.npc[i].type == 248)
				{
					flag3 = true;
				}
			}
			dontTakeDamage = flag;
			if (Main.netMode != 1 && Main.getGoodWorld && velocity.Y > 0f)
			{
				for (int j = (int)(position.X / 16f); (float)j < (position.X + (float)width) / 16f; j++)
				{
					for (int k = (int)(position.Y / 16f); (float)k < (position.Y + (float)width) / 16f; k++)
					{
						if (Main.tile[j, k].type == 4)
						{
							Main.tile[j, k].active(active: false);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, j, k);
							}
						}
					}
				}
			}
			position += netOffset;
			if (!Main.getGoodWorld)
			{
				if (!flag2)
				{
					int num2 = Dust.NewDust(new Vector2(base.Center.X - 80f * scale, base.Center.Y - 9f), 8, 8, 31, 0f, 0f, 100);
					Main.dust[num2].alpha += Main.rand.Next(100);
					Main.dust[num2].velocity *= 0.2f;
					Main.dust[num2].velocity.Y -= 0.5f + (float)Main.rand.Next(10) * 0.1f;
					Main.dust[num2].fadeIn = 0.5f + (float)Main.rand.Next(10) * 0.1f;
					if (Main.rand.Next(10) == 0)
					{
						num2 = Dust.NewDust(new Vector2(base.Center.X - 80f * scale, base.Center.Y - 9f), 8, 8, 6);
						if (Main.rand.Next(20) != 0)
						{
							Main.dust[num2].noGravity = true;
							Main.dust[num2].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
							Main.dust[num2].velocity.Y -= 1f;
						}
					}
				}
				if (!flag3)
				{
					int num3 = Dust.NewDust(new Vector2(base.Center.X + 62f * scale, base.Center.Y - 9f), 8, 8, 31, 0f, 0f, 100);
					Main.dust[num3].alpha += Main.rand.Next(100);
					Main.dust[num3].velocity *= 0.2f;
					Main.dust[num3].velocity.Y -= 0.5f + (float)Main.rand.Next(10) * 0.1f;
					Main.dust[num3].fadeIn = 0.5f + (float)Main.rand.Next(10) * 0.1f;
					if (Main.rand.Next(10) == 0)
					{
						num3 = Dust.NewDust(new Vector2(base.Center.X + 62f * scale, base.Center.Y - 9f), 8, 8, 6);
						if (Main.rand.Next(20) != 0)
						{
							Main.dust[num3].noGravity = true;
							Main.dust[num3].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
							Main.dust[num3].velocity.Y -= 1f;
						}
					}
				}
			}
			position -= netOffset;
			if (noTileCollide && !Main.player[target].dead)
			{
				if (velocity.Y > 0f && base.Bottom.Y > Main.player[target].Top.Y)
				{
					noTileCollide = false;
				}
				else if (Collision.CanHit(position, width, height, Main.player[target].Center, 1, 1) && !Collision.SolidTiles(position, width, height))
				{
					noTileCollide = false;
				}
			}
			if (ai[0] == 0f)
			{
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.8f;
					float num4 = 1f;
					if (ai[1] > 0f)
					{
						if (!flag2)
						{
							num4 += 2f;
						}
						if (!flag3)
						{
							num4 += 2f;
						}
						if (!flag)
						{
							num4 += 2f;
						}
						if (life < lifeMax)
						{
							num4 += 1f;
						}
						if (life < lifeMax / 2)
						{
							num4 += 4f;
						}
						if (life < lifeMax / 3)
						{
							num4 += 8f;
						}
						num4 *= num;
						if (Main.getGoodWorld)
						{
							num4 += 100f;
						}
					}
					ai[1] += num4;
					if (ai[1] >= 300f)
					{
						ai[1] = -20f;
						frameCounter = 0.0;
					}
					else if (ai[1] == -1f)
					{
						noTileCollide = true;
						TargetClosest();
						velocity.X = 4 * direction;
						if (life < lifeMax)
						{
							velocity.Y = -12.1f * (num + 9f) / 10f;
							if ((double)velocity.Y < -19.1)
							{
								velocity.Y = -19.1f;
							}
						}
						else
						{
							velocity.Y = -12.1f;
						}
						ai[0] = 1f;
						ai[1] = 0f;
					}
				}
			}
			else if (ai[0] == 1f)
			{
				if (velocity.Y == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					ai[0] = 0f;
					for (int l = (int)position.X - 20; l < (int)position.X + width + 40; l += 20)
					{
						for (int m = 0; m < 4; m++)
						{
							int num5 = Dust.NewDust(new Vector2(position.X - 20f, position.Y + (float)height), width + 20, 4, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num5].velocity *= 0.2f;
						}
						int num6 = Gore.NewGore(new Vector2(l - 20, position.Y + (float)height - 8f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num6].velocity *= 0.4f;
					}
				}
				else
				{
					TargetClosest();
					if (position.X < Main.player[target].position.X && position.X + (float)width > Main.player[target].position.X + (float)Main.player[target].width)
					{
						velocity.X *= 0.9f;
						if (base.Bottom.Y < Main.player[target].position.Y)
						{
							velocity.Y += 0.2f * (num + 1f) / 2f;
						}
					}
					else
					{
						if (direction < 0)
						{
							velocity.X -= 0.2f;
						}
						else if (direction > 0)
						{
							velocity.X += 0.2f;
						}
						float num7 = 3f;
						if (life < lifeMax)
						{
							num7 += 1f;
						}
						if (life < lifeMax / 2)
						{
							num7 += 1f;
						}
						if (life < lifeMax / 4)
						{
							num7 += 1f;
						}
						num7 *= (num + 1f) / 2f;
						if (velocity.X < 0f - num7)
						{
							velocity.X = 0f - num7;
						}
						if (velocity.X > num7)
						{
							velocity.X = num7;
						}
					}
				}
			}
			if (target <= 0 || target == 255 || Main.player[target].dead)
			{
				TargetClosest();
			}
			int num8 = 3000;
			if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num8)
			{
				TargetClosest();
				if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num8)
				{
					active = false;
				}
			}
		}

		public static bool SpawnMechQueen(int onWhichPlayer)
		{
			if (AnyNPCs(127) || AnyNPCs(134) || AnyNPCs(125) || AnyNPCs(126))
			{
				return false;
			}
			if (!Main.remixWorld && !Main.getGoodWorld)
			{
				return false;
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendData(61, -1, -1, null, onWhichPlayer, -16f);
			}
			else
			{
				mechQueen = -2;
				SpawnOnPlayer(onWhichPlayer, 127);
				mechQueen = FindFirstNPC(127);
				NewNPC(GetBossSpawnSource(onWhichPlayer), (int)Main.npc[mechQueen].Center.X, (int)Main.npc[mechQueen].Center.Y, 125, 1);
				NewNPC(GetBossSpawnSource(onWhichPlayer), (int)Main.npc[mechQueen].Center.X, (int)Main.npc[mechQueen].Center.Y, 126, 1);
				int num = NewNPC(GetBossSpawnSource(onWhichPlayer), (int)Main.npc[mechQueen].Center.X, (int)Main.npc[mechQueen].Center.Y, 134, 1);
				NewNPC(GetBossSpawnSource(onWhichPlayer), (int)Main.npc[mechQueen].Center.X, (int)Main.npc[mechQueen].Center.Y, 139, 1, 0f, 0f, num, -1f);
				NewNPC(GetBossSpawnSource(onWhichPlayer), (int)Main.npc[mechQueen].Center.X, (int)Main.npc[mechQueen].Center.Y, 139, 1, 0f, 0f, num, 1f);
			}
			return true;
		}

		public void AI()
		{
			//IL_4f86f: Unknown result type (might be due to invalid IL or missing references)
			//IL_5041d: Unknown result type (might be due to invalid IL or missing references)
			//IL_5042a: Unknown result type (might be due to invalid IL or missing references)
			//IL_5042f: Unknown result type (might be due to invalid IL or missing references)
			//IL_50458: Unknown result type (might be due to invalid IL or missing references)
			//IL_50482: Unknown result type (might be due to invalid IL or missing references)
			//IL_50487: Unknown result type (might be due to invalid IL or missing references)
			//IL_5064f: Unknown result type (might be due to invalid IL or missing references)
			//IL_50679: Unknown result type (might be due to invalid IL or missing references)
			//IL_5067e: Unknown result type (might be due to invalid IL or missing references)
			//IL_50698: Unknown result type (might be due to invalid IL or missing references)
			if (aiStyle == 0)
			{
				if (Main.netMode != 1)
				{
					for (int i = 0; i < 255; i++)
					{
						if (Main.player[i].active && Main.player[i].talkNPC == whoAmI)
						{
							if (type == 589)
							{
								AI_000_TransformBoundNPC(i, 588);
							}
							if (type == 105)
							{
								AI_000_TransformBoundNPC(i, 107);
							}
							if (type == 106)
							{
								AI_000_TransformBoundNPC(i, 108);
							}
							if (type == 123)
							{
								AI_000_TransformBoundNPC(i, 124);
							}
							if (type == 354)
							{
								AI_000_TransformBoundNPC(i, 353);
							}
							if (type == 376)
							{
								AI_000_TransformBoundNPC(i, 369);
							}
							if (type == 579)
							{
								AI_000_TransformBoundNPC(i, 550);
							}
						}
					}
				}
				if (type != 376 && type != 579)
				{
					TargetClosest();
					spriteDirection = direction;
				}
				if (type == 376 || type == 579)
				{
					if (wet || Main.tile[(int)(base.Center.X / 16f), (int)(position.Y - 4f) / 16].liquid > 0)
					{
						velocity.Y = -0.4f;
						int num = 1;
						if (base.Center.X / 16f > (float)(Main.maxTilesX / 2))
						{
							num = -1;
						}
						int num2 = 12;
						int num3 = (int)base.Center.X / 16;
						int j = (int)base.Center.Y / 16;
						bool flag = false;
						if (num > 0)
						{
							for (int k = num3; k < num3 + num2; k++)
							{
								if (WorldGen.SolidTile(k, j))
								{
									flag = true;
								}
							}
						}
						else
						{
							for (int l = num3; l > num3 - num2; l--)
							{
								if (WorldGen.SolidTile(l, j))
								{
									flag = true;
								}
							}
						}
						if (type == 579)
						{
							flag = true;
						}
						if (flag)
						{
							velocity.X *= 0.99f;
							if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
							{
								velocity.X = 0f;
							}
							return;
						}
						velocity.X += (float)num * 0.01f;
						if (velocity.X > 0.2f)
						{
							velocity.X *= 0.95f;
						}
						if (velocity.X < -0.2f)
						{
							velocity.X *= 0.95f;
						}
					}
					else
					{
						velocity.X *= 0.93f;
						if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
						{
							velocity.X = 0f;
						}
					}
				}
				else
				{
					velocity.X *= 0.93f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
				}
				return;
			}
			if (aiStyle == 1)
			{
				AI_001_Slimes();
				return;
			}
			if (aiStyle == 2)
			{
				AI_002_FloatingEye();
				return;
			}
			if (aiStyle == 3)
			{
				AI_003_Fighters();
				return;
			}
			if (aiStyle == 4)
			{
				bool flag2 = false;
				if (Main.expertMode && (double)life < (double)lifeMax * 0.12)
				{
					flag2 = true;
				}
				bool flag3 = false;
				if (Main.expertMode && (double)life < (double)lifeMax * 0.04)
				{
					flag3 = true;
				}
				float num4 = 20f;
				if (flag3)
				{
					num4 = 10f;
				}
				if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
				}
				bool dead = Main.player[target].dead;
				float num5 = position.X + (float)(width / 2) - Main.player[target].position.X - (float)(Main.player[target].width / 2);
				float num6 = position.Y + (float)height - 59f - Main.player[target].position.Y - (float)(Main.player[target].height / 2);
				float num7 = (float)Math.Atan2(num6, num5) + 1.57f;
				if (num7 < 0f)
				{
					num7 += 6.283f;
				}
				else if ((double)num7 > 6.283)
				{
					num7 -= 6.283f;
				}
				float num8 = 0f;
				if (this.ai[0] == 0f && this.ai[1] == 0f)
				{
					num8 = 0.02f;
				}
				if (this.ai[0] == 0f && this.ai[1] == 2f && this.ai[2] > 40f)
				{
					num8 = 0.05f;
				}
				if (this.ai[0] == 3f && this.ai[1] == 0f)
				{
					num8 = 0.05f;
				}
				if (this.ai[0] == 3f && this.ai[1] == 2f && this.ai[2] > 40f)
				{
					num8 = 0.08f;
				}
				if (this.ai[0] == 3f && this.ai[1] == 4f && this.ai[2] > num4)
				{
					num8 = 0.15f;
				}
				if (this.ai[0] == 3f && this.ai[1] == 5f)
				{
					num8 = 0.05f;
				}
				if (Main.expertMode)
				{
					num8 *= 1.5f;
				}
				if (flag3 && Main.expertMode)
				{
					num8 = 0f;
				}
				if (rotation < num7)
				{
					if ((double)(num7 - rotation) > 3.1415)
					{
						rotation -= num8;
					}
					else
					{
						rotation += num8;
					}
				}
				else if (rotation > num7)
				{
					if ((double)(rotation - num7) > 3.1415)
					{
						rotation += num8;
					}
					else
					{
						rotation -= num8;
					}
				}
				if (rotation > num7 - num8 && rotation < num7 + num8)
				{
					rotation = num7;
				}
				if (rotation < 0f)
				{
					rotation += 6.283f;
				}
				else if ((double)rotation > 6.283)
				{
					rotation -= 6.283f;
				}
				if (rotation > num7 - num8 && rotation < num7 + num8)
				{
					rotation = num7;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num9 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, velocity.X, 2f);
					Main.dust[num9].velocity.X *= 0.5f;
					Main.dust[num9].velocity.Y *= 0.1f;
				}
				reflectsProjectiles = false;
				if (Main.IsItDay() || dead)
				{
					velocity.Y -= 0.04f;
					EncourageDespawn(10);
					return;
				}
				if (this.ai[0] == 0f)
				{
					if (this.ai[1] == 0f)
					{
						float num10 = 5f;
						float num11 = 0.04f;
						if (Main.expertMode)
						{
							num11 = 0.15f;
							num10 = 7f;
						}
						if (Main.getGoodWorld)
						{
							num11 += 0.05f;
							num10 += 1f;
						}
						Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num12 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector.X;
						float num13 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 200f - vector.Y;
						float num14 = (float)Math.Sqrt(num12 * num12 + num13 * num13);
						float num15 = num14;
						num14 = num10 / num14;
						num12 *= num14;
						num13 *= num14;
						if (velocity.X < num12)
						{
							velocity.X += num11;
							if (velocity.X < 0f && num12 > 0f)
							{
								velocity.X += num11;
							}
						}
						else if (velocity.X > num12)
						{
							velocity.X -= num11;
							if (velocity.X > 0f && num12 < 0f)
							{
								velocity.X -= num11;
							}
						}
						if (velocity.Y < num13)
						{
							velocity.Y += num11;
							if (velocity.Y < 0f && num13 > 0f)
							{
								velocity.Y += num11;
							}
						}
						else if (velocity.Y > num13)
						{
							velocity.Y -= num11;
							if (velocity.Y > 0f && num13 < 0f)
							{
								velocity.Y -= num11;
							}
						}
						this.ai[2] += 1f;
						float num16 = 600f;
						if (Main.expertMode)
						{
							num16 *= 0.35f;
						}
						if (this.ai[2] >= num16)
						{
							this.ai[1] = 1f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							target = 255;
							netUpdate = true;
						}
						else if ((position.Y + (float)height < Main.player[target].position.Y && num15 < 500f) || (Main.expertMode && num15 < 500f))
						{
							if (!Main.player[target].dead)
							{
								this.ai[3] += 1f;
							}
							float num17 = 110f;
							if (Main.expertMode)
							{
								num17 *= 0.4f;
							}
							if (Main.getGoodWorld)
							{
								num17 *= 0.8f;
							}
							if (this.ai[3] >= num17)
							{
								this.ai[3] = 0f;
								rotation = num7;
								float num18 = 5f;
								if (Main.expertMode)
								{
									num18 = 6f;
								}
								float num19 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector.X;
								float num20 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector.Y;
								float num21 = (float)Math.Sqrt(num19 * num19 + num20 * num20);
								num21 = num18 / num21;
								Vector2 vector2 = vector;
								Vector2 vector3 = default(Vector2);
								vector3.X = num19 * num21;
								vector3.Y = num20 * num21;
								vector2.X += vector3.X * 10f;
								vector2.Y += vector3.Y * 10f;
								if (Main.netMode != 1)
								{
									int num22 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector2.X, (int)vector2.Y, 5);
									Main.npc[num22].velocity.X = vector3.X;
									Main.npc[num22].velocity.Y = vector3.Y;
									if (Main.netMode == 2 && num22 < 200)
									{
										NetMessage.SendData(23, -1, -1, null, num22);
									}
								}
								SoundEngine.PlaySound(3, (int)vector2.X, (int)vector2.Y);
								for (int m = 0; m < 10; m++)
								{
									Dust.NewDust(vector2, 20, 20, 5, vector3.X * 0.4f, vector3.Y * 0.4f);
								}
							}
						}
					}
					else if (this.ai[1] == 1f)
					{
						rotation = num7;
						float num23 = 6f;
						if (Main.expertMode)
						{
							num23 = 7f;
						}
						if (Main.getGoodWorld)
						{
							num23 += 1f;
						}
						Vector2 vector4 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num24 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector4.X;
						float num25 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector4.Y;
						float num26 = (float)Math.Sqrt(num24 * num24 + num25 * num25);
						num26 = num23 / num26;
						velocity.X = num24 * num26;
						velocity.Y = num25 * num26;
						this.ai[1] = 2f;
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
					}
					else if (this.ai[1] == 2f)
					{
						this.ai[2] += 1f;
						if (this.ai[2] >= 40f)
						{
							velocity *= 0.98f;
							if (Main.expertMode)
							{
								velocity *= 0.985f;
							}
							if (Main.getGoodWorld)
							{
								velocity *= 0.99f;
							}
							if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
							{
								velocity.X = 0f;
							}
							if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
							{
								velocity.Y = 0f;
							}
						}
						else
						{
							rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
						}
						int num27 = 150;
						if (Main.expertMode)
						{
							num27 = 100;
						}
						if (Main.getGoodWorld)
						{
							num27 -= 15;
						}
						if (this.ai[2] >= (float)num27)
						{
							this.ai[3] += 1f;
							this.ai[2] = 0f;
							target = 255;
							rotation = num7;
							if (this.ai[3] >= 3f)
							{
								this.ai[1] = 0f;
								this.ai[3] = 0f;
							}
							else
							{
								this.ai[1] = 1f;
							}
						}
					}
					float num28 = 0.5f;
					if (Main.expertMode)
					{
						num28 = 0.65f;
					}
					if ((float)life < (float)lifeMax * num28)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
					}
					return;
				}
				if (this.ai[0] == 1f || this.ai[0] == 2f)
				{
					if (this.ai[0] == 1f || this.ai[3] == 1f)
					{
						this.ai[2] += 0.005f;
						if ((double)this.ai[2] > 0.5)
						{
							this.ai[2] = 0.5f;
						}
					}
					else
					{
						this.ai[2] -= 0.005f;
						if (this.ai[2] < 0f)
						{
							this.ai[2] = 0f;
						}
					}
					rotation += this.ai[2];
					this.ai[1] += 1f;
					if (Main.getGoodWorld)
					{
						reflectsProjectiles = true;
					}
					int num29 = 20;
					if (Main.getGoodWorld && life < lifeMax / 3)
					{
						num29 = 10;
					}
					if (Main.expertMode && this.ai[1] % (float)num29 == 0f)
					{
						float num30 = 5f;
						Vector2 vector5 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num31 = Main.rand.Next(-200, 200);
						float num32 = Main.rand.Next(-200, 200);
						if (Main.getGoodWorld)
						{
							num31 *= 3f;
							num32 *= 3f;
						}
						float num33 = (float)Math.Sqrt(num31 * num31 + num32 * num32);
						num33 = num30 / num33;
						Vector2 vector6 = vector5;
						Vector2 vector7 = default(Vector2);
						vector7.X = num31 * num33;
						vector7.Y = num32 * num33;
						vector6.X += vector7.X * 10f;
						vector6.Y += vector7.Y * 10f;
						if (Main.netMode != 1)
						{
							int num34 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector6.X, (int)vector6.Y, 5);
							Main.npc[num34].velocity.X = vector7.X;
							Main.npc[num34].velocity.Y = vector7.Y;
							if (Main.netMode == 2 && num34 < 200)
							{
								NetMessage.SendData(23, -1, -1, null, num34);
							}
						}
						for (int n = 0; n < 10; n++)
						{
							Dust.NewDust(vector6, 20, 20, 5, vector7.X * 0.4f, vector7.Y * 0.4f);
						}
					}
					if (this.ai[1] >= 100f)
					{
						if (this.ai[3] == 1f)
						{
							this.ai[3] = 0f;
							this.ai[1] = 0f;
						}
						else
						{
							this.ai[0] += 1f;
							this.ai[1] = 0f;
							if (this.ai[0] == 3f)
							{
								this.ai[2] = 0f;
							}
							else
							{
								SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
								for (int num35 = 0; num35 < 2; num35++)
								{
									Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 8);
									Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
									Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6);
								}
								for (int num36 = 0; num36 < 20; num36++)
								{
									Dust.NewDust(position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
								}
								SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
							}
						}
					}
					Dust.NewDust(position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
					velocity.X *= 0.98f;
					velocity.Y *= 0.98f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
					{
						velocity.Y = 0f;
					}
					return;
				}
				defense = 0;
				int num37 = 23;
				int num38 = 18;
				if (Main.expertMode)
				{
					if (flag2)
					{
						defense = -15;
					}
					if (flag3)
					{
						num38 = 20;
						defense = -30;
					}
				}
				damage = GetAttackDamage_LerpBetweenFinalValues(num37, num38);
				damage = GetAttackDamage_ScaledByStrength(damage);
				if (this.ai[1] == 0f && flag2)
				{
					this.ai[1] = 5f;
				}
				if (this.ai[1] == 0f)
				{
					float num39 = 6f;
					float num40 = 0.07f;
					Vector2 vector8 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num41 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector8.X;
					float num42 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 120f - vector8.Y;
					float num43 = (float)Math.Sqrt(num41 * num41 + num42 * num42);
					if (num43 > 400f && Main.expertMode)
					{
						num39 += 1f;
						num40 += 0.05f;
						if (num43 > 600f)
						{
							num39 += 1f;
							num40 += 0.05f;
							if (num43 > 800f)
							{
								num39 += 1f;
								num40 += 0.05f;
							}
						}
					}
					if (Main.getGoodWorld)
					{
						num39 += 1f;
						num40 += 0.1f;
					}
					num43 = num39 / num43;
					num41 *= num43;
					num42 *= num43;
					if (velocity.X < num41)
					{
						velocity.X += num40;
						if (velocity.X < 0f && num41 > 0f)
						{
							velocity.X += num40;
						}
					}
					else if (velocity.X > num41)
					{
						velocity.X -= num40;
						if (velocity.X > 0f && num41 < 0f)
						{
							velocity.X -= num40;
						}
					}
					if (velocity.Y < num42)
					{
						velocity.Y += num40;
						if (velocity.Y < 0f && num42 > 0f)
						{
							velocity.Y += num40;
						}
					}
					else if (velocity.Y > num42)
					{
						velocity.Y -= num40;
						if (velocity.Y > 0f && num42 < 0f)
						{
							velocity.Y -= num40;
						}
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= 200f)
					{
						this.ai[1] = 1f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						if (Main.expertMode && (double)life < (double)lifeMax * 0.35)
						{
							this.ai[1] = 3f;
						}
						target = 255;
						netUpdate = true;
					}
					if (Main.expertMode && flag3)
					{
						TargetClosest();
						netUpdate = true;
						this.ai[1] = 3f;
						this.ai[2] = 0f;
						this.ai[3] -= 1000f;
					}
				}
				else if (this.ai[1] == 1f)
				{
					SoundEngine.PlaySound(36, (int)position.X, (int)position.Y, 0);
					rotation = num7;
					float num44 = 6.8f;
					if (Main.expertMode && this.ai[3] == 1f)
					{
						num44 *= 1.15f;
					}
					if (Main.expertMode && this.ai[3] == 2f)
					{
						num44 *= 1.3f;
					}
					if (Main.getGoodWorld)
					{
						num44 *= 1.2f;
					}
					Vector2 vector9 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num45 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector9.X;
					float num46 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector9.Y;
					float num47 = (float)Math.Sqrt(num45 * num45 + num46 * num46);
					num47 = num44 / num47;
					velocity.X = num45 * num47;
					velocity.Y = num46 * num47;
					this.ai[1] = 2f;
					netUpdate = true;
					if (netSpam > 10)
					{
						netSpam = 10;
					}
				}
				else if (this.ai[1] == 2f)
				{
					float num48 = 40f;
					this.ai[2] += 1f;
					if (Main.expertMode)
					{
						num48 = 50f;
					}
					if (this.ai[2] >= num48)
					{
						velocity *= 0.97f;
						if (Main.expertMode)
						{
							velocity *= 0.98f;
						}
						if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
						{
							velocity.X = 0f;
						}
						if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
						{
							velocity.Y = 0f;
						}
					}
					else
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
					}
					int num49 = 130;
					if (Main.expertMode)
					{
						num49 = 90;
					}
					if (this.ai[2] >= (float)num49)
					{
						this.ai[3] += 1f;
						this.ai[2] = 0f;
						target = 255;
						rotation = num7;
						if (this.ai[3] >= 3f)
						{
							this.ai[1] = 0f;
							this.ai[3] = 0f;
							if (Main.expertMode && Main.netMode != 1 && (double)life < (double)lifeMax * 0.5)
							{
								this.ai[1] = 3f;
								this.ai[3] += Main.rand.Next(1, 4);
							}
							netUpdate = true;
							if (netSpam > 10)
							{
								netSpam = 10;
							}
						}
						else
						{
							this.ai[1] = 1f;
						}
					}
				}
				else if (this.ai[1] == 3f)
				{
					if (this.ai[3] == 4f && flag2 && base.Center.Y > Main.player[target].Center.Y)
					{
						TargetClosest();
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
					}
					else if (Main.netMode != 1)
					{
						TargetClosest();
						float num50 = 20f;
						Vector2 vector10 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num51 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector10.X;
						float num52 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector10.Y;
						float num53 = Math.Abs(Main.player[target].velocity.X) + Math.Abs(Main.player[target].velocity.Y) / 4f;
						num53 += 10f - num53;
						if (num53 < 5f)
						{
							num53 = 5f;
						}
						if (num53 > 15f)
						{
							num53 = 15f;
						}
						if (this.ai[2] == -1f && !flag3)
						{
							num53 *= 4f;
							num50 *= 1.3f;
						}
						if (flag3)
						{
							num53 *= 2f;
						}
						num51 -= Main.player[target].velocity.X * num53;
						num52 -= Main.player[target].velocity.Y * num53 / 4f;
						num51 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						num52 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						if (flag3)
						{
							num51 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
							num52 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						}
						float num54 = (float)Math.Sqrt(num51 * num51 + num52 * num52);
						float num55 = num54;
						num54 = num50 / num54;
						velocity.X = num51 * num54;
						velocity.Y = num52 * num54;
						velocity.X += (float)Main.rand.Next(-20, 21) * 0.1f;
						velocity.Y += (float)Main.rand.Next(-20, 21) * 0.1f;
						if (flag3)
						{
							velocity.X += (float)Main.rand.Next(-50, 51) * 0.1f;
							velocity.Y += (float)Main.rand.Next(-50, 51) * 0.1f;
							float num56 = Math.Abs(velocity.X);
							float num57 = Math.Abs(velocity.Y);
							if (base.Center.X > Main.player[target].Center.X)
							{
								num57 *= -1f;
							}
							if (base.Center.Y > Main.player[target].Center.Y)
							{
								num56 *= -1f;
							}
							velocity.X = num57 + velocity.X;
							velocity.Y = num56 + velocity.Y;
							velocity.Normalize();
							velocity *= num50;
							velocity.X += (float)Main.rand.Next(-20, 21) * 0.1f;
							velocity.Y += (float)Main.rand.Next(-20, 21) * 0.1f;
						}
						else if (num55 < 100f)
						{
							if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
							{
								float num58 = Math.Abs(velocity.X);
								float num59 = Math.Abs(velocity.Y);
								if (base.Center.X > Main.player[target].Center.X)
								{
									num59 *= -1f;
								}
								if (base.Center.Y > Main.player[target].Center.Y)
								{
									num58 *= -1f;
								}
								velocity.X = num59;
								velocity.Y = num58;
							}
						}
						else if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
						{
							float num60 = (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) / 2f;
							float num61 = num60;
							if (base.Center.X > Main.player[target].Center.X)
							{
								num61 *= -1f;
							}
							if (base.Center.Y > Main.player[target].Center.Y)
							{
								num60 *= -1f;
							}
							velocity.X = num61;
							velocity.Y = num60;
						}
						this.ai[1] = 4f;
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
					}
				}
				else if (this.ai[1] == 4f)
				{
					if (this.ai[2] == 0f)
					{
						SoundEngine.PlaySound(36, (int)position.X, (int)position.Y, -1);
					}
					float num62 = num4;
					this.ai[2] += 1f;
					if (this.ai[2] == num62 && Vector2.Distance(position, Main.player[target].position) < 200f)
					{
						this.ai[2] -= 1f;
					}
					if (this.ai[2] >= num62)
					{
						velocity *= 0.95f;
						if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
						{
							velocity.X = 0f;
						}
						if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
						{
							velocity.Y = 0f;
						}
					}
					else
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
					}
					float num63 = num62 + 13f;
					if (this.ai[2] >= num63)
					{
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
						this.ai[3] += 1f;
						this.ai[2] = 0f;
						if (this.ai[3] >= 5f)
						{
							this.ai[1] = 0f;
							this.ai[3] = 0f;
							if (target >= 0 && Main.getGoodWorld && Collision.CanHit(position, width, height, Main.player[target].position, width, height))
							{
								SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
								this.ai[0] = 2f;
								this.ai[1] = 0f;
								this.ai[2] = 0f;
								this.ai[3] = 1f;
								netUpdate = true;
							}
						}
						else
						{
							this.ai[1] = 3f;
						}
					}
				}
				else if (this.ai[1] == 5f)
				{
					float num64 = 600f;
					float num65 = 9f;
					float num66 = 0.3f;
					Vector2 vector11 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num67 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector11.X;
					float num68 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) + num64 - vector11.Y;
					float num69 = (float)Math.Sqrt(num67 * num67 + num68 * num68);
					num69 = num65 / num69;
					num67 *= num69;
					num68 *= num69;
					if (velocity.X < num67)
					{
						velocity.X += num66;
						if (velocity.X < 0f && num67 > 0f)
						{
							velocity.X += num66;
						}
					}
					else if (velocity.X > num67)
					{
						velocity.X -= num66;
						if (velocity.X > 0f && num67 < 0f)
						{
							velocity.X -= num66;
						}
					}
					if (velocity.Y < num68)
					{
						velocity.Y += num66;
						if (velocity.Y < 0f && num68 > 0f)
						{
							velocity.Y += num66;
						}
					}
					else if (velocity.Y > num68)
					{
						velocity.Y -= num66;
						if (velocity.Y > 0f && num68 < 0f)
						{
							velocity.Y -= num66;
						}
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= 70f)
					{
						TargetClosest();
						this.ai[1] = 3f;
						this.ai[2] = -1f;
						this.ai[3] = Main.rand.Next(-3, 1);
						netUpdate = true;
					}
				}
				if (flag3 && this.ai[1] == 5f)
				{
					this.ai[1] = 3f;
				}
				return;
			}
			if (aiStyle == 5)
			{
				AI_005_EaterOfSouls();
				return;
			}
			if (aiStyle == 6)
			{
				AI_006_Worms();
				return;
			}
			if (aiStyle == 7)
			{
				AI_007_TownEntities();
				return;
			}
			if (aiStyle == 8)
			{
				TargetClosest();
				velocity.X *= 0.93f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[0] = 500f;
				}
				if (type == 172)
				{
					if (alpha < 255)
					{
						alpha++;
					}
					if (justHit)
					{
						alpha = 0;
					}
				}
				if (this.ai[2] != 0f && this.ai[3] != 0f)
				{
					position += netOffset;
					if (type == 172)
					{
						alpha = 255;
					}
					SoundEngine.PlaySound(SoundID.Item8, position);
					for (int num70 = 0; num70 < 50; num70++)
					{
						if (type == 29 || type == 45)
						{
							int num71 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 100, default(Color), Main.rand.Next(1, 3));
							Dust dust = Main.dust[num71];
							dust.velocity *= 3f;
							if (Main.dust[num71].scale > 1f)
							{
								Main.dust[num71].noGravity = true;
							}
						}
						else if (type == 32)
						{
							int num72 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num72];
							dust.velocity *= 3f;
							Main.dust[num72].noGravity = true;
						}
						else if (type == 283 || type == 284)
						{
							int num73 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 173);
							Dust dust = Main.dust[num73];
							dust.velocity *= 2f;
							Main.dust[num73].scale = 1.4f;
						}
						else if (type == 285 || type == 286)
						{
							int num74 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num74];
							dust.velocity *= 3f;
							Main.dust[num74].noGravity = true;
						}
						else if (type == 281 || type == 282)
						{
							int num75 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num75];
							dust.velocity *= 3f;
							Main.dust[num75].noGravity = true;
						}
						else if (type == 172)
						{
							int num76 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 106, 0f, 0f, 100, default(Color), 2.5f);
							Dust dust = Main.dust[num76];
							dust.velocity *= 3f;
							Main.dust[num76].noGravity = true;
						}
						else if (type == 533)
						{
							int num77 = Dust.NewDust(position, width, height, 27, 0f, 0f, 100, default(Color), 2.5f);
							Dust dust = Main.dust[num77];
							dust.velocity *= 3f;
							Main.dust[num77].noGravity = true;
						}
						else
						{
							int num78 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Dust dust = Main.dust[num78];
							dust.velocity *= 3f;
							Main.dust[num78].noGravity = true;
						}
					}
					position -= netOffset;
					position.X = this.ai[2] * 16f - (float)(width / 2) + 8f;
					position.Y = this.ai[3] * 16f - (float)height;
					netOffset *= 0f;
					velocity.X = 0f;
					velocity.Y = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					SoundEngine.PlaySound(SoundID.Item8, position);
					for (int num79 = 0; num79 < 50; num79++)
					{
						if (type == 29 || type == 45)
						{
							int num80 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 100, default(Color), Main.rand.Next(1, 3));
							Dust dust = Main.dust[num80];
							dust.velocity *= 3f;
							if (Main.dust[num80].scale > 1f)
							{
								Main.dust[num80].noGravity = true;
							}
						}
						else if (type == 32)
						{
							int num81 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num81];
							dust.velocity *= 3f;
							Main.dust[num81].noGravity = true;
						}
						else if (type == 172)
						{
							int num82 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 106, 0f, 0f, 100, default(Color), 2.5f);
							Dust dust = Main.dust[num82];
							dust.velocity *= 3f;
							Main.dust[num82].noGravity = true;
						}
						else if (type == 283 || type == 284)
						{
							int num83 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 173);
							Dust dust = Main.dust[num83];
							dust.velocity *= 2f;
							Main.dust[num83].scale = 1.4f;
						}
						else if (type == 285 || type == 286)
						{
							int num84 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num84];
							dust.velocity *= 3f;
							Main.dust[num84].noGravity = true;
						}
						else if (type == 281 || type == 282)
						{
							int num85 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num85];
							dust.velocity *= 3f;
							Main.dust[num85].noGravity = true;
						}
						else if (type == 533)
						{
							int num86 = Dust.NewDust(position, width, height, 27, 0f, 0f, 100, default(Color), 2.5f);
							Dust dust = Main.dust[num86];
							dust.velocity *= 3f;
							Main.dust[num86].noGravity = true;
						}
						else
						{
							int num87 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Dust dust = Main.dust[num87];
							dust.velocity *= 3f;
							Main.dust[num87].noGravity = true;
						}
					}
				}
				this.ai[0] += 1f;
				if (type == 283 || type == 284)
				{
					if (this.ai[0] == 100f || this.ai[0] == 150f || this.ai[0] == 200f || this.ai[0] == 250f || this.ai[0] == 300f)
					{
						this.ai[1] = 30f;
						netUpdate = true;
					}
					if (this.ai[0] >= 450f)
					{
						this.ai[0] = 700f;
					}
				}
				else if (type == 172)
				{
					if (this.ai[0] == 75f || this.ai[0] == 150f || this.ai[0] == 225f || this.ai[0] == 300f || this.ai[0] == 375f || this.ai[0] == 450f)
					{
						this.ai[1] = 30f;
						netUpdate = true;
					}
				}
				else if (type == 533)
				{
					if (this.ai[0] == 180f)
					{
						this.ai[1] = 181f;
						netUpdate = true;
					}
				}
				else if (type == 281 || type == 282)
				{
					if (this.ai[0] == 100f || this.ai[0] == 120f || this.ai[0] == 140f || this.ai[0] == 200f || this.ai[0] == 220f || this.ai[0] == 240f || this.ai[0] == 300f || this.ai[0] == 320f || this.ai[0] == 340f)
					{
						this.ai[1] = 30f;
						netUpdate = true;
					}
					if (this.ai[0] >= 540f)
					{
						this.ai[0] = 700f;
					}
				}
				else
				{
					if (Main.getGoodWorld && type == 24 && AnyNPCs(113))
					{
						this.ai[0] += 1f;
						if (this.ai[0] % 2f == 1f)
						{
							this.ai[0] -= 1f;
						}
					}
					if (this.ai[0] == 100f || this.ai[0] == 200f || this.ai[0] == 300f)
					{
						this.ai[1] = 30f;
						netUpdate = true;
					}
				}
				if ((type == 285 || type == 286) && this.ai[0] > 400f)
				{
					this.ai[0] = 650f;
				}
				if (type == 533 && this.ai[0] >= 360f)
				{
					this.ai[0] = 650f;
				}
				if (this.ai[0] >= 650f && Main.netMode != 1)
				{
					this.ai[0] = 1f;
					int targetTileX = (int)Main.player[target].Center.X / 16;
					int targetTileY = (int)Main.player[target].Center.Y / 16;
					Vector2 chosenTile = Vector2.Zero;
					if (AI_AttemptToFindTeleportSpot(ref chosenTile, targetTileX, targetTileY))
					{
						this.ai[1] = 20f;
						this.ai[2] = chosenTile.X;
						this.ai[3] = chosenTile.Y;
					}
					netUpdate = true;
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
					if (type == 533)
					{
						if (this.ai[1] % 30f == 0f && this.ai[1] / 30f < 5f)
						{
							SoundEngine.PlaySound(SoundID.Item8, position);
							if (Main.netMode != 1)
							{
								Point point = base.Center.ToTileCoordinates();
								Point point2 = Main.player[target].Center.ToTileCoordinates();
								Vector2 vector12 = Main.player[target].Center - base.Center;
								int num88 = 6;
								int num89 = 6;
								int num90 = 0;
								int num91 = 2;
								int num92 = 0;
								bool flag4 = false;
								if (vector12.Length() > 2000f)
								{
									flag4 = true;
								}
								while (!flag4 && num92 < 50)
								{
									num92++;
									int num93 = Main.rand.Next(point2.X - num88, point2.X + num88 + 1);
									int num94 = Main.rand.Next(point2.Y - num88, point2.Y + num88 + 1);
									if ((num94 < point2.Y - num90 || num94 > point2.Y + num90 || num93 < point2.X - num90 || num93 > point2.X + num90) && (num94 < point.Y - num89 || num94 > point.Y + num89 || num93 < point.X - num89 || num93 > point.X + num89) && !Main.tile[num93, num94].nactive())
									{
										bool flag5 = true;
										if (flag5 && Main.tile[num93, num94].lava())
										{
											flag5 = false;
										}
										if (flag5 && Collision.SolidTiles(num93 - num91, num93 + num91, num94 - num91, num94 + num91))
										{
											flag5 = false;
										}
										if (flag5)
										{
											Projectile.NewProjectile(GetSpawnSource_ForProjectile(), num93 * 16 + 8, num94 * 16 + 8, 0f, 0f, 596, 0, 1f, Main.myPlayer, target);
											flag4 = true;
											break;
										}
									}
								}
							}
						}
					}
					else if (this.ai[1] == 25f)
					{
						if (type >= 281 && type <= 286)
						{
							if (Main.netMode != 1)
							{
								float num95 = 6f;
								if (type == 285 || type == 286)
								{
									num95 = 8f;
								}
								if (type == 281 || type == 282)
								{
									num95 = 4f;
								}
								Vector2 vector13 = new Vector2(position.X + (float)width * 0.5f, position.Y);
								float num96 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector13.X;
								float num97 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector13.Y;
								if (type == 283 || type == 284)
								{
									num96 += (float)Main.rand.Next(-30, 31);
									num97 += (float)Main.rand.Next(-30, 31);
									num96 -= Main.player[target].velocity.X * 10f;
									num97 -= Main.player[target].velocity.Y * 10f;
								}
								float num98 = (float)Math.Sqrt(num96 * num96 + num97 * num97);
								num98 = num95 / num98;
								num96 *= num98;
								num97 *= num98;
								int num99 = 30;
								int num100 = 290;
								if (type == 285 || type == 286)
								{
									num100 = 291;
									num99 = 40;
								}
								if (type == 281 || type == 282)
								{
									num100 = 293;
									num99 = 40;
								}
								num99 = GetAttackDamage_ForProjectiles(num99, (float)num99 * 0.8f);
								int num101 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector13.X, vector13.Y, num96, num97, num100, num99, 0f, Main.myPlayer);
								Main.projectile[num101].timeLeft = 300;
								if (num100 == 291)
								{
									Main.projectile[num101].ai[0] = Main.player[target].Center.X;
									Main.projectile[num101].ai[1] = Main.player[target].Center.Y;
									Main.projectile[num101].netUpdate = true;
								}
								localAI[0] = 0f;
							}
						}
						else
						{
							if (type != 172)
							{
								SoundEngine.PlaySound(SoundID.Item8, position);
							}
							if (Main.netMode != 1)
							{
								if (type == 29)
								{
									NewNPC(GetSpawnSourceForProjectileNPC(), (int)position.X + width / 2, (int)position.Y - 8, 30);
								}
								else if (type == 45)
								{
									NewNPC(GetSpawnSourceForProjectileNPC(), (int)position.X + width / 2, (int)position.Y - 8, 665);
								}
								else if (type == 32)
								{
									NewNPC(GetSpawnSourceForProjectileNPC(), (int)position.X + width / 2, (int)position.Y - 8, 33);
								}
								else if (type == 172)
								{
									float num102 = 10f;
									Vector2 vector14 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
									float num103 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector14.X + (float)Main.rand.Next(-10, 11);
									float num104 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector14.Y + (float)Main.rand.Next(-10, 11);
									float num105 = (float)Math.Sqrt(num103 * num103 + num104 * num104);
									num105 = num102 / num105;
									num103 *= num105;
									num104 *= num105;
									int num106 = 40;
									int num107 = 129;
									int num108 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector14.X, vector14.Y, num103, num104, num107, num106, 0f, Main.myPlayer);
									Main.projectile[num108].timeLeft = 300;
									localAI[0] = 0f;
								}
								else
								{
									NewNPC(GetSpawnSourceForProjectileNPC(), (int)position.X + width / 2 + direction * 8, (int)position.Y + 20, 25);
								}
							}
						}
					}
				}
				position += netOffset;
				if (type == 29 || type == 45)
				{
					if (Main.rand.Next(5) == 0)
					{
						int num109 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 27, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 1.5f);
						Main.dust[num109].noGravity = true;
						Main.dust[num109].velocity.X *= 0.5f;
						Main.dust[num109].velocity.Y = -2f;
					}
				}
				else if (type == 32)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num110 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 172, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 0.9f);
						Main.dust[num110].noGravity = true;
						Main.dust[num110].velocity.X *= 0.3f;
						Main.dust[num110].velocity.Y *= 0.2f;
						Main.dust[num110].velocity.Y -= 1f;
					}
				}
				else if (type == 172)
				{
					int num111 = 1;
					if (alpha == 255)
					{
						num111 = 2;
					}
					for (int num112 = 0; num112 < num111; num112++)
					{
						if (Main.rand.Next(255) > 255 - alpha)
						{
							int num113 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 106, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 1.2f);
							Main.dust[num113].noGravity = true;
							Main.dust[num113].velocity.X *= 0.1f + (float)Main.rand.Next(30) * 0.01f;
							Main.dust[num113].velocity.Y *= 0.1f + (float)Main.rand.Next(30) * 0.01f;
							Dust dust = Main.dust[num113];
							dust.scale *= 1f + (float)Main.rand.Next(6) * 0.1f;
						}
					}
				}
				else if (type == 283 || type == 284)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num114 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 173);
						Main.dust[num114].velocity.X *= 0.5f;
						Main.dust[num114].velocity.Y *= 0.5f;
					}
				}
				else if (type == 285 || type == 286)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num115 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 174, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
						Main.dust[num115].noGravity = true;
						Dust dust = Main.dust[num115];
						dust.velocity *= 0.4f;
						Main.dust[num115].velocity.Y -= 0.7f;
					}
				}
				else if (type == 281 || type == 282)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num116 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 175, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 0.1f);
						Main.dust[num116].noGravity = true;
						Dust dust = Main.dust[num116];
						dust.velocity *= 0.5f;
						Main.dust[num116].fadeIn = 1.2f;
					}
				}
				else if (type == 533)
				{
					Lighting.AddLight(base.Top, 0.6f, 0.6f, 0.3f);
				}
				else if (Main.rand.Next(2) == 0)
				{
					int num117 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num117].noGravity = true;
					Main.dust[num117].velocity.X *= 1f;
					Main.dust[num117].velocity.Y *= 1f;
				}
				position -= netOffset;
				return;
			}
			if (aiStyle == 9)
			{
				if (type == 516)
				{
					if (alpha < 220)
					{
						alpha += 40;
					}
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 1f;
						Vector2 vector15 = Main.player[target].Center - base.Center;
						vector15.Normalize();
						if (vector15.HasNaNs())
						{
							vector15 = -Vector2.UnitY;
						}
						vector15 = vector15.RotatedByRandom(1.5707963705062866).RotatedBy(-0.7853981852531433);
						if (vector15.Y > 0.2f)
						{
							vector15.Y = 0.2f;
						}
						velocity = vector15 * (6f + Main.rand.NextFloat() * 4f);
					}
					if (collideX || collideY || Distance(Main.player[target].Center) < 20f)
					{
						StrikeNPCNoInteraction(9999, 0f, direction);
					}
				}
				if (target == 255)
				{
					TargetClosest();
					float num118 = 6f;
					if (type == 25)
					{
						num118 = 5f;
					}
					if (type == 112 || type == 666)
					{
						num118 = 7f;
					}
					if (Main.getGoodWorld)
					{
						if (type == 33 && AnyNPCs(35))
						{
							num118 = 10f;
							dontTakeDamage = true;
						}
						if (type == 25 && AnyNPCs(113))
						{
							num118 = 14f;
							dontTakeDamage = true;
						}
						if (type == 666)
						{
							num118 = 10f;
							if ((double)(base.Center.Y / 16f) < Main.worldSurface)
							{
								dontTakeDamage = true;
							}
						}
					}
					Vector2 vector16 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num119 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector16.X;
					float num120 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector16.Y;
					float num121 = (float)Math.Sqrt(num119 * num119 + num120 * num120);
					num121 = num118 / num121;
					velocity.X = num119 * num121;
					velocity.Y = num120 * num121;
				}
				if (type == 112 || type == 666)
				{
					damage = defDamage;
					if (this.ai[1] == 1f)
					{
						damage = GetAttackDamage_ScaledByStrength(32f);
					}
					this.ai[0] += 1f;
					if (this.ai[0] > 3f)
					{
						this.ai[0] = 3f;
					}
					if (this.ai[0] == 2f)
					{
						position += velocity;
						SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 9);
						for (int num122 = 0; num122 < 20; num122++)
						{
							int num123 = Dust.NewDust(new Vector2(position.X, position.Y + 2f) + netOffset, width, height, 18, 0f, 0f, 100, default(Color), 1.8f);
							Dust dust = Main.dust[num123];
							dust.velocity *= 1.3f;
							dust = Main.dust[num123];
							dust.velocity += velocity;
							Main.dust[num123].noGravity = true;
						}
					}
				}
				if ((type == 112 || type == 666) && Collision.SolidCollision(position, width, height))
				{
					_ = Main.netMode;
					_ = 1;
					StrikeNPCNoInteraction(9999, 0f, 0);
				}
				EncourageDespawn(100);
				if (type == 516)
				{
					rotation += 0.1f * (float)direction;
					float num124 = 15f;
					float num125 = 1f / 12f;
					Vector2 center = base.Center;
					Vector2 center2 = Main.player[target].Center;
					Vector2 vector17 = center2 - center;
					vector17.Normalize();
					if (vector17.HasNaNs())
					{
						vector17 = new Vector2(direction, 0f);
					}
					velocity = (velocity * (num124 - 1f) + vector17 * (velocity.Length() + num125)) / num124;
					if (velocity.Length() < 6f)
					{
						velocity *= 1.05f;
					}
					return;
				}
				position += netOffset;
				for (int num126 = 0; num126 < 2; num126++)
				{
					if (type == 30 || type == 665)
					{
						alpha = 255;
						for (int num127 = 0; num127 < 2; num127++)
						{
							int num128 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 27, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 1.3f);
							Main.dust[num128].noGravity = true;
							Dust dust = Main.dust[num128];
							dust.velocity *= 0.3f;
							Main.dust[num128].velocity.X -= velocity.X * 0.2f;
							Main.dust[num128].velocity.Y -= velocity.Y * 0.2f;
						}
					}
					else if (type == 33)
					{
						for (int num129 = 0; num129 < 3; num129++)
						{
							float num130 = velocity.X / 3f * (float)num126;
							float num131 = velocity.Y / 3f * (float)num126;
							int num132 = 2;
							int num133 = Dust.NewDust(new Vector2(position.X + (float)num132, position.Y + (float)num132), width - num132 * 2, height - num132 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
							Main.dust[num133].noGravity = true;
							Dust dust = Main.dust[num133];
							dust.velocity *= 0.1f;
							dust = Main.dust[num133];
							dust.velocity += velocity * 0.5f;
							Main.dust[num133].position.X -= num130;
							Main.dust[num133].position.Y -= num131;
						}
						if (Main.rand.Next(5) == 0)
						{
							int num134 = 2;
							int num135 = Dust.NewDust(new Vector2(position.X + (float)num134, position.Y + (float)num134), width - num134 * 2, height - num134 * 2, 172, 0f, 0f, 100, default(Color), 0.6f);
							Dust dust = Main.dust[num135];
							dust.velocity *= 0.25f;
							dust = Main.dust[num135];
							dust.velocity += velocity * 0.5f;
						}
					}
					else if (type == 112 || type == 666)
					{
						int num136 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 18, velocity.X * 0.1f, velocity.Y * 0.1f, 80, default(Color), 1.3f);
						Dust dust = Main.dust[num136];
						dust.velocity *= 0.3f;
						Main.dust[num136].noGravity = true;
					}
					else
					{
						Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 1f, 0.3f, 0.1f);
						int num137 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num137].noGravity = true;
						Main.dust[num137].velocity.X *= 0.3f;
						Main.dust[num137].velocity.Y *= 0.3f;
					}
				}
				rotation += 0.4f * (float)direction;
				position -= netOffset;
				return;
			}
			if (aiStyle == 10)
			{
				float num138 = 1f;
				float num139 = 0.011f;
				TargetClosest();
				Vector2 vector18 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num140 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector18.X;
				float num141 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector18.Y;
				float num142 = (float)Math.Sqrt(num140 * num140 + num141 * num141);
				float num143 = num142;
				this.ai[1] += 1f;
				if (this.ai[1] > 600f)
				{
					num139 *= 8f;
					num138 = 4f;
					if (this.ai[1] > 650f)
					{
						this.ai[1] = 0f;
					}
				}
				else if (num143 < 250f)
				{
					this.ai[0] += 0.9f;
					if (this.ai[0] > 0f)
					{
						velocity.Y += 0.019f;
					}
					else
					{
						velocity.Y -= 0.019f;
					}
					if (this.ai[0] < -100f || this.ai[0] > 100f)
					{
						velocity.X += 0.019f;
					}
					else
					{
						velocity.X -= 0.019f;
					}
					if (this.ai[0] > 200f)
					{
						this.ai[0] = -200f;
					}
				}
				if (num143 > 350f)
				{
					num138 = 5f;
					num139 = 0.3f;
				}
				else if (num143 > 300f)
				{
					num138 = 3f;
					num139 = 0.2f;
				}
				else if (num143 > 250f)
				{
					num138 = 1.5f;
					num139 = 0.1f;
				}
				num142 = num138 / num142;
				num140 *= num142;
				num141 *= num142;
				if (Main.player[target].dead)
				{
					num140 = (float)direction * num138 / 2f;
					num141 = (0f - num138) / 2f;
				}
				if (velocity.X < num140)
				{
					velocity.X += num139;
				}
				else if (velocity.X > num140)
				{
					velocity.X -= num139;
				}
				if (velocity.Y < num141)
				{
					velocity.Y += num139;
				}
				else if (velocity.Y > num141)
				{
					velocity.Y -= num139;
				}
				if (num140 > 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num141, num140);
				}
				if (num140 < 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num141, num140) + 3.14f;
				}
				if (type != 289)
				{
					return;
				}
				if (justHit)
				{
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
				vector18 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				num140 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector18.X;
				num141 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector18.Y;
				num142 = (float)Math.Sqrt(num140 * num140 + num141 * num141);
				if (num142 <= 500f)
				{
					this.ai[2] += 1f;
					if (this.ai[3] == 0f)
					{
						if (this.ai[2] > 120f)
						{
							this.ai[2] = 0f;
							this.ai[3] = 1f;
							netUpdate = true;
						}
						return;
					}
					if (this.ai[2] > 40f)
					{
						this.ai[3] = 0f;
					}
					if (Main.netMode != 1 && this.ai[2] == 20f)
					{
						float num144 = 6f;
						int num145 = 25;
						int num146 = 299;
						num142 = num144 / num142;
						num140 *= num142;
						num141 *= num142;
						int num147 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector18.X, vector18.Y, num140, num141, num146, num145, 0f, Main.myPlayer);
					}
				}
				else
				{
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
				return;
			}
			if (aiStyle == 11)
			{
				reflectsProjectiles = false;
				defense = defDefense;
				if (this.ai[0] == 0f && Main.netMode != 1)
				{
					TargetClosest();
					this.ai[0] = 1f;
					if (type != 68)
					{
						int num148 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 36, whoAmI);
						Main.npc[num148].ai[0] = -1f;
						Main.npc[num148].ai[1] = whoAmI;
						Main.npc[num148].target = target;
						Main.npc[num148].netUpdate = true;
						num148 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 36, whoAmI);
						Main.npc[num148].ai[0] = 1f;
						Main.npc[num148].ai[1] = whoAmI;
						Main.npc[num148].ai[3] = 150f;
						Main.npc[num148].target = target;
						Main.npc[num148].netUpdate = true;
					}
				}
				if ((type == 68 || Main.netMode == 1) && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				}
				if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 2000f || Math.Abs(position.Y - Main.player[target].position.Y) > 2000f)
				{
					TargetClosest();
					if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 2000f || Math.Abs(position.Y - Main.player[target].position.Y) > 2000f)
					{
						this.ai[1] = 3f;
					}
				}
				if ((type == 68 || Main.IsItDay()) && this.ai[1] != 3f && this.ai[1] != 2f)
				{
					this.ai[1] = 2f;
					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				}
				int num149 = 0;
				if (Main.expertMode)
				{
					for (int num150 = 0; num150 < 200; num150++)
					{
						if (Main.npc[num150].active && Main.npc[num150].type == type + 1)
						{
							num149++;
						}
					}
					defense += num149 * 25;
					if ((num149 < 2 || (double)life < (double)lifeMax * 0.75) && this.ai[1] == 0f)
					{
						float num151 = 80f;
						if (num149 == 0)
						{
							num151 /= 2f;
						}
						if (Main.getGoodWorld)
						{
							num151 *= 0.8f;
						}
						if (Main.netMode != 1 && this.ai[2] % num151 == 0f)
						{
							Vector2 center3 = base.Center;
							float num152 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - center3.X;
							float num153 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - center3.Y;
							float num154 = (float)Math.Sqrt(num152 * num152 + num153 * num153);
							if (Collision.CanHit(center3, 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
							{
								float num155 = 3f;
								if (num149 == 0)
								{
									num155 += 2f;
								}
								float num156 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - center3.X + (float)Main.rand.Next(-20, 21);
								float num157 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - center3.Y + (float)Main.rand.Next(-20, 21);
								float num158 = (float)Math.Sqrt(num156 * num156 + num157 * num157);
								num158 = num155 / num158;
								num156 *= num158;
								num157 *= num158;
								Vector2 vector19 = new Vector2(num156 * 1f + (float)Main.rand.Next(-50, 51) * 0.01f, num157 * 1f + (float)Main.rand.Next(-50, 51) * 0.01f);
								vector19.Normalize();
								vector19 *= num155;
								vector19 += velocity;
								num156 = vector19.X;
								num157 = vector19.Y;
								int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(17f, 17f);
								int num159 = 270;
								center3 += vector19 * 5f;
								int num160 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center3.X, center3.Y, num156, num157, num159, attackDamage_ForProjectiles, 0f, Main.myPlayer, -1f);
								Main.projectile[num160].timeLeft = 300;
							}
						}
					}
				}
				if (this.ai[1] == 0f)
				{
					damage = defDamage;
					this.ai[2] += 1f;
					if (this.ai[2] >= 800f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 1f;
						TargetClosest();
						netUpdate = true;
					}
					rotation = velocity.X / 15f;
					float num161 = 0.02f;
					float num162 = 2f;
					float num163 = 0.05f;
					float num164 = 8f;
					if (Main.expertMode)
					{
						num161 = 0.03f;
						num162 = 4f;
						num163 = 0.07f;
						num164 = 9.5f;
					}
					if (Main.getGoodWorld)
					{
						num161 += 0.01f;
						num162 += 1f;
						num163 += 0.05f;
						num164 += 2f;
					}
					if (position.Y > Main.player[target].position.Y - 250f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.98f;
						}
						velocity.Y -= num161;
						if (velocity.Y > num162)
						{
							velocity.Y = num162;
						}
					}
					else if (position.Y < Main.player[target].position.Y - 250f)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.98f;
						}
						velocity.Y += num161;
						if (velocity.Y < 0f - num162)
						{
							velocity.Y = 0f - num162;
						}
					}
					if (position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2))
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.98f;
						}
						velocity.X -= num163;
						if (velocity.X > num164)
						{
							velocity.X = num164;
						}
					}
					if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.98f;
						}
						velocity.X += num163;
						if (velocity.X < 0f - num164)
						{
							velocity.X = 0f - num164;
						}
					}
				}
				else if (this.ai[1] == 1f)
				{
					if (Main.getGoodWorld)
					{
						if (num149 > 0)
						{
							reflectsProjectiles = true;
						}
						else if (Main.netMode != 1 && this.ai[2] % 200f == 0f && CountNPCS(32) < 6)
						{
							int num165 = 1;
							for (int num166 = 0; num166 < num165; num166++)
							{
								int num167 = 1000;
								for (int num168 = 0; num168 < num167; num168++)
								{
									int num169 = (int)(base.Center.X / 16f) + Main.rand.Next(-50, 51);
									int num170;
									for (num170 = (int)(base.Center.Y / 16f) + Main.rand.Next(-50, 51); num170 < Main.maxTilesY - 10 && !WorldGen.SolidTile(num169, num170); num170++)
									{
									}
									num170--;
									if (!WorldGen.SolidTile(num169, num170))
									{
										int num171 = NewNPC(GetSpawnSourceForNaturalSpawn(), num169 * 16 + 8, num170 * 16, 32);
										if (Main.netMode == 2 && num171 < 200)
										{
											NetMessage.SendData(23, -1, -1, null, num171);
										}
										break;
									}
								}
							}
						}
					}
					defense -= 10;
					this.ai[2] += 1f;
					if (this.ai[2] == 2f)
					{
						SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
					}
					if (this.ai[2] >= 400f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 0f;
					}
					rotation += (float)direction * 0.3f;
					Vector2 vector20 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num172 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector20.X;
					float num173 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector20.Y;
					float num174 = (float)Math.Sqrt(num172 * num172 + num173 * num173);
					float num175 = 1.5f;
					damage = GetAttackDamage_LerpBetweenFinalValues(defDamage, (float)defDamage * 1.3f);
					if (Main.expertMode)
					{
						num175 = 3.5f;
						if (num174 > 150f)
						{
							num175 *= 1.05f;
						}
						if (num174 > 200f)
						{
							num175 *= 1.1f;
						}
						if (num174 > 250f)
						{
							num175 *= 1.1f;
						}
						if (num174 > 300f)
						{
							num175 *= 1.1f;
						}
						if (num174 > 350f)
						{
							num175 *= 1.1f;
						}
						if (num174 > 400f)
						{
							num175 *= 1.1f;
						}
						if (num174 > 450f)
						{
							num175 *= 1.1f;
						}
						if (num174 > 500f)
						{
							num175 *= 1.1f;
						}
						if (num174 > 550f)
						{
							num175 *= 1.1f;
						}
						if (num174 > 600f)
						{
							num175 *= 1.1f;
						}
						switch (num149)
						{
						case 0:
							num175 *= 1.1f;
							break;
						case 1:
							num175 *= 1.05f;
							break;
						}
					}
					if (Main.getGoodWorld)
					{
						num175 *= 1.3f;
					}
					num174 = num175 / num174;
					velocity.X = num172 * num174;
					velocity.Y = num173 * num174;
				}
				else if (this.ai[1] == 2f)
				{
					damage = 1000;
					defense = 9999;
					rotation += (float)direction * 0.3f;
					Vector2 vector21 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num176 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector21.X;
					float num177 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector21.Y;
					float num178 = (float)Math.Sqrt(num176 * num176 + num177 * num177);
					num178 = 8f / num178;
					velocity.X = num176 * num178;
					velocity.Y = num177 * num178;
				}
				else if (this.ai[1] == 3f)
				{
					velocity.Y += 0.1f;
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.95f;
					}
					velocity.X *= 0.95f;
					EncourageDespawn(50);
				}
				if (this.ai[1] != 2f && this.ai[1] != 3f && type != 68 && (num149 != 0 || !Main.expertMode))
				{
					int num179 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 15f - velocity.X * 5f, position.Y + (float)height - 2f), 30, 10, 5, (0f - velocity.X) * 0.2f, 3f, 0, default(Color), 2f);
					Main.dust[num179].noGravity = true;
					Main.dust[num179].velocity.X *= 1.3f;
					Main.dust[num179].velocity.X += velocity.X * 0.4f;
					Main.dust[num179].velocity.Y += 2f + velocity.Y;
					for (int num180 = 0; num180 < 2; num180++)
					{
						num179 = Dust.NewDust(new Vector2(position.X, position.Y + 120f), width, 60, 5, velocity.X, velocity.Y, 0, default(Color), 2f);
						Main.dust[num179].noGravity = true;
						Dust dust = Main.dust[num179];
						dust.velocity -= velocity;
						Main.dust[num179].velocity.Y += 5f;
					}
				}
				return;
			}
			if (aiStyle == 12)
			{
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 11)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
					{
						EncourageDespawn(10);
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						if (position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (velocity.Y > 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y -= 0.07f;
							if (velocity.Y > 6f)
							{
								velocity.Y = 6f;
							}
						}
						else if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (velocity.Y < 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y += 0.07f;
							if (velocity.Y < -6f)
							{
								velocity.Y = -6f;
							}
						}
						if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (velocity.X > 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X -= 0.1f;
							if (velocity.X > 8f)
							{
								velocity.X = 8f;
							}
						}
						if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (velocity.X < 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X += 0.1f;
							if (velocity.X < -8f)
							{
								velocity.X = -8f;
							}
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (Main.expertMode)
						{
							this.ai[3] += 0.5f;
						}
						if (this.ai[3] >= 300f)
						{
							this.ai[2] += 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (Main.expertMode)
						{
							if (position.Y > Main.npc[(int)this.ai[1]].position.Y + 230f)
							{
								if (velocity.Y > 0f)
								{
									velocity.Y *= 0.96f;
								}
								velocity.Y -= 0.04f;
								if (velocity.Y > 3f)
								{
									velocity.Y = 3f;
								}
							}
							else if (position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
							{
								if (velocity.Y < 0f)
								{
									velocity.Y *= 0.96f;
								}
								velocity.Y += 0.04f;
								if (velocity.Y < -3f)
								{
									velocity.Y = -3f;
								}
							}
							if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
							{
								if (velocity.X > 0f)
								{
									velocity.X *= 0.96f;
								}
								velocity.X -= 0.07f;
								if (velocity.X > 8f)
								{
									velocity.X = 8f;
								}
							}
							if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
							{
								if (velocity.X < 0f)
								{
									velocity.X *= 0.96f;
								}
								velocity.X += 0.07f;
								if (velocity.X < -8f)
								{
									velocity.X = -8f;
								}
							}
						}
						if (position.Y > Main.npc[(int)this.ai[1]].position.Y + 230f)
						{
							if (velocity.Y > 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y -= 0.04f;
							if (velocity.Y > 3f)
							{
								velocity.Y = 3f;
							}
						}
						else if (position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
						{
							if (velocity.Y < 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y += 0.04f;
							if (velocity.Y < -3f)
							{
								velocity.Y = -3f;
							}
						}
						if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
						{
							if (velocity.X > 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X -= 0.07f;
							if (velocity.X > 8f)
							{
								velocity.X = 8f;
							}
						}
						if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
						{
							if (velocity.X < 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X += 0.07f;
							if (velocity.X < -8f)
							{
								velocity.X = -8f;
							}
						}
					}
					Vector2 vector22 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num181 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector22.X;
					float num182 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector22.Y;
					float num183 = (float)Math.Sqrt(num181 * num181 + num182 * num182);
					rotation = (float)Math.Atan2(num182, num181) + 1.57f;
				}
				else if (this.ai[2] == 1f)
				{
					Vector2 vector23 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num184 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector23.X;
					float num185 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector23.Y;
					float num186 = (float)Math.Sqrt(num184 * num184 + num185 * num185);
					rotation = (float)Math.Atan2(num185, num184) + 1.57f;
					velocity.X *= 0.95f;
					velocity.Y -= 0.1f;
					if (Main.expertMode)
					{
						velocity.Y -= 0.06f;
						if (velocity.Y < -13f)
						{
							velocity.Y = -13f;
						}
					}
					else if (velocity.Y < -8f)
					{
						velocity.Y = -8f;
					}
					if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
					{
						TargetClosest();
						this.ai[2] = 2f;
						vector23 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						num184 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector23.X;
						num185 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector23.Y;
						num186 = (float)Math.Sqrt(num184 * num184 + num185 * num185);
						num186 = ((!Main.expertMode) ? (18f / num186) : (21f / num186));
						velocity.X = num184 * num186;
						velocity.Y = num185 * num186;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 2f)
				{
					if (position.Y > Main.player[target].position.Y || velocity.Y < 0f)
					{
						this.ai[2] = 3f;
					}
				}
				else if (this.ai[2] == 4f)
				{
					Vector2 vector24 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num187 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector24.X;
					float num188 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector24.Y;
					float num189 = (float)Math.Sqrt(num187 * num187 + num188 * num188);
					rotation = (float)Math.Atan2(num188, num187) + 1.57f;
					velocity.Y *= 0.95f;
					velocity.X += 0.1f * (0f - this.ai[0]);
					if (Main.expertMode)
					{
						velocity.X += 0.07f * (0f - this.ai[0]);
						if (velocity.X < -12f)
						{
							velocity.X = -12f;
						}
						else if (velocity.X > 12f)
						{
							velocity.X = 12f;
						}
					}
					else if (velocity.X < -8f)
					{
						velocity.X = -8f;
					}
					else if (velocity.X > 8f)
					{
						velocity.X = 8f;
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
					{
						TargetClosest();
						this.ai[2] = 5f;
						vector24 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						num187 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector24.X;
						num188 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector24.Y;
						num189 = (float)Math.Sqrt(num187 * num187 + num188 * num188);
						num189 = ((!Main.expertMode) ? (17f / num189) : (22f / num189));
						velocity.X = num187 * num189;
						velocity.Y = num188 * num189;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 5f && ((velocity.X > 0f && position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2)) || (velocity.X < 0f && position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))))
				{
					this.ai[2] = 0f;
				}
				return;
			}
			if (aiStyle == 13)
			{
				if (this.ai[0] < 0f || this.ai[0] >= (float)Main.maxTilesX || this.ai[1] < 0f || this.ai[1] >= (float)Main.maxTilesX)
				{
					return;
				}
				if (Main.tile[(int)this.ai[0], (int)this.ai[1]] == null)
				{
					Main.tile[(int)this.ai[0], (int)this.ai[1]] = new Tile();
				}
				if (!Main.tile[(int)this.ai[0], (int)this.ai[1]].active())
				{
					life = -1;
					HitEffect();
					active = false;
					return;
				}
				FixExploitManEaters.ProtectSpot((int)this.ai[0], (int)this.ai[1]);
				TargetClosest();
				float num190 = 0.035f;
				float num191 = 150f;
				if (type == 43)
				{
					num191 = ((!Main.getGoodWorld) ? 250f : 350f);
				}
				if (type == 101)
				{
					num191 = 175f;
				}
				if (type == 259)
				{
					num191 = 100f;
				}
				if (type == 175)
				{
					num191 = 500f;
					num190 = 0.05f;
				}
				if (type == 260)
				{
					num191 = 350f;
					num190 = 0.15f;
				}
				this.ai[2] += 1f;
				if (this.ai[2] > 300f)
				{
					num191 = (int)((double)num191 * 1.3);
					if (this.ai[2] > 450f)
					{
						this.ai[2] = 0f;
					}
				}
				Vector2 vector25 = new Vector2(this.ai[0] * 16f + 8f, this.ai[1] * 16f + 8f);
				float num192 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - (float)(width / 2) - vector25.X;
				float num193 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - (float)(height / 2) - vector25.Y;
				float num194 = (float)Math.Sqrt(num192 * num192 + num193 * num193);
				if (num194 > num191)
				{
					num194 = num191 / num194;
					num192 *= num194;
					num193 *= num194;
				}
				if (position.X < this.ai[0] * 16f + 8f + num192)
				{
					velocity.X += num190;
					if (velocity.X < 0f && num192 > 0f)
					{
						velocity.X += num190 * 1.5f;
					}
				}
				else if (position.X > this.ai[0] * 16f + 8f + num192)
				{
					velocity.X -= num190;
					if (velocity.X > 0f && num192 < 0f)
					{
						velocity.X -= num190 * 1.5f;
					}
				}
				if (position.Y < this.ai[1] * 16f + 8f + num193)
				{
					velocity.Y += num190;
					if (velocity.Y < 0f && num193 > 0f)
					{
						velocity.Y += num190 * 1.5f;
					}
				}
				else if (position.Y > this.ai[1] * 16f + 8f + num193)
				{
					velocity.Y -= num190;
					if (velocity.Y > 0f && num193 < 0f)
					{
						velocity.Y -= num190 * 1.5f;
					}
				}
				if (type == 43)
				{
					if (Main.getGoodWorld)
					{
						if ((double)velocity.X > 3.5)
						{
							velocity.X = 3.5f;
						}
						if ((double)velocity.X < -3.5)
						{
							velocity.X = -3.5f;
						}
						if ((double)velocity.Y > 3.5)
						{
							velocity.Y = 3.5f;
						}
						if ((double)velocity.Y < -3.5)
						{
							velocity.Y = -3.5f;
						}
					}
					else
					{
						if (velocity.X > 3f)
						{
							velocity.X = 3f;
						}
						if (velocity.X < -3f)
						{
							velocity.X = -3f;
						}
						if (velocity.Y > 3f)
						{
							velocity.Y = 3f;
						}
						if (velocity.Y < -3f)
						{
							velocity.Y = -3f;
						}
					}
				}
				else if (type == 175)
				{
					if (velocity.X > 4f)
					{
						velocity.X = 4f;
					}
					if (velocity.X < -4f)
					{
						velocity.X = -4f;
					}
					if (velocity.Y > 4f)
					{
						velocity.Y = 4f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				else
				{
					if (velocity.X > 2f)
					{
						velocity.X = 2f;
					}
					if (velocity.X < -2f)
					{
						velocity.X = -2f;
					}
					if (velocity.Y > 2f)
					{
						velocity.Y = 2f;
					}
					if (velocity.Y < -2f)
					{
						velocity.Y = -2f;
					}
				}
				if (type == 259 || type == 260)
				{
					rotation = (float)Math.Atan2(num193, num192) + 1.57f;
				}
				else
				{
					if (num192 > 0f)
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(num193, num192);
					}
					if (num192 < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(num193, num192) + 3.14f;
					}
				}
				if (collideX)
				{
					netUpdate = true;
					velocity.X = oldVelocity.X * -0.7f;
					if (velocity.X > 0f && velocity.X < 2f)
					{
						velocity.X = 2f;
					}
					if (velocity.X < 0f && velocity.X > -2f)
					{
						velocity.X = -2f;
					}
				}
				if (collideY)
				{
					netUpdate = true;
					velocity.Y = oldVelocity.Y * -0.7f;
					if (velocity.Y > 0f && velocity.Y < 2f)
					{
						velocity.Y = 2f;
					}
					if (velocity.Y < 0f && velocity.Y > -2f)
					{
						velocity.Y = -2f;
					}
				}
				if (Main.netMode == 1)
				{
					return;
				}
				if (type == 101 && !Main.player[target].DeadOrGhost)
				{
					if (justHit)
					{
						localAI[0] = 0f;
					}
					localAI[0] += 1f;
					if (localAI[0] >= 120f)
					{
						if (!Collision.SolidCollision(position, width, height) && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							float num195 = 10f;
							vector25 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
							num192 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector25.X + (float)Main.rand.Next(-10, 11);
							num193 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector25.Y + (float)Main.rand.Next(-10, 11);
							num194 = (float)Math.Sqrt(num192 * num192 + num193 * num193);
							num194 = num195 / num194;
							num192 *= num194;
							num193 *= num194;
							int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(22f, 17.6f);
							int num196 = 96;
							int num197 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector25.X, vector25.Y, num192, num193, num196, attackDamage_ForProjectiles2, 0f, Main.myPlayer);
							Main.projectile[num197].timeLeft = 300;
							localAI[0] = 0f;
						}
						else
						{
							localAI[0] = 100f;
						}
					}
				}
				if (type != 260 || Main.player[target].DeadOrGhost)
				{
					return;
				}
				if (justHit)
				{
					localAI[0] = 0f;
				}
				localAI[0] += 1f;
				if (!(localAI[0] >= 150f))
				{
					return;
				}
				if (!Collision.SolidCollision(position, width, height) && Collision.CanHit(this, Main.player[target]))
				{
					float num198 = 14f;
					vector25 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num192 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector25.X + (float)Main.rand.Next(-10, 11);
					float num199 = Math.Abs(num192 * 0.1f);
					if (num193 > 0f)
					{
						num199 = 0f;
					}
					num193 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector25.Y + (float)Main.rand.Next(-10, 11) - num199;
					num194 = (float)Math.Sqrt(num192 * num192 + num193 * num193);
					num194 = num198 / num194;
					num192 *= num194;
					num193 *= num194;
					int num200 = NewNPC(GetSpawnSourceForProjectileNPC(), (int)base.Center.X, (int)base.Center.Y, 261);
					Main.npc[num200].velocity.X = num192;
					Main.npc[num200].velocity.Y = num193;
					Main.npc[num200].netUpdate = true;
					localAI[0] = 0f;
				}
				else
				{
					localAI[0] = 250f;
				}
				return;
			}
			if (aiStyle == 14)
			{
				noGravity = true;
				if (collideX)
				{
					velocity.X = oldVelocity.X * -0.5f;
					if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
					{
						velocity.X = 2f;
					}
					if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
					{
						velocity.X = -2f;
					}
				}
				if (collideY)
				{
					velocity.Y = oldVelocity.Y * -0.5f;
					if (velocity.Y > 0f && velocity.Y < 1f)
					{
						velocity.Y = 1f;
					}
					if (velocity.Y < 0f && velocity.Y > -1f)
					{
						velocity.Y = -1f;
					}
				}
				if (type == 226)
				{
					int num201 = 1;
					int num202 = 1;
					if (velocity.X < 0f)
					{
						num201 = -1;
					}
					if (velocity.Y < 0f)
					{
						num202 = -1;
					}
					TargetClosest();
					if (!Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						direction = num201;
						directionY = num202;
					}
				}
				else
				{
					TargetClosest();
				}
				if (type == 158)
				{
					if ((double)position.Y < Main.worldSurface * 16.0 && Main.IsItDay() && !Main.eclipse)
					{
						directionY = -1;
						direction *= -1;
					}
					if (direction == -1 && velocity.X > -7f)
					{
						velocity.X -= 0.2f;
						if (velocity.X > 4f)
						{
							velocity.X -= 0.1f;
						}
						else if (velocity.X > 0f)
						{
							velocity.X += 0.05f;
						}
						if (velocity.X < -7f)
						{
							velocity.X = -7f;
						}
					}
					else if (direction == 1 && velocity.X < 7f)
					{
						velocity.X += 0.2f;
						if (velocity.X < -4f)
						{
							velocity.X += 0.1f;
						}
						else if (velocity.X < 0f)
						{
							velocity.X -= 0.05f;
						}
						if (velocity.X > 7f)
						{
							velocity.X = 7f;
						}
					}
					if (directionY == -1 && velocity.Y > -7f)
					{
						velocity.Y -= 0.2f;
						if (velocity.Y > 4f)
						{
							velocity.Y -= 0.1f;
						}
						else if (velocity.Y > 0f)
						{
							velocity.Y += 0.05f;
						}
						if (velocity.Y < -7f)
						{
							velocity.Y = -7f;
						}
					}
					else if (directionY == 1 && velocity.Y < 7f)
					{
						velocity.Y += 0.2f;
						if (velocity.Y < -4f)
						{
							velocity.Y += 0.1f;
						}
						else if (velocity.Y < 0f)
						{
							velocity.Y -= 0.05f;
						}
						if (velocity.Y > 7f)
						{
							velocity.Y = 7f;
						}
					}
				}
				else if (type == 226)
				{
					if (direction == -1 && velocity.X > -4f)
					{
						velocity.X -= 0.2f;
						if (velocity.X > 4f)
						{
							velocity.X -= 0.1f;
						}
						else if (velocity.X > 0f)
						{
							velocity.X += 0.05f;
						}
						if (velocity.X < -4f)
						{
							velocity.X = -4f;
						}
					}
					else if (direction == 1 && velocity.X < 4f)
					{
						velocity.X += 0.2f;
						if (velocity.X < -4f)
						{
							velocity.X += 0.1f;
						}
						else if (velocity.X < 0f)
						{
							velocity.X -= 0.05f;
						}
						if (velocity.X > 4f)
						{
							velocity.X = 4f;
						}
					}
					if (directionY == -1 && (double)velocity.Y > -2.5)
					{
						velocity.Y -= 0.1f;
						if ((double)velocity.Y > 2.5)
						{
							velocity.Y -= 0.05f;
						}
						else if (velocity.Y > 0f)
						{
							velocity.Y += 0.03f;
						}
						if ((double)velocity.Y < -2.5)
						{
							velocity.Y = -2.5f;
						}
					}
					else if (directionY == 1 && (double)velocity.Y < 2.5)
					{
						velocity.Y += 0.1f;
						if ((double)velocity.Y < -2.5)
						{
							velocity.Y += 0.05f;
						}
						else if (velocity.Y < 0f)
						{
							velocity.Y -= 0.03f;
						}
						if ((double)velocity.Y > 2.5)
						{
							velocity.Y = 2.5f;
						}
					}
				}
				else if (type == 660)
				{
					float num203 = 0.1f;
					float num204 = 0.04f;
					float num205 = 4f;
					float num206 = 1.5f;
					int num207 = type;
					if (num207 == 660)
					{
						num203 = 0.35f;
						num204 = 0.3f;
						num205 = 6f;
						num206 = 5f;
					}
					if (direction == -1 && velocity.X > 0f - num205)
					{
						velocity.X -= num203;
						if (velocity.X > num205)
						{
							velocity.X -= num203;
						}
						else if (velocity.X > 0f)
						{
							velocity.X += num203 * 0.5f;
						}
						if (velocity.X < 0f - num205)
						{
							velocity.X = 0f - num205;
						}
					}
					else if (direction == 1 && velocity.X < num205)
					{
						velocity.X += num203;
						if (velocity.X < 0f - num205)
						{
							velocity.X += num203;
						}
						else if (velocity.X < 0f)
						{
							velocity.X -= num203 * 0.5f;
						}
						if (velocity.X > num205)
						{
							velocity.X = num205;
						}
					}
					if (directionY == -1 && velocity.Y > 0f - num206)
					{
						velocity.Y -= num204;
						if (velocity.Y > num206)
						{
							velocity.Y -= num204;
						}
						else if (velocity.Y > 0f)
						{
							velocity.Y += num204 * 0.75f;
						}
						if (velocity.Y < 0f - num206)
						{
							velocity.Y = 0f - num206;
						}
					}
					else if (directionY == 1 && velocity.Y < num206)
					{
						velocity.Y += num204;
						if (velocity.Y < 0f - num206)
						{
							velocity.Y += num204;
						}
						else if (velocity.Y < 0f)
						{
							velocity.Y -= num204 * 0.75f;
						}
						if (velocity.Y > num206)
						{
							velocity.Y = num206;
						}
					}
				}
				else
				{
					if (direction == -1 && velocity.X > -4f)
					{
						velocity.X -= 0.1f;
						if (velocity.X > 4f)
						{
							velocity.X -= 0.1f;
						}
						else if (velocity.X > 0f)
						{
							velocity.X += 0.05f;
						}
						if (velocity.X < -4f)
						{
							velocity.X = -4f;
						}
					}
					else if (direction == 1 && velocity.X < 4f)
					{
						velocity.X += 0.1f;
						if (velocity.X < -4f)
						{
							velocity.X += 0.1f;
						}
						else if (velocity.X < 0f)
						{
							velocity.X -= 0.05f;
						}
						if (velocity.X > 4f)
						{
							velocity.X = 4f;
						}
					}
					if (directionY == -1 && (double)velocity.Y > -1.5)
					{
						velocity.Y -= 0.04f;
						if ((double)velocity.Y > 1.5)
						{
							velocity.Y -= 0.05f;
						}
						else if (velocity.Y > 0f)
						{
							velocity.Y += 0.03f;
						}
						if ((double)velocity.Y < -1.5)
						{
							velocity.Y = -1.5f;
						}
					}
					else if (directionY == 1 && (double)velocity.Y < 1.5)
					{
						velocity.Y += 0.04f;
						if ((double)velocity.Y < -1.5)
						{
							velocity.Y += 0.05f;
						}
						else if (velocity.Y < 0f)
						{
							velocity.Y -= 0.03f;
						}
						if ((double)velocity.Y > 1.5)
						{
							velocity.Y = 1.5f;
						}
					}
				}
				if (type == 49 || type == 51 || type == 60 || type == 62 || type == 66 || type == 93 || type == 137 || type == 150 || type == 151 || type == 152 || type == 634)
				{
					if (wet)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.95f;
						}
						velocity.Y -= 0.5f;
						if (velocity.Y < -4f)
						{
							velocity.Y = -4f;
						}
						TargetClosest();
					}
					if (type == 60)
					{
						if (direction == -1 && velocity.X > -4f)
						{
							velocity.X -= 0.1f;
							if (velocity.X > 4f)
							{
								velocity.X -= 0.07f;
							}
							else if (velocity.X > 0f)
							{
								velocity.X += 0.03f;
							}
							if (velocity.X < -4f)
							{
								velocity.X = -4f;
							}
						}
						else if (direction == 1 && velocity.X < 4f)
						{
							velocity.X += 0.1f;
							if (velocity.X < -4f)
							{
								velocity.X += 0.07f;
							}
							else if (velocity.X < 0f)
							{
								velocity.X -= 0.03f;
							}
							if (velocity.X > 4f)
							{
								velocity.X = 4f;
							}
						}
						if (directionY == -1 && (double)velocity.Y > -1.5)
						{
							velocity.Y -= 0.04f;
							if ((double)velocity.Y > 1.5)
							{
								velocity.Y -= 0.03f;
							}
							else if (velocity.Y > 0f)
							{
								velocity.Y += 0.02f;
							}
							if ((double)velocity.Y < -1.5)
							{
								velocity.Y = -1.5f;
							}
						}
						else if (directionY == 1 && (double)velocity.Y < 1.5)
						{
							velocity.Y += 0.04f;
							if ((double)velocity.Y < -1.5)
							{
								velocity.Y += 0.03f;
							}
							else if (velocity.Y < 0f)
							{
								velocity.Y -= 0.02f;
							}
							if ((double)velocity.Y > 1.5)
							{
								velocity.Y = 1.5f;
							}
						}
					}
					else
					{
						if (direction == -1 && velocity.X > -4f)
						{
							velocity.X -= 0.1f;
							if (velocity.X > 4f)
							{
								velocity.X -= 0.1f;
							}
							else if (velocity.X > 0f)
							{
								velocity.X += 0.05f;
							}
							if (velocity.X < -4f)
							{
								velocity.X = -4f;
							}
						}
						else if (direction == 1 && velocity.X < 4f)
						{
							velocity.X += 0.1f;
							if (velocity.X < -4f)
							{
								velocity.X += 0.1f;
							}
							else if (velocity.X < 0f)
							{
								velocity.X -= 0.05f;
							}
							if (velocity.X > 4f)
							{
								velocity.X = 4f;
							}
						}
						if (directionY == -1 && (double)velocity.Y > -1.5)
						{
							velocity.Y -= 0.04f;
							if ((double)velocity.Y > 1.5)
							{
								velocity.Y -= 0.05f;
							}
							else if (velocity.Y > 0f)
							{
								velocity.Y += 0.03f;
							}
							if ((double)velocity.Y < -1.5)
							{
								velocity.Y = -1.5f;
							}
						}
						else if (directionY == 1 && (double)velocity.Y < 1.5)
						{
							velocity.Y += 0.04f;
							if ((double)velocity.Y < -1.5)
							{
								velocity.Y += 0.05f;
							}
							else if (velocity.Y < 0f)
							{
								velocity.Y -= 0.03f;
							}
							if ((double)velocity.Y > 1.5)
							{
								velocity.Y = 1.5f;
							}
						}
					}
				}
				if (type == 48 && wet)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.95f;
					}
					velocity.Y -= 0.5f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
					TargetClosest();
				}
				if (type == 158 && Main.netMode != 1)
				{
					Vector2 vector26 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num208 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector26.X;
					float num209 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector26.Y;
					float num210 = (float)Math.Sqrt(num208 * num208 + num209 * num209);
					if (num210 < 200f && position.Y + (float)height < Main.player[target].position.Y + (float)Main.player[target].height && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						Transform(159);
					}
				}
				this.ai[1] += 1f;
				if (type == 158)
				{
					this.ai[1] += 1f;
				}
				if (this.ai[1] > 200f)
				{
					if (!Main.player[target].wet && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						this.ai[1] = 0f;
					}
					float num211 = 0.2f;
					float num212 = 0.1f;
					float num213 = 4f;
					float num214 = 1.5f;
					if (type == 48 || type == 62 || type == 66)
					{
						num211 = 0.12f;
						num212 = 0.07f;
						num213 = 3f;
						num214 = 1.25f;
					}
					if (this.ai[1] > 1000f)
					{
						this.ai[1] = 0f;
					}
					this.ai[2] += 1f;
					if (this.ai[2] > 0f)
					{
						if (velocity.Y < num214)
						{
							velocity.Y += num212;
						}
					}
					else if (velocity.Y > 0f - num214)
					{
						velocity.Y -= num212;
					}
					if (this.ai[2] < -150f || this.ai[2] > 150f)
					{
						if (velocity.X < num213)
						{
							velocity.X += num211;
						}
					}
					else if (velocity.X > 0f - num213)
					{
						velocity.X -= num211;
					}
					if (this.ai[2] > 300f)
					{
						this.ai[2] = -300f;
					}
				}
				if (Main.netMode == 1)
				{
					return;
				}
				if (type == 48)
				{
					this.ai[0] += 1f;
					if (this.ai[0] == 30f || this.ai[0] == 60f || this.ai[0] == 90f)
					{
						if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							float num215 = 6f;
							Vector2 vector27 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
							float num216 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector27.X + (float)Main.rand.Next(-100, 101);
							float num217 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector27.Y + (float)Main.rand.Next(-100, 101);
							float num218 = (float)Math.Sqrt(num216 * num216 + num217 * num217);
							num218 = num215 / num218;
							num216 *= num218;
							num217 *= num218;
							int num219 = 15;
							int num220 = 38;
							int num221 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector27.X, vector27.Y, num216, num217, num220, num219, 0f, Main.myPlayer);
							Main.projectile[num221].timeLeft = 300;
						}
					}
					else if (this.ai[0] >= (float)(400 + Main.rand.Next(400)))
					{
						this.ai[0] = 0f;
					}
				}
				if (type == 62 || type == 66)
				{
					this.ai[0] += 1f;
					if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 80f)
					{
						if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							float num222 = 0.2f;
							Vector2 vector28 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
							float num223 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector28.X + (float)Main.rand.Next(-100, 101);
							float num224 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector28.Y + (float)Main.rand.Next(-100, 101);
							float num225 = (float)Math.Sqrt(num223 * num223 + num224 * num224);
							num225 = num222 / num225;
							num223 *= num225;
							num224 *= num225;
							int num226 = 21;
							int num227 = 44;
							int num228 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector28.X, vector28.Y, num223, num224, num227, num226, 0f, Main.myPlayer);
							Main.projectile[num228].timeLeft = 300;
						}
					}
					else if (this.ai[0] >= (float)(300 + Main.rand.Next(300)))
					{
						this.ai[0] = 0f;
					}
				}
				if (type != 156)
				{
					return;
				}
				this.ai[0] += 1f;
				if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 80f || this.ai[0] == 100f)
				{
					if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						float num229 = 0.2f;
						Vector2 vector29 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num230 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector29.X + (float)Main.rand.Next(-50, 51);
						float num231 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector29.Y + (float)Main.rand.Next(-50, 51);
						float num232 = (float)Math.Sqrt(num230 * num230 + num231 * num231);
						num232 = num229 / num232;
						num230 *= num232;
						num231 *= num232;
						int num233 = 80;
						int num234 = 115;
						vector29 += velocity * 5f;
						int num235 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector29.X + num230 * 100f, vector29.Y + num231 * 100f, num230, num231, num234, num233, 0f, Main.myPlayer);
						Main.projectile[num235].timeLeft = 300;
					}
				}
				else if (this.ai[0] >= (float)(250 + Main.rand.Next(250)))
				{
					this.ai[0] = 0f;
				}
				return;
			}
			if (aiStyle == 15)
			{
				float num236 = 1f;
				float num237 = 1f;
				bool flag6 = false;
				bool flag7 = false;
				bool flag8 = false;
				float num238 = 2f;
				if (Main.getGoodWorld)
				{
					num238 -= 1f - (float)life / (float)lifeMax;
					num237 *= num238;
				}
				aiAction = 0;
				if (this.ai[3] == 0f && life > 0)
				{
					this.ai[3] = lifeMax;
				}
				if (localAI[3] == 0f)
				{
					localAI[3] = 1f;
					flag6 = true;
					if (Main.netMode != 1)
					{
						this.ai[0] = -100f;
						TargetClosest();
						netUpdate = true;
					}
				}
				int num239 = 3000;
				if (Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > (float)num239)
				{
					TargetClosest();
					if (Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > (float)num239)
					{
						EncourageDespawn(10);
						if (Main.player[target].Center.X < base.Center.X)
						{
							direction = 1;
						}
						else
						{
							direction = -1;
						}
						if (Main.netMode != 1 && this.ai[1] != 5f)
						{
							netUpdate = true;
							this.ai[2] = 0f;
							this.ai[0] = 0f;
							this.ai[1] = 5f;
							localAI[1] = Main.maxTilesX * 16;
							localAI[2] = Main.maxTilesY * 16;
						}
					}
				}
				if (!Main.player[target].dead && timeLeft > 10 && this.ai[2] >= 300f && this.ai[1] < 5f && velocity.Y == 0f)
				{
					this.ai[2] = 0f;
					this.ai[0] = 0f;
					this.ai[1] = 5f;
					if (Main.netMode != 1)
					{
						TargetClosest(faceTarget: false);
						Point point3 = base.Center.ToTileCoordinates();
						Point point4 = Main.player[target].Center.ToTileCoordinates();
						Vector2 vector30 = Main.player[target].Center - base.Center;
						int num240 = 10;
						int num241 = 0;
						int num242 = 7;
						int num243 = 0;
						bool flag9 = false;
						if (localAI[0] >= 360f || vector30.Length() > 2000f)
						{
							if (localAI[0] >= 360f)
							{
								localAI[0] = 360f;
							}
							flag9 = true;
							num243 = 100;
						}
						while (!flag9 && num243 < 100)
						{
							num243++;
							int num244 = Main.rand.Next(point4.X - num240, point4.X + num240 + 1);
							int num245 = Main.rand.Next(point4.Y - num240, point4.Y + 1);
							if ((num245 >= point4.Y - num242 && num245 <= point4.Y + num242 && num244 >= point4.X - num242 && num244 <= point4.X + num242) || (num245 >= point3.Y - num241 && num245 <= point3.Y + num241 && num244 >= point3.X - num241 && num244 <= point3.X + num241) || Main.tile[num244, num245].nactive())
							{
								continue;
							}
							int num246 = num245;
							int num247 = 0;
							if (Main.tile[num244, num246].nactive() && Main.tileSolid[Main.tile[num244, num246].type] && !Main.tileSolidTop[Main.tile[num244, num246].type])
							{
								num247 = 1;
							}
							else
							{
								for (; num247 < 150 && num246 + num247 < Main.maxTilesY; num247++)
								{
									int num248 = num246 + num247;
									if (Main.tile[num244, num248].nactive() && Main.tileSolid[Main.tile[num244, num248].type] && !Main.tileSolidTop[Main.tile[num244, num248].type])
									{
										num247--;
										break;
									}
								}
							}
							num245 += num247;
							bool flag10 = true;
							if (flag10 && Main.tile[num244, num245].lava())
							{
								flag10 = false;
							}
							if (flag10 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
							{
								flag10 = false;
							}
							if (flag10)
							{
								localAI[1] = num244 * 16 + 8;
								localAI[2] = num245 * 16 + 16;
								flag9 = true;
								break;
							}
						}
						if (num243 >= 100)
						{
							Vector2 bottom = Main.player[Player.FindClosest(position, width, height)].Bottom;
							localAI[1] = bottom.X;
							localAI[2] = bottom.Y;
						}
					}
				}
				if (!Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0) || Math.Abs(base.Top.Y - Main.player[target].Bottom.Y) > 160f)
				{
					this.ai[2]++;
					if (Main.netMode != 1)
					{
						localAI[0]++;
					}
				}
				else if (Main.netMode != 1)
				{
					localAI[0]--;
					if (localAI[0] < 0f)
					{
						localAI[0] = 0f;
					}
				}
				if (timeLeft < 10 && (this.ai[0] != 0f || this.ai[1] != 0f))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
					flag7 = false;
				}
				Dust dust;
				if (this.ai[1] == 5f)
				{
					flag7 = true;
					aiAction = 1;
					this.ai[0]++;
					num236 = MathHelper.Clamp((60f - this.ai[0]) / 60f, 0f, 1f);
					num236 = 0.5f + num236 * 0.5f;
					if (this.ai[0] >= 60f)
					{
						flag8 = true;
					}
					if (this.ai[0] == 60f)
					{
						Gore.NewGore(base.Center + new Vector2(-40f, -height / 2), velocity, 734);
					}
					if (this.ai[0] >= 60f && Main.netMode != 1)
					{
						base.Bottom = new Vector2(localAI[1], localAI[2]);
						this.ai[1] = 6f;
						this.ai[0] = 0f;
						netUpdate = true;
					}
					if (Main.netMode == 1 && this.ai[0] >= 120f)
					{
						this.ai[1] = 6f;
						this.ai[0] = 0f;
					}
					if (!flag8)
					{
						for (int num249 = 0; num249 < 10; num249++)
						{
							int num250 = Dust.NewDust(position + Vector2.UnitX * -20f, width + 40, height, 4, velocity.X, velocity.Y, 150, new Color(78, 136, 255, 80), 2f);
							Main.dust[num250].noGravity = true;
							dust = Main.dust[num250];
							dust.velocity *= 0.5f;
						}
					}
				}
				else if (this.ai[1] == 6f)
				{
					flag7 = true;
					aiAction = 0;
					this.ai[0]++;
					num236 = MathHelper.Clamp(this.ai[0] / 30f, 0f, 1f);
					num236 = 0.5f + num236 * 0.5f;
					if (this.ai[0] >= 30f && Main.netMode != 1)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						netUpdate = true;
						TargetClosest();
					}
					if (Main.netMode == 1 && this.ai[0] >= 60f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						TargetClosest();
					}
					for (int num251 = 0; num251 < 10; num251++)
					{
						int num252 = Dust.NewDust(position + Vector2.UnitX * -20f, width + 40, height, 4, velocity.X, velocity.Y, 150, new Color(78, 136, 255, 80), 2f);
						Main.dust[num252].noGravity = true;
						dust = Main.dust[num252];
						dust.velocity *= 2f;
					}
				}
				dontTakeDamage = (hide = flag8);
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.8f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					if (!flag7)
					{
						this.ai[0] += 2f;
						if ((double)life < (double)lifeMax * 0.8)
						{
							this.ai[0] += 1f;
						}
						if ((double)life < (double)lifeMax * 0.6)
						{
							this.ai[0] += 1f;
						}
						if ((double)life < (double)lifeMax * 0.4)
						{
							this.ai[0] += 2f;
						}
						if ((double)life < (double)lifeMax * 0.2)
						{
							this.ai[0] += 3f;
						}
						if ((double)life < (double)lifeMax * 0.1)
						{
							this.ai[0] += 4f;
						}
						if (this.ai[0] >= 0f)
						{
							netUpdate = true;
							TargetClosest();
							if (this.ai[1] == 3f)
							{
								velocity.Y = -13f;
								velocity.X += 3.5f * (float)direction;
								this.ai[0] = -200f;
								this.ai[1] = 0f;
							}
							else if (this.ai[1] == 2f)
							{
								velocity.Y = -6f;
								velocity.X += 4.5f * (float)direction;
								this.ai[0] = -120f;
								this.ai[1] += 1f;
							}
							else
							{
								velocity.Y = -8f;
								velocity.X += 4f * (float)direction;
								this.ai[0] = -120f;
								this.ai[1] += 1f;
							}
						}
						else if (this.ai[0] >= -30f)
						{
							aiAction = 1;
						}
					}
				}
				else if (target < 255)
				{
					float num253 = 3f;
					if (Main.getGoodWorld)
					{
						num253 = 6f;
					}
					if ((direction == 1 && velocity.X < num253) || (direction == -1 && velocity.X > 0f - num253))
					{
						if ((direction == -1 && (double)velocity.X < 0.1) || (direction == 1 && (double)velocity.X > -0.1))
						{
							velocity.X += 0.2f * (float)direction;
						}
						else
						{
							velocity.X *= 0.93f;
						}
					}
				}
				int num254 = Dust.NewDust(position, width, height, 4, velocity.X, velocity.Y, 255, new Color(0, 80, 255, 80), scale * 1.2f);
				Main.dust[num254].noGravity = true;
				dust = Main.dust[num254];
				dust.velocity *= 0.5f;
				if (life <= 0)
				{
					return;
				}
				float num255 = (float)life / (float)lifeMax;
				num255 = num255 * 0.5f + 0.75f;
				num255 *= num236;
				num255 *= num237;
				if (num255 != scale || flag6)
				{
					position.X += width / 2;
					position.Y += height;
					scale = num255;
					width = (int)(98f * scale);
					height = (int)(92f * scale);
					position.X -= width / 2;
					position.Y -= height;
				}
				if (Main.netMode == 1)
				{
					return;
				}
				int num256 = (int)((double)lifeMax * 0.05);
				if (!((float)(life + num256) < this.ai[3]))
				{
					return;
				}
				this.ai[3] = life;
				int num257 = Main.rand.Next(1, 4);
				for (int num258 = 0; num258 < num257; num258++)
				{
					int x = (int)(position.X + (float)Main.rand.Next(width - 32));
					int y = (int)(position.Y + (float)Main.rand.Next(height - 32));
					int num259 = 1;
					if (Main.expertMode && Main.rand.Next(4) == 0)
					{
						num259 = 535;
					}
					int num260 = NewNPC(GetSpawnSourceForProjectileNPC(), x, y, num259);
					Main.npc[num260].SetDefaults(num259);
					Main.npc[num260].velocity.X = (float)Main.rand.Next(-15, 16) * 0.1f;
					Main.npc[num260].velocity.Y = (float)Main.rand.Next(-30, 1) * 0.1f;
					Main.npc[num260].ai[0] = -1000 * Main.rand.Next(3);
					Main.npc[num260].ai[1] = 0f;
					if (Main.netMode == 2 && num260 < 200)
					{
						NetMessage.SendData(23, -1, -1, null, num260);
					}
				}
				return;
			}
			if (aiStyle == 16)
			{
				if (direction == 0)
				{
					TargetClosest();
				}
				if (type == 615)
				{
					if (this.ai[2] == 0f)
					{
						int num261 = Main.rand.Next(300, 1200);
						if ((this.ai[3] += 1f) >= (float)num261)
						{
							this.ai[2] = Main.rand.Next(1, 3);
							if (this.ai[2] == 1f && !Collision.CanHitLine(position, width, height, new Vector2(position.X, position.Y - 128f), width, height))
							{
								this.ai[2] = 2f;
							}
							if (this.ai[2] == 2f)
							{
								TargetClosest();
							}
							this.ai[3] = 0f;
							netUpdate = true;
						}
					}
					if (this.ai[2] == 1f)
					{
						if (collideY || collideX)
						{
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						else if (wet)
						{
							velocity.Y -= 0.4f;
							if (velocity.Y < -6f)
							{
								velocity.Y = -6f;
							}
							rotation = velocity.Y * (float)direction * 0.3f;
							if (rotation < MathF.PI * -2f / 5f)
							{
								rotation = MathF.PI * -2f / 5f;
							}
							if (rotation > MathF.PI * 2f / 5f)
							{
								rotation = MathF.PI * 2f / 5f;
							}
							if (this.ai[3] == 1f)
							{
								this.ai[2] = 0f;
								this.ai[3] = 0f;
								netUpdate = true;
							}
						}
						else
						{
							rotation += (float)direction * 0.2f;
							this.ai[3] = 1f;
							velocity.Y += 0.3f;
							if (velocity.Y > 10f)
							{
								velocity.Y = 10f;
							}
						}
						return;
					}
					if (this.ai[2] == 2f)
					{
						if (collideY || collideX)
						{
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						else if (wet)
						{
							velocity.Y -= 0.4f;
							if (velocity.Y < -6f)
							{
								velocity.Y = -6f;
							}
							rotation = velocity.Y * (float)direction * 0.3f;
							if (rotation < MathF.PI * -2f / 5f)
							{
								rotation = MathF.PI * -2f / 5f;
							}
							if (rotation > MathF.PI * 2f / 5f)
							{
								rotation = MathF.PI * 2f / 5f;
							}
							if (Collision.GetWaterLine(base.Top.ToTileCoordinates(), out var waterLineHeight))
							{
								float y2 = waterLineHeight + 0f - position.Y;
								velocity.Y = y2;
								velocity.Y = MathHelper.Clamp(velocity.Y, -2f, 0.5f);
								rotation = -MathF.PI / 5f * (float)direction;
								velocity.X *= 0.95f;
								if (this.ai[3] == 0f)
								{
									netUpdate = true;
								}
								this.ai[3]++;
								if (this.ai[3] >= 300f)
								{
									this.ai[2] = 0f;
									this.ai[3] = 0f;
									netUpdate = true;
									velocity.Y = 4f;
								}
								if (this.ai[3] == 60f && Main.rand.Next(2) == 0)
								{
									SoundEngine.PlaySound(45, (int)position.X, (int)position.Y);
								}
							}
						}
						else
						{
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
							velocity.Y += 0.3f;
							if (velocity.Y > 10f)
							{
								velocity.Y = 10f;
							}
						}
						return;
					}
				}
				if (wet)
				{
					bool flag11 = false;
					if (type != 55 && type != 592 && type != 607 && type != 615)
					{
						TargetClosest(faceTarget: false);
						if (Main.player[target].wet && !Main.player[target].dead && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							flag11 = true;
						}
					}
					int num262 = (int)base.Center.X / 16;
					int num263 = (int)(position.Y + (float)height) / 16;
					if (Main.tile[num262, num263].topSlope())
					{
						if (Main.tile[num262, num263].leftSlope())
						{
							direction = -1;
							velocity.X = Math.Abs(velocity.X) * -1f;
						}
						else
						{
							direction = 1;
							velocity.X = Math.Abs(velocity.X);
						}
					}
					else if (Main.tile[num262, num263 + 1].topSlope())
					{
						if (Main.tile[num262, num263 + 1].leftSlope())
						{
							direction = -1;
							velocity.X = Math.Abs(velocity.X) * -1f;
						}
						else
						{
							direction = 1;
							velocity.X = Math.Abs(velocity.X);
						}
					}
					if (!flag11)
					{
						if (collideX)
						{
							velocity.X *= -1f;
							direction *= -1;
							netUpdate = true;
						}
						if (collideY)
						{
							netUpdate = true;
							if (velocity.Y > 0f)
							{
								velocity.Y = Math.Abs(velocity.Y) * -1f;
								directionY = -1;
								this.ai[0] = -1f;
							}
							else if (velocity.Y < 0f)
							{
								velocity.Y = Math.Abs(velocity.Y);
								directionY = 1;
								this.ai[0] = 1f;
							}
						}
					}
					if (type == 102)
					{
						Lighting.AddLight((int)(position.X + (float)(width / 2) + (float)(direction * (width + 8))) / 16, (int)(position.Y + 2f) / 16, 0.07f, 0.04f, 0.025f);
					}
					if (flag11)
					{
						TargetClosest();
						if (type == 157)
						{
							if (velocity.X > 0f && direction < 0)
							{
								velocity.X *= 0.95f;
							}
							if (velocity.X < 0f && direction > 0)
							{
								velocity.X *= 0.95f;
							}
							velocity.X += (float)direction * 0.25f;
							velocity.Y += (float)directionY * 0.2f;
							if (velocity.X > 8f)
							{
								velocity.X = 7f;
							}
							if (velocity.X < -8f)
							{
								velocity.X = -7f;
							}
							if (velocity.Y > 5f)
							{
								velocity.Y = 4f;
							}
							if (velocity.Y < -5f)
							{
								velocity.Y = -4f;
							}
						}
						else if (type == 65 || type == 102)
						{
							velocity.X += (float)direction * 0.15f;
							velocity.Y += (float)directionY * 0.15f;
							if (velocity.X > 5f)
							{
								velocity.X = 5f;
							}
							if (velocity.X < -5f)
							{
								velocity.X = -5f;
							}
							if (velocity.Y > 3f)
							{
								velocity.Y = 3f;
							}
							if (velocity.Y < -3f)
							{
								velocity.Y = -3f;
							}
						}
						else
						{
							velocity.X += (float)direction * 0.1f;
							velocity.Y += (float)directionY * 0.1f;
							if (velocity.X > 3f)
							{
								velocity.X = 3f;
							}
							if (velocity.X < -3f)
							{
								velocity.X = -3f;
							}
							if (velocity.Y > 2f)
							{
								velocity.Y = 2f;
							}
							if (velocity.Y < -2f)
							{
								velocity.Y = -2f;
							}
						}
					}
					else
					{
						if (type == 157)
						{
							if (Main.player[target].position.Y > position.Y)
							{
								directionY = 1;
							}
							else
							{
								directionY = -1;
							}
							velocity.X += (float)direction * 0.2f;
							if (velocity.X < -2f || velocity.X > 2f)
							{
								velocity.X *= 0.95f;
							}
							if (this.ai[0] == -1f)
							{
								float num264 = -0.6f;
								if (directionY < 0)
								{
									num264 = -1f;
								}
								if (directionY > 0)
								{
									num264 = -0.2f;
								}
								velocity.Y -= 0.02f;
								if (velocity.Y < num264)
								{
									this.ai[0] = 1f;
								}
							}
							else
							{
								float num265 = 0.6f;
								if (directionY < 0)
								{
									num265 = 0.2f;
								}
								if (directionY > 0)
								{
									num265 = 1f;
								}
								velocity.Y += 0.02f;
								if (velocity.Y > num265)
								{
									this.ai[0] = -1f;
								}
							}
						}
						else
						{
							velocity.X += (float)direction * 0.1f;
							float num266 = 1f;
							if (type == 615)
							{
								num266 = 3f;
							}
							if (velocity.X < 0f - num266 || velocity.X > num266)
							{
								velocity.X *= 0.95f;
							}
							if (this.ai[0] == -1f)
							{
								velocity.Y -= 0.01f;
								if ((double)velocity.Y < -0.3)
								{
									this.ai[0] = 1f;
								}
							}
							else
							{
								velocity.Y += 0.01f;
								if ((double)velocity.Y > 0.3)
								{
									this.ai[0] = -1f;
								}
							}
						}
						int num267 = (int)(position.X + (float)(width / 2)) / 16;
						int num268 = (int)(position.Y + (float)(height / 2)) / 16;
						if (Main.tile[num267, num268 - 1] == null)
						{
							Main.tile[num267, num268 - 1] = new Tile();
						}
						if (Main.tile[num267, num268 + 1] == null)
						{
							Main.tile[num267, num268 + 1] = new Tile();
						}
						if (Main.tile[num267, num268 + 2] == null)
						{
							Main.tile[num267, num268 + 2] = new Tile();
						}
						if (Main.tile[num267, num268 - 1].liquid > 128)
						{
							if (Main.tile[num267, num268 + 1].active())
							{
								this.ai[0] = -1f;
							}
							else if (Main.tile[num267, num268 + 2].active())
							{
								this.ai[0] = -1f;
							}
						}
						if (type != 157 && ((double)velocity.Y > 0.4 || (double)velocity.Y < -0.4))
						{
							velocity.Y *= 0.95f;
						}
					}
				}
				else
				{
					if (velocity.Y == 0f)
					{
						if (type == 65)
						{
							velocity.X *= 0.94f;
							if ((double)velocity.X > -0.2 && (double)velocity.X < 0.2)
							{
								velocity.X = 0f;
							}
						}
						else if (Main.netMode != 1)
						{
							velocity.Y = (float)Main.rand.Next(-50, -20) * 0.1f;
							velocity.X = (float)Main.rand.Next(-20, 20) * 0.1f;
							netUpdate = true;
						}
					}
					velocity.Y += 0.3f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
					this.ai[0] = 1f;
				}
				rotation = velocity.Y * (float)direction * 0.1f;
				if ((double)rotation < -0.2)
				{
					rotation = -0.2f;
				}
				if ((double)rotation > 0.2)
				{
					rotation = 0.2f;
				}
				return;
			}
			if (aiStyle == 17)
			{
				noGravity = true;
				if (this.ai[0] == 0f)
				{
					noGravity = false;
					TargetClosest();
					if (Main.netMode != 1)
					{
						if (velocity.X != 0f || velocity.Y < 0f || (double)velocity.Y > 0.3)
						{
							this.ai[0] = 1f;
							netUpdate = true;
						}
						else
						{
							Rectangle rectangle = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
							if (new Rectangle((int)position.X - 100, (int)position.Y - 100, width + 200, height + 200).Intersects(rectangle) || life < lifeMax)
							{
								this.ai[0] = 1f;
								velocity.Y -= 6f;
								netUpdate = true;
							}
						}
					}
				}
				else if (!Main.player[target].dead)
				{
					if (collideX)
					{
						velocity.X = oldVelocity.X * -0.5f;
						if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
						{
							velocity.X = 2f;
						}
						if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
						{
							velocity.X = -2f;
						}
					}
					if (collideY)
					{
						velocity.Y = oldVelocity.Y * -0.5f;
						if (velocity.Y > 0f && velocity.Y < 1f)
						{
							velocity.Y = 1f;
						}
						if (velocity.Y < 0f && velocity.Y > -1f)
						{
							velocity.Y = -1f;
						}
					}
					TargetClosest();
					if (direction == -1 && velocity.X > -3f)
					{
						velocity.X -= 0.1f;
						if (velocity.X > 3f)
						{
							velocity.X -= 0.1f;
						}
						else if (velocity.X > 0f)
						{
							velocity.X -= 0.05f;
						}
						if (velocity.X < -3f)
						{
							velocity.X = -3f;
						}
					}
					else if (direction == 1 && velocity.X < 3f)
					{
						velocity.X += 0.1f;
						if (velocity.X < -3f)
						{
							velocity.X += 0.1f;
						}
						else if (velocity.X < 0f)
						{
							velocity.X += 0.05f;
						}
						if (velocity.X > 3f)
						{
							velocity.X = 3f;
						}
					}
					float num269 = Math.Abs(position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2)));
					float num270 = Main.player[target].position.Y - (float)(height / 2);
					if (num269 > 50f)
					{
						num270 -= 100f;
					}
					if (position.Y < num270)
					{
						velocity.Y += 0.05f;
						if (velocity.Y < 0f)
						{
							velocity.Y += 0.01f;
						}
					}
					else
					{
						velocity.Y -= 0.05f;
						if (velocity.Y > 0f)
						{
							velocity.Y -= 0.01f;
						}
					}
					if (velocity.Y < -3f)
					{
						velocity.Y = -3f;
					}
					if (velocity.Y > 3f)
					{
						velocity.Y = 3f;
					}
				}
				if (wet)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.95f;
					}
					velocity.Y -= 0.5f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
					TargetClosest();
				}
				return;
			}
			if (aiStyle == 18)
			{
				bool flag12 = false;
				if (wet && this.ai[1] == 1f)
				{
					flag12 = true;
				}
				else
				{
					dontTakeDamage = false;
				}
				if (Main.expertMode && (type == 63 || type == 64 || type == 103 || type == 242))
				{
					if (wet)
					{
						if (target >= 0 && Main.player[target].wet && !Main.player[target].dead && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && (Main.player[target].Center - base.Center).Length() < 150f)
						{
							if (this.ai[1] == 0f)
							{
								this.ai[2] += 2f;
							}
							else
							{
								this.ai[2] -= 0.25f;
							}
						}
						if (flag12)
						{
							dontTakeDamage = true;
							this.ai[2] += 1f;
							if (this.ai[2] >= 120f)
							{
								this.ai[1] = 0f;
							}
						}
						else
						{
							this.ai[2] += 1f;
							if (this.ai[2] >= 420f)
							{
								this.ai[1] = 1f;
								this.ai[2] = 0f;
							}
						}
					}
					else
					{
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
				}
				float num271 = 1f;
				if (flag12)
				{
					num271 += 0.5f;
				}
				if (type == 63)
				{
					Lighting.AddLight((int)(position.X + (float)(height / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.05f * num271, 0.15f * num271, 0.4f * num271);
				}
				else if (type == 103)
				{
					Lighting.AddLight((int)(position.X + (float)(height / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.05f * num271, 0.45f * num271, 0.1f * num271);
				}
				else if (type != 221 && type != 242)
				{
					Lighting.AddLight((int)(position.X + (float)(height / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.35f * num271, 0.05f * num271, 0.2f * num271);
				}
				if (direction == 0)
				{
					TargetClosest();
				}
				if (flag12)
				{
					return;
				}
				if (wet)
				{
					int num272 = (int)base.Center.X / 16;
					int num273 = (int)(position.Y + (float)height) / 16;
					if (Main.tile[num272, num273].topSlope())
					{
						if (Main.tile[num272, num273].leftSlope())
						{
							direction = -1;
							velocity.X = Math.Abs(velocity.X) * -1f;
						}
						else
						{
							direction = 1;
							velocity.X = Math.Abs(velocity.X);
						}
					}
					else if (Main.tile[num272, num273 + 1].topSlope())
					{
						if (Main.tile[num272, num273 + 1].leftSlope())
						{
							direction = -1;
							velocity.X = Math.Abs(velocity.X) * -1f;
						}
						else
						{
							direction = 1;
							velocity.X = Math.Abs(velocity.X);
						}
					}
					if (collideX)
					{
						velocity.X *= -1f;
						direction *= -1;
					}
					if (collideY)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y = Math.Abs(velocity.Y) * -1f;
							directionY = -1;
							this.ai[0] = -1f;
						}
						else if (velocity.Y < 0f)
						{
							velocity.Y = Math.Abs(velocity.Y);
							directionY = 1;
							this.ai[0] = 1f;
						}
					}
					bool flag13 = false;
					if (!friendly)
					{
						TargetClosest(faceTarget: false);
						if (Main.player[target].wet && !Main.player[target].dead && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							flag13 = true;
						}
					}
					if (flag13)
					{
						localAI[2] = 1f;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
						velocity *= 0.98f;
						float num274 = 0.2f;
						if (type == 103)
						{
							velocity *= 0.98f;
							num274 = 0.6f;
						}
						if (type == 221)
						{
							velocity *= 0.99f;
							num274 = 1f;
						}
						if (type == 242)
						{
							velocity *= 0.995f;
							num274 = 3f;
						}
						if (velocity.X > 0f - num274 && velocity.X < num274 && velocity.Y > 0f - num274 && velocity.Y < num274)
						{
							if (type == 221)
							{
								localAI[0] = 1f;
							}
							TargetClosest();
							float num275 = 7f;
							if (type == 103)
							{
								num275 = 9f;
							}
							Vector2 vector31 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
							float num276 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector31.X;
							float num277 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector31.Y;
							float num278 = (float)Math.Sqrt(num276 * num276 + num277 * num277);
							num278 = num275 / num278;
							num276 *= num278;
							num277 *= num278;
							velocity.X = num276;
							velocity.Y = num277;
						}
						return;
					}
					localAI[2] = 0f;
					velocity.X += (float)direction * 0.02f;
					rotation = velocity.X * 0.4f;
					if (velocity.X < -1f || velocity.X > 1f)
					{
						velocity.X *= 0.95f;
					}
					if (this.ai[0] == -1f)
					{
						velocity.Y -= 0.01f;
						if (velocity.Y < -1f)
						{
							this.ai[0] = 1f;
						}
					}
					else
					{
						velocity.Y += 0.01f;
						if (velocity.Y > 1f)
						{
							this.ai[0] = -1f;
						}
					}
					int num279 = (int)(position.X + (float)(width / 2)) / 16;
					int num280 = (int)(position.Y + (float)(height / 2)) / 16;
					if (Main.tile[num279, num280 - 1] == null)
					{
						Main.tile[num279, num280 - 1] = new Tile();
					}
					if (Main.tile[num279, num280 + 1] == null)
					{
						Main.tile[num279, num280 + 1] = new Tile();
					}
					if (Main.tile[num279, num280 + 2] == null)
					{
						Main.tile[num279, num280 + 2] = new Tile();
					}
					if (Main.tile[num279, num280 - 1].liquid > 128)
					{
						if (Main.tile[num279, num280 + 1].active())
						{
							this.ai[0] = -1f;
						}
						else if (Main.tile[num279, num280 + 2].active())
						{
							this.ai[0] = -1f;
						}
					}
					else
					{
						this.ai[0] = 1f;
					}
					if ((double)velocity.Y > 1.2 || (double)velocity.Y < -1.2)
					{
						velocity.Y *= 0.99f;
					}
					return;
				}
				rotation += velocity.X * 0.1f;
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.98f;
					if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
					{
						velocity.X = 0f;
					}
				}
				velocity.Y += 0.2f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
				this.ai[0] = 1f;
				return;
			}
			if (aiStyle == 19)
			{
				TargetClosest();
				float num281 = 12f;
				Vector2 vector32 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num282 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector32.X;
				float num283 = Main.player[target].position.Y - vector32.Y;
				float num284 = (float)Math.Sqrt(num282 * num282 + num283 * num283);
				num284 = num281 / num284;
				num282 *= num284;
				num283 *= num284;
				bool flag14 = false;
				if (directionY < 0)
				{
					rotation = (float)(Math.Atan2(num283, num282) + 1.57);
					flag14 = ((!((double)rotation < -1.2) && !((double)rotation > 1.2)) ? true : false);
					if ((double)rotation < -0.8)
					{
						rotation = -0.8f;
					}
					else if ((double)rotation > 0.8)
					{
						rotation = 0.8f;
					}
					if (velocity.X != 0f)
					{
						velocity.X *= 0.9f;
						if ((double)velocity.X > -0.1 || (double)velocity.X < 0.1)
						{
							netUpdate = true;
							velocity.X = 0f;
						}
					}
				}
				if (this.ai[0] > 0f)
				{
					if (this.ai[0] == 200f)
					{
						SoundEngine.PlaySound(SoundID.Item5, position);
					}
					this.ai[0] -= 1f;
				}
				if (Main.netMode != 1 && flag14 && this.ai[0] == 0f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					this.ai[0] = 200f;
					int num285 = 10;
					int num286 = 31;
					int num287 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector32.X, vector32.Y, num282, num283, num286, num285, 0f, Main.myPlayer);
					Main.projectile[num287].ai[0] = 2f;
					Main.projectile[num287].timeLeft = 300;
					Main.projectile[num287].friendly = false;
					NetMessage.SendData(27, -1, -1, null, num287);
					netUpdate = true;
				}
				try
				{
					int num288 = (int)position.X / 16;
					int num289 = (int)(position.X + (float)(width / 2)) / 16;
					int num290 = (int)(position.X + (float)width) / 16;
					int num291 = (int)(position.Y + (float)height) / 16;
					bool flag15 = false;
					if (Main.tile[num288, num291] == null)
					{
						Main.tile[num288, num291] = new Tile();
					}
					if (Main.tile[num289, num291] == null)
					{
						Main.tile[num288, num291] = new Tile();
					}
					if (Main.tile[num290, num291] == null)
					{
						Main.tile[num288, num291] = new Tile();
					}
					if ((Main.tile[num288, num291].nactive() && Main.tileSolid[Main.tile[num288, num291].type]) || (Main.tile[num289, num291].nactive() && Main.tileSolid[Main.tile[num289, num291].type]) || (Main.tile[num290, num291].nactive() && Main.tileSolid[Main.tile[num290, num291].type]))
					{
						flag15 = true;
					}
					if (flag15)
					{
						noGravity = true;
						noTileCollide = true;
						velocity.Y = -0.2f;
						return;
					}
					noGravity = false;
					noTileCollide = false;
					if (Main.rand.Next(2) == 0)
					{
						position += netOffset;
						int num292 = Dust.NewDust(new Vector2(position.X - 4f, position.Y + (float)height - 8f), width + 8, 24, 32, 0f, velocity.Y / 2f);
						Main.dust[num292].velocity.X *= 0.4f;
						Main.dust[num292].velocity.Y *= -1f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num292].noGravity = true;
							Dust dust = Main.dust[num292];
							dust.scale += 0.2f;
						}
						position -= netOffset;
					}
					return;
				}
				catch
				{
					return;
				}
			}
			if (aiStyle == 20)
			{
				if (this.ai[0] == 0f)
				{
					if (Main.netMode != 1)
					{
						TargetClosest();
						direction *= -1;
						directionY *= -1;
						position.Y += height / 2 + 8;
						this.ai[1] = position.X + (float)(width / 2);
						this.ai[2] = position.Y + (float)(height / 2);
						if (direction == 0)
						{
							direction = 1;
						}
						if (directionY == 0)
						{
							directionY = 1;
						}
						this.ai[3] = 1f + (float)Main.rand.Next(15) * 0.1f;
						velocity.Y = (float)(directionY * 6) * this.ai[3];
						this.ai[0] += 1f;
						netUpdate = true;
					}
					else
					{
						this.ai[1] = position.X + (float)(width / 2);
						this.ai[2] = position.Y + (float)(height / 2);
					}
					return;
				}
				float num293 = 6f * this.ai[3];
				float num294 = 0.2f * this.ai[3];
				float num295 = num293 / num294 / 2f;
				if (this.ai[0] >= 1f && this.ai[0] < (float)(int)num295)
				{
					velocity.Y = (float)directionY * num293;
					this.ai[0] += 1f;
					return;
				}
				if (this.ai[0] >= (float)(int)num295)
				{
					velocity.Y = 0f;
					directionY *= -1;
					velocity.X = num293 * (float)direction;
					this.ai[0] = -1f;
					return;
				}
				if (directionY > 0)
				{
					if (velocity.Y >= num293)
					{
						directionY *= -1;
						velocity.Y = num293;
					}
				}
				else if (directionY < 0 && velocity.Y <= 0f - num293)
				{
					directionY *= -1;
					velocity.Y = 0f - num293;
				}
				if (direction > 0)
				{
					if (velocity.X >= num293)
					{
						direction *= -1;
						velocity.X = num293;
					}
				}
				else if (direction < 0 && velocity.X <= 0f - num293)
				{
					direction *= -1;
					velocity.X = 0f - num293;
				}
				velocity.X += num294 * (float)direction;
				velocity.Y += num294 * (float)directionY;
			}
			else if (aiStyle == 21)
			{
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					directionY = 1;
					this.ai[0] = 1f;
				}
				int num296 = 6;
				if (this.ai[1] == 0f)
				{
					rotation += (float)(direction * directionY) * 0.13f;
					if (collideY)
					{
						this.ai[0] = 2f;
					}
					if (!collideY && this.ai[0] == 2f)
					{
						direction = -direction;
						this.ai[1] = 1f;
						this.ai[0] = 1f;
					}
					if (collideX)
					{
						directionY = -directionY;
						this.ai[1] = 1f;
					}
				}
				else
				{
					rotation -= (float)(direction * directionY) * 0.13f;
					if (collideX)
					{
						this.ai[0] = 2f;
					}
					if (!collideX && this.ai[0] == 2f)
					{
						directionY = -directionY;
						this.ai[1] = 0f;
						this.ai[0] = 1f;
					}
					if (collideY)
					{
						direction = -direction;
						this.ai[1] = 0f;
					}
				}
				velocity.X = num296 * direction;
				velocity.Y = num296 * directionY;
				float num297 = (float)(270 - Main.mouseTextColor) / 400f;
				Lighting.AddLight((int)(position.X + (float)(width / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.9f, 0.3f + num297, 0.2f);
			}
			else if (aiStyle == 22)
			{
				bool flag16 = false;
				bool flag17 = type == 330 && !Main.pumpkinMoon;
				if (type == 253 && !Main.eclipse)
				{
					flag17 = true;
				}
				if (type == 490 && Main.dayTime)
				{
					flag17 = true;
				}
				if (justHit)
				{
					this.ai[2] = 0f;
				}
				if (type == 316 && (Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 3000f))
				{
					TargetClosest();
					if (Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 3000f)
					{
						EncourageDespawn(10);
						flag16 = true;
						flag17 = true;
					}
				}
				if (flag17)
				{
					if (velocity.X == 0f)
					{
						velocity.X = (float)Main.rand.Next(-1, 2) * 1.5f;
						netUpdate = true;
					}
				}
				else if (this.ai[2] >= 0f)
				{
					int num298 = 16;
					bool flag18 = false;
					bool flag19 = false;
					if (position.X > this.ai[0] - (float)num298 && position.X < this.ai[0] + (float)num298)
					{
						flag18 = true;
					}
					else if ((velocity.X < 0f && direction > 0) || (velocity.X > 0f && direction < 0))
					{
						flag18 = true;
					}
					num298 += 24;
					if (position.Y > this.ai[1] - (float)num298 && position.Y < this.ai[1] + (float)num298)
					{
						flag19 = true;
					}
					if (flag18 && flag19)
					{
						this.ai[2] += 1f;
						if (this.ai[2] >= 30f && num298 == 16)
						{
							flag16 = true;
						}
						if (this.ai[2] >= 60f)
						{
							this.ai[2] = -200f;
							direction *= -1;
							velocity.X *= -1f;
							collideX = false;
						}
					}
					else
					{
						this.ai[0] = position.X;
						this.ai[1] = position.Y;
						this.ai[2] = 0f;
					}
					TargetClosest();
				}
				else if (type == 253)
				{
					TargetClosest();
					this.ai[2] += 2f;
				}
				else
				{
					if (type == 330)
					{
						this.ai[2] += 0.1f;
					}
					else
					{
						this.ai[2] += 1f;
					}
					if (Main.player[target].position.X + (float)(Main.player[target].width / 2) > position.X + (float)(width / 2))
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
				}
				int num299 = (int)((position.X + (float)(width / 2)) / 16f) + direction * 2;
				int num300 = (int)((position.Y + (float)height) / 16f);
				bool flag20 = true;
				bool flag21 = false;
				int num301 = 3;
				if (type == 122)
				{
					if (justHit)
					{
						this.ai[3] = 0f;
						localAI[1] = 0f;
					}
					if (Main.netMode != 1 && this.ai[3] == 32f && !Main.player[target].npcTypeNoAggro[type])
					{
						float num302 = 7f;
						Vector2 vector33 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num303 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector33.X;
						float num304 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector33.Y;
						float num305 = (float)Math.Sqrt(num303 * num303 + num304 * num304);
						float num306 = num305;
						num305 = num302 / num305;
						num303 *= num305;
						num304 *= num305;
						float num307 = 0.0125f;
						Vector2 vector34 = new Vector2(num303, num304).RotatedByRandom(num307 * (MathF.PI * 2f));
						num303 = vector34.X;
						num304 = vector34.Y;
						int num308 = 25;
						int num309 = 84;
						int num310 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector33.X, vector33.Y, num303, num304, num309, num308, 0f, Main.myPlayer);
					}
					num301 = 8;
					if (this.ai[3] > 0f)
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 64f)
						{
							this.ai[3] = 0f;
						}
					}
					if (Main.netMode != 1 && this.ai[3] == 0f)
					{
						localAI[1] += 1f;
						if (localAI[1] > 120f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && !Main.player[target].npcTypeNoAggro[type])
						{
							localAI[1] = 0f;
							this.ai[3] = 1f;
							netUpdate = true;
						}
					}
				}
				else if (type == 75)
				{
					num301 = 4;
					position += netOffset;
					if (Main.rand.Next(6) == 0)
					{
						int num311 = Dust.NewDust(position, width, height, 55, 0f, 0f, 200, this.color);
						Dust dust = Main.dust[num311];
						dust.velocity *= 0.3f;
					}
					if (Main.rand.Next(40) == 0)
					{
						SoundEngine.PlaySound(27, (int)position.X, (int)position.Y);
					}
					position -= netOffset;
				}
				else if (type == 169)
				{
					position += netOffset;
					Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0f, 0.6f, 0.75f);
					alpha = 30;
					if (Main.rand.Next(3) == 0)
					{
						int num312 = Dust.NewDust(position, width, height, 92, 0f, 0f, 200);
						Dust dust = Main.dust[num312];
						dust.velocity *= 0.3f;
						Main.dust[num312].noGravity = true;
					}
					position -= netOffset;
					if (justHit)
					{
						this.ai[3] = 0f;
						localAI[1] = 0f;
					}
					float num313 = 5f;
					Vector2 vector35 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num314 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector35.X;
					float num315 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector35.Y;
					float num316 = (float)Math.Sqrt(num314 * num314 + num315 * num315);
					float num317 = num316;
					num316 = num313 / num316;
					num314 *= num316;
					num315 *= num316;
					if (num314 > 0f)
					{
						direction = 1;
					}
					else
					{
						direction = -1;
					}
					spriteDirection = direction;
					if (direction < 0)
					{
						rotation = (float)Math.Atan2(0f - num315, 0f - num314);
					}
					else
					{
						rotation = (float)Math.Atan2(num315, num314);
					}
					if (Main.netMode != 1 && this.ai[3] == 16f)
					{
						int num318 = 45;
						int num319 = 128;
						int num320 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector35.X, vector35.Y, num314, num315, num319, num318, 0f, Main.myPlayer);
					}
					num301 = 10;
					if (this.ai[3] > 0f)
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 64f)
						{
							this.ai[3] = 0f;
						}
					}
					if (Main.netMode != 1 && this.ai[3] == 0f)
					{
						localAI[1] += 1f;
						if (localAI[1] > 120f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							localAI[1] = 0f;
							this.ai[3] = 1f;
							netUpdate = true;
						}
					}
				}
				else if (type == 268)
				{
					rotation = velocity.X * 0.1f;
					num301 = ((!(Main.player[target].Center.Y < base.Center.Y)) ? 6 : 12);
					if (Main.netMode != 1 && !confused)
					{
						this.ai[3] += 1f;
						if (justHit)
						{
							this.ai[3] = -45f;
							localAI[1] = 0f;
						}
						if (Main.netMode != 1 && this.ai[3] >= (float)(60 + Main.rand.Next(60)))
						{
							this.ai[3] = 0f;
							if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
							{
								float num321 = 10f;
								Vector2 vector36 = new Vector2(position.X + (float)width * 0.5f - 4f, position.Y + (float)height * 0.7f);
								float num322 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector36.X;
								float num323 = Math.Abs(num322) * 0.1f;
								float num324 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector36.Y - num323;
								num322 += (float)Main.rand.Next(-10, 11);
								num324 += (float)Main.rand.Next(-30, 21);
								float num325 = (float)Math.Sqrt(num322 * num322 + num324 * num324);
								float num326 = num325;
								num325 = num321 / num325;
								num322 *= num325;
								num324 *= num325;
								int num327 = 40;
								int num328 = 288;
								int num329 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector36.X, vector36.Y, num322, num324, num328, num327, 0f, Main.myPlayer);
							}
						}
					}
				}
				if (type == 490)
				{
					num301 = 4;
					if (target >= 0)
					{
						float num330 = (Main.player[target].Center - base.Center).Length();
						num330 /= 70f;
						if (num330 > 8f)
						{
							num330 = 8f;
						}
						num301 += (int)num330;
					}
				}
				if (position.Y + (float)height > Main.player[target].position.Y)
				{
					if (type == 330)
					{
						flag20 = false;
					}
					else
					{
						for (int num331 = num300; num331 < num300 + num301; num331++)
						{
							if (Main.tile[num299, num331] == null)
							{
								Main.tile[num299, num331] = new Tile();
							}
							if ((Main.tile[num299, num331].nactive() && Main.tileSolid[Main.tile[num299, num331].type]) || Main.tile[num299, num331].liquid > 0)
							{
								if (num331 <= num300 + 1)
								{
									flag21 = true;
								}
								flag20 = false;
								break;
							}
						}
					}
				}
				if (Main.player[target].npcTypeNoAggro[type])
				{
					bool flag22 = false;
					for (int num332 = num300; num332 < num300 + num301 - 2; num332++)
					{
						if (Main.tile[num299, num332] == null)
						{
							Main.tile[num299, num332] = new Tile();
						}
						if ((Main.tile[num299, num332].nactive() && Main.tileSolid[Main.tile[num299, num332].type]) || Main.tile[num299, num332].liquid > 0)
						{
							flag22 = true;
							break;
						}
					}
					directionY = (!flag22).ToDirectionInt();
				}
				if (type == 169 || type == 268)
				{
					for (int num333 = num300 - 3; num333 < num300; num333++)
					{
						if (Main.tile[num299, num333] == null)
						{
							Main.tile[num299, num333] = new Tile();
						}
						if ((Main.tile[num299, num333].nactive() && Main.tileSolid[Main.tile[num299, num333].type] && !TileID.Sets.Platforms[Main.tile[num299, num333].type]) || Main.tile[num299, num333].liquid > 0)
						{
							flag21 = false;
							flag16 = true;
							break;
						}
					}
				}
				if (flag16)
				{
					flag21 = false;
					flag20 = true;
					if (type == 268)
					{
						velocity.Y += 2f;
					}
				}
				if (flag20)
				{
					if (type == 75 || type == 169)
					{
						velocity.Y += 0.2f;
						if (velocity.Y > 2f)
						{
							velocity.Y = 2f;
						}
					}
					else if (type == 490)
					{
						velocity.Y += 0.03f;
						if ((double)velocity.Y > 0.75)
						{
							velocity.Y = 0.75f;
						}
					}
					else
					{
						velocity.Y += 0.1f;
						if (type == 316 && flag17)
						{
							velocity.Y -= 0.05f;
							if (velocity.Y > 6f)
							{
								velocity.Y = 6f;
							}
						}
						else if (velocity.Y > 3f)
						{
							velocity.Y = 3f;
						}
					}
				}
				else
				{
					if (type == 75 || type == 169)
					{
						if ((directionY < 0 && velocity.Y > 0f) || flag21)
						{
							velocity.Y -= 0.2f;
						}
					}
					else if (type == 490)
					{
						if ((directionY < 0 && velocity.Y > 0f) || flag21)
						{
							velocity.Y -= 0.075f;
						}
						if (velocity.Y < -0.75f)
						{
							velocity.Y = -0.75f;
						}
					}
					else if (directionY < 0 && velocity.Y > 0f)
					{
						velocity.Y -= 0.1f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				if (type == 75 && wet)
				{
					velocity.Y -= 0.2f;
					if (velocity.Y < -2f)
					{
						velocity.Y = -2f;
					}
				}
				if (collideX)
				{
					velocity.X = oldVelocity.X * -0.4f;
					if (direction == -1 && velocity.X > 0f && velocity.X < 1f)
					{
						velocity.X = 1f;
					}
					if (direction == 1 && velocity.X < 0f && velocity.X > -1f)
					{
						velocity.X = -1f;
					}
				}
				if (collideY)
				{
					velocity.Y = oldVelocity.Y * -0.25f;
					if (velocity.Y > 0f && velocity.Y < 1f)
					{
						velocity.Y = 1f;
					}
					if (velocity.Y < 0f && velocity.Y > -1f)
					{
						velocity.Y = -1f;
					}
				}
				float num334 = 2f;
				if (type == 75)
				{
					num334 = 3f;
				}
				if (type == 253)
				{
					num334 = 4f;
				}
				if (type == 490)
				{
					num334 = 1.5f;
				}
				if (type == 330)
				{
					alpha = 0;
					num334 = 4f;
					if (!flag17)
					{
						TargetClosest();
					}
					else
					{
						EncourageDespawn(10);
					}
					if (direction < 0 && velocity.X > 0f)
					{
						velocity.X *= 0.9f;
					}
					if (direction > 0 && velocity.X < 0f)
					{
						velocity.X *= 0.9f;
					}
				}
				if (direction == -1 && velocity.X > 0f - num334)
				{
					velocity.X -= 0.1f;
					if (velocity.X > num334)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X += 0.05f;
					}
					if (velocity.X < 0f - num334)
					{
						velocity.X = 0f - num334;
					}
				}
				else if (direction == 1 && velocity.X < num334)
				{
					velocity.X += 0.1f;
					if (velocity.X < 0f - num334)
					{
						velocity.X += 0.1f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X -= 0.05f;
					}
					if (velocity.X > num334)
					{
						velocity.X = num334;
					}
				}
				num334 = ((type != 490) ? 1.5f : 1f);
				if (directionY == -1 && velocity.Y > 0f - num334)
				{
					velocity.Y -= 0.04f;
					if (velocity.Y > num334)
					{
						velocity.Y -= 0.05f;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y += 0.03f;
					}
					if (velocity.Y < 0f - num334)
					{
						velocity.Y = 0f - num334;
					}
				}
				else if (directionY == 1 && velocity.Y < num334)
				{
					velocity.Y += 0.04f;
					if (velocity.Y < 0f - num334)
					{
						velocity.Y += 0.05f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y -= 0.03f;
					}
					if (velocity.Y > num334)
					{
						velocity.Y = num334;
					}
				}
				if (type == 122)
				{
					Lighting.AddLight((int)position.X / 16, (int)position.Y / 16, 0.4f, 0f, 0.25f);
				}
			}
			else if (aiStyle == 23)
			{
				noGravity = true;
				noTileCollide = true;
				if (type == 83)
				{
					Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.2f, 0.05f, 0.3f);
				}
				else if (type == 179)
				{
					Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.3f, 0.15f, 0.05f);
				}
				else
				{
					Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.05f, 0.2f, 0.3f);
				}
				if (target < 0 || target == 255 || Main.player[target].dead)
				{
					TargetClosest();
				}
				if (this.ai[0] == 0f)
				{
					float num335 = 9f;
					Vector2 vector37 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num336 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector37.X;
					float num337 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector37.Y;
					float num338 = (float)Math.Sqrt(num336 * num336 + num337 * num337);
					float num339 = num338;
					num338 = num335 / num338;
					num336 *= num338;
					num337 *= num338;
					velocity.X = num336;
					velocity.Y = num337;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 0.785f;
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				else if (this.ai[0] == 1f)
				{
					if (justHit)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
					}
					velocity *= 0.99f;
					this.ai[1] += 1f;
					if (this.ai[1] >= 100f)
					{
						netUpdate = true;
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						velocity.X = 0f;
						velocity.Y = 0f;
					}
					else
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 0.785f;
					}
				}
				else
				{
					if (justHit)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
					}
					velocity *= 0.96f;
					this.ai[1] += 1f;
					float num340 = this.ai[1] / 120f;
					num340 = 0.1f + num340 * 0.4f;
					rotation += num340 * (float)direction;
					if (this.ai[1] >= 120f)
					{
						netUpdate = true;
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
				}
			}
			else if (aiStyle == 24)
			{
				noGravity = true;
				if (type == 611)
				{
					if (localAI[0] == 0f)
					{
						TargetClosest();
						this.ai[0] = 1f;
						localAI[0] = 1f;
						netUpdate = true;
					}
					else if (this.ai[0] == 1f && Main.cloudAlpha == 0f && !Main.dayTime)
					{
						for (int num341 = 0; num341 < 200; num341++)
						{
							if (num341 == whoAmI || !Main.npc[num341].active)
							{
								continue;
							}
							if (Main.npc[num341].townNPC)
							{
								if (Math.Abs(base.Center.X - Main.npc[num341].Center.X) < 96f)
								{
									float num342 = Main.npc[num341].Center.Y - base.Center.Y;
									if (num342 > 32f && num342 < 320f && !Collision.CanHit(this, Main.npc[num341]))
									{
										this.ai[0] = 2f;
									}
								}
							}
							else if (Main.npc[num341].type == type && Main.npc[num341].ai[0] != 1f && Math.Abs(base.Center.X - Main.npc[num341].Center.X) < 320f)
							{
								this.ai[0] = 1f;
								break;
							}
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					noGravity = false;
					if (type == 611 && (Main.cloudAlpha > 0f || Main.dayTime))
					{
						this.ai[0] = 1f;
					}
					TargetClosest();
					if (Main.netMode != 1)
					{
						if (releaseOwner != 255 || velocity.X != 0f || velocity.Y < 0f || (double)velocity.Y > 0.3)
						{
							this.ai[0] = 1f;
							netUpdate = true;
							direction = -direction;
						}
						else if (type != 611)
						{
							Rectangle rectangle2 = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
							if (new Rectangle((int)position.X - 100, (int)position.Y - 100, width + 200, height + 200).Intersects(rectangle2) || life < lifeMax)
							{
								this.ai[0] = 1f;
								velocity.Y -= 6f;
								netUpdate = true;
								direction = -direction;
							}
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					velocity.X *= 0.98f;
					if (velocity.Y == 0f)
					{
						this.ai[0] = 0f;
						velocity.X = 0f;
					}
					velocity.Y += 0.05f;
					if (velocity.Y > 2f)
					{
						velocity.Y = 2f;
					}
				}
				else if (!Main.player[target].dead)
				{
					float num343 = 3f;
					if (type == 671 || type == 672 || type == 673 || type == 674 || type == 675)
					{
						num343 = 4f;
					}
					if (collideX)
					{
						direction *= -1;
						velocity.X = oldVelocity.X * -0.5f;
						if (direction == -1 && velocity.X > 0f && velocity.X < num343 - 1f)
						{
							velocity.X = num343 - 1f;
						}
						if (direction == 1 && velocity.X < 0f && velocity.X > 0f - num343 + 1f)
						{
							velocity.X = 0f - num343 + 1f;
						}
					}
					if (collideY)
					{
						velocity.Y = oldVelocity.Y * -0.5f;
						if (velocity.Y > 0f && velocity.Y < 1f)
						{
							velocity.Y = 1f;
						}
						if (velocity.Y < 0f && velocity.Y > -1f)
						{
							velocity.Y = -1f;
						}
					}
					if (direction == -1 && velocity.X > 0f - num343)
					{
						velocity.X -= 0.1f;
						if (velocity.X > num343)
						{
							velocity.X -= 0.1f;
						}
						else if (velocity.X > 0f)
						{
							velocity.X -= 0.05f;
						}
						if (velocity.X < 0f - num343)
						{
							velocity.X = 0f - num343;
						}
					}
					else if (direction == 1 && velocity.X < num343)
					{
						velocity.X += 0.1f;
						if (velocity.X < 0f - num343)
						{
							velocity.X += 0.1f;
						}
						else if (velocity.X < 0f)
						{
							velocity.X += 0.05f;
						}
						if (velocity.X > num343)
						{
							velocity.X = num343;
						}
					}
					int num344 = (int)((position.X + (float)(width / 2)) / 16f) + direction;
					int num345 = (int)((position.Y + (float)height) / 16f);
					bool flag23 = true;
					int num346 = 15;
					bool flag24 = false;
					for (int num347 = num345; num347 < num345 + num346; num347++)
					{
						if (!WorldGen.InWorld(num344, num347))
						{
							continue;
						}
						if (Main.tile[num344, num347] == null)
						{
							Main.tile[num344, num347] = new Tile();
						}
						if ((Main.tile[num344, num347].nactive() && Main.tileSolid[Main.tile[num344, num347].type]) || Main.tile[num344, num347].liquid > 0)
						{
							if (num347 < num345 + 5)
							{
								flag24 = true;
							}
							flag23 = false;
							break;
						}
					}
					if (flag23)
					{
						velocity.Y += 0.05f;
					}
					else
					{
						velocity.Y -= 0.1f;
					}
					if (flag24)
					{
						velocity.Y -= 0.2f;
					}
					if (velocity.Y > 2f)
					{
						velocity.Y = 2f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				if (wet)
				{
					this.ai[1] = 0f;
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.95f;
					}
					velocity.Y -= 0.5f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
					TargetClosest();
				}
			}
			else if (aiStyle == 25)
			{
				bool flag25 = type == 341 && !Main.snowMoon;
				if (this.ai[3] == 0f)
				{
					position.X += 8f;
					if (position.Y / 16f > (float)Main.UnderworldLayer)
					{
						this.ai[3] = 3f;
					}
					else if ((double)(position.Y / 16f) > Main.worldSurface)
					{
						TargetClosest();
						this.ai[3] = 2f;
					}
					else
					{
						this.ai[3] = 1f;
					}
				}
				if (type == 341 || type == 629)
				{
					this.ai[3] = 1f;
				}
				if (this.ai[0] == 0f)
				{
					if (!flag25)
					{
						TargetClosest();
					}
					if (Main.netMode == 1)
					{
						return;
					}
					if (velocity.X != 0f || velocity.Y < 0f || (double)velocity.Y > 0.3)
					{
						this.ai[0] = 1f;
						netUpdate = true;
						return;
					}
					Rectangle rectangle3 = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
					if (new Rectangle((int)position.X - 100, (int)position.Y - 100, width + 200, height + 200).Intersects(rectangle3) || life < lifeMax)
					{
						this.ai[0] = 1f;
						netUpdate = true;
					}
				}
				else if (velocity.Y == 0f)
				{
					this.ai[2] += 1f;
					int num348 = 20;
					if (this.ai[1] == 0f)
					{
						num348 = 12;
					}
					if (this.ai[2] < (float)num348)
					{
						velocity.X *= 0.9f;
						return;
					}
					this.ai[2] = 0f;
					if (!flag25)
					{
						TargetClosest();
					}
					if (direction == 0)
					{
						direction = -1;
					}
					spriteDirection = direction;
					this.ai[1] += 1f;
					if (this.ai[1] == 2f)
					{
						velocity.X = (float)direction * 2.5f;
						velocity.Y = -8f;
						this.ai[1] = 0f;
					}
					else
					{
						velocity.X = (float)direction * 3.5f;
						velocity.Y = -4f;
					}
					netUpdate = true;
				}
				else if (direction == 1 && velocity.X < 1f)
				{
					velocity.X += 0.1f;
				}
				else if (direction == -1 && velocity.X > -1f)
				{
					velocity.X -= 0.1f;
				}
			}
			else if (aiStyle == 26)
			{
				AI_026_Unicorns();
			}
			else if (aiStyle == 27)
			{
				if (position.X < 160f || position.X > (float)((Main.maxTilesX - 10) * 16))
				{
					active = false;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					Main.wofDrawAreaBottom = -1;
					Main.wofDrawAreaTop = -1;
				}
				if (Main.getGoodWorld && Main.netMode != 1 && Main.rand.Next(180) == 0 && CountNPCS(24) < 4)
				{
					int num349 = 1;
					for (int num350 = 0; num350 < num349; num350++)
					{
						int num351 = 1000;
						for (int num352 = 0; num352 < num351; num352++)
						{
							int num353 = (int)(base.Center.X / 16f);
							int num354 = (int)(base.Center.Y / 16f);
							if (target >= 0)
							{
								num353 = (int)(Main.player[target].Center.X / 16f);
								num354 = (int)(Main.player[target].Center.Y / 16f);
							}
							num353 += Main.rand.Next(-50, 51);
							for (num354 += Main.rand.Next(-50, 51); num354 < Main.maxTilesY - 10 && !WorldGen.SolidTile(num353, num354); num354++)
							{
							}
							num354--;
							if (!WorldGen.SolidTile(num353, num354))
							{
								int num355 = NewNPC(GetSpawnSourceForNaturalSpawn(), num353 * 16 + 8, num354 * 16, 24);
								if (Main.netMode == 2 && num355 < 200)
								{
									NetMessage.SendData(23, -1, -1, null, num355);
								}
								break;
							}
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[2] == 0f)
				{
					if ((double)life < (double)lifeMax * 0.5)
					{
						this.ai[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.2)
					{
						this.ai[1] += 1f;
					}
					if (this.ai[1] > 2700f)
					{
						this.ai[2] = 1f;
					}
				}
				int num356 = 60;
				if (this.ai[2] > 0f && this.ai[1] > (float)num356)
				{
					int num357 = 3;
					if ((double)life < (double)lifeMax * 0.3)
					{
						num357++;
					}
					this.ai[2] += 1f;
					this.ai[1] = 0f;
					if (this.ai[2] > (float)num357)
					{
						this.ai[2] = 0f;
					}
					if (Main.netMode != 1 && CountNPCS(117) < 10)
					{
						int num358 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)(height / 2) + 20f), 117, 1);
						Main.npc[num358].velocity.X = direction * 8;
					}
				}
				localAI[3] += 1f;
				if (localAI[3] >= (float)(600 + Main.rand.Next(1000)))
				{
					localAI[3] = -Main.rand.Next(200);
					SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 10);
				}
				int num359 = Main.UnderworldLayer + 10;
				int num360 = num359 + 70;
				Main.wofNPCIndex = whoAmI;
				int num361 = (int)(position.X / 16f);
				int num362 = (int)((position.X + (float)width) / 16f);
				int num363 = (int)((position.Y + (float)(height / 2)) / 16f);
				int num364 = 0;
				int num365 = num363 + 7;
				while (num364 < 15 && num365 > Main.UnderworldLayer)
				{
					num365++;
					if (num365 > Main.maxTilesY - 10)
					{
						num365 = Main.maxTilesY - 10;
						break;
					}
					if (num365 < num359)
					{
						continue;
					}
					for (int num366 = num361; num366 <= num362; num366++)
					{
						try
						{
							if (WorldGen.InWorld(num366, num365, 2) && (WorldGen.SolidTile(num366, num365) || Main.tile[num366, num365].liquid > 0))
							{
								num364++;
							}
						}
						catch
						{
							num364 += 15;
						}
					}
				}
				num365 += 4;
				if (Main.wofDrawAreaBottom == -1)
				{
					Main.wofDrawAreaBottom = num365 * 16;
				}
				else if (Main.wofDrawAreaBottom > num365 * 16)
				{
					Main.wofDrawAreaBottom--;
					if (Main.wofDrawAreaBottom < num365 * 16)
					{
						Main.wofDrawAreaBottom = num365 * 16;
					}
				}
				else if (Main.wofDrawAreaBottom < num365 * 16)
				{
					Main.wofDrawAreaBottom++;
					if (Main.wofDrawAreaBottom > num365 * 16)
					{
						Main.wofDrawAreaBottom = num365 * 16;
					}
				}
				num364 = 0;
				num365 = num363 - 7;
				while (num364 < 15 && num365 < Main.maxTilesY - 10)
				{
					num365--;
					if (num365 <= 10)
					{
						num365 = 10;
						break;
					}
					if (num365 > num360)
					{
						continue;
					}
					if (num365 < num359)
					{
						num365 = num359;
						break;
					}
					for (int num367 = num361; num367 <= num362; num367++)
					{
						try
						{
							if (WorldGen.InWorld(num367, num365, 2) && (WorldGen.SolidTile(num367, num365) || Main.tile[num367, num365].liquid > 0))
							{
								num364++;
							}
						}
						catch
						{
							num364 += 15;
						}
					}
				}
				num365 -= 4;
				if (Main.wofDrawAreaTop == -1)
				{
					Main.wofDrawAreaTop = num365 * 16;
				}
				else if (Main.wofDrawAreaTop > num365 * 16)
				{
					Main.wofDrawAreaTop--;
					if (Main.wofDrawAreaTop < num365 * 16)
					{
						Main.wofDrawAreaTop = num365 * 16;
					}
				}
				else if (Main.wofDrawAreaTop < num365 * 16)
				{
					Main.wofDrawAreaTop++;
					if (Main.wofDrawAreaTop > num365 * 16)
					{
						Main.wofDrawAreaTop = num365 * 16;
					}
				}
				Main.wofDrawAreaTop = (int)MathHelper.Clamp(Main.wofDrawAreaTop, (float)num359 * 16f, (float)num360 * 16f);
				Main.wofDrawAreaBottom = (int)MathHelper.Clamp(Main.wofDrawAreaBottom, (float)num359 * 16f, (float)num360 * 16f);
				if (Main.wofDrawAreaTop > Main.wofDrawAreaBottom - 160)
				{
					Main.wofDrawAreaTop = Main.wofDrawAreaBottom - 160;
				}
				else if (Main.wofDrawAreaBottom < Main.wofDrawAreaTop + 160)
				{
					Main.wofDrawAreaBottom = Main.wofDrawAreaTop + 160;
				}
				float num368 = (Main.wofDrawAreaBottom + Main.wofDrawAreaTop) / 2 - height / 2;
				if (position.Y > num368 + 1f)
				{
					velocity.Y = -1f;
				}
				else if (position.Y < num368 - 1f)
				{
					velocity.Y = 1f;
				}
				velocity.Y = 0f;
				position.Y = num368;
				float num369 = 1.5f;
				if ((double)life < (double)lifeMax * 0.75)
				{
					num369 += 0.25f;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					num369 += 0.4f;
				}
				if ((double)life < (double)lifeMax * 0.25)
				{
					num369 += 0.5f;
				}
				if ((double)life < (double)lifeMax * 0.1)
				{
					num369 += 0.6f;
				}
				if ((double)life < (double)lifeMax * 0.66 && Main.expertMode)
				{
					num369 += 0.3f;
				}
				if ((double)life < (double)lifeMax * 0.33 && Main.expertMode)
				{
					num369 += 0.3f;
				}
				if ((double)life < (double)lifeMax * 0.05 && Main.expertMode)
				{
					num369 += 0.6f;
				}
				if ((double)life < (double)lifeMax * 0.035 && Main.expertMode)
				{
					num369 += 0.6f;
				}
				if ((double)life < (double)lifeMax * 0.025 && Main.expertMode)
				{
					num369 += 0.6f;
				}
				if (Main.expertMode)
				{
					num369 *= 1.35f;
					num369 += 0.35f;
				}
				if (Main.getGoodWorld)
				{
					num369 *= 1.1f;
					num369 += 0.2f;
				}
				if (velocity.X == 0f)
				{
					TargetClosest();
					if (Main.player[target].dead)
					{
						float num370 = float.PositiveInfinity;
						int num371 = 0;
						for (int num372 = 0; num372 < 255; num372++)
						{
							Player player = Main.player[target];
							if (player.active)
							{
								float num373 = Distance(player.Center);
								if (num370 > num373)
								{
									num370 = num373;
									num371 = ((base.Center.X < player.Center.X) ? 1 : (-1));
								}
							}
						}
						direction = num371;
					}
					velocity.X = direction;
				}
				if (velocity.X < 0f)
				{
					velocity.X = 0f - num369;
					direction = -1;
				}
				else
				{
					velocity.X = num369;
					direction = 1;
				}
				if (Main.player[target].dead || !Main.player[target].gross)
				{
					TargetClosest_WOF();
				}
				if (Main.player[target].dead)
				{
					localAI[1] += 1f / 180f;
					if (localAI[1] >= 1f)
					{
						SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 10);
						life = 0;
						active = false;
						if (Main.netMode != 1)
						{
							NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
						}
						return;
					}
				}
				else
				{
					localAI[1] = MathHelper.Clamp(localAI[1] - 1f / 30f, 0f, 1f);
				}
				spriteDirection = direction;
				Vector2 vector38 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num374 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector38.X;
				float num375 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector38.Y;
				float num376 = (float)Math.Sqrt(num374 * num374 + num375 * num375);
				float num377 = num376;
				num374 *= num376;
				num375 *= num376;
				if (direction > 0)
				{
					if (Main.player[target].position.X + (float)(Main.player[target].width / 2) > position.X + (float)(width / 2))
					{
						rotation = (float)Math.Atan2(0f - num375, 0f - num374) + 3.14f;
					}
					else
					{
						rotation = 0f;
					}
				}
				else if (Main.player[target].position.X + (float)(Main.player[target].width / 2) < position.X + (float)(width / 2))
				{
					rotation = (float)Math.Atan2(num375, num374) + 3.14f;
				}
				else
				{
					rotation = 0f;
				}
				if (Main.expertMode && Main.netMode != 1)
				{
					int num378 = (int)(1f + (float)life / (float)lifeMax * 10f);
					num378 *= num378;
					if (num378 < 400)
					{
						num378 = (num378 * 19 + 400) / 20;
					}
					if (num378 < 60)
					{
						num378 = (num378 * 3 + 60) / 4;
					}
					if (num378 < 20)
					{
						num378 = (num378 + 20) / 2;
					}
					num378 = (int)((double)num378 * 0.7);
					if (Main.rand.Next(num378) == 0)
					{
						int num379 = 0;
						float[] array = new float[10];
						for (int num380 = 0; num380 < 200; num380++)
						{
							if (num379 < 10 && Main.npc[num380].active && Main.npc[num380].type == 115)
							{
								array[num379] = Main.npc[num380].ai[0];
								num379++;
							}
						}
						int maxValue = 1 + num379 * 2;
						if (num379 < 10 && Main.rand.Next(maxValue) <= 1)
						{
							int num381 = -1;
							for (int num382 = 0; num382 < 1000; num382++)
							{
								int num383 = Main.rand.Next(10);
								float num384 = (float)num383 * 0.1f - 0.05f;
								bool flag26 = true;
								for (int num385 = 0; num385 < num379; num385++)
								{
									if (num384 == array[num385])
									{
										flag26 = false;
										break;
									}
								}
								if (flag26)
								{
									num381 = num383;
									break;
								}
							}
							if (num381 >= 0)
							{
								NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)position.X, (int)num368, 115, whoAmI, (float)num381 * 0.1f - 0.05f);
							}
						}
					}
				}
				if (Main.netMode != 1 && localAI[0] == 1f)
				{
					localAI[0] = 2f;
					float num386 = (base.Center.Y + (float)Main.wofDrawAreaTop) / 2f;
					int num387 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)position.X, (int)num386, 114, whoAmI, 1f);
					float num388 = (base.Center.Y + (float)Main.wofDrawAreaBottom) / 2f;
					num387 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)position.X, (int)num388, 114, whoAmI, -1f);
					float num389 = (base.Center.Y + (float)Main.wofDrawAreaBottom) / 2f;
					for (int num390 = 0; num390 < 11; num390++)
					{
						num387 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)position.X, (int)num389, 115, whoAmI, (float)num390 * 0.1f - 0.05f);
					}
				}
			}
			else if (aiStyle == 28)
			{
				if (Main.wofNPCIndex < 0)
				{
					active = false;
					return;
				}
				realLife = Main.wofNPCIndex;
				if (Main.npc[Main.wofNPCIndex].life > 0)
				{
					life = Main.npc[Main.wofNPCIndex].life;
				}
				TargetClosest();
				position.X = Main.npc[Main.wofNPCIndex].position.X;
				direction = Main.npc[Main.wofNPCIndex].direction;
				spriteDirection = direction;
				float num391 = (Main.wofDrawAreaBottom + Main.wofDrawAreaTop) / 2;
				num391 = ((!(this.ai[0] > 0f)) ? ((num391 + (float)Main.wofDrawAreaBottom) / 2f) : ((num391 + (float)Main.wofDrawAreaTop) / 2f));
				num391 -= (float)(height / 2);
				if (position.Y > num391 + 1f)
				{
					velocity.Y = -1f;
				}
				else if (position.Y < num391 - 1f)
				{
					velocity.Y = 1f;
				}
				else
				{
					velocity.Y = 0f;
					position.Y = num391;
				}
				if (velocity.Y > 5f)
				{
					velocity.Y = 5f;
				}
				if (velocity.Y < -5f)
				{
					velocity.Y = -5f;
				}
				Vector2 vector39 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num392 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector39.X;
				float num393 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector39.Y;
				float num394 = (float)Math.Sqrt(num392 * num392 + num393 * num393);
				float num395 = num394;
				num392 *= num394;
				num393 *= num394;
				bool flag27 = true;
				if (direction > 0)
				{
					if (Main.player[target].position.X + (float)(Main.player[target].width / 2) > position.X + (float)(width / 2))
					{
						rotation = (float)Math.Atan2(0f - num393, 0f - num392) + 3.14f;
					}
					else
					{
						rotation = 0f;
						flag27 = false;
					}
				}
				else if (Main.player[target].position.X + (float)(Main.player[target].width / 2) < position.X + (float)(width / 2))
				{
					rotation = (float)Math.Atan2(num393, num392) + 3.14f;
				}
				else
				{
					rotation = 0f;
					flag27 = false;
				}
				if (Main.netMode == 1)
				{
					return;
				}
				int num396 = 4;
				localAI[1] += 1f;
				if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.75)
				{
					localAI[1] += 1f;
					num396++;
				}
				if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.5)
				{
					localAI[1] += 1f;
					num396++;
				}
				if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.25)
				{
					localAI[1] += 1f;
					num396 += 2;
				}
				if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.1)
				{
					localAI[1] += 2f;
					num396 += 3;
				}
				if (Main.expertMode)
				{
					localAI[1] += 0.5f;
					num396++;
					if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.1)
					{
						localAI[1] += 2f;
						num396 += 3;
					}
				}
				if (localAI[2] == 0f)
				{
					if (localAI[1] > 600f)
					{
						localAI[2] = 1f;
						localAI[1] = 0f;
					}
				}
				else
				{
					if (!(localAI[1] > 45f) || !Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						return;
					}
					localAI[1] = 0f;
					localAI[2] += 1f;
					if (localAI[2] >= (float)num396)
					{
						localAI[2] = 0f;
					}
					if (flag27)
					{
						float num397 = 9f;
						int num398 = 11;
						int num399 = 83;
						if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.5)
						{
							num398++;
							num397 += 1f;
						}
						if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.25)
						{
							num398++;
							num397 += 1f;
						}
						if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.1)
						{
							num398 += 2;
							num397 += 2f;
						}
						vector39 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						num392 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector39.X;
						num393 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector39.Y;
						num394 = (float)Math.Sqrt(num392 * num392 + num393 * num393);
						num394 = num397 / num394;
						num392 *= num394;
						num393 *= num394;
						vector39.X += num392;
						vector39.Y += num393;
						int num400 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector39.X, vector39.Y, num392, num393, num399, num398, 0f, Main.myPlayer);
					}
				}
			}
			else if (aiStyle == 29)
			{
				if (justHit)
				{
					this.ai[1] = 10f;
				}
				if (Main.wofNPCIndex < 0)
				{
					active = false;
					return;
				}
				TargetClosest();
				float num401 = 0.1f;
				float num402 = 300f;
				damage = defDamage;
				int num403 = 0;
				if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.5)
				{
					num403 = 60;
					defense = 30;
					if (!Main.expertMode)
					{
						num402 = 700f;
					}
					else
					{
						num401 += 0.066f;
					}
				}
				else if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.75)
				{
					num403 = 45;
					defense = 20;
					if (!Main.expertMode)
					{
						num402 = 500f;
					}
					else
					{
						num401 += 0.033f;
					}
				}
				if (num403 > 0)
				{
					damage = GetAttackDamage_ScaledByStrength(num403);
				}
				if (Main.expertMode)
				{
					defense = defDefense;
					if (whoAmI % 4 == 0)
					{
						num402 *= 1.75f;
					}
					if (whoAmI % 4 == 1)
					{
						num402 *= 1.5f;
					}
					if (whoAmI % 4 == 2)
					{
						num402 *= 1.25f;
					}
					if (whoAmI % 3 == 0)
					{
						num402 *= 1.5f;
					}
					if (whoAmI % 3 == 1)
					{
						num402 *= 1.25f;
					}
					num402 *= 0.75f;
				}
				float num404 = Main.npc[Main.wofNPCIndex].position.X + (float)(Main.npc[Main.wofNPCIndex].width / 2);
				float y3 = Main.npc[Main.wofNPCIndex].position.Y;
				float num405 = Main.wofDrawAreaBottom - Main.wofDrawAreaTop;
				y3 = (float)Main.wofDrawAreaTop + num405 * this.ai[0];
				this.ai[2] += 1f;
				if (this.ai[2] > 100f)
				{
					num402 = (int)(num402 * 1.3f);
					if (this.ai[2] > 200f)
					{
						this.ai[2] = 0f;
					}
				}
				Vector2 vector40 = new Vector2(num404, y3);
				float num406 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - (float)(width / 2) - vector40.X;
				float num407 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - (float)(height / 2) - vector40.Y;
				float num408 = (float)Math.Sqrt(num406 * num406 + num407 * num407);
				if (this.ai[1] == 0f)
				{
					if (num408 > num402)
					{
						num408 = num402 / num408;
						num406 *= num408;
						num407 *= num408;
					}
					if (position.X < num404 + num406)
					{
						velocity.X += num401;
						if (velocity.X < 0f && num406 > 0f)
						{
							velocity.X += num401 * 2.5f;
						}
					}
					else if (position.X > num404 + num406)
					{
						velocity.X -= num401;
						if (velocity.X > 0f && num406 < 0f)
						{
							velocity.X -= num401 * 2.5f;
						}
					}
					if (position.Y < y3 + num407)
					{
						velocity.Y += num401;
						if (velocity.Y < 0f && num407 > 0f)
						{
							velocity.Y += num401 * 2.5f;
						}
					}
					else if (position.Y > y3 + num407)
					{
						velocity.Y -= num401;
						if (velocity.Y > 0f && num407 < 0f)
						{
							velocity.Y -= num401 * 2.5f;
						}
					}
					float num409 = 4f;
					if (Main.expertMode && Main.wofNPCIndex >= 0)
					{
						float num410 = 1.5f;
						float num411 = Main.npc[Main.wofNPCIndex].life / Main.npc[Main.wofNPCIndex].lifeMax;
						if ((double)num411 < 0.75)
						{
							num410 += 0.7f;
						}
						if ((double)num411 < 0.5)
						{
							num410 += 0.7f;
						}
						if ((double)num411 < 0.25)
						{
							num410 += 0.9f;
						}
						if ((double)num411 < 0.1)
						{
							num410 += 0.9f;
						}
						num410 *= 1.25f;
						num410 += 0.3f;
						num409 += num410 * 0.35f;
						if (base.Center.X < Main.npc[Main.wofNPCIndex].Center.X && Main.npc[Main.wofNPCIndex].velocity.X > 0f)
						{
							num409 += 6f;
						}
						if (base.Center.X > Main.npc[Main.wofNPCIndex].Center.X && Main.npc[Main.wofNPCIndex].velocity.X < 0f)
						{
							num409 += 6f;
						}
					}
					if (velocity.X > num409)
					{
						velocity.X = num409;
					}
					if (velocity.X < 0f - num409)
					{
						velocity.X = 0f - num409;
					}
					if (velocity.Y > num409)
					{
						velocity.Y = num409;
					}
					if (velocity.Y < 0f - num409)
					{
						velocity.Y = 0f - num409;
					}
				}
				else if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				else
				{
					this.ai[1] = 0f;
				}
				if (num406 > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num407, num406);
				}
				if (num406 < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num407, num406) + 3.14f;
				}
				Lighting.AddLight((int)(position.X + (float)(width / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.3f, 0.2f, 0.1f);
			}
			else if (aiStyle == 30)
			{
				if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
				}
				bool dead2 = Main.player[target].dead;
				float num412 = position.X + (float)(width / 2) - Main.player[target].position.X - (float)(Main.player[target].width / 2);
				float num413 = position.Y + (float)height - 59f - Main.player[target].position.Y - (float)(Main.player[target].height / 2);
				float num414 = (float)Math.Atan2(num413, num412) + 1.57f;
				if (num414 < 0f)
				{
					num414 += 6.283f;
				}
				else if ((double)num414 > 6.283)
				{
					num414 -= 6.283f;
				}
				float num415 = 0.1f;
				if (rotation < num414)
				{
					if ((double)(num414 - rotation) > 3.1415)
					{
						rotation -= num415;
					}
					else
					{
						rotation += num415;
					}
				}
				else if (rotation > num414)
				{
					if ((double)(rotation - num414) > 3.1415)
					{
						rotation += num415;
					}
					else
					{
						rotation -= num415;
					}
				}
				if (rotation > num414 - num415 && rotation < num414 + num415)
				{
					rotation = num414;
				}
				if (rotation < 0f)
				{
					rotation += 6.283f;
				}
				else if ((double)rotation > 6.283)
				{
					rotation -= 6.283f;
				}
				if (rotation > num414 - num415 && rotation < num414 + num415)
				{
					rotation = num414;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num416 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, velocity.X, 2f);
					Main.dust[num416].velocity.X *= 0.5f;
					Main.dust[num416].velocity.Y *= 0.1f;
				}
				if (Main.netMode != 1 && !Main.IsItDay() && !dead2 && timeLeft < 10)
				{
					for (int num417 = 0; num417 < 200; num417++)
					{
						if (num417 != whoAmI && Main.npc[num417].active && (Main.npc[num417].type == 125 || Main.npc[num417].type == 126))
						{
							DiscourageDespawn(Main.npc[num417].timeLeft - 1);
						}
					}
				}
				Vector2 vector41 = Vector2.Zero;
				if (IsMechQueenUp)
				{
					NPC nPC = Main.npc[mechQueen];
					Vector2 mechQueenCenter = nPC.GetMechQueenCenter();
					Vector2 vector42 = new Vector2(-150f, -250f);
					float num418 = nPC.velocity.X * 0.025f;
					vector41 = mechQueenCenter + vector42;
					vector41 = vector41.RotatedBy(num418, mechQueenCenter);
				}
				reflectsProjectiles = false;
				if (Main.IsItDay() || dead2)
				{
					velocity.Y -= 0.04f;
					EncourageDespawn(10);
					return;
				}
				if (this.ai[0] == 0f)
				{
					if (this.ai[1] == 0f)
					{
						float num419 = 7f;
						float num420 = 0.1f;
						if (Main.expertMode)
						{
							num419 = 8.25f;
							num420 = 0.115f;
						}
						if (Main.getGoodWorld)
						{
							num419 *= 1.15f;
							num420 *= 1.15f;
						}
						int num421 = 1;
						if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
						{
							num421 = -1;
						}
						Vector2 vector43 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num422 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num421 * 300) - vector43.X;
						float num423 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector43.Y;
						if (IsMechQueenUp)
						{
							num419 = 14f;
							num422 = vector41.X;
							num423 = vector41.Y;
							num422 -= vector43.X;
							num423 -= vector43.Y;
						}
						float num424 = (float)Math.Sqrt(num422 * num422 + num423 * num423);
						float num425 = num424;
						if (IsMechQueenUp)
						{
							if (num424 > num419)
							{
								num424 = num419 / num424;
								num422 *= num424;
								num423 *= num424;
							}
							velocity.X = (velocity.X * 4f + num422) / 5f;
							velocity.Y = (velocity.Y * 4f + num423) / 5f;
						}
						else
						{
							num424 = num419 / num424;
							num422 *= num424;
							num423 *= num424;
							if (velocity.X < num422)
							{
								velocity.X += num420;
								if (velocity.X < 0f && num422 > 0f)
								{
									velocity.X += num420;
								}
							}
							else if (velocity.X > num422)
							{
								velocity.X -= num420;
								if (velocity.X > 0f && num422 < 0f)
								{
									velocity.X -= num420;
								}
							}
							if (velocity.Y < num423)
							{
								velocity.Y += num420;
								if (velocity.Y < 0f && num423 > 0f)
								{
									velocity.Y += num420;
								}
							}
							else if (velocity.Y > num423)
							{
								velocity.Y -= num420;
								if (velocity.Y > 0f && num423 < 0f)
								{
									velocity.Y -= num420;
								}
							}
						}
						int num426 = 600;
						if (IsMechQueenUp)
						{
							num426 = 1200;
						}
						this.ai[2] += 1f;
						if (this.ai[2] >= (float)num426)
						{
							this.ai[1] = 1f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							target = 255;
							netUpdate = true;
						}
						else if (position.Y + (float)height < Main.player[target].position.Y && num425 < 400f)
						{
							if (!Main.player[target].dead)
							{
								this.ai[3] += 1f;
								if (Main.expertMode && (double)life < (double)lifeMax * 0.9)
								{
									this.ai[3] += 0.3f;
								}
								if (Main.expertMode && (double)life < (double)lifeMax * 0.8)
								{
									this.ai[3] += 0.3f;
								}
								if (Main.expertMode && (double)life < (double)lifeMax * 0.7)
								{
									this.ai[3] += 0.3f;
								}
								if (Main.expertMode && (double)life < (double)lifeMax * 0.6)
								{
									this.ai[3] += 0.3f;
								}
								if (Main.getGoodWorld)
								{
									this.ai[3] += 0.5f;
								}
							}
							if (this.ai[3] >= 60f)
							{
								this.ai[3] = 0f;
								vector43 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
								num422 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector43.X;
								num423 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector43.Y;
								if (Main.netMode != 1)
								{
									float num427 = 9f;
									int attackDamage_ForProjectiles3 = GetAttackDamage_ForProjectiles(20f, 19f);
									int num428 = 83;
									if (Main.expertMode)
									{
										num427 = 10.5f;
									}
									num424 = (float)Math.Sqrt(num422 * num422 + num423 * num423);
									num424 = num427 / num424;
									num422 *= num424;
									num423 *= num424;
									num422 += (float)Main.rand.Next(-40, 41) * 0.08f;
									num423 += (float)Main.rand.Next(-40, 41) * 0.08f;
									vector43.X += num422 * 15f;
									vector43.Y += num423 * 15f;
									int num429 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector43.X, vector43.Y, num422, num423, num428, attackDamage_ForProjectiles3, 0f, Main.myPlayer);
								}
							}
						}
					}
					else if (this.ai[1] == 1f)
					{
						rotation = num414;
						float num430 = 12f;
						if (Main.expertMode)
						{
							num430 = 15f;
						}
						if (Main.getGoodWorld)
						{
							num430 += 2f;
						}
						Vector2 vector44 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num431 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector44.X;
						float num432 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector44.Y;
						float num433 = (float)Math.Sqrt(num431 * num431 + num432 * num432);
						num433 = num430 / num433;
						velocity.X = num431 * num433;
						velocity.Y = num432 * num433;
						this.ai[1] = 2f;
					}
					else if (this.ai[1] == 2f)
					{
						this.ai[2] += 1f;
						if (this.ai[2] >= 25f)
						{
							velocity.X *= 0.96f;
							velocity.Y *= 0.96f;
							if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
							{
								velocity.X = 0f;
							}
							if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
							{
								velocity.Y = 0f;
							}
						}
						else
						{
							rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
						}
						if (this.ai[2] >= 70f)
						{
							this.ai[3] += 1f;
							this.ai[2] = 0f;
							target = 255;
							rotation = num414;
							if (this.ai[3] >= 4f)
							{
								this.ai[1] = 0f;
								this.ai[3] = 0f;
							}
							else
							{
								this.ai[1] = 1f;
							}
						}
					}
					if ((double)life < (double)lifeMax * 0.4)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					return;
				}
				if (this.ai[0] == 1f || this.ai[0] == 2f)
				{
					if (IsMechQueenUp)
					{
						reflectsProjectiles = true;
					}
					if (this.ai[0] == 1f)
					{
						this.ai[2] += 0.005f;
						if ((double)this.ai[2] > 0.5)
						{
							this.ai[2] = 0.5f;
						}
					}
					else
					{
						this.ai[2] -= 0.005f;
						if (this.ai[2] < 0f)
						{
							this.ai[2] = 0f;
						}
					}
					rotation += this.ai[2];
					this.ai[1] += 1f;
					if (this.ai[1] >= 100f)
					{
						this.ai[0] += 1f;
						this.ai[1] = 0f;
						if (this.ai[0] == 3f)
						{
							this.ai[2] = 0f;
						}
						else
						{
							SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
							for (int num434 = 0; num434 < 2; num434++)
							{
								Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 143);
								Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
								Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6);
							}
							for (int num435 = 0; num435 < 20; num435++)
							{
								Dust.NewDust(position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
							}
							SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
						}
					}
					Dust.NewDust(position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
					velocity.X *= 0.98f;
					velocity.Y *= 0.98f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
					{
						velocity.Y = 0f;
					}
					return;
				}
				damage = (int)((double)defDamage * 1.5);
				defense = defDefense + 10;
				HitSound = SoundID.NPCHit4;
				if (this.ai[1] == 0f)
				{
					float num436 = 8f;
					float num437 = 0.15f;
					if (Main.expertMode)
					{
						num436 = 9.5f;
						num437 = 0.175f;
					}
					if (Main.getGoodWorld)
					{
						num436 *= 1.15f;
						num437 *= 1.15f;
					}
					Vector2 vector45 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num438 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector45.X;
					float num439 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector45.Y;
					if (IsMechQueenUp)
					{
						num436 = 14f;
						num438 = vector41.X;
						num439 = vector41.Y;
						num438 -= vector45.X;
						num439 -= vector45.Y;
					}
					float num440 = (float)Math.Sqrt(num438 * num438 + num439 * num439);
					if (IsMechQueenUp)
					{
						if (num440 > num436)
						{
							num440 = num436 / num440;
							num438 *= num440;
							num439 *= num440;
						}
						velocity.X = (velocity.X * 4f + num438) / 5f;
						velocity.Y = (velocity.Y * 4f + num439) / 5f;
					}
					else
					{
						num440 = num436 / num440;
						num438 *= num440;
						num439 *= num440;
						if (velocity.X < num438)
						{
							velocity.X += num437;
							if (velocity.X < 0f && num438 > 0f)
							{
								velocity.X += num437;
							}
						}
						else if (velocity.X > num438)
						{
							velocity.X -= num437;
							if (velocity.X > 0f && num438 < 0f)
							{
								velocity.X -= num437;
							}
						}
						if (velocity.Y < num439)
						{
							velocity.Y += num437;
							if (velocity.Y < 0f && num439 > 0f)
							{
								velocity.Y += num437;
							}
						}
						else if (velocity.Y > num439)
						{
							velocity.Y -= num437;
							if (velocity.Y > 0f && num439 < 0f)
							{
								velocity.Y -= num437;
							}
						}
					}
					int num441 = 300;
					if (IsMechQueenUp)
					{
						num441 = 1200;
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num441)
					{
						this.ai[1] = 1f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						TargetClosest();
						netUpdate = true;
					}
					vector45 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num438 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector45.X;
					num439 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector45.Y;
					rotation = (float)Math.Atan2(num439, num438) - 1.57f;
					if (Main.netMode == 1)
					{
						return;
					}
					localAI[1] += 1f;
					if ((double)life < (double)lifeMax * 0.75)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.1)
					{
						localAI[1] += 2f;
					}
					if (localAI[1] > 180f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						localAI[1] = 0f;
						float num442 = 8.5f;
						int attackDamage_ForProjectiles4 = GetAttackDamage_ForProjectiles(25f, 23f);
						int num443 = 100;
						if (Main.expertMode)
						{
							num442 = 10f;
						}
						num440 = (float)Math.Sqrt(num438 * num438 + num439 * num439);
						num440 = num442 / num440;
						num438 *= num440;
						num439 *= num440;
						vector45.X += num438 * 15f;
						vector45.Y += num439 * 15f;
						int num444 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector45.X, vector45.Y, num438, num439, num443, attackDamage_ForProjectiles4, 0f, Main.myPlayer);
					}
					return;
				}
				int num445 = 1;
				if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
				{
					num445 = -1;
				}
				float num446 = 8f;
				float num447 = 0.2f;
				if (Main.expertMode)
				{
					num446 = 9.5f;
					num447 = 0.25f;
				}
				if (Main.getGoodWorld)
				{
					num446 *= 1.15f;
					num447 *= 1.15f;
				}
				Vector2 vector46 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num448 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num445 * 340) - vector46.X;
				float num449 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector46.Y;
				float num450 = (float)Math.Sqrt(num448 * num448 + num449 * num449);
				num450 = num446 / num450;
				num448 *= num450;
				num449 *= num450;
				if (velocity.X < num448)
				{
					velocity.X += num447;
					if (velocity.X < 0f && num448 > 0f)
					{
						velocity.X += num447;
					}
				}
				else if (velocity.X > num448)
				{
					velocity.X -= num447;
					if (velocity.X > 0f && num448 < 0f)
					{
						velocity.X -= num447;
					}
				}
				if (velocity.Y < num449)
				{
					velocity.Y += num447;
					if (velocity.Y < 0f && num449 > 0f)
					{
						velocity.Y += num447;
					}
				}
				else if (velocity.Y > num449)
				{
					velocity.Y -= num447;
					if (velocity.Y > 0f && num449 < 0f)
					{
						velocity.Y -= num447;
					}
				}
				vector46 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				num448 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector46.X;
				num449 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector46.Y;
				rotation = (float)Math.Atan2(num449, num448) - 1.57f;
				if (Main.netMode != 1)
				{
					localAI[1] += 1f;
					if ((double)life < (double)lifeMax * 0.75)
					{
						localAI[1] += 0.5f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						localAI[1] += 0.75f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.1)
					{
						localAI[1] += 1.5f;
					}
					if (Main.expertMode)
					{
						localAI[1] += 1.5f;
					}
					if (localAI[1] > 60f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						localAI[1] = 0f;
						float num451 = 9f;
						int attackDamage_ForProjectiles5 = GetAttackDamage_ForProjectiles(18f, 17f);
						int num452 = 100;
						num450 = (float)Math.Sqrt(num448 * num448 + num449 * num449);
						num450 = num451 / num450;
						num448 *= num450;
						num449 *= num450;
						vector46.X += num448 * 15f;
						vector46.Y += num449 * 15f;
						int num453 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector46.X, vector46.Y, num448, num449, num452, attackDamage_ForProjectiles5, 0f, Main.myPlayer);
					}
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= 180f)
				{
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					TargetClosest();
					netUpdate = true;
				}
			}
			else if (aiStyle == 31)
			{
				if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
				}
				bool dead3 = Main.player[target].dead;
				float num454 = position.X + (float)(width / 2) - Main.player[target].position.X - (float)(Main.player[target].width / 2);
				float num455 = position.Y + (float)height - 59f - Main.player[target].position.Y - (float)(Main.player[target].height / 2);
				float num456 = (float)Math.Atan2(num455, num454) + 1.57f;
				if (num456 < 0f)
				{
					num456 += 6.283f;
				}
				else if ((double)num456 > 6.283)
				{
					num456 -= 6.283f;
				}
				float num457 = 0.15f;
				if (rotation < num456)
				{
					if ((double)(num456 - rotation) > 3.1415)
					{
						rotation -= num457;
					}
					else
					{
						rotation += num457;
					}
				}
				else if (rotation > num456)
				{
					if ((double)(rotation - num456) > 3.1415)
					{
						rotation += num457;
					}
					else
					{
						rotation -= num457;
					}
				}
				if (rotation > num456 - num457 && rotation < num456 + num457)
				{
					rotation = num456;
				}
				if (rotation < 0f)
				{
					rotation += 6.283f;
				}
				else if ((double)rotation > 6.283)
				{
					rotation -= 6.283f;
				}
				if (rotation > num456 - num457 && rotation < num456 + num457)
				{
					rotation = num456;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num458 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, velocity.X, 2f);
					Main.dust[num458].velocity.X *= 0.5f;
					Main.dust[num458].velocity.Y *= 0.1f;
				}
				if (Main.netMode != 1 && !Main.IsItDay() && !dead3 && timeLeft < 10)
				{
					for (int num459 = 0; num459 < 200; num459++)
					{
						if (num459 != whoAmI && Main.npc[num459].active && (Main.npc[num459].type == 125 || Main.npc[num459].type == 126))
						{
							DiscourageDespawn(Main.npc[num459].timeLeft - 1);
						}
					}
				}
				Vector2 vector47 = Vector2.Zero;
				if (IsMechQueenUp)
				{
					NPC nPC2 = Main.npc[mechQueen];
					Vector2 mechQueenCenter2 = nPC2.GetMechQueenCenter();
					Vector2 vector48 = new Vector2(150f, -250f);
					float num460 = nPC2.velocity.X * 0.025f;
					vector47 = mechQueenCenter2 + vector48;
					vector47 = vector47.RotatedBy(num460, mechQueenCenter2);
				}
				reflectsProjectiles = false;
				if (Main.IsItDay() || dead3)
				{
					velocity.Y -= 0.04f;
					EncourageDespawn(10);
					return;
				}
				if (this.ai[0] == 0f)
				{
					if (this.ai[1] == 0f)
					{
						TargetClosest();
						float num461 = 12f;
						float num462 = 0.4f;
						if (Main.getGoodWorld)
						{
							num461 *= 1.15f;
							num462 *= 1.15f;
						}
						int num463 = 1;
						if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
						{
							num463 = -1;
						}
						Vector2 vector49 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num464 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num463 * 400) - vector49.X;
						float num465 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector49.Y;
						if (IsMechQueenUp)
						{
							num461 = 14f;
							num464 = vector47.X;
							num465 = vector47.Y;
							num464 -= vector49.X;
							num465 -= vector49.Y;
						}
						float num466 = (float)Math.Sqrt(num464 * num464 + num465 * num465);
						float num467 = num466;
						if (IsMechQueenUp)
						{
							if (num466 > num461)
							{
								num466 = num461 / num466;
								num464 *= num466;
								num465 *= num466;
							}
							velocity.X = (velocity.X * 4f + num464) / 5f;
							velocity.Y = (velocity.Y * 4f + num465) / 5f;
						}
						else
						{
							num466 = num461 / num466;
							num464 *= num466;
							num465 *= num466;
							if (velocity.X < num464)
							{
								velocity.X += num462;
								if (velocity.X < 0f && num464 > 0f)
								{
									velocity.X += num462;
								}
							}
							else if (velocity.X > num464)
							{
								velocity.X -= num462;
								if (velocity.X > 0f && num464 < 0f)
								{
									velocity.X -= num462;
								}
							}
							if (velocity.Y < num465)
							{
								velocity.Y += num462;
								if (velocity.Y < 0f && num465 > 0f)
								{
									velocity.Y += num462;
								}
							}
							else if (velocity.Y > num465)
							{
								velocity.Y -= num462;
								if (velocity.Y > 0f && num465 < 0f)
								{
									velocity.Y -= num462;
								}
							}
						}
						int num468 = 600;
						if (IsMechQueenUp)
						{
							num468 = 1200;
						}
						this.ai[2] += 1f;
						if (this.ai[2] >= (float)num468)
						{
							this.ai[1] = 1f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							target = 255;
							netUpdate = true;
						}
						else
						{
							if (!Main.player[target].dead)
							{
								this.ai[3] += 1f;
								if (Main.expertMode && (double)life < (double)lifeMax * 0.8)
								{
									this.ai[3] += 0.6f;
								}
								if (Main.getGoodWorld)
								{
									this.ai[3] += 0.4f;
								}
							}
							if (this.ai[3] >= 60f)
							{
								this.ai[3] = 0f;
								vector49 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
								num464 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector49.X;
								num465 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector49.Y;
								if (Main.netMode != 1)
								{
									float num469 = 12f;
									int attackDamage_ForProjectiles6 = GetAttackDamage_ForProjectiles(25f, 22f);
									int num470 = 96;
									if (Main.expertMode)
									{
										num469 = 14f;
									}
									num466 = (float)Math.Sqrt(num464 * num464 + num465 * num465);
									num466 = num469 / num466;
									num464 *= num466;
									num465 *= num466;
									num464 += (float)Main.rand.Next(-40, 41) * 0.05f;
									num465 += (float)Main.rand.Next(-40, 41) * 0.05f;
									vector49.X += num464 * 4f;
									vector49.Y += num465 * 4f;
									int num471 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector49.X, vector49.Y, num464, num465, num470, attackDamage_ForProjectiles6, 0f, Main.myPlayer);
								}
							}
						}
					}
					else if (this.ai[1] == 1f)
					{
						rotation = num456;
						float num472 = 13f;
						if (Main.expertMode)
						{
							if ((double)life < (double)lifeMax * 0.9)
							{
								num472 += 0.5f;
							}
							if ((double)life < (double)lifeMax * 0.8)
							{
								num472 += 0.5f;
							}
							if ((double)life < (double)lifeMax * 0.7)
							{
								num472 += 0.55f;
							}
							if ((double)life < (double)lifeMax * 0.6)
							{
								num472 += 0.6f;
							}
							if ((double)life < (double)lifeMax * 0.5)
							{
								num472 += 0.65f;
							}
						}
						if (Main.getGoodWorld)
						{
							num472 *= 1.2f;
						}
						Vector2 vector50 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num473 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector50.X;
						float num474 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector50.Y;
						float num475 = (float)Math.Sqrt(num473 * num473 + num474 * num474);
						num475 = num472 / num475;
						velocity.X = num473 * num475;
						velocity.Y = num474 * num475;
						this.ai[1] = 2f;
					}
					else if (this.ai[1] == 2f)
					{
						this.ai[2] += 1f;
						if (this.ai[2] >= 8f)
						{
							velocity.X *= 0.9f;
							velocity.Y *= 0.9f;
							if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
							{
								velocity.X = 0f;
							}
							if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
							{
								velocity.Y = 0f;
							}
						}
						else
						{
							rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
						}
						if (this.ai[2] >= 42f)
						{
							this.ai[3] += 1f;
							this.ai[2] = 0f;
							target = 255;
							rotation = num456;
							if (this.ai[3] >= 10f)
							{
								this.ai[1] = 0f;
								this.ai[3] = 0f;
							}
							else
							{
								this.ai[1] = 1f;
							}
						}
					}
					if ((double)life < (double)lifeMax * 0.4)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					return;
				}
				if (this.ai[0] == 1f || this.ai[0] == 2f)
				{
					if (IsMechQueenUp)
					{
						reflectsProjectiles = true;
					}
					if (this.ai[0] == 1f)
					{
						this.ai[2] += 0.005f;
						if ((double)this.ai[2] > 0.5)
						{
							this.ai[2] = 0.5f;
						}
					}
					else
					{
						this.ai[2] -= 0.005f;
						if (this.ai[2] < 0f)
						{
							this.ai[2] = 0f;
						}
					}
					rotation += this.ai[2];
					this.ai[1] += 1f;
					if (this.ai[1] >= 100f)
					{
						this.ai[0] += 1f;
						this.ai[1] = 0f;
						if (this.ai[0] == 3f)
						{
							this.ai[2] = 0f;
						}
						else
						{
							SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
							for (int num476 = 0; num476 < 2; num476++)
							{
								Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 144);
								Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
								Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6);
							}
							for (int num477 = 0; num477 < 20; num477++)
							{
								Dust.NewDust(position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
							}
							SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
						}
					}
					Dust.NewDust(position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
					velocity.X *= 0.98f;
					velocity.Y *= 0.98f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
					{
						velocity.Y = 0f;
					}
					return;
				}
				HitSound = SoundID.NPCHit4;
				damage = (int)((double)defDamage * 1.5);
				defense = defDefense + 18;
				if (this.ai[1] == 0f)
				{
					float num478 = 4f;
					float num479 = 0.1f;
					int num480 = 1;
					if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
					{
						num480 = -1;
					}
					Vector2 vector51 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num481 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num480 * 180) - vector51.X;
					float num482 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector51.Y;
					float num483 = (float)Math.Sqrt(num481 * num481 + num482 * num482);
					if (!IsMechQueenUp)
					{
						if (Main.expertMode)
						{
							if (num483 > 300f)
							{
								num478 += 0.5f;
							}
							if (num483 > 400f)
							{
								num478 += 0.5f;
							}
							if (num483 > 500f)
							{
								num478 += 0.55f;
							}
							if (num483 > 600f)
							{
								num478 += 0.55f;
							}
							if (num483 > 700f)
							{
								num478 += 0.6f;
							}
							if (num483 > 800f)
							{
								num478 += 0.6f;
							}
						}
						if (Main.getGoodWorld)
						{
							num478 *= 1.15f;
							num479 *= 1.15f;
						}
						num483 = num478 / num483;
						num481 *= num483;
						num482 *= num483;
						if (velocity.X < num481)
						{
							velocity.X += num479;
							if (velocity.X < 0f && num481 > 0f)
							{
								velocity.X += num479;
							}
						}
						else if (velocity.X > num481)
						{
							velocity.X -= num479;
							if (velocity.X > 0f && num481 < 0f)
							{
								velocity.X -= num479;
							}
						}
						if (velocity.Y < num482)
						{
							velocity.Y += num479;
							if (velocity.Y < 0f && num482 > 0f)
							{
								velocity.Y += num479;
							}
						}
						else if (velocity.Y > num482)
						{
							velocity.Y -= num479;
							if (velocity.Y > 0f && num482 < 0f)
							{
								velocity.Y -= num479;
							}
						}
					}
					int num484 = 400;
					if (IsMechQueenUp)
					{
						num484 = 1200;
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num484)
					{
						this.ai[1] = 1f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						target = 255;
						netUpdate = true;
					}
					if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						localAI[2] += 1f;
						if (localAI[2] > 22f)
						{
							localAI[2] = 0f;
							SoundEngine.PlaySound(SoundID.Item34, position);
						}
						if (Main.netMode != 1)
						{
							localAI[1] += 1f;
							if ((double)life < (double)lifeMax * 0.75)
							{
								localAI[1] += 1f;
							}
							if ((double)life < (double)lifeMax * 0.5)
							{
								localAI[1] += 1f;
							}
							if ((double)life < (double)lifeMax * 0.25)
							{
								localAI[1] += 1f;
							}
							if ((double)life < (double)lifeMax * 0.1)
							{
								localAI[1] += 2f;
							}
							if (localAI[1] > 8f)
							{
								localAI[1] = 0f;
								float num485 = 6f;
								int attackDamage_ForProjectiles7 = GetAttackDamage_ForProjectiles(30f, 27f);
								int num486 = 101;
								vector51 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
								num481 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector51.X;
								num482 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector51.Y;
								num483 = (float)Math.Sqrt(num481 * num481 + num482 * num482);
								num483 = num485 / num483;
								num481 *= num483;
								num482 *= num483;
								num482 += (float)Main.rand.Next(-40, 41) * 0.01f;
								num481 += (float)Main.rand.Next(-40, 41) * 0.01f;
								num482 += velocity.Y * 0.5f;
								num481 += velocity.X * 0.5f;
								vector51.X -= num481 * 1f;
								vector51.Y -= num482 * 1f;
								int num487 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector51.X, vector51.Y, num481, num482, num486, attackDamage_ForProjectiles7, 0f, Main.myPlayer);
							}
						}
					}
					if (IsMechQueenUp)
					{
						num478 = 14f;
						num481 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector51.X;
						num482 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector51.Y;
						num481 = vector47.X;
						num482 = vector47.Y;
						num481 -= vector51.X;
						num482 -= vector51.Y;
						num483 = (float)Math.Sqrt(num481 * num481 + num482 * num482);
						if (num483 > num478)
						{
							num483 = num478 / num483;
							num481 *= num483;
							num482 *= num483;
						}
						velocity.X = (velocity.X * 4f + num481) / 5f;
						velocity.Y = (velocity.Y * 4f + num482) / 5f;
					}
				}
				else if (this.ai[1] == 1f)
				{
					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
					rotation = num456;
					float num488 = 14f;
					if (Main.expertMode)
					{
						num488 += 2.5f;
					}
					Vector2 vector52 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num489 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector52.X;
					float num490 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector52.Y;
					float num491 = (float)Math.Sqrt(num489 * num489 + num490 * num490);
					num491 = num488 / num491;
					velocity.X = num489 * num491;
					velocity.Y = num490 * num491;
					this.ai[1] = 2f;
				}
				else
				{
					if (this.ai[1] != 2f)
					{
						return;
					}
					this.ai[2] += 1f;
					if (Main.expertMode)
					{
						this.ai[2] += 0.5f;
					}
					if (this.ai[2] >= 50f)
					{
						velocity.X *= 0.93f;
						velocity.Y *= 0.93f;
						if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
						{
							velocity.X = 0f;
						}
						if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
						{
							velocity.Y = 0f;
						}
					}
					else
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
					}
					if (this.ai[2] >= 80f)
					{
						this.ai[3] += 1f;
						this.ai[2] = 0f;
						target = 255;
						rotation = num456;
						if (this.ai[3] >= 6f)
						{
							this.ai[1] = 0f;
							this.ai[3] = 0f;
						}
						else
						{
							this.ai[1] = 1f;
						}
					}
				}
			}
			else if (aiStyle == 32)
			{
				damage = defDamage;
				defense = defDefense;
				if (this.ai[3] != 0f)
				{
					mechQueen = whoAmI;
				}
				reflectsProjectiles = false;
				if (this.ai[0] == 0f && Main.netMode != 1)
				{
					TargetClosest();
					this.ai[0] = 1f;
					int num492 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 128, whoAmI);
					Main.npc[num492].ai[0] = -1f;
					Main.npc[num492].ai[1] = whoAmI;
					Main.npc[num492].target = target;
					Main.npc[num492].netUpdate = true;
					num492 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 129, whoAmI);
					Main.npc[num492].ai[0] = 1f;
					Main.npc[num492].ai[1] = whoAmI;
					Main.npc[num492].target = target;
					Main.npc[num492].netUpdate = true;
					num492 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 130, whoAmI);
					Main.npc[num492].ai[0] = -1f;
					Main.npc[num492].ai[1] = whoAmI;
					Main.npc[num492].target = target;
					Main.npc[num492].ai[3] = 150f;
					Main.npc[num492].netUpdate = true;
					num492 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 131, whoAmI);
					Main.npc[num492].ai[0] = 1f;
					Main.npc[num492].ai[1] = whoAmI;
					Main.npc[num492].target = target;
					Main.npc[num492].netUpdate = true;
					Main.npc[num492].ai[3] = 150f;
				}
				if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 6000f || Math.Abs(position.Y - Main.player[target].position.Y) > 6000f)
				{
					TargetClosest();
					if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 6000f || Math.Abs(position.Y - Main.player[target].position.Y) > 6000f)
					{
						this.ai[1] = 3f;
					}
				}
				if (Main.IsItDay() && this.ai[1] != 3f && this.ai[1] != 2f)
				{
					this.ai[1] = 2f;
					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				}
				if (this.ai[1] == 0f)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 600f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 1f;
						TargetClosest();
						netUpdate = true;
					}
					if (IsMechQueenUp)
					{
						rotation = rotation.AngleLerp(velocity.X / 15f * 0.5f, 0.75f);
					}
					else
					{
						rotation = velocity.X / 15f;
					}
					float num493 = 0.1f;
					float num494 = 2f;
					float num495 = 0.1f;
					float num496 = 8f;
					if (Main.expertMode)
					{
						num493 = 0.03f;
						num494 = 4f;
						num495 = 0.07f;
						num496 = 9.5f;
					}
					if (position.Y > Main.player[target].position.Y - 200f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.98f;
						}
						velocity.Y -= num493;
						if (velocity.Y > num494)
						{
							velocity.Y = num494;
						}
					}
					else if (position.Y < Main.player[target].position.Y - 500f)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.98f;
						}
						velocity.Y += num493;
						if (velocity.Y < 0f - num494)
						{
							velocity.Y = 0f - num494;
						}
					}
					if (position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2) + 100f)
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.98f;
						}
						velocity.X -= num495;
						if (velocity.X > num496)
						{
							velocity.X = num496;
						}
					}
					if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2) - 100f)
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.98f;
						}
						velocity.X += num495;
						if (velocity.X < 0f - num496)
						{
							velocity.X = 0f - num496;
						}
					}
				}
				else if (this.ai[1] == 1f)
				{
					if (IsMechQueenUp)
					{
						reflectsProjectiles = true;
					}
					defense *= 2;
					damage *= 2;
					this.ai[2] += 1f;
					if (this.ai[2] == 2f)
					{
						SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
					}
					if (this.ai[2] >= 400f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 0f;
					}
					if (IsMechQueenUp)
					{
						rotation = rotation.AngleLerp(velocity.X / 15f * 0.5f, 0.75f);
					}
					else
					{
						rotation += (float)direction * 0.3f;
					}
					Vector2 vector53 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num497 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector53.X;
					float num498 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector53.Y;
					float num499 = (float)Math.Sqrt(num497 * num497 + num498 * num498);
					float num500 = 2f;
					if (Main.expertMode)
					{
						num500 = 6f;
						if (num499 > 150f)
						{
							num500 *= 1.05f;
						}
						if (num499 > 200f)
						{
							num500 *= 1.1f;
						}
						if (num499 > 250f)
						{
							num500 *= 1.1f;
						}
						if (num499 > 300f)
						{
							num500 *= 1.1f;
						}
						if (num499 > 350f)
						{
							num500 *= 1.1f;
						}
						if (num499 > 400f)
						{
							num500 *= 1.1f;
						}
						if (num499 > 450f)
						{
							num500 *= 1.1f;
						}
						if (num499 > 500f)
						{
							num500 *= 1.1f;
						}
						if (num499 > 550f)
						{
							num500 *= 1.1f;
						}
						if (num499 > 600f)
						{
							num500 *= 1.1f;
						}
					}
					num499 = num500 / num499;
					velocity.X = num497 * num499;
					velocity.Y = num498 * num499;
					if (IsMechQueenUp)
					{
						float num501 = Vector2.Distance(base.Center, Main.player[target].Center);
						if (num501 < 0.1f)
						{
							num501 = 0f;
						}
						if (num501 < num500)
						{
							velocity = velocity.SafeNormalize(Vector2.Zero) * num501;
						}
					}
				}
				else if (this.ai[1] == 2f)
				{
					damage = 1000;
					defense = 9999;
					if (IsMechQueenUp)
					{
						rotation = rotation.AngleLerp(velocity.X / 15f * 0.5f, 0.75f);
					}
					else
					{
						rotation += (float)direction * 0.3f;
					}
					Vector2 vector54 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num502 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector54.X;
					float num503 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector54.Y;
					float num504 = (float)Math.Sqrt(num502 * num502 + num503 * num503);
					float num505 = 10f;
					num505 += num504 / 100f;
					if (num505 < 8f)
					{
						num505 = 8f;
					}
					if (num505 > 32f)
					{
						num505 = 32f;
					}
					num504 = num505 / num504;
					velocity.X = num502 * num504;
					velocity.Y = num503 * num504;
				}
				else
				{
					if (this.ai[1] != 3f)
					{
						return;
					}
					if (IsMechQueenUp)
					{
						int num506 = FindFirstNPC(125);
						if (num506 >= 0)
						{
							Main.npc[num506].EncourageDespawn(5);
						}
						num506 = FindFirstNPC(126);
						if (num506 >= 0)
						{
							Main.npc[num506].EncourageDespawn(5);
						}
						if (!AnyNPCs(125) && !AnyNPCs(126))
						{
							num506 = FindFirstNPC(134);
							if (num506 >= 0)
							{
								Main.npc[num506].Transform(136);
							}
							EncourageDespawn(5);
						}
						velocity.Y += 0.1f;
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.95f;
						}
						velocity.X *= 0.95f;
						if (velocity.Y > 13f)
						{
							velocity.Y = 13f;
						}
					}
					else
					{
						EncourageDespawn(500);
						velocity.Y += 0.1f;
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.95f;
						}
						velocity.X *= 0.95f;
					}
				}
			}
			else if (aiStyle == 33)
			{
				Vector2 vector55 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num507 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector55.X;
				float num508 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector55.Y;
				float num509 = (float)Math.Sqrt(num507 * num507 + num508 * num508);
				if (this.ai[2] != 99f)
				{
					if (num509 > 800f)
					{
						this.ai[2] = 99f;
					}
				}
				else if (num509 < 400f)
				{
					this.ai[2] = 0f;
				}
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 99f)
				{
					if (position.Y > Main.npc[(int)this.ai[1]].position.Y)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y -= 0.1f;
						if (velocity.Y > 8f)
						{
							velocity.Y = 8f;
						}
					}
					else if (position.Y < Main.npc[(int)this.ai[1]].position.Y)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y += 0.1f;
						if (velocity.Y < -8f)
						{
							velocity.Y = -8f;
						}
					}
					if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X -= 0.5f;
						if (velocity.X > 12f)
						{
							velocity.X = 12f;
						}
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X += 0.5f;
						if (velocity.X < -12f)
						{
							velocity.X = -12f;
						}
					}
				}
				else if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
					{
						EncourageDespawn(10);
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						TargetClosest();
						if (Main.player[target].dead)
						{
							velocity.Y += 0.1f;
							if (velocity.Y > 16f)
							{
								velocity.Y = 16f;
							}
						}
						else
						{
							Vector2 vector56 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
							float num510 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector56.X;
							float num511 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector56.Y;
							float num512 = (float)Math.Sqrt(num510 * num510 + num511 * num511);
							num512 = 7f / num512;
							num510 *= num512;
							num511 *= num512;
							rotation = (float)Math.Atan2(num511, num510) - 1.57f;
							if (velocity.X > num510)
							{
								if (velocity.X > 0f)
								{
									velocity.X *= 0.97f;
								}
								velocity.X -= 0.05f;
							}
							if (velocity.X < num510)
							{
								if (velocity.X < 0f)
								{
									velocity.X *= 0.97f;
								}
								velocity.X += 0.05f;
							}
							if (velocity.Y > num511)
							{
								if (velocity.Y > 0f)
								{
									velocity.Y *= 0.97f;
								}
								velocity.Y -= 0.05f;
							}
							if (velocity.Y < num511)
							{
								if (velocity.Y < 0f)
								{
									velocity.Y *= 0.97f;
								}
								velocity.Y += 0.05f;
							}
						}
						this.ai[3] += 1f;
						if (this.ai[3] >= 600f)
						{
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 300f)
						{
							this.ai[2] += 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (position.Y > Main.npc[(int)this.ai[1]].position.Y + 320f)
						{
							if (velocity.Y > 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y -= 0.04f;
							if (velocity.Y > 3f)
							{
								velocity.Y = 3f;
							}
						}
						else if (position.Y < Main.npc[(int)this.ai[1]].position.Y + 260f)
						{
							if (velocity.Y < 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y += 0.04f;
							if (velocity.Y < -3f)
							{
								velocity.Y = -3f;
							}
						}
						if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
						{
							if (velocity.X > 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X -= 0.3f;
							if (velocity.X > 12f)
							{
								velocity.X = 12f;
							}
						}
						if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 250f)
						{
							if (velocity.X < 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X += 0.3f;
							if (velocity.X < -12f)
							{
								velocity.X = -12f;
							}
						}
					}
					Vector2 vector57 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num513 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector57.X;
					float num514 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector57.Y;
					float num515 = (float)Math.Sqrt(num513 * num513 + num514 * num514);
					rotation = (float)Math.Atan2(num514, num513) + 1.57f;
				}
				else if (this.ai[2] == 1f)
				{
					Vector2 vector58 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num516 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector58.X;
					float num517 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector58.Y;
					float num518 = (float)Math.Sqrt(num516 * num516 + num517 * num517);
					rotation = (float)Math.Atan2(num517, num516) + 1.57f;
					velocity.X *= 0.95f;
					velocity.Y -= 0.1f;
					if (velocity.Y < -8f)
					{
						velocity.Y = -8f;
					}
					if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
					{
						TargetClosest();
						this.ai[2] = 2f;
						vector58 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						num516 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector58.X;
						num517 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector58.Y;
						num518 = (float)Math.Sqrt(num516 * num516 + num517 * num517);
						num518 = 22f / num518;
						velocity.X = num516 * num518;
						velocity.Y = num517 * num518;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 2f)
				{
					if (position.Y > Main.player[target].position.Y || velocity.Y < 0f)
					{
						this.ai[2] = 3f;
					}
				}
				else if (this.ai[2] == 4f)
				{
					TargetClosest();
					Vector2 vector59 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num519 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector59.X;
					float num520 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector59.Y;
					float num521 = (float)Math.Sqrt(num519 * num519 + num520 * num520);
					num521 = 7f / num521;
					num519 *= num521;
					num520 *= num521;
					if (velocity.X > num519)
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.97f;
						}
						velocity.X -= 0.05f;
					}
					if (velocity.X < num519)
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.97f;
						}
						velocity.X += 0.05f;
					}
					if (velocity.Y > num520)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.97f;
						}
						velocity.Y -= 0.05f;
					}
					if (velocity.Y < num520)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.97f;
						}
						velocity.Y += 0.05f;
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 600f)
					{
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					vector59 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num519 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector59.X;
					num520 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector59.Y;
					num521 = (float)Math.Sqrt(num519 * num519 + num520 * num520);
					rotation = (float)Math.Atan2(num520, num519) + 1.57f;
				}
				else if (this.ai[2] == 5f && ((velocity.X > 0f && position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2)) || (velocity.X < 0f && position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))))
				{
					this.ai[2] = 0f;
				}
			}
			else if (aiStyle == 34)
			{
				spriteDirection = -(int)this.ai[0];
				Vector2 vector60 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num522 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector60.X;
				float num523 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector60.Y;
				float num524 = (float)Math.Sqrt(num522 * num522 + num523 * num523);
				if (this.ai[2] != 99f)
				{
					if (num524 > 800f)
					{
						this.ai[2] = 99f;
					}
				}
				else if (num524 < 400f)
				{
					this.ai[2] = 0f;
				}
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 99f)
				{
					if (position.Y > Main.npc[(int)this.ai[1]].position.Y)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y -= 0.1f;
						if (velocity.Y > 8f)
						{
							velocity.Y = 8f;
						}
					}
					else if (position.Y < Main.npc[(int)this.ai[1]].position.Y)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y += 0.1f;
						if (velocity.Y < -8f)
						{
							velocity.Y = -8f;
						}
					}
					if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X -= 0.5f;
						if (velocity.X > 12f)
						{
							velocity.X = 12f;
						}
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X += 0.5f;
						if (velocity.X < -12f)
						{
							velocity.X = -12f;
						}
					}
				}
				else if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
					{
						EncourageDespawn(10);
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						TargetClosest();
						TargetClosest();
						if (Main.player[target].dead)
						{
							velocity.Y += 0.1f;
							if (velocity.Y > 16f)
							{
								velocity.Y = 16f;
							}
						}
						else
						{
							Vector2 vector61 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
							float num525 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector61.X;
							float num526 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector61.Y;
							float num527 = (float)Math.Sqrt(num525 * num525 + num526 * num526);
							num527 = 12f / num527;
							num525 *= num527;
							num526 *= num527;
							rotation = (float)Math.Atan2(num526, num525) - 1.57f;
							if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 2f)
							{
								rotation = (float)Math.Atan2(num526, num525) - 1.57f;
								velocity.X = num525;
								velocity.Y = num526;
								netUpdate = true;
							}
							else
							{
								velocity *= 0.97f;
							}
							this.ai[3] += 1f;
							if (this.ai[3] >= 600f)
							{
								this.ai[2] = 0f;
								this.ai[3] = 0f;
								netUpdate = true;
							}
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 600f)
						{
							this.ai[2] += 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (position.Y > Main.npc[(int)this.ai[1]].position.Y + 300f)
						{
							if (velocity.Y > 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y -= 0.1f;
							if (velocity.Y > 3f)
							{
								velocity.Y = 3f;
							}
						}
						else if (position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
						{
							if (velocity.Y < 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y += 0.1f;
							if (velocity.Y < -3f)
							{
								velocity.Y = -3f;
							}
						}
						if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 250f)
						{
							if (velocity.X > 0f)
							{
								velocity.X *= 0.94f;
							}
							velocity.X -= 0.3f;
							if (velocity.X > 9f)
							{
								velocity.X = 9f;
							}
						}
						if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
						{
							if (velocity.X < 0f)
							{
								velocity.X *= 0.94f;
							}
							velocity.X += 0.2f;
							if (velocity.X < -8f)
							{
								velocity.X = -8f;
							}
						}
					}
					Vector2 vector62 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num528 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector62.X;
					float num529 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector62.Y;
					float num530 = (float)Math.Sqrt(num528 * num528 + num529 * num529);
					rotation = (float)Math.Atan2(num529, num528) + 1.57f;
				}
				else if (this.ai[2] == 1f)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.9f;
					}
					Vector2 vector63 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num531 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 280f * this.ai[0] - vector63.X;
					float num532 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector63.Y;
					float num533 = (float)Math.Sqrt(num531 * num531 + num532 * num532);
					rotation = (float)Math.Atan2(num532, num531) + 1.57f;
					velocity.X = (velocity.X * 5f + Main.npc[(int)this.ai[1]].velocity.X) / 6f;
					velocity.X += 0.5f;
					velocity.Y -= 0.5f;
					if (velocity.Y < -9f)
					{
						velocity.Y = -9f;
					}
					if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 280f)
					{
						TargetClosest();
						this.ai[2] = 2f;
						vector63 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						num531 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector63.X;
						num532 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector63.Y;
						num533 = (float)Math.Sqrt(num531 * num531 + num532 * num532);
						num533 = 20f / num533;
						velocity.X = num531 * num533;
						velocity.Y = num532 * num533;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 2f)
				{
					if (position.Y > Main.player[target].position.Y || velocity.Y < 0f)
					{
						if (this.ai[3] >= 4f)
						{
							this.ai[2] = 3f;
							this.ai[3] = 0f;
						}
						else
						{
							this.ai[2] = 1f;
							this.ai[3] += 1f;
						}
					}
				}
				else if (this.ai[2] == 4f)
				{
					Vector2 vector64 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num534 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector64.X;
					float num535 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector64.Y;
					float num536 = (float)Math.Sqrt(num534 * num534 + num535 * num535);
					rotation = (float)Math.Atan2(num535, num534) + 1.57f;
					velocity.Y = (velocity.Y * 5f + Main.npc[(int)this.ai[1]].velocity.Y) / 6f;
					velocity.X += 0.5f;
					if (velocity.X > 12f)
					{
						velocity.X = 12f;
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
					{
						TargetClosest();
						this.ai[2] = 5f;
						vector64 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						num534 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector64.X;
						num535 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector64.Y;
						num536 = (float)Math.Sqrt(num534 * num534 + num535 * num535);
						num536 = 17f / num536;
						velocity.X = num534 * num536;
						velocity.Y = num535 * num536;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 5f && position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2) - 100f)
				{
					if (this.ai[3] >= 4f)
					{
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					else
					{
						this.ai[2] = 4f;
						this.ai[3] += 1f;
					}
				}
			}
			else if (aiStyle == 35)
			{
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 0f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
					{
						EncourageDespawn(10);
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						localAI[0] += 2f;
						if (position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (velocity.Y > 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y -= 0.07f;
							if (velocity.Y > 6f)
							{
								velocity.Y = 6f;
							}
						}
						else if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (velocity.Y < 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y += 0.07f;
							if (velocity.Y < -6f)
							{
								velocity.Y = -6f;
							}
						}
						if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (velocity.X > 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X -= 0.1f;
							if (velocity.X > 8f)
							{
								velocity.X = 8f;
							}
						}
						if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (velocity.X < 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X += 0.1f;
							if (velocity.X < -8f)
							{
								velocity.X = -8f;
							}
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 1100f)
						{
							localAI[0] = 0f;
							this.ai[2] = 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (position.Y > Main.npc[(int)this.ai[1]].position.Y - 150f)
						{
							if (velocity.Y > 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y -= 0.04f;
							if (velocity.Y > 3f)
							{
								velocity.Y = 3f;
							}
						}
						else if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 150f)
						{
							if (velocity.Y < 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y += 0.04f;
							if (velocity.Y < -3f)
							{
								velocity.Y = -3f;
							}
						}
						if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 200f)
						{
							if (velocity.X > 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X -= 0.2f;
							if (velocity.X > 8f)
							{
								velocity.X = 8f;
							}
						}
						if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 160f)
						{
							if (velocity.X < 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X += 0.2f;
							if (velocity.X < -8f)
							{
								velocity.X = -8f;
							}
						}
					}
					Vector2 vector65 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num537 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector65.X;
					float num538 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector65.Y;
					float num539 = (float)Math.Sqrt(num537 * num537 + num538 * num538);
					rotation = (float)Math.Atan2(num538, num537) + 1.57f;
					if (Main.netMode != 1)
					{
						localAI[0] += 1f;
						if (localAI[0] > 140f)
						{
							localAI[0] = 0f;
							float num540 = 12f;
							int num541 = 0;
							int num542 = 102;
							num539 = num540 / num539;
							num537 = (0f - num537) * num539;
							num538 = (0f - num538) * num539;
							num537 += (float)Main.rand.Next(-40, 41) * 0.01f;
							num538 += (float)Main.rand.Next(-40, 41) * 0.01f;
							vector65.X += num537 * 4f;
							vector65.Y += num538 * 4f;
							int num543 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector65.X, vector65.Y, num537, num538, num542, num541, 0f, Main.myPlayer);
						}
					}
				}
				else
				{
					if (this.ai[2] != 1f)
					{
						return;
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 300f)
					{
						localAI[0] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					Vector2 vector66 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num544 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - vector66.X;
					float num545 = Main.npc[(int)this.ai[1]].position.Y - vector66.Y;
					num545 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 80f - vector66.Y;
					float num546 = (float)Math.Sqrt(num544 * num544 + num545 * num545);
					num546 = 6f / num546;
					num544 *= num546;
					num545 *= num546;
					if (velocity.X > num544)
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.9f;
						}
						velocity.X -= 0.04f;
					}
					if (velocity.X < num544)
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.9f;
						}
						velocity.X += 0.04f;
					}
					if (velocity.Y > num545)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.9f;
						}
						velocity.Y -= 0.08f;
					}
					if (velocity.Y < num545)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.9f;
						}
						velocity.Y += 0.08f;
					}
					TargetClosest();
					vector66 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num544 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector66.X;
					num545 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector66.Y;
					num546 = (float)Math.Sqrt(num544 * num544 + num545 * num545);
					rotation = (float)Math.Atan2(num545, num544) - 1.57f;
					if (Main.netMode != 1)
					{
						localAI[0] += 1f;
						if (localAI[0] > 40f)
						{
							localAI[0] = 0f;
							float num547 = 10f;
							int num548 = 0;
							int num549 = 102;
							num546 = num547 / num546;
							num544 *= num546;
							num545 *= num546;
							num544 += (float)Main.rand.Next(-40, 41) * 0.01f;
							num545 += (float)Main.rand.Next(-40, 41) * 0.01f;
							vector66.X += num544 * 4f;
							vector66.Y += num545 * 4f;
							int num550 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector66.X, vector66.Y, num544, num545, num549, num548, 0f, Main.myPlayer);
						}
					}
				}
			}
			else if (aiStyle == 36)
			{
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
					{
						EncourageDespawn(10);
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						localAI[0] += 3f;
						if (position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (velocity.Y > 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y -= 0.07f;
							if (velocity.Y > 6f)
							{
								velocity.Y = 6f;
							}
						}
						else if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (velocity.Y < 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y += 0.07f;
							if (velocity.Y < -6f)
							{
								velocity.Y = -6f;
							}
						}
						if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (velocity.X > 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X -= 0.1f;
							if (velocity.X > 8f)
							{
								velocity.X = 8f;
							}
						}
						if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (velocity.X < 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X += 0.1f;
							if (velocity.X < -8f)
							{
								velocity.X = -8f;
							}
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 800f)
						{
							this.ai[2] += 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (velocity.Y > 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y -= 0.1f;
							if (velocity.Y > 3f)
							{
								velocity.Y = 3f;
							}
						}
						else if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (velocity.Y < 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y += 0.1f;
							if (velocity.Y < -3f)
							{
								velocity.Y = -3f;
							}
						}
						if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 180f * this.ai[0])
						{
							if (velocity.X > 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X -= 0.14f;
							if (velocity.X > 8f)
							{
								velocity.X = 8f;
							}
						}
						if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 180f * this.ai[0])
						{
							if (velocity.X < 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X += 0.14f;
							if (velocity.X < -8f)
							{
								velocity.X = -8f;
							}
						}
					}
					TargetClosest();
					Vector2 vector67 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num551 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector67.X;
					float num552 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector67.Y;
					float num553 = (float)Math.Sqrt(num551 * num551 + num552 * num552);
					rotation = (float)Math.Atan2(num552, num551) - 1.57f;
					if (Main.netMode != 1)
					{
						localAI[0] += 1f;
						if (localAI[0] > 200f)
						{
							localAI[0] = 0f;
							float num554 = 8f;
							int num555 = 25;
							int num556 = 100;
							num553 = num554 / num553;
							num551 *= num553;
							num552 *= num553;
							num551 += (float)Main.rand.Next(-40, 41) * 0.05f;
							num552 += (float)Main.rand.Next(-40, 41) * 0.05f;
							vector67.X += num551 * 8f;
							vector67.Y += num552 * 8f;
							int num557 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector67.X, vector67.Y, num551, num552, num556, num555, 0f, Main.myPlayer);
						}
					}
				}
				else
				{
					if (this.ai[2] != 1f)
					{
						return;
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 200f)
					{
						localAI[0] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					Vector2 vector68 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num558 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - 350f - vector68.X;
					float num559 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 20f - vector68.Y;
					float num560 = (float)Math.Sqrt(num558 * num558 + num559 * num559);
					num560 = 7f / num560;
					num558 *= num560;
					num559 *= num560;
					if (velocity.X > num558)
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.9f;
						}
						velocity.X -= 0.1f;
					}
					if (velocity.X < num558)
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.9f;
						}
						velocity.X += 0.1f;
					}
					if (velocity.Y > num559)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.9f;
						}
						velocity.Y -= 0.03f;
					}
					if (velocity.Y < num559)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.9f;
						}
						velocity.Y += 0.03f;
					}
					TargetClosest();
					vector68 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num558 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector68.X;
					num559 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector68.Y;
					num560 = (float)Math.Sqrt(num558 * num558 + num559 * num559);
					rotation = (float)Math.Atan2(num559, num558) - 1.57f;
					if (Main.netMode == 1)
					{
						localAI[0] += 1f;
						if (localAI[0] > 80f)
						{
							localAI[0] = 0f;
							float num561 = 10f;
							int num562 = 25;
							int num563 = 100;
							num560 = num561 / num560;
							num558 *= num560;
							num559 *= num560;
							num558 += (float)Main.rand.Next(-40, 41) * 0.05f;
							num559 += (float)Main.rand.Next(-40, 41) * 0.05f;
							vector68.X += num558 * 8f;
							vector68.Y += num559 * 8f;
							int num564 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector68.X, vector68.Y, num558, num559, num563, num562, 0f, Main.myPlayer);
						}
					}
				}
			}
			else if (aiStyle == 37)
			{
				AI_037_Destroyer();
			}
			else if (aiStyle == 38)
			{
				float num565 = 4f;
				float num566 = 1f;
				if (type == 143)
				{
					num565 = 3f;
					num566 = 0.7f;
				}
				if (type == 145)
				{
					num565 = 3.5f;
					num566 = 0.8f;
				}
				if (type == 143)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 120f)
					{
						this.ai[2] = 0f;
						if (Main.netMode != 1)
						{
							Vector2 vector69 = new Vector2(position.X + (float)width * 0.5f - (float)(direction * 12), position.Y + (float)height * 0.5f);
							float speedX = 12 * spriteDirection;
							float speedY = 0f;
							if (Main.netMode != 1)
							{
								int num567 = 25;
								int num568 = 110;
								int num569 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector69.X, vector69.Y, speedX, speedY, num568, num567, 0f, Main.myPlayer);
								Main.projectile[num569].ai[0] = 2f;
								Main.projectile[num569].timeLeft = 300;
								Main.projectile[num569].friendly = false;
								NetMessage.SendData(27, -1, -1, null, num569);
								netUpdate = true;
							}
						}
					}
				}
				if (type == 144 && this.ai[1] >= 3f)
				{
					TargetClosest();
					spriteDirection = direction;
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.9f;
						this.ai[2] += 1f;
						if ((double)velocity.X > -0.3 && (double)velocity.X < 0.3)
						{
							velocity.X = 0f;
						}
						if (this.ai[2] >= 200f)
						{
							this.ai[2] = 0f;
							this.ai[1] = 0f;
						}
					}
				}
				else if (type == 145 && this.ai[1] >= 3f)
				{
					TargetClosest();
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.9f;
						this.ai[2] += 1f;
						if ((double)velocity.X > -0.3 && (double)velocity.X < 0.3)
						{
							velocity.X = 0f;
						}
						if (this.ai[2] >= 16f)
						{
							this.ai[2] = 0f;
							this.ai[1] = 0f;
						}
					}
					if (velocity.X == 0f && velocity.Y == 0f && this.ai[2] == 8f)
					{
						float num570 = 10f;
						Vector2 vector70 = new Vector2(position.X + (float)width * 0.5f - (float)(direction * 12), position.Y + (float)height * 0.25f);
						float num571 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector70.X;
						float num572 = Main.player[target].position.Y - vector70.Y;
						float num573 = (float)Math.Sqrt(num571 * num571 + num572 * num572);
						num573 = num570 / num573;
						num571 *= num573;
						num572 *= num573;
						if (Main.netMode != 1)
						{
							int num574 = 35;
							int num575 = 109;
							int num576 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector70.X, vector70.Y, num571, num572, num575, num574, 0f, Main.myPlayer);
							Main.projectile[num576].ai[0] = 2f;
							Main.projectile[num576].timeLeft = 300;
							Main.projectile[num576].friendly = false;
							NetMessage.SendData(27, -1, -1, null, num576);
							netUpdate = true;
						}
					}
				}
				else
				{
					if (velocity.Y == 0f)
					{
						if (localAI[2] == position.X)
						{
							direction *= -1;
							this.ai[3] = 60f;
						}
						localAI[2] = position.X;
						if (this.ai[3] == 0f)
						{
							TargetClosest();
						}
						this.ai[0] += 1f;
						if (this.ai[0] > 2f)
						{
							this.ai[0] = 0f;
							this.ai[1] += 1f;
							velocity.Y = -8.2f;
							velocity.X += (float)direction * num566 * 1.1f;
						}
						else
						{
							velocity.Y = -6f;
							velocity.X += (float)direction * num566 * 0.9f;
						}
						spriteDirection = direction;
					}
					velocity.X += (float)direction * num566 * 0.01f;
				}
				if (this.ai[3] > 0f)
				{
					this.ai[3] -= 1f;
				}
				if (velocity.X > num565 && direction > 0)
				{
					velocity.X = num565;
				}
				if (velocity.X < 0f - num565 && direction < 0)
				{
					velocity.X = 0f - num565;
				}
			}
			else if (aiStyle == 39)
			{
				if (target < 0 || Main.player[target].dead || direction == 0)
				{
					TargetClosest();
				}
				bool flag28 = true;
				int num577 = 0;
				if (velocity.X < 0f)
				{
					num577 = -1;
				}
				if (velocity.X > 0f)
				{
					num577 = 1;
				}
				Vector2 vector71 = position;
				vector71.X += velocity.X;
				int num578 = (int)((vector71.X + (float)(width / 2) + (float)((width / 2 + 1) * num577)) / 16f);
				int num579 = (int)((vector71.Y + (float)height - 1f) / 16f);
				if ((float)(num578 * 16) < vector71.X + (float)width && (float)(num578 * 16 + 16) > vector71.X)
				{
					Tile tileSafely = Framing.GetTileSafely(num578, num579 - 4);
					Tile tileSafely2 = Framing.GetTileSafely(num578 - num577, num579 - 3);
					Tile tileSafely3 = Framing.GetTileSafely(num578, num579 - 3);
					Tile tileSafely4 = Framing.GetTileSafely(num578, num579 - 2);
					Tile tileSafely5 = Framing.GetTileSafely(num578, num579 - 1);
					Tile tileSafely6 = Framing.GetTileSafely(num578, num579);
					if (((tileSafely6.nactive() && !tileSafely6.topSlope() && !tileSafely5.topSlope() && ((Main.tileSolid[tileSafely6.type] && !Main.tileSolidTop[tileSafely6.type]) || (flag28 && Main.tileSolidTop[tileSafely6.type] && (!Main.tileSolid[tileSafely5.type] || !tileSafely5.nactive()) && tileSafely6.type != 16 && tileSafely6.type != 18 && tileSafely6.type != 134))) || (tileSafely5.halfBrick() && tileSafely5.nactive())) && (!tileSafely5.nactive() || !Main.tileSolid[tileSafely5.type] || Main.tileSolidTop[tileSafely5.type] || (tileSafely5.halfBrick() && (!tileSafely.nactive() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type]))) && (!tileSafely4.nactive() || !Main.tileSolid[tileSafely4.type] || Main.tileSolidTop[tileSafely4.type]) && (!tileSafely3.nactive() || !Main.tileSolid[tileSafely3.type] || Main.tileSolidTop[tileSafely3.type]) && (!tileSafely2.nactive() || !Main.tileSolid[tileSafely2.type] || Main.tileSolidTop[tileSafely2.type]))
					{
						float num580 = num579 * 16;
						if (tileSafely6.halfBrick())
						{
							num580 += 8f;
						}
						if (tileSafely5.halfBrick())
						{
							num580 -= 8f;
						}
						if (num580 < vector71.Y + (float)height)
						{
							float num581 = vector71.Y + (float)height - num580;
							if ((double)num581 <= 16.1)
							{
								gfxOffY += position.Y + (float)height - num580;
								position.Y = num580 - (float)height;
								if (num581 < 9f)
								{
									stepSpeed = 0.75f;
								}
								else
								{
									stepSpeed = 1.5f;
								}
							}
						}
					}
				}
				if (justHit && type != 417)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					TargetClosest();
				}
				if (type == 154)
				{
					position += netOffset;
					if (Main.rand.Next(10) == 0)
					{
						int num582 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 67, velocity.X * 0.5f, velocity.Y * 0.5f, 90, default(Color), 1.5f);
						Main.dust[num582].noGravity = true;
						Dust dust = Main.dust[num582];
						dust.velocity *= 0.2f;
					}
					position -= netOffset;
				}
				if (this.ai[0] == 0f)
				{
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else if (velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
					Vector2 vector72 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num583 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector72.X;
					float num584 = Main.player[target].position.Y - vector72.Y;
					float num585 = (float)Math.Sqrt(num583 * num583 + num584 * num584);
					bool flag29 = Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
					if (type >= 496 && type <= 497)
					{
						if (num585 > 200f && flag29)
						{
							this.ai[1] += 2f;
						}
						if (num585 > 600f && (flag29 || position.Y + (float)height > Main.player[target].position.Y - 200f))
						{
							this.ai[1] += 4f;
						}
					}
					else
					{
						if (num585 > 200f && flag29)
						{
							this.ai[1] += 4f;
						}
						if (num585 > 600f && (flag29 || position.Y + (float)height > Main.player[target].position.Y - 200f))
						{
							this.ai[1] += 10f;
						}
						if (wet)
						{
							this.ai[1] = 1000f;
						}
					}
					defense = defDefense;
					damage = defDamage;
					if (type >= 496 && type <= 497)
					{
						knockBackResist = 0.75f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
					}
					else
					{
						knockBackResist = 0.3f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 400f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 1f;
					}
					if (!justHit && velocity.X != oldVelocity.X)
					{
						direction *= -1;
					}
					if (velocity.Y == 0f && Main.player[target].position.Y < position.Y + (float)height)
					{
						int num586;
						int num587;
						if (direction > 0)
						{
							num586 = (int)(((double)position.X + (double)width * 0.5) / 16.0);
							num587 = num586 + 3;
						}
						else
						{
							num587 = (int)(((double)position.X + (double)width * 0.5) / 16.0);
							num586 = num587 - 3;
						}
						int num588 = (int)((position.Y + (float)height + 2f) / 16f) - 1;
						int num589 = num588 + 4;
						bool flag30 = false;
						for (int num590 = num586; num590 <= num587; num590++)
						{
							for (int num591 = num588; num591 <= num589; num591++)
							{
								if (Main.tile[num590, num591] != null && Main.tile[num590, num591].nactive() && Main.tileSolid[Main.tile[num590, num591].type])
								{
									flag30 = true;
								}
							}
						}
						if (!flag30)
						{
							direction *= -1;
							velocity.X = 0.1f * (float)direction;
						}
					}
					if (type >= 496 && type <= 497)
					{
						float num592 = 0.5f;
						if (velocity.X < 0f - num592 || velocity.X > num592)
						{
							if (velocity.Y == 0f)
							{
								velocity *= 0.8f;
							}
						}
						else if (velocity.X < num592 && direction == 1)
						{
							velocity.X += 0.07f;
							if (velocity.X > num592)
							{
								velocity.X = num592;
							}
						}
						else if (velocity.X > 0f - num592 && direction == -1)
						{
							velocity.X -= 0.07f;
							if (velocity.X < 0f - num592)
							{
								velocity.X = 0f - num592;
							}
						}
						return;
					}
					float num593 = 1f;
					if (num585 < 400f)
					{
						if (velocity.X < 0f - num593 || velocity.X > num593)
						{
							if (velocity.Y == 0f)
							{
								velocity *= 0.8f;
							}
						}
						else if (velocity.X < num593 && direction == 1)
						{
							velocity.X += 0.07f;
							if (velocity.X > num593)
							{
								velocity.X = num593;
							}
						}
						else if (velocity.X > 0f - num593 && direction == -1)
						{
							velocity.X -= 0.07f;
							if (velocity.X < 0f - num593)
							{
								velocity.X = 0f - num593;
							}
						}
					}
					else if (velocity.X < -1.5f || velocity.X > 1.5f)
					{
						if (velocity.Y == 0f)
						{
							velocity *= 0.8f;
						}
					}
					else if (velocity.X < 1.5f && direction == 1)
					{
						velocity.X += 0.07f;
						if (velocity.X > 1.5f)
						{
							velocity.X = 1.5f;
						}
					}
					else if (velocity.X > -1.5f && direction == -1)
					{
						velocity.X -= 0.07f;
						if (velocity.X < -1.5f)
						{
							velocity.X = -1.5f;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					velocity.X *= 0.5f;
					if (type >= 496 && type <= 497)
					{
						this.ai[1] += 0.5f;
					}
					else
					{
						this.ai[1] += 1f;
					}
					if (this.ai[1] >= 30f)
					{
						netUpdate = true;
						TargetClosest();
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[0] = 3f;
						if (type == 417)
						{
							position.Y += height;
							height = 32;
							position.Y -= height;
							this.ai[0] = 6f;
							this.ai[2] = Main.rand.Next(2, 5);
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					if (type == 154 && Main.rand.Next(3) < 2)
					{
						position += netOffset;
						int num594 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 67, velocity.X * 0.5f, velocity.Y * 0.5f, 90, default(Color), 1.5f);
						Main.dust[num594].noGravity = true;
						Dust dust = Main.dust[num594];
						dust.velocity *= 0.2f;
						position -= netOffset;
					}
					float num595 = 2f;
					if (type >= 496 && type <= 497)
					{
						num595 = 1.5f;
					}
					damage = GetAttackDamage_LerpBetweenFinalValues((float)defDamage * num595, (float)defDamage * num595 * 0.9f);
					defense = defDefense * 2;
					this.ai[1] += 1f;
					if (this.ai[1] == 1f)
					{
						netUpdate = true;
						TargetClosest();
						this.ai[2] += 0.3f;
						rotation += this.ai[2] * (float)direction;
						this.ai[1] += 1f;
						bool flag31 = Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
						float num596 = 10f;
						if (!flag31)
						{
							num596 = 6f;
						}
						if (type >= 496 && type <= 497)
						{
							num596 *= 0.75f;
						}
						Vector2 vector73 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num597 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector73.X;
						float num598 = Math.Abs(num597) * 0.2f;
						if (directionY > 0)
						{
							num598 = 0f;
						}
						float num599 = Main.player[target].position.Y - vector73.Y - num598;
						float num600 = (float)Math.Sqrt(num597 * num597 + num599 * num599);
						netUpdate = true;
						num600 = num596 / num600;
						num597 *= num600;
						num599 *= num600;
						if (!flag31)
						{
							num599 = -10f;
						}
						velocity.X = num597;
						velocity.Y = num599;
						this.ai[3] = velocity.X;
					}
					else
					{
						if (position.X + (float)width > Main.player[target].position.X && position.X < Main.player[target].position.X + (float)Main.player[target].width && position.Y < Main.player[target].position.Y + (float)Main.player[target].height)
						{
							velocity.X *= 0.8f;
							this.ai[3] = 0f;
							if (velocity.Y < 0f)
							{
								velocity.Y += 0.2f;
							}
						}
						if (this.ai[3] != 0f)
						{
							velocity.X = this.ai[3];
							velocity.Y -= 0.22f;
						}
						if (this.ai[1] >= 90f)
						{
							noGravity = false;
							this.ai[1] = 0f;
							this.ai[0] = 4f;
						}
					}
					if (wet && directionY < 0)
					{
						velocity.Y -= 0.3f;
					}
					rotation += this.ai[2] * (float)direction;
				}
				else if (this.ai[0] == 4f)
				{
					if (wet && directionY < 0)
					{
						velocity.Y -= 0.3f;
					}
					velocity.X *= 0.96f;
					if (this.ai[2] > 0f)
					{
						this.ai[2] -= 0.01f;
						rotation += this.ai[2] * (float)direction;
					}
					else if (velocity.Y >= 0f)
					{
						rotation = 0f;
					}
					if (this.ai[2] <= 0f && (velocity.Y == 0f || wet))
					{
						netUpdate = true;
						rotation = 0f;
						this.ai[2] = 0f;
						this.ai[1] = 0f;
						this.ai[0] = 5f;
					}
				}
				else if (this.ai[0] == 6f)
				{
					damage = GetAttackDamage_LerpBetweenFinalValues((float)defDamage * 1.8f, (float)defDamage * 1.4f);
					defense = defDefense * 2;
					knockBackResist = 0f;
					if (Main.rand.Next(3) < 2)
					{
						position += netOffset;
						int num601 = Dust.NewDust(base.Center - new Vector2(30f), 60, 60, 6, velocity.X * 0.5f, velocity.Y * 0.5f, 90, default(Color), 1.5f);
						Main.dust[num601].noGravity = true;
						Dust dust = Main.dust[num601];
						dust.velocity *= 0.2f;
						Main.dust[num601].fadeIn = 1f;
						position -= netOffset;
					}
					this.ai[1] += 1f;
					if (this.ai[3] > 0f)
					{
						position += netOffset;
						if (this.ai[3] == 1f)
						{
							Vector2 vector74 = base.Center - new Vector2(50f);
							for (int num602 = 0; num602 < 32; num602++)
							{
								int num603 = Dust.NewDust(vector74, 100, 100, 6, 0f, 0f, 100, default(Color), 2.5f);
								Main.dust[num603].noGravity = true;
								Dust dust = Main.dust[num603];
								dust.velocity *= 3f;
								num603 = Dust.NewDust(vector74, 100, 100, 6, 0f, 0f, 100, default(Color), 1.5f);
								dust = Main.dust[num603];
								dust.velocity *= 2f;
								Main.dust[num603].noGravity = true;
							}
							for (int num604 = 0; num604 < 4; num604++)
							{
								int num605 = Gore.NewGore(vector74 + new Vector2((float)(50 * Main.rand.Next(100)) / 100f, (float)(50 * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
								Gore gore = Main.gore[num605];
								gore.velocity *= 0.3f;
								Main.gore[num605].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
								Main.gore[num605].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
							}
						}
						for (int num606 = 0; num606 < 5; num606++)
						{
							int num607 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num607].velocity = Main.dust[num607].velocity * Main.rand.NextFloat();
						}
						this.ai[3]++;
						if (this.ai[3] >= 10f)
						{
							this.ai[3] = 0f;
						}
						position -= netOffset;
					}
					if (this.ai[1] == 1f)
					{
						netUpdate = true;
						TargetClosest();
						bool flag32 = Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
						float num608 = 16f;
						if (!flag32)
						{
							num608 = 10f;
						}
						Vector2 vector75 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num609 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector75.X;
						float num610 = Math.Abs(num609) * 0.2f;
						if (directionY > 0)
						{
							num610 = 0f;
						}
						float num611 = Main.player[target].position.Y - vector75.Y - num610;
						float num612 = (float)Math.Sqrt(num609 * num609 + num611 * num611);
						netUpdate = true;
						num612 = num608 / num612;
						num609 *= num612;
						num611 *= num612;
						if (!flag32)
						{
							num611 = -12f;
						}
						velocity.X = num609;
						velocity.Y = num611;
					}
					else
					{
						if (position.X + (float)width > Main.player[target].position.X && position.X < Main.player[target].position.X + (float)Main.player[target].width && position.Y < Main.player[target].position.Y + (float)Main.player[target].height)
						{
							velocity.X *= 0.9f;
							if (velocity.Y < 0f)
							{
								velocity.Y += 0.2f;
							}
						}
						if (this.ai[2] == 0f || this.ai[1] >= 1200f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 5f;
						}
					}
					if (wet && directionY < 0)
					{
						velocity.Y -= 0.3f;
					}
					rotation += MathHelper.Clamp(velocity.X / 10f * (float)direction, -MathF.PI / 10f, MathF.PI / 10f);
				}
				else if (this.ai[0] == 5f)
				{
					if (type == 417)
					{
						position.Y += height;
						height = 52;
						position.Y -= height;
					}
					rotation = 0f;
					velocity.X = 0f;
					if (type >= 496 && type <= 497)
					{
						this.ai[1] += 0.5f;
					}
					else
					{
						this.ai[1] += 1f;
					}
					if (this.ai[1] >= 30f)
					{
						TargetClosest();
						netUpdate = true;
						this.ai[1] = 0f;
						this.ai[0] = 0f;
					}
					if (wet)
					{
						this.ai[0] = 3f;
						this.ai[1] = 0f;
					}
				}
			}
			else if (aiStyle == 40)
			{
				if (target < 0 || target == 255 || Main.player[target].dead)
				{
					TargetClosest();
				}
				float num613 = 2f;
				float num614 = 0.08f;
				if (type == 237)
				{
					num613 = 3f;
					num614 = 0.12f;
				}
				if (type == 531)
				{
					num613 = 4f;
					num614 = 0.16f;
				}
				Vector2 vector76 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num615 = Main.player[target].position.X + (float)(Main.player[target].width / 2);
				float num616 = Main.player[target].position.Y + (float)(Main.player[target].height / 2);
				num615 = (int)(num615 / 8f) * 8;
				num616 = (int)(num616 / 8f) * 8;
				vector76.X = (int)(vector76.X / 8f) * 8;
				vector76.Y = (int)(vector76.Y / 8f) * 8;
				num615 -= vector76.X;
				num616 -= vector76.Y;
				if (confused)
				{
					num615 *= -2f;
					num616 *= -2f;
				}
				float num617 = (float)Math.Sqrt(num615 * num615 + num616 * num616);
				float num618 = num617;
				if (num617 == 0f)
				{
					num615 = velocity.X;
					num616 = velocity.Y;
				}
				else
				{
					num617 = num613 / num617;
					num615 *= num617;
					num616 *= num617;
				}
				if (Main.player[target].dead)
				{
					num615 = (float)direction * num613 / 2f;
					num616 = (0f - num613) / 2f;
				}
				spriteDirection = -1;
				if (!Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 0f)
					{
						velocity.Y += 0.023f;
					}
					else
					{
						velocity.Y -= 0.023f;
					}
					if (this.ai[0] < -100f || this.ai[0] > 100f)
					{
						velocity.X += 0.023f;
					}
					else
					{
						velocity.X -= 0.023f;
					}
					if (this.ai[0] > 200f)
					{
						this.ai[0] = -200f;
					}
					velocity.X += num615 * 0.007f;
					velocity.Y += num616 * 0.007f;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					if ((double)velocity.X > 1.5)
					{
						velocity.X *= 0.9f;
					}
					if ((double)velocity.X < -1.5)
					{
						velocity.X *= 0.9f;
					}
					if ((double)velocity.Y > 1.5)
					{
						velocity.Y *= 0.9f;
					}
					if ((double)velocity.Y < -1.5)
					{
						velocity.Y *= 0.9f;
					}
					if (velocity.X > 3f)
					{
						velocity.X = 3f;
					}
					if (velocity.X < -3f)
					{
						velocity.X = -3f;
					}
					if (velocity.Y > 3f)
					{
						velocity.Y = 3f;
					}
					if (velocity.Y < -3f)
					{
						velocity.Y = -3f;
					}
				}
				else
				{
					if (velocity.X < num615)
					{
						velocity.X += num614;
						if (velocity.X < 0f && num615 > 0f)
						{
							velocity.X += num614;
						}
					}
					else if (velocity.X > num615)
					{
						velocity.X -= num614;
						if (velocity.X > 0f && num615 < 0f)
						{
							velocity.X -= num614;
						}
					}
					if (velocity.Y < num616)
					{
						velocity.Y += num614;
						if (velocity.Y < 0f && num616 > 0f)
						{
							velocity.Y += num614;
						}
					}
					else if (velocity.Y > num616)
					{
						velocity.Y -= num614;
						if (velocity.Y > 0f && num616 < 0f)
						{
							velocity.Y -= num614;
						}
					}
					rotation = (float)Math.Atan2(num616, num615);
				}
				if (type == 531)
				{
					rotation += MathF.PI / 2f;
				}
				float num619 = 0.5f;
				if (collideX)
				{
					netUpdate = true;
					velocity.X = oldVelocity.X * (0f - num619);
					if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
					{
						velocity.X = 2f;
					}
					if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
					{
						velocity.X = -2f;
					}
				}
				if (collideY)
				{
					netUpdate = true;
					velocity.Y = oldVelocity.Y * (0f - num619);
					if (velocity.Y > 0f && (double)velocity.Y < 1.5)
					{
						velocity.Y = 2f;
					}
					if (velocity.Y < 0f && (double)velocity.Y > -1.5)
					{
						velocity.Y = -2f;
					}
				}
				if (((velocity.X > 0f && oldVelocity.X < 0f) || (velocity.X < 0f && oldVelocity.X > 0f) || (velocity.Y > 0f && oldVelocity.Y < 0f) || (velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
				{
					netUpdate = true;
				}
				if (Main.netMode == 1)
				{
					return;
				}
				if (Main.netMode != 1 && Main.expertMode && target >= 0 && (type == 163 || type == 238 || type == 236 || type == 237) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					localAI[0] += 1f;
					if (justHit)
					{
						localAI[0] -= Main.rand.Next(20, 60);
						if (localAI[0] < 0f)
						{
							localAI[0] = 0f;
						}
					}
					if (localAI[0] > (float)Main.rand.Next(180, 900))
					{
						localAI[0] = 0f;
						Vector2 vector77 = Main.player[target].Center - base.Center;
						vector77.Normalize();
						vector77 *= 8f;
						int attackDamage_ForProjectiles8 = GetAttackDamage_ForProjectiles(18f, 18f);
						int num620 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector77.X, vector77.Y, 472, attackDamage_ForProjectiles8, 0f, Main.myPlayer);
					}
				}
				if (!NPCCanStickToWalls())
				{
					int newType = type;
					switch (type)
					{
					case 165:
						newType = 164;
						break;
					case 237:
						newType = 236;
						break;
					case 238:
						newType = 163;
						break;
					case 240:
						newType = 239;
						break;
					case 531:
						newType = 530;
						break;
					}
					Transform(newType);
				}
			}
			else if (aiStyle == 41)
			{
				if (this.ai[2] > 1f)
				{
					this.ai[2] -= 1f;
				}
				if (this.ai[2] == 0f)
				{
					this.ai[0] = -100f;
					this.ai[2] = 1f;
					TargetClosest();
					spriteDirection = direction;
				}
				if (type == 378)
				{
					Vector2 vector78 = new Vector2(-6f, -10f);
					vector78.X *= spriteDirection;
					if (this.ai[1] != 5f && Main.rand.Next(3) == 0)
					{
						position += netOffset;
						int num621 = Dust.NewDust(base.Center + vector78 - Vector2.One * 5f, 4, 4, 6);
						Main.dust[num621].scale = 1.5f;
						Main.dust[num621].noGravity = true;
						Main.dust[num621].velocity = Main.dust[num621].velocity * 0.25f + Vector2.Normalize(vector78) * 1f;
						Main.dust[num621].velocity = Main.dust[num621].velocity.RotatedBy(-MathF.PI / 2f * (float)direction);
						position -= netOffset;
					}
					if (this.ai[1] == 5f)
					{
						velocity = Vector2.Zero;
						position.X += width / 2;
						position.Y += height / 2;
						width = 160;
						height = 160;
						position.X -= width / 2;
						position.Y -= height / 2;
						dontTakeDamage = true;
						position += netOffset;
						if (this.ai[2] > 7f)
						{
							for (int num622 = 0; num622 < 8; num622++)
							{
								int num623 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							}
							for (int num624 = 0; num624 < 32; num624++)
							{
								int num625 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
								Main.dust[num625].noGravity = true;
								Dust dust = Main.dust[num625];
								dust.velocity *= 3f;
								num625 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
								dust = Main.dust[num625];
								dust.velocity *= 2f;
								Main.dust[num625].noGravity = true;
							}
							for (int num626 = 0; num626 < 2; num626++)
							{
								int num627 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
								Gore gore = Main.gore[num627];
								gore.velocity *= 0.3f;
								Main.gore[num627].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
								Main.gore[num627].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
							}
							if (this.ai[2] == 9f)
							{
								SoundEngine.PlaySound(SoundID.Item14, position);
							}
						}
						if (this.ai[2] == 1f)
						{
							life = -1;
							HitEffect();
							active = false;
						}
						position -= netOffset;
						return;
					}
				}
				if (type == 378 && this.ai[1] != 5f)
				{
					if (wet || Vector2.Distance(base.Center, Main.player[target].Center) < 64f)
					{
						this.ai[1] = 5f;
						this.ai[2] = 10f;
						netUpdate = true;
						return;
					}
				}
				else if (wet && type != 177)
				{
					if (collideX)
					{
						direction *= -direction;
						spriteDirection = direction;
					}
					if (collideY)
					{
						TargetClosest();
						if (oldVelocity.Y < 0f)
						{
							velocity.Y = 5f;
						}
						else
						{
							velocity.Y -= 2f;
						}
						spriteDirection = direction;
					}
					if (velocity.Y > 4f)
					{
						velocity.Y *= 0.95f;
					}
					velocity.Y -= 0.3f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				if (velocity.Y == 0f)
				{
					if (this.ai[3] == position.X)
					{
						direction *= -1;
						this.ai[2] = 300f;
					}
					this.ai[3] = 0f;
					velocity.X *= 0.8f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					if (type == 177)
					{
						this.ai[0] += 2f;
					}
					else
					{
						this.ai[0] += 5f;
					}
					Vector2 vector79 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num628 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector79.X;
					float num629 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector79.Y;
					float num630 = (float)Math.Sqrt(num628 * num628 + num629 * num629);
					float num631 = 400f / num630;
					num631 = ((type != 177) ? (num631 * 10f) : (num631 * 5f));
					if (num631 > 30f)
					{
						num631 = 30f;
					}
					this.ai[0] += (int)num631;
					if (this.ai[0] >= 0f)
					{
						netUpdate = true;
						if (this.ai[2] == 1f)
						{
							TargetClosest();
						}
						if (type == 177)
						{
							if (this.ai[1] == 2f)
							{
								velocity.Y = -11.5f;
								velocity.X += 2f * (float)direction;
								if (num630 < 350f && num630 > 200f)
								{
									velocity.X += direction;
								}
								this.ai[0] = -200f;
								this.ai[1] = 0f;
								this.ai[3] = position.X;
							}
							else
							{
								velocity.Y = -7.5f;
								velocity.X += 4 * direction;
								if (num630 < 350f && num630 > 200f)
								{
									velocity.X += direction;
								}
								this.ai[0] = -120f;
								this.ai[1] += 1f;
							}
						}
						else
						{
							if (type == 378)
							{
								SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 124);
							}
							if (this.ai[1] == 3f)
							{
								velocity.Y = -9f;
								velocity.X += 3 * direction;
								if (num630 < 350f && num630 > 200f)
								{
									velocity.X += direction;
								}
								this.ai[0] = -200f;
								this.ai[1] = 0f;
								this.ai[3] = position.X;
							}
							else
							{
								velocity.Y = -5f;
								velocity.X += 5 * direction;
								if (num630 < 350f && num630 > 200f)
								{
									velocity.X += direction;
								}
								this.ai[0] = -120f;
								this.ai[1] += 1f;
							}
						}
					}
					else if (this.ai[0] >= -30f)
					{
						aiAction = 1;
					}
					spriteDirection = direction;
				}
				else
				{
					if (target >= 255)
					{
						return;
					}
					if (type == 177)
					{
						bool flag33 = false;
						if (position.Y + (float)height < Main.player[target].position.Y && position.X + (float)width > Main.player[target].position.X && position.X < Main.player[target].position.X + (float)Main.player[target].width)
						{
							flag33 = true;
							velocity.X *= 0.92f;
							if (velocity.Y < 0f)
							{
								velocity.Y *= 0.9f;
								velocity.Y += 0.1f;
							}
						}
						if (!flag33 && ((direction == 1 && velocity.X < 4f) || (direction == -1 && velocity.X > -4f)))
						{
							if ((direction == -1 && (double)velocity.X < 0.1) || (direction == 1 && (double)velocity.X > -0.1))
							{
								velocity.X += 0.2f * (float)direction;
							}
							else
							{
								velocity.X *= 0.93f;
							}
						}
					}
					else if ((direction == 1 && velocity.X < 3f) || (direction == -1 && velocity.X > -3f))
					{
						if ((direction == -1 && (double)velocity.X < 0.1) || (direction == 1 && (double)velocity.X > -0.1))
						{
							velocity.X += 0.2f * (float)direction;
						}
						else
						{
							velocity.X *= 0.93f;
						}
					}
				}
			}
			else if (aiStyle == 42)
			{
				TargetClosest();
				if (this.ai[0] == 0f)
				{
					if (target >= 0)
					{
						Vector2 vector80 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num632 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector80.X;
						float num633 = Main.player[target].position.Y - vector80.Y;
						float num634 = (float)Math.Sqrt(num632 * num632 + num633 * num633);
						if (num634 < 200f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							this.ai[0] = 1f;
						}
					}
					if (velocity.X != 0f || velocity.Y < 0f || velocity.Y > 2f || life != lifeMax)
					{
						this.ai[0] = 1f;
					}
				}
				else
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 21f)
					{
						this.ai[0] = 21f;
						Transform(196);
					}
				}
			}
			else if (aiStyle == 43)
			{
				if (Main.expertMode)
				{
					int num635 = (int)(20f * (1f - (float)life / (float)lifeMax));
					defense = defDefense + num635;
				}
				if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
				}
				bool dead4 = Main.player[target].dead;
				float num636 = 0f;
				if ((double)(position.Y / 16f) < Main.worldSurface)
				{
					num636 += 1f;
				}
				if (!Main.player[target].ZoneJungle)
				{
					num636 += 1f;
				}
				if (Main.getGoodWorld)
				{
					num636 += 0.5f;
				}
				float num637 = Vector2.Distance(base.Center, Main.player[target].Center);
				if (this.ai[0] != 5f)
				{
					if (timeLeft < 60)
					{
						timeLeft = 60;
					}
					if (num637 > 3000f)
					{
						this.ai[0] = 4f;
						netUpdate = true;
					}
				}
				if (dead4)
				{
					this.ai[0] = 5f;
					netUpdate = true;
				}
				if (this.ai[0] == 5f)
				{
					velocity.Y *= 0.98f;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					spriteDirection = direction;
					if (position.X < (float)(Main.maxTilesX * 8))
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.98f;
						}
						else
						{
							localAI[0] = 1f;
						}
						velocity.X -= 0.08f;
					}
					else
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.98f;
						}
						else
						{
							localAI[0] = 1f;
						}
						velocity.X += 0.08f;
					}
					EncourageDespawn(10);
				}
				else if (this.ai[0] == -1f)
				{
					if (Main.netMode == 1)
					{
						return;
					}
					float num638 = this.ai[1];
					int num639;
					do
					{
						num639 = Main.rand.Next(3);
						switch (num639)
						{
						case 1:
							num639 = 2;
							break;
						case 2:
							num639 = 3;
							break;
						}
					}
					while ((float)num639 == num638);
					this.ai[0] = num639;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					netUpdate = true;
				}
				else if (this.ai[0] == 0f)
				{
					int num640 = 2;
					if (Main.expertMode)
					{
						if (life < lifeMax / 2)
						{
							num640++;
						}
						if (life < lifeMax / 3)
						{
							num640++;
						}
						if (life < lifeMax / 5)
						{
							num640++;
						}
					}
					num640 += (int)(1f * num636);
					if (this.ai[1] > (float)(2 * num640) && this.ai[1] % 2f == 0f)
					{
						this.ai[0] = -1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						netUpdate = true;
						return;
					}
					if (this.ai[1] % 2f == 0f)
					{
						TargetClosest();
						float num641 = 20f;
						num641 += 20f * num636;
						if (Math.Abs(base.Center.Y - Main.player[target].Center.Y) < num641)
						{
							localAI[0] = 1f;
							this.ai[1] += 1f;
							this.ai[2] = 0f;
							netUpdate = true;
							float num642 = 12f;
							if (Main.expertMode)
							{
								num642 = 16f;
								if ((double)life < (double)lifeMax * 0.75)
								{
									num642 += 2f;
								}
								if ((double)life < (double)lifeMax * 0.5)
								{
									num642 += 2f;
								}
								if ((double)life < (double)lifeMax * 0.25)
								{
									num642 += 2f;
								}
								if ((double)life < (double)lifeMax * 0.1)
								{
									num642 += 2f;
								}
							}
							num642 += 7f * num636;
							Vector2 vector81 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
							float num643 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector81.X;
							float num644 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector81.Y;
							float num645 = (float)Math.Sqrt(num643 * num643 + num644 * num644);
							num645 = num642 / num645;
							velocity.X = num643 * num645;
							velocity.Y = num644 * num645;
							spriteDirection = direction;
							SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 125);
							return;
						}
						localAI[0] = 0f;
						float num646 = 12f;
						float num647 = 0.15f;
						if (Main.expertMode)
						{
							if ((double)life < (double)lifeMax * 0.75)
							{
								num646 += 1f;
								num647 += 0.05f;
							}
							if ((double)life < (double)lifeMax * 0.5)
							{
								num646 += 1f;
								num647 += 0.05f;
							}
							if ((double)life < (double)lifeMax * 0.25)
							{
								num646 += 2f;
								num647 += 0.05f;
							}
							if ((double)life < (double)lifeMax * 0.1)
							{
								num646 += 2f;
								num647 += 0.1f;
							}
						}
						num646 += 3f * num636;
						num647 += 0.5f * num636;
						if (position.Y + (float)(height / 2) < Main.player[target].position.Y + (float)(Main.player[target].height / 2))
						{
							velocity.Y += num647;
						}
						else
						{
							velocity.Y -= num647;
						}
						if (velocity.Y < 0f - num646)
						{
							velocity.Y = 0f - num646;
						}
						if (velocity.Y > num646)
						{
							velocity.Y = num646;
						}
						if (Math.Abs(position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) > 600f)
						{
							velocity.X += 0.15f * (float)direction;
						}
						else if (Math.Abs(position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) < 300f)
						{
							velocity.X -= 0.15f * (float)direction;
						}
						else
						{
							velocity.X *= 0.8f;
						}
						if (velocity.X < -16f)
						{
							velocity.X = -16f;
						}
						if (velocity.X > 16f)
						{
							velocity.X = 16f;
						}
						spriteDirection = direction;
						return;
					}
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					spriteDirection = direction;
					int num648 = 600;
					if (Main.expertMode)
					{
						if ((double)life < (double)lifeMax * 0.1)
						{
							num648 = 300;
						}
						else if ((double)life < (double)lifeMax * 0.25)
						{
							num648 = 450;
						}
						else if ((double)life < (double)lifeMax * 0.5)
						{
							num648 = 500;
						}
						else if ((double)life < (double)lifeMax * 0.75)
						{
							num648 = 550;
						}
					}
					int num649 = 1;
					if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))
					{
						num649 = -1;
					}
					num648 -= (int)(100f * num636);
					bool flag34 = false;
					if (direction == num649 && Math.Abs(base.Center.X - Main.player[target].Center.X) > (float)num648)
					{
						this.ai[2] = 1f;
						flag34 = true;
					}
					if (Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num648 * 1.5f)
					{
						this.ai[2] = 1f;
						flag34 = true;
					}
					if (num636 > 0f && flag34)
					{
						velocity *= 0.5f;
					}
					if (this.ai[2] == 1f)
					{
						TargetClosest();
						spriteDirection = direction;
						localAI[0] = 0f;
						velocity *= 0.9f;
						float num650 = 0.1f;
						if (Main.expertMode)
						{
							if (life < lifeMax / 2)
							{
								velocity *= 0.9f;
								num650 += 0.05f;
							}
							if (life < lifeMax / 3)
							{
								velocity *= 0.9f;
								num650 += 0.05f;
							}
							if (life < lifeMax / 5)
							{
								velocity *= 0.9f;
								num650 += 0.05f;
							}
						}
						if (num636 > 0f)
						{
							velocity *= 0.7f;
						}
						if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num650)
						{
							this.ai[2] = 0f;
							this.ai[1] += 1f;
							netUpdate = true;
						}
					}
					else
					{
						localAI[0] = 1f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					TargetClosest();
					spriteDirection = direction;
					float num651 = 12f;
					float num652 = 0.07f;
					if (Main.expertMode)
					{
						num652 = 0.1f;
					}
					Vector2 vector82 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num653 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector82.X;
					float num654 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 200f - vector82.Y;
					float num655 = (float)Math.Sqrt(num653 * num653 + num654 * num654);
					if (num655 < 200f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
						return;
					}
					num655 = num651 / num655;
					if (velocity.X < num653)
					{
						velocity.X += num652;
						if (velocity.X < 0f && num653 > 0f)
						{
							velocity.X += num652;
						}
					}
					else if (velocity.X > num653)
					{
						velocity.X -= num652;
						if (velocity.X > 0f && num653 < 0f)
						{
							velocity.X -= num652;
						}
					}
					if (velocity.Y < num654)
					{
						velocity.Y += num652;
						if (velocity.Y < 0f && num654 > 0f)
						{
							velocity.Y += num652;
						}
					}
					else if (velocity.Y > num654)
					{
						velocity.Y -= num652;
						if (velocity.Y > 0f && num654 < 0f)
						{
							velocity.Y -= num652;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					localAI[0] = 0f;
					TargetClosest();
					Vector2 vector83 = new Vector2(position.X + (float)(width / 2) + (float)(Main.rand.Next(20) * direction), position.Y + (float)height * 0.8f);
					Vector2 vector84 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num656 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector84.X;
					float num657 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector84.Y;
					float num658 = (float)Math.Sqrt(num656 * num656 + num657 * num657);
					this.ai[1] += 1f;
					if (Main.expertMode)
					{
						int num659 = 0;
						for (int num660 = 0; num660 < 255; num660++)
						{
							if (Main.player[num660].active && !Main.player[num660].dead && (base.Center - Main.player[num660].Center).Length() < 1000f)
							{
								num659++;
							}
						}
						this.ai[1] += num659 / 2;
						if ((double)life < (double)lifeMax * 0.75)
						{
							this.ai[1] += 0.25f;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							this.ai[1] += 0.25f;
						}
						if ((double)life < (double)lifeMax * 0.25)
						{
							this.ai[1] += 0.25f;
						}
						if ((double)life < (double)lifeMax * 0.1)
						{
							this.ai[1] += 0.25f;
						}
					}
					bool flag35 = false;
					int num661 = (int)(40f - 18f * num636);
					if (this.ai[1] > (float)num661)
					{
						this.ai[1] = 0f;
						this.ai[2]++;
						flag35 = true;
					}
					if (Collision.CanHit(vector83, 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height) && flag35)
					{
						SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
						if (Main.netMode != 1)
						{
							int num662 = Main.rand.Next(210, 212);
							int num663 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector83.X, (int)vector83.Y, num662);
							Main.npc[num663].velocity = Main.player[target].Center - base.Center;
							Main.npc[num663].velocity.Normalize();
							NPC nPC3 = Main.npc[num663];
							nPC3.velocity *= 5f;
							Main.npc[num663].localAI[0] = 60f;
							Main.npc[num663].netUpdate = true;
						}
					}
					if (num658 > 400f || !Collision.CanHit(new Vector2(vector83.X, vector83.Y - 30f), 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						float num664 = 14f;
						float num665 = 0.1f;
						vector84 = vector83;
						num656 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector84.X;
						num657 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector84.Y;
						num658 = (float)Math.Sqrt(num656 * num656 + num657 * num657);
						num658 = num664 / num658;
						if (velocity.X < num656)
						{
							velocity.X += num665;
							if (velocity.X < 0f && num656 > 0f)
							{
								velocity.X += num665;
							}
						}
						else if (velocity.X > num656)
						{
							velocity.X -= num665;
							if (velocity.X > 0f && num656 < 0f)
							{
								velocity.X -= num665;
							}
						}
						if (velocity.Y < num657)
						{
							velocity.Y += num665;
							if (velocity.Y < 0f && num657 > 0f)
							{
								velocity.Y += num665;
							}
						}
						else if (velocity.Y > num657)
						{
							velocity.Y -= num665;
							if (velocity.Y > 0f && num657 < 0f)
							{
								velocity.Y -= num665;
							}
						}
					}
					else
					{
						velocity *= 0.9f;
					}
					spriteDirection = direction;
					if (this.ai[2] > 5f)
					{
						this.ai[0] = -1f;
						this.ai[1] = 1f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 3f)
				{
					float num666 = 4f;
					float num667 = 0.05f;
					if (Main.expertMode)
					{
						num667 = 0.075f;
						num666 = 6f;
					}
					num667 += 0.2f * num636;
					num666 += 6f * num636;
					Vector2 vector85 = new Vector2(position.X + (float)(width / 2) + (float)(Main.rand.Next(20) * direction), position.Y + (float)height * 0.8f);
					Vector2 vector86 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num668 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector86.X;
					float num669 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector86.Y;
					float num670 = (float)Math.Sqrt(num668 * num668 + num669 * num669);
					this.ai[1] += 1f;
					bool flag36 = false;
					int num671 = 40;
					if (Main.expertMode)
					{
						num671 = (((double)life < (double)lifeMax * 0.1) ? 15 : ((life < lifeMax / 3) ? 25 : ((life >= lifeMax / 2) ? 35 : 30)));
					}
					num671 -= (int)(5f * num636);
					if (this.ai[1] % (float)num671 == (float)(num671 - 1) && position.Y + (float)height < Main.player[target].position.Y && Collision.CanHit(vector85, 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						SoundEngine.PlaySound(SoundID.Item17, position);
						if (Main.netMode != 1)
						{
							float num672 = 8f;
							if (Main.expertMode)
							{
								num672 += 2f;
							}
							if (Main.expertMode && (double)life < (double)lifeMax * 0.1)
							{
								num672 += 3f;
							}
							num672 += 7f * num636;
							int num673 = (int)(80f - 39f * num636);
							int num674 = (int)(40f - 19f * num636);
							if (num673 < 1)
							{
								num673 = 1;
							}
							if (num674 < 1)
							{
								num674 = 1;
							}
							float num675 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector85.X + (float)Main.rand.Next(-num673, num673 + 1);
							float num676 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector85.Y + (float)Main.rand.Next(-num674, num674 + 1);
							float num677 = (float)Math.Sqrt(num675 * num675 + num676 * num676);
							num677 = num672 / num677;
							num675 *= num677;
							num676 *= num677;
							int num678 = 11;
							int num679 = 719;
							int num680 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector85.X, vector85.Y, num675, num676, num679, num678, 0f, Main.myPlayer);
							Main.projectile[num680].timeLeft = 300;
						}
					}
					if (!Collision.CanHit(new Vector2(vector85.X, vector85.Y - 30f), 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						num666 = 14f;
						num667 = 0.1f;
						if (num636 > 0f)
						{
							num667 = 0.5f;
						}
						vector86 = vector85;
						num668 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector86.X;
						num669 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector86.Y;
						num670 = (float)Math.Sqrt(num668 * num668 + num669 * num669);
						num670 = num666 / num670;
						if (velocity.X < num668)
						{
							velocity.X += num667;
							if (velocity.X < 0f && num668 > 0f)
							{
								velocity.X += num667;
							}
						}
						else if (velocity.X > num668)
						{
							velocity.X -= num667;
							if (velocity.X > 0f && num668 < 0f)
							{
								velocity.X -= num667;
							}
						}
						if (velocity.Y < num669)
						{
							velocity.Y += num667;
							if (velocity.Y < 0f && num669 > 0f)
							{
								velocity.Y += num667;
							}
						}
						else if (velocity.Y > num669)
						{
							velocity.Y -= num667;
							if (velocity.Y > 0f && num669 < 0f)
							{
								velocity.Y -= num667;
							}
						}
					}
					else if (num670 > 100f)
					{
						TargetClosest();
						spriteDirection = direction;
						num670 = num666 / num670;
						if (velocity.X < num668)
						{
							velocity.X += num667;
							if (velocity.X < 0f && num668 > 0f)
							{
								velocity.X += num667 * 2f;
							}
						}
						else if (velocity.X > num668)
						{
							velocity.X -= num667;
							if (velocity.X > 0f && num668 < 0f)
							{
								velocity.X -= num667 * 2f;
							}
						}
						if (velocity.Y < num669)
						{
							velocity.Y += num667;
							if (velocity.Y < 0f && num669 > 0f)
							{
								velocity.Y += num667 * 2f;
							}
						}
						else if (velocity.Y > num669)
						{
							velocity.Y -= num667;
							if (velocity.Y > 0f && num669 < 0f)
							{
								velocity.Y -= num667 * 2f;
							}
						}
					}
					float num681 = 20f;
					num681 -= 5f * num636;
					if (this.ai[1] > (float)num671 * num681)
					{
						this.ai[0] = -1f;
						this.ai[1] = 3f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 4f)
				{
					localAI[0] = 1f;
					float num682 = 14f;
					float num683 = 14f;
					Vector2 vector87 = Main.player[target].Center - base.Center;
					vector87.Normalize();
					vector87 *= num682;
					velocity = (velocity * num683 + vector87) / (num683 + 1f);
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					spriteDirection = direction;
					if (num637 < 2000f)
					{
						this.ai[0] = -1f;
						localAI[0] = 0f;
					}
				}
			}
			else if (aiStyle == 44)
			{
				noGravity = true;
				if (collideX)
				{
					if (oldVelocity.X > 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					velocity.X = direction;
				}
				if (collideY)
				{
					if (oldVelocity.Y > 0f)
					{
						directionY = -1;
					}
					else
					{
						directionY = 1;
					}
					velocity.Y = directionY;
				}
				if (type == 587)
				{
					position += netOffset;
					if (alpha == 255)
					{
						velocity.Y = -6f;
						netUpdate = true;
						for (int num684 = 0; num684 < 15; num684++)
						{
							Dust dust2 = Dust.NewDustDirect(position, width, height, 5);
							Dust dust = dust2;
							dust.velocity *= 0.5f;
							dust2.scale = 1f + Main.rand.NextFloat() * 0.5f;
							dust2.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
							dust = dust2;
							dust.velocity += velocity * 0.5f;
						}
					}
					alpha -= 15;
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (alpha != 0)
					{
						for (int num685 = 0; num685 < 2; num685++)
						{
							Dust dust3 = Dust.NewDustDirect(position, width, height, 5);
							Dust dust = dust3;
							dust.velocity *= 1f;
							dust3.scale = 1f + Main.rand.NextFloat() * 0.5f;
							dust3.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
							dust = dust3;
							dust.velocity += velocity * 0.3f;
						}
					}
					if (Main.rand.Next(3) == 0)
					{
						Dust dust4 = Dust.NewDustDirect(position, width, height, 5);
						Dust dust = dust4;
						dust.velocity *= 0f;
						dust4.alpha = 120;
						dust4.scale = 0.7f + Main.rand.NextFloat() * 0.5f;
						dust = dust4;
						dust.velocity += velocity * 0.3f;
					}
					position -= netOffset;
				}
				int num686 = target;
				int num687 = direction;
				if (target == 255 || (type != 587 && Main.player[target].wet) || Main.player[target].dead || Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					this.ai[0] = 90f;
					TargetClosest();
				}
				else if (this.ai[0] > 0f)
				{
					this.ai[0] -= 1f;
					TargetClosest();
				}
				if (netUpdate && num686 == target && num687 == direction)
				{
					netUpdate = false;
				}
				float num688 = 0.05f;
				float num689 = 0.01f;
				float num690 = 3f;
				float num691 = 1f;
				float num692 = 30f;
				float num693 = 100f;
				float num694 = Math.Abs(position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2)));
				float num695 = Main.player[target].position.Y - (float)(height / 2);
				if (type == 509)
				{
					num688 = 0.08f;
					num689 = 0.03f;
					num690 = 4.5f;
					num691 = 2f;
					num692 = 40f;
					num693 = 150f;
					num695 = Main.player[target].Center.Y - (float)(height / 2);
					rotation = velocity.X * 0.1f;
					for (int num696 = 0; num696 < 200; num696++)
					{
						if (num696 != whoAmI && Main.npc[num696].active && Main.npc[num696].type == type && Math.Abs(position.X - Main.npc[num696].position.X) + Math.Abs(position.Y - Main.npc[num696].position.Y) < (float)width)
						{
							if (position.X < Main.npc[num696].position.X)
							{
								velocity.X -= 0.05f;
							}
							else
							{
								velocity.X += 0.05f;
							}
							if (position.Y < Main.npc[num696].position.Y)
							{
								velocity.Y -= 0.05f;
							}
							else
							{
								velocity.Y += 0.05f;
							}
						}
					}
				}
				else if (type == 581)
				{
					num688 = 0.06f;
					num689 = 0.02f;
					num690 = 4f;
					num691 = 2f;
					num692 = 40f;
					num693 = 150f;
					num695 = Main.player[target].Center.Y - (float)(height / 2);
					rotation = velocity.X * 0.1f;
					for (int num697 = 0; num697 < 200; num697++)
					{
						if (num697 != whoAmI && Main.npc[num697].active && Main.npc[num697].type == type && Math.Abs(position.X - Main.npc[num697].position.X) + Math.Abs(position.Y - Main.npc[num697].position.Y) < (float)width)
						{
							if (position.X < Main.npc[num697].position.X)
							{
								velocity.X -= 0.05f;
							}
							else
							{
								velocity.X += 0.05f;
							}
							if (position.Y < Main.npc[num697].position.Y)
							{
								velocity.Y -= 0.05f;
							}
							else
							{
								velocity.Y += 0.05f;
							}
						}
					}
				}
				else if (type == 587)
				{
					num688 = 0.13f;
					num689 = 0.09f;
					num690 = 6.5f;
					num691 = 3.5f;
					num692 = 0f;
					num693 = 250f;
					num695 = Main.player[target].position.Y;
					if (Main.dayTime)
					{
						num695 = 0f;
						direction *= -1;
					}
				}
				if (this.ai[0] <= 0f)
				{
					num690 *= 0.8f;
					num688 *= 0.7f;
					num695 = base.Center.Y + (float)(directionY * 1000);
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else if (velocity.X > 0f || direction == 0)
					{
						direction = 1;
					}
				}
				if (num694 > num692)
				{
					if (direction == -1 && velocity.X > 0f - num690)
					{
						velocity.X -= num688;
						if (velocity.X > num690)
						{
							velocity.X -= num688;
						}
						else if (velocity.X > 0f)
						{
							velocity.X -= num688 / 2f;
						}
						if (velocity.X < 0f - num690)
						{
							velocity.X = 0f - num690;
						}
					}
					else if (direction == 1 && velocity.X < num690)
					{
						velocity.X += num688;
						if (velocity.X < 0f - num690)
						{
							velocity.X += num688;
						}
						else if (velocity.X < 0f)
						{
							velocity.X += num688 / 2f;
						}
						if (velocity.X > num690)
						{
							velocity.X = num690;
						}
					}
				}
				if (num694 > num693)
				{
					num695 -= num693 / 2f;
				}
				if (position.Y < num695)
				{
					velocity.Y += num689;
					if (velocity.Y < 0f)
					{
						velocity.Y += num689;
					}
				}
				else
				{
					velocity.Y -= num689;
					if (velocity.Y > 0f)
					{
						velocity.Y -= num689;
					}
				}
				if (velocity.Y < 0f - num691)
				{
					velocity.Y = 0f - num691;
				}
				if (velocity.Y > num691)
				{
					velocity.Y = num691;
				}
				if (type != 587 && wet)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.95f;
					}
					velocity.Y -= 0.5f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
			}
			else if (aiStyle == 45)
			{
				AI_045_Golem();
			}
			else if (aiStyle == 46)
			{
				float num698 = GetMyBalance();
				if (Main.getGoodWorld)
				{
					num698 += 3f;
				}
				if ((!Main.player[target].ZoneLihzhardTemple && !Main.player[target].ZoneJungle) || (double)Main.player[target].Center.Y < Main.worldSurface * 16.0)
				{
					num698 *= 2f;
				}
				noTileCollide = true;
				if (golemBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					return;
				}
				float num699 = 100f;
				Vector2 vector88 = new Vector2(base.Center.X, base.Center.Y);
				float num700 = Main.npc[golemBoss].Center.X - vector88.X;
				float num701 = Main.npc[golemBoss].Center.Y - vector88.Y;
				num701 -= 57f * scale;
				num700 -= 3f * scale;
				float num702 = (float)Math.Sqrt(num700 * num700 + num701 * num701);
				if (num702 < num699)
				{
					rotation = 0f;
					velocity.X = num700;
					velocity.Y = num701;
				}
				else
				{
					num702 = num699 / num702;
					velocity.X = num700 * num702;
					velocity.Y = num701 * num702;
					rotation = velocity.X * 0.1f;
				}
				if (alpha > 0)
				{
					alpha -= 10;
					if (alpha < 0)
					{
						alpha = 0;
					}
					this.ai[1] = 30f;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					int num703 = 300;
					if (this.ai[1] < 20f || this.ai[1] > (float)(num703 - 20))
					{
						this.ai[1] += 2f * (num698 - 1f) / 3f;
						localAI[0] = 1f;
					}
					else
					{
						this.ai[1] += 1f * (num698 - 1f) / 2f;
						localAI[0] = 0f;
					}
					if (this.ai[1] >= (float)num703)
					{
						TargetClosest();
						this.ai[1] = 0f;
						Vector2 vector89 = new Vector2(base.Center.X, base.Center.Y + 10f * scale);
						float num704 = 8f;
						float num705 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector89.X;
						float num706 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector89.Y;
						float num707 = (float)Math.Sqrt(num705 * num705 + num706 * num706);
						num707 = num704 / num707;
						num705 *= num707;
						num706 *= num707;
						int num708 = 18;
						int num709 = 258;
						if (Main.netMode != 1)
						{
							int num710 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector89.X, vector89.Y, num705, num706, num709, num708, 0f, Main.myPlayer);
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					TargetClosest();
					Vector2 vector90 = new Vector2(base.Center.X, base.Center.Y + 10f * scale);
					if (Main.player[target].Center.X < base.Center.X - (float)width)
					{
						localAI[1] = -1f;
						vector90.X -= 40f * scale;
					}
					else if (Main.player[target].Center.X > base.Center.X + (float)width)
					{
						localAI[1] = 1f;
						vector90.X += 40f * scale;
					}
					else
					{
						localAI[1] = 0f;
					}
					float num711 = (num698 + 3f) / 4f;
					this.ai[1] += num711;
					if ((double)life < (double)lifeMax * 0.4)
					{
						this.ai[1] += num711;
					}
					if ((double)life < (double)lifeMax * 0.2)
					{
						this.ai[1] += num711;
					}
					int num712 = 300;
					if (this.ai[1] < 20f || this.ai[1] > (float)(num712 - 20))
					{
						localAI[0] = 1f;
					}
					else
					{
						localAI[0] = 0f;
					}
					if (this.ai[1] >= (float)num712)
					{
						TargetClosest();
						this.ai[1] = 0f;
						float num713 = 8f;
						float num714 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector90.X;
						float num715 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector90.Y;
						float num716 = (float)Math.Sqrt(num714 * num714 + num715 * num715);
						num716 = num713 / num716;
						num714 *= num716;
						num715 *= num716;
						int num717 = 24;
						int num718 = 258;
						if (Main.netMode != 1)
						{
							int num719 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector90.X, vector90.Y, num714, num715, num718, num717, 0f, Main.myPlayer);
						}
					}
					this.ai[2] += num711;
					if (life < lifeMax / 3)
					{
						this.ai[2] += num711;
					}
					if (life < lifeMax / 4)
					{
						this.ai[2] += num711;
					}
					if (life < lifeMax / 5)
					{
						this.ai[2] += num711;
					}
					if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[2] += 4f;
					}
					if (this.ai[2] > (float)(60 + Main.rand.Next(600)))
					{
						this.ai[2] = 0f;
						int num720 = 28;
						int num721 = 259;
						if (localAI[1] == 0f)
						{
							for (int num722 = 0; num722 < 2; num722++)
							{
								vector90 = new Vector2(base.Center.X, base.Center.Y - 22f * scale);
								if (num722 == 0)
								{
									vector90.X -= 18f * scale;
								}
								else
								{
									vector90.X += 18f * scale;
								}
								float num723 = 11f;
								float num724 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector90.X;
								float num725 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector90.Y;
								float num726 = (float)Math.Sqrt(num724 * num724 + num725 * num725);
								num726 = num723 / num726;
								num724 *= num726;
								num725 *= num726;
								vector90.X += num724 * 3f;
								vector90.Y += num725 * 3f;
								if (Main.netMode != 1)
								{
									int num727 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector90.X, vector90.Y, num724, num725, num721, num720, 0f, Main.myPlayer);
									Main.projectile[num727].timeLeft = 300;
								}
							}
						}
						else if (localAI[1] != 0f)
						{
							vector90 = new Vector2(base.Center.X, base.Center.Y - 22f * scale);
							if (localAI[1] == -1f)
							{
								vector90.X -= 30f * scale;
							}
							else if (localAI[1] == 1f)
							{
								vector90.X += 30f * scale;
							}
							float num728 = 12f;
							float num729 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector90.X;
							float num730 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector90.Y;
							float num731 = (float)Math.Sqrt(num729 * num729 + num730 * num730);
							num731 = num728 / num731;
							num729 *= num731;
							num730 *= num731;
							vector90.X += num729 * 3f;
							vector90.Y += num730 * 3f;
							if (Main.netMode != 1)
							{
								int num732 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector90.X, vector90.Y, num729, num730, num721, num720, 0f, Main.myPlayer);
								Main.projectile[num732].timeLeft = 300;
							}
						}
					}
				}
				if (life < lifeMax / 2)
				{
					this.ai[0] = 1f;
				}
				else
				{
					this.ai[0] = 0f;
				}
			}
			else if (aiStyle == 47)
			{
				AI_047_GolemFist();
			}
			else if (aiStyle == 48)
			{
				bool flag37 = false;
				float num733 = GetMyBalance();
				if (Main.getGoodWorld)
				{
					num733 += 3f;
				}
				if ((!Main.player[target].ZoneLihzhardTemple && !Main.player[target].ZoneJungle) || (double)Main.player[target].Center.Y < Main.worldSurface * 16.0)
				{
					num733 *= 2f;
				}
				if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					noTileCollide = true;
					flag37 = true;
				}
				else if (noTileCollide && Collision.SolidTiles(position, width, height))
				{
					noTileCollide = false;
				}
				if (golemBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					return;
				}
				TargetClosest();
				float num734 = 7f;
				float num735 = 0.05f;
				Vector2 vector91 = new Vector2(base.Center.X, base.Center.Y);
				float num736 = Main.player[target].Center.X - vector91.X;
				float num737 = Main.player[target].Center.Y - vector91.Y - 300f;
				float num738 = (float)Math.Sqrt(num736 * num736 + num737 * num737);
				num738 = num734 / num738;
				num736 *= num738;
				num737 *= num738;
				if (velocity.X < num736)
				{
					velocity.X += num735;
					if (velocity.X < 0f && num736 > 0f)
					{
						velocity.X += num735;
					}
				}
				else if (velocity.X > num736)
				{
					velocity.X -= num735;
					if (velocity.X > 0f && num736 < 0f)
					{
						velocity.X -= num735;
					}
				}
				if (velocity.Y < num737)
				{
					velocity.Y += num735;
					if (velocity.Y < 0f && num737 > 0f)
					{
						velocity.Y += num735;
					}
				}
				else if (velocity.Y > num737)
				{
					velocity.Y -= num735;
					if (velocity.Y > 0f && num737 < 0f)
					{
						velocity.Y -= num735;
					}
				}
				float num739 = (num733 + 4f) / 5f;
				this.ai[1] += num739;
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.8)
				{
					this.ai[1] += num739;
				}
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.6)
				{
					this.ai[1] += num739;
				}
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.2)
				{
					this.ai[1] += num739;
				}
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.1)
				{
					this.ai[1] += num739;
				}
				int num740 = 300;
				if (this.ai[1] < 20f || this.ai[1] > (float)(num740 - 20))
				{
					localAI[0] = 1f;
				}
				else
				{
					localAI[0] = 0f;
				}
				if (flag37)
				{
					this.ai[1] = 20f;
				}
				if (this.ai[1] >= (float)num740)
				{
					TargetClosest();
					this.ai[1] = 0f;
					Vector2 vector92 = new Vector2(base.Center.X, base.Center.Y - 10f * scale);
					float num741 = 8f;
					int num742 = 20;
					int num743 = 258;
					float num744 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector92.X;
					float num745 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector92.Y;
					float num746 = (float)Math.Sqrt(num744 * num744 + num745 * num745);
					num746 = num741 / num746;
					num744 *= num746;
					num745 *= num746;
					if (Main.netMode != 1)
					{
						int num747 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector92.X, vector92.Y, num744, num745, num743, num742, 0f, Main.myPlayer);
					}
				}
				float num748 = num733;
				this.ai[2] += num748;
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax / 1.25)
				{
					this.ai[2] += num748;
				}
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax / 1.5)
				{
					this.ai[2] += num748;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 2)
				{
					this.ai[2] += num748;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 3)
				{
					this.ai[2] += num748;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 4)
				{
					this.ai[2] += num748;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 5)
				{
					this.ai[2] += num748;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 6)
				{
					this.ai[2] += num748;
				}
				bool flag38 = false;
				if (!Collision.CanHit(Main.npc[golemBoss].Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					flag38 = true;
				}
				if (flag38)
				{
					this.ai[2] += num748 * 10f;
				}
				if (this.ai[2] > (float)(100 + Main.rand.Next(4800)))
				{
					this.ai[2] = 0f;
					for (int num749 = 0; num749 < 2; num749++)
					{
						Vector2 vector93 = new Vector2(base.Center.X, base.Center.Y - 50f * scale);
						switch (num749)
						{
						case 0:
							vector93.X -= 14f * scale;
							break;
						case 1:
							vector93.X += 14f * scale;
							break;
						}
						float num750 = 11f;
						int num751 = 24;
						int num752 = 259;
						if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.5)
						{
							num751++;
							num750 += 0.25f;
						}
						if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.4)
						{
							num751++;
							num750 += 0.25f;
						}
						if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.3)
						{
							num751++;
							num750 += 0.25f;
						}
						if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.2)
						{
							num751++;
							num750 += 0.25f;
						}
						if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.1)
						{
							num751++;
							num750 += 0.25f;
						}
						float num753 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f;
						float num754 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f;
						if (flag38)
						{
							num751 = (int)((double)num751 * 1.5);
							num750 *= 2.5f;
							num753 += Main.player[target].velocity.X * Main.rand.NextFloat() * 50f;
							num754 += Main.player[target].velocity.Y * Main.rand.NextFloat() * 50f;
						}
						num753 -= vector93.X;
						num754 -= vector93.Y;
						float num755 = (float)Math.Sqrt(num753 * num753 + num754 * num754);
						num755 = num750 / num755;
						num753 *= num755;
						num754 *= num755;
						vector93.X += num753 * 3f;
						vector93.Y += num754 * 3f;
						if (Main.netMode != 1)
						{
							int num756 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector93.X, vector93.Y, num753, num754, 259, num751, 0f, Main.myPlayer);
							Main.projectile[num756].timeLeft = 300;
						}
					}
				}
				if (!Main.getGoodWorld)
				{
					position += netOffset;
					int num757 = Main.rand.Next(2) * 2 - 1;
					Vector2 vector94 = base.Bottom + new Vector2((float)(num757 * 22) * scale, -22f * scale);
					Dust dust5 = Dust.NewDustPerfect(vector94, 228, (MathF.PI / 2f + -MathF.PI / 2f * (float)num757 + Main.rand.NextFloatDirection() * (MathF.PI / 4f)).ToRotationVector2() * (2f + Main.rand.NextFloat()));
					Dust dust = dust5;
					dust.velocity += velocity;
					dust5.noGravity = true;
					dust5 = Dust.NewDustPerfect(base.Bottom + new Vector2(Main.rand.NextFloatDirection() * 6f * scale, (Main.rand.NextFloat() * -4f - 8f) * scale), 228, Vector2.UnitY * (2f + Main.rand.NextFloat()));
					dust5.fadeIn = 0f;
					dust5.scale = 0.7f + Main.rand.NextFloat() * 0.5f;
					dust5.noGravity = true;
					dust = dust5;
					dust.velocity += velocity;
					position -= netOffset;
				}
			}
			else if (aiStyle == 49)
			{
				noGravity = true;
				TargetClosest();
				float num758 = 4f;
				float num759 = 0.25f;
				Vector2 vector95 = new Vector2(base.Center.X, base.Center.Y);
				float num760 = Main.player[target].Center.X - vector95.X;
				float num761 = Main.player[target].Center.Y - vector95.Y - 200f;
				float num762 = (float)Math.Sqrt(num760 * num760 + num761 * num761);
				if (num762 < 20f)
				{
					num760 = velocity.X;
					num761 = velocity.Y;
				}
				else
				{
					num762 = num758 / num762;
					num760 *= num762;
					num761 *= num762;
				}
				if (velocity.X < num760)
				{
					velocity.X += num759;
					if (velocity.X < 0f && num760 > 0f)
					{
						velocity.X += num759 * 2f;
					}
				}
				else if (velocity.X > num760)
				{
					velocity.X -= num759;
					if (velocity.X > 0f && num760 < 0f)
					{
						velocity.X -= num759 * 2f;
					}
				}
				if (velocity.Y < num761)
				{
					velocity.Y += num759;
					if (velocity.Y < 0f && num761 > 0f)
					{
						velocity.Y += num759 * 2f;
					}
				}
				else if (velocity.Y > num761)
				{
					velocity.Y -= num759;
					if (velocity.Y > 0f && num761 < 0f)
					{
						velocity.Y -= num759 * 2f;
					}
				}
				if (position.X + (float)width > Main.player[target].position.X && position.X < Main.player[target].position.X + (float)Main.player[target].width && position.Y + (float)height < Main.player[target].position.Y && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && Main.netMode != 1)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 8f)
					{
						this.ai[0] = 0f;
						int num763 = (int)(position.X + 10f + (float)Main.rand.Next(width - 20));
						int num764 = (int)(position.Y + (float)height + 4f);
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), num763, num764, 0f, 5f, 264, 20, 0f, Main.myPlayer);
					}
				}
			}
			else if (aiStyle == 50)
			{
				EncourageDespawn(5);
				if (type == 261)
				{
					noTileCollide = false;
					if (collideX || collideY)
					{
						life = 0;
						HitEffect(0, 100.0);
						checkDead();
						return;
					}
				}
				else
				{
					noTileCollide = true;
				}
				velocity.Y += 0.02f;
				TargetClosest();
				if (velocity.Y < 0f && Main.player[target].position.Y > position.Y + 100f)
				{
					velocity.Y *= 0.95f;
				}
				if (velocity.Y > 1f)
				{
					velocity.Y = 1f;
				}
				if (position.X + (float)width < Main.player[target].position.X)
				{
					if (velocity.X < 0f)
					{
						velocity.X *= 0.98f;
					}
					if (Main.expertMode && velocity.X < 0f)
					{
						velocity.X *= 0.98f;
					}
					velocity.X += 0.1f;
					if (Main.expertMode)
					{
						velocity.X += 0.1f;
					}
				}
				else if (position.X > Main.player[target].position.X + (float)Main.player[target].width)
				{
					if (velocity.X > 0f)
					{
						velocity.X *= 0.98f;
					}
					if (Main.expertMode && velocity.X > 0f)
					{
						velocity.X *= 0.98f;
					}
					velocity.X -= 0.1f;
					if (Main.expertMode)
					{
						velocity.X -= 0.1f;
					}
				}
				if (velocity.X > 5f || velocity.X < -5f)
				{
					velocity.X *= 0.97f;
				}
				rotation = velocity.X * 0.2f;
			}
			else if (aiStyle == 51)
			{
				bool flag39 = false;
				bool flag40 = false;
				TargetClosest();
				if (Main.player[target].dead)
				{
					flag40 = true;
					flag39 = true;
				}
				else if (Main.netMode != 1 && target >= 0 && target < 255)
				{
					int num765 = 4800;
					if (timeLeft < activeTime && Vector2.Distance(base.Center, Main.player[target].Center) < (float)num765)
					{
						timeLeft = activeTime;
					}
				}
				plantBoss = whoAmI;
				if (localAI[0] == 0f && Main.netMode != 1)
				{
					localAI[0] = 1f;
					int num766 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 263, whoAmI);
					num766 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 263, whoAmI);
					num766 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 263, whoAmI);
				}
				int[] array2 = new int[3];
				float num767 = 0f;
				float num768 = 0f;
				int num769 = 0;
				for (int num770 = 0; num770 < 200; num770++)
				{
					if (Main.npc[num770].active && Main.npc[num770].aiStyle == 52)
					{
						num767 += Main.npc[num770].Center.X;
						num768 += Main.npc[num770].Center.Y;
						array2[num769] = num770;
						num769++;
						if (num769 > 2)
						{
							break;
						}
					}
				}
				num767 /= (float)num769;
				num768 /= (float)num769;
				float num771 = 2.5f;
				float num772 = 0.025f;
				if (life < lifeMax / 2)
				{
					num771 = 5f;
					num772 = 0.05f;
				}
				if (life < lifeMax / 4)
				{
					num771 = 7f;
				}
				if (!Main.player[target].ZoneJungle || (double)Main.player[target].position.Y < Main.worldSurface * 16.0 || Main.player[target].position.Y > (float)(Main.UnderworldLayer * 16))
				{
					flag39 = true;
					num771 += 8f;
					num772 = 0.15f;
				}
				if (Main.expertMode)
				{
					num771 += 1f;
					num771 *= 1.1f;
					num772 += 0.01f;
					num772 *= 1.1f;
				}
				if (Main.getGoodWorld)
				{
					num771 *= 1.15f;
					num772 *= 1.15f;
				}
				Vector2 vector96 = new Vector2(num767, num768);
				float num773 = Main.player[target].Center.X - vector96.X;
				float num774 = Main.player[target].Center.Y - vector96.Y;
				if (flag40)
				{
					num774 *= -1f;
					num773 *= -1f;
					num771 += 8f;
				}
				float num775 = (float)Math.Sqrt(num773 * num773 + num774 * num774);
				int num776 = 500;
				if (flag39)
				{
					num776 += 350;
				}
				if (Main.expertMode)
				{
					num776 += 150;
				}
				if (num775 >= (float)num776)
				{
					num775 = (float)num776 / num775;
					num773 *= num775;
					num774 *= num775;
				}
				num767 += num773;
				num768 += num774;
				vector96 = new Vector2(base.Center.X, base.Center.Y);
				num773 = num767 - vector96.X;
				num774 = num768 - vector96.Y;
				num775 = (float)Math.Sqrt(num773 * num773 + num774 * num774);
				if (num775 < num771)
				{
					num773 = velocity.X;
					num774 = velocity.Y;
				}
				else
				{
					num775 = num771 / num775;
					num773 *= num775;
					num774 *= num775;
				}
				if (velocity.X < num773)
				{
					velocity.X += num772;
					if (velocity.X < 0f && num773 > 0f)
					{
						velocity.X += num772 * 2f;
					}
				}
				else if (velocity.X > num773)
				{
					velocity.X -= num772;
					if (velocity.X > 0f && num773 < 0f)
					{
						velocity.X -= num772 * 2f;
					}
				}
				if (velocity.Y < num774)
				{
					velocity.Y += num772;
					if (velocity.Y < 0f && num774 > 0f)
					{
						velocity.Y += num772 * 2f;
					}
				}
				else if (velocity.Y > num774)
				{
					velocity.Y -= num772;
					if (velocity.Y > 0f && num774 < 0f)
					{
						velocity.Y -= num772 * 2f;
					}
				}
				Vector2 vector97 = new Vector2(base.Center.X, base.Center.Y);
				float num777 = Main.player[target].Center.X - vector97.X;
				float num778 = Main.player[target].Center.Y - vector97.Y;
				rotation = (float)Math.Atan2(num778, num777) + 1.57f;
				if (life > lifeMax / 2)
				{
					defense = 36;
					int num779 = 50;
					if (flag39)
					{
						defense *= 2;
						num779 *= 2;
					}
					damage = GetAttackDamage_ScaledByStrength(num779);
					if (Main.netMode == 1)
					{
						return;
					}
					localAI[1] += 1f;
					if ((double)life < (double)lifeMax * 0.9)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.8)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.7)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.6)
					{
						localAI[1] += 1f;
					}
					if (flag39)
					{
						localAI[1] += 3f;
					}
					if (Main.expertMode)
					{
						localAI[1] += 1f;
					}
					if (Main.expertMode && justHit && Main.rand.Next(2) == 0)
					{
						localAI[3] = 1f;
					}
					if (Main.getGoodWorld)
					{
						localAI[1] += 1f;
					}
					if (!(localAI[1] > 80f))
					{
						return;
					}
					localAI[1] = 0f;
					bool flag41 = Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
					if (localAI[3] > 0f)
					{
						flag41 = true;
						localAI[3] = 0f;
					}
					if (flag41)
					{
						Vector2 vector98 = new Vector2(base.Center.X, base.Center.Y);
						float num780 = 15f;
						if (Main.expertMode)
						{
							num780 = 17f;
						}
						float num781 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector98.X;
						float num782 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector98.Y;
						float num783 = (float)Math.Sqrt(num781 * num781 + num782 * num782);
						num783 = num780 / num783;
						num781 *= num783;
						num782 *= num783;
						int num784 = 22;
						int num785 = 275;
						int maxValue2 = 4;
						int maxValue3 = 8;
						if (Main.expertMode)
						{
							maxValue2 = 2;
							maxValue3 = 6;
						}
						if ((double)life < (double)lifeMax * 0.8 && Main.rand.Next(maxValue2) == 0)
						{
							num784 = 27;
							localAI[1] = -30f;
							num785 = 276;
						}
						else if ((double)life < (double)lifeMax * 0.8 && Main.rand.Next(maxValue3) == 0)
						{
							num784 = 31;
							localAI[1] = -120f;
							num785 = 277;
						}
						if (flag39)
						{
							num784 *= 2;
						}
						num784 = GetAttackDamage_ForProjectiles(num784, (float)num784 * 0.9f);
						vector98.X += num781 * 3f;
						vector98.Y += num782 * 3f;
						int num786 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector98.X, vector98.Y, num781, num782, num785, num784, 0f, Main.myPlayer);
						if (num785 != 277)
						{
							Main.projectile[num786].timeLeft = 300;
						}
					}
					return;
				}
				defense = 10;
				int num787 = 70;
				if (flag39)
				{
					defense *= 4;
					num787 *= 2;
				}
				damage = GetAttackDamage_ScaledByStrength(num787);
				if (Main.netMode != 1)
				{
					if (localAI[0] == 1f)
					{
						localAI[0] = 2f;
						int num788 = 8;
						if (Main.getGoodWorld)
						{
							num788 += 6;
						}
						for (int num789 = 0; num789 < num788; num789++)
						{
							int num790 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 264, whoAmI);
						}
						if (Main.expertMode)
						{
							for (int num791 = 0; num791 < 200; num791++)
							{
								if (Main.npc[num791].active && Main.npc[num791].aiStyle == 52)
								{
									for (int num792 = 0; num792 < num788 / 2 - 1; num792++)
									{
										int num793 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 264, whoAmI);
										Main.npc[num793].ai[3] = num791 + 1;
									}
								}
							}
						}
					}
					else if (Main.expertMode && Main.rand.Next(60) == 0)
					{
						int num794 = 0;
						for (int num795 = 0; num795 < 200; num795++)
						{
							if (Main.npc[num795].active && Main.npc[num795].type == 264 && Main.npc[num795].ai[3] == 0f)
							{
								num794++;
							}
						}
						if (num794 < 8 && Main.rand.Next((num794 + 1) * 10) <= 1)
						{
							int num796 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 264, whoAmI);
						}
					}
				}
				if (localAI[2] == 0f)
				{
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 378, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 379, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 380, scale);
					localAI[2] = 1f;
				}
				if (Main.netMode == 1)
				{
					return;
				}
				localAI[1] += 1f;
				if ((double)life < (double)lifeMax * 0.4)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.3)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.2)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.1)
				{
					localAI[1] += 1f;
				}
				if (localAI[1] >= 350f)
				{
					float num797 = 8f;
					Vector2 vector99 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num798 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector99.X + (float)Main.rand.Next(-10, 11);
					float num799 = Math.Abs(num798 * 0.2f);
					float num800 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector99.Y + (float)Main.rand.Next(-10, 11);
					if (num800 > 0f)
					{
						num799 = 0f;
					}
					num800 -= num799;
					float num801 = (float)Math.Sqrt(num798 * num798 + num800 * num800);
					num801 = num797 / num801;
					num798 *= num801;
					num800 *= num801;
					int num802 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 265);
					Main.npc[num802].velocity.X = num798;
					Main.npc[num802].velocity.Y = num800;
					Main.npc[num802].netUpdate = true;
					localAI[1] = 0f;
				}
			}
			else if (aiStyle == 52)
			{
				bool flag42 = false;
				bool flag43 = false;
				if (plantBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					netUpdate = true;
					return;
				}
				if (Main.player[Main.npc[plantBoss].target].dead)
				{
					flag43 = true;
				}
				if ((plantBoss != -1 && !Main.player[Main.npc[plantBoss].target].ZoneJungle) || (double)Main.player[Main.npc[plantBoss].target].position.Y < Main.worldSurface * 16.0 || Main.player[Main.npc[plantBoss].target].position.Y > (float)(Main.UnderworldLayer * 16) || flag43)
				{
					localAI[0] -= 4f;
					flag42 = true;
				}
				if (Main.netMode == 1)
				{
					if (this.ai[0] == 0f)
					{
						this.ai[0] = (int)(base.Center.X / 16f);
					}
					if (this.ai[1] == 0f)
					{
						this.ai[1] = (int)(base.Center.X / 16f);
					}
				}
				if (Main.netMode != 1)
				{
					if (this.ai[0] == 0f || this.ai[1] == 0f)
					{
						localAI[0] = 0f;
					}
					localAI[0] -= 1f;
					if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
					{
						localAI[0] -= 2f;
					}
					if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 4)
					{
						localAI[0] -= 2f;
					}
					if (flag42)
					{
						localAI[0] -= 6f;
					}
					if (!flag43 && localAI[0] <= 0f && this.ai[0] != 0f)
					{
						for (int num803 = 0; num803 < 200; num803++)
						{
							if (num803 != whoAmI && Main.npc[num803].active && Main.npc[num803].type == type && (Main.npc[num803].velocity.X != 0f || Main.npc[num803].velocity.Y != 0f))
							{
								localAI[0] = Main.rand.Next(60, 300);
							}
						}
					}
					if (localAI[0] <= 0f)
					{
						localAI[0] = Main.rand.Next(300, 600);
						bool flag44 = false;
						int num804 = 0;
						while (!flag44 && num804 <= 1000)
						{
							num804++;
							int num805 = (int)(Main.player[Main.npc[plantBoss].target].Center.X / 16f);
							int num806 = (int)(Main.player[Main.npc[plantBoss].target].Center.Y / 16f);
							if (this.ai[0] == 0f)
							{
								num805 = (int)((Main.player[Main.npc[plantBoss].target].Center.X + Main.npc[plantBoss].Center.X) / 32f);
								num806 = (int)((Main.player[Main.npc[plantBoss].target].Center.Y + Main.npc[plantBoss].Center.Y) / 32f);
							}
							if (flag43)
							{
								num805 = (int)Main.npc[plantBoss].position.X / 16;
								num806 = (int)(Main.npc[plantBoss].position.Y + 400f) / 16;
							}
							int num807 = 20;
							num807 += (int)(100f * ((float)num804 / 1000f));
							int num808 = num805 + Main.rand.Next(-num807, num807 + 1);
							int num809 = num806 + Main.rand.Next(-num807, num807 + 1);
							if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2 && Main.rand.Next(6) == 0)
							{
								TargetClosest();
								int num810 = (int)(Main.player[target].Center.X / 16f);
								int num811 = (int)(Main.player[target].Center.Y / 16f);
								if (Main.tile[num810, num811].wall > 0)
								{
									num808 = num810;
									num809 = num811;
								}
							}
							try
							{
								if (WorldGen.InWorld(num808, num809) && (WorldGen.SolidTile(num808, num809) || (Main.tile[num808, num809].wall > 0 && (num804 > 500 || Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2))))
								{
									flag44 = true;
									this.ai[0] = num808;
									this.ai[1] = num809;
									netUpdate = true;
								}
							}
							catch
							{
							}
						}
					}
				}
				if (!(this.ai[0] > 0f) || !(this.ai[1] > 0f))
				{
					return;
				}
				float num812 = 6f;
				if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
				{
					num812 = 8f;
				}
				if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 4)
				{
					num812 = 10f;
				}
				if (Main.expertMode)
				{
					num812 += 1f;
				}
				if (Main.expertMode && Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
				{
					num812 += 1f;
				}
				if (flag42)
				{
					num812 *= 2f;
				}
				if (flag43)
				{
					num812 *= 2f;
				}
				Vector2 vector100 = new Vector2(base.Center.X, base.Center.Y);
				float num813 = this.ai[0] * 16f - 8f - vector100.X;
				float num814 = this.ai[1] * 16f - 8f - vector100.Y;
				float num815 = (float)Math.Sqrt(num813 * num813 + num814 * num814);
				if (num815 < 12f + num812)
				{
					if (Main.netMode != 1 && Main.getGoodWorld && localAI[3] == 1f)
					{
						localAI[3] = 0f;
						WorldGen.SpawnPlanteraThorns(base.Center);
					}
					velocity.X = num813;
					velocity.Y = num814;
				}
				else
				{
					if (Main.netMode != 1 && Main.getGoodWorld)
					{
						localAI[3] = 1f;
					}
					num815 = num812 / num815;
					velocity.X = num813 * num815;
					velocity.Y = num814 * num815;
				}
				Vector2 vector101 = new Vector2(base.Center.X, base.Center.Y);
				float num816 = Main.npc[plantBoss].Center.X - vector101.X;
				float num817 = Main.npc[plantBoss].Center.Y - vector101.Y;
				rotation = (float)Math.Atan2(num817, num816) - 1.57f;
			}
			else if (aiStyle == 53)
			{
				if (Main.getGoodWorld)
				{
					if (Main.rand.Next(10) == 0)
					{
						reflectsProjectiles = true;
					}
					else
					{
						reflectsProjectiles = false;
					}
				}
				if (plantBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					netUpdate = true;
					return;
				}
				int num818 = plantBoss;
				if (this.ai[3] > 0f)
				{
					num818 = (int)this.ai[3] - 1;
				}
				if (Main.netMode != 1)
				{
					localAI[0] -= 1f;
					if (localAI[0] <= 0f)
					{
						localAI[0] = Main.rand.Next(120, 480);
						this.ai[0] = Main.rand.Next(-100, 101);
						this.ai[1] = Main.rand.Next(-100, 101);
						netUpdate = true;
					}
				}
				TargetClosest();
				float num819 = 0.2f;
				float num820 = 200f;
				if ((double)Main.npc[plantBoss].life < (double)Main.npc[plantBoss].lifeMax * 0.25)
				{
					num820 += 100f;
				}
				if ((double)Main.npc[plantBoss].life < (double)Main.npc[plantBoss].lifeMax * 0.1)
				{
					num820 += 100f;
				}
				if (Main.expertMode)
				{
					float num821 = 1f - (float)life / (float)lifeMax;
					num820 += num821 * 300f;
					num819 += 0.3f;
				}
				if (Main.getGoodWorld)
				{
					num819 += 4f;
				}
				if (!Main.npc[num818].active || plantBoss < 0)
				{
					active = false;
					return;
				}
				float num822 = Main.npc[num818].position.X + (float)(Main.npc[num818].width / 2);
				float num823 = Main.npc[num818].position.Y + (float)(Main.npc[num818].height / 2);
				Vector2 vector102 = new Vector2(num822, num823);
				float num824 = num822 + this.ai[0];
				float num825 = num823 + this.ai[1];
				float num826 = num824 - vector102.X;
				float num827 = num825 - vector102.Y;
				float num828 = (float)Math.Sqrt(num826 * num826 + num827 * num827);
				num828 = num820 / num828;
				num826 *= num828;
				num827 *= num828;
				if (position.X < num822 + num826)
				{
					velocity.X += num819;
					if (velocity.X < 0f && num826 > 0f)
					{
						velocity.X *= 0.9f;
					}
				}
				else if (position.X > num822 + num826)
				{
					velocity.X -= num819;
					if (velocity.X > 0f && num826 < 0f)
					{
						velocity.X *= 0.9f;
					}
				}
				if (position.Y < num823 + num827)
				{
					velocity.Y += num819;
					if (velocity.Y < 0f && num827 > 0f)
					{
						velocity.Y *= 0.9f;
					}
				}
				else if (position.Y > num823 + num827)
				{
					velocity.Y -= num819;
					if (velocity.Y > 0f && num827 < 0f)
					{
						velocity.Y *= 0.9f;
					}
				}
				if (velocity.X > 8f)
				{
					velocity.X = 8f;
				}
				if (velocity.X < -8f)
				{
					velocity.X = -8f;
				}
				if (velocity.Y > 8f)
				{
					velocity.Y = 8f;
				}
				if (velocity.Y < -8f)
				{
					velocity.Y = -8f;
				}
				if (num826 > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num827, num826);
				}
				if (num826 < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num827, num826) + 3.14f;
				}
			}
			else if (aiStyle == 54)
			{
				crimsonBoss = whoAmI;
				if (Main.netMode != 1 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					int brainOfCthuluCreepersCount = GetBrainOfCthuluCreepersCount();
					for (int num829 = 0; num829 < brainOfCthuluCreepersCount; num829++)
					{
						float x2 = base.Center.X;
						float y4 = base.Center.Y;
						x2 += (float)Main.rand.Next(-width, width);
						y4 += (float)Main.rand.Next(-height, height);
						int num830 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)x2, (int)y4, 267);
						Main.npc[num830].velocity = new Vector2((float)Main.rand.Next(-30, 31) * 0.1f, (float)Main.rand.Next(-30, 31) * 0.1f);
						Main.npc[num830].netUpdate = true;
					}
				}
				if (Main.netMode != 1)
				{
					TargetClosest();
					int num831 = 6000;
					if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num831)
					{
						active = false;
						life = 0;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(23, -1, -1, null, whoAmI);
						}
					}
				}
				if (this.ai[0] < 0f)
				{
					if (Main.getGoodWorld)
					{
						brainOfGravity = whoAmI;
					}
					if (localAI[2] == 0f)
					{
						SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
						localAI[2] = 1f;
						Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 392);
						Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 393);
						Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 394);
						Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 395);
						for (int num832 = 0; num832 < 20; num832++)
						{
							Dust.NewDust(position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
						}
						SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
					}
					dontTakeDamage = false;
					TargetClosest();
					Vector2 vector103 = new Vector2(base.Center.X, base.Center.Y);
					float num833 = Main.player[target].Center.X - vector103.X;
					float num834 = Main.player[target].Center.Y - vector103.Y;
					float num835 = (float)Math.Sqrt(num833 * num833 + num834 * num834);
					float num836 = 8f;
					num835 = num836 / num835;
					num833 *= num835;
					num834 *= num835;
					velocity.X = (velocity.X * 50f + num833) / 51f;
					velocity.Y = (velocity.Y * 50f + num834) / 51f;
					if (this.ai[0] == -1f)
					{
						if (Main.netMode != 1)
						{
							localAI[1] += 1f;
							if (justHit)
							{
								localAI[1] -= Main.rand.Next(5);
							}
							int num837 = 60 + Main.rand.Next(120);
							if (Main.netMode != 0)
							{
								num837 += Main.rand.Next(30, 90);
							}
							if (localAI[1] >= (float)num837)
							{
								localAI[1] = 0f;
								TargetClosest();
								int num838 = 0;
								do
								{
									num838++;
									int num839 = (int)Main.player[target].Center.X / 16;
									int num840 = (int)Main.player[target].Center.Y / 16;
									int minValue = 7;
									int num841 = 12;
									int num842 = Main.rand.Next(minValue, num841 + 1);
									int num843 = Main.rand.Next(minValue, num841 + 1);
									if (Main.rand.Next(2) == 0)
									{
										num842 *= -1;
									}
									if (Main.rand.Next(2) == 0)
									{
										num843 *= -1;
									}
									num839 += num842;
									num840 += num843;
									if (num838 > 100 || !WorldGen.SolidTile(num839, num840))
									{
										this.ai[3] = 0f;
										this.ai[0] = -2f;
										this.ai[1] = num839;
										this.ai[2] = num840;
										netUpdate = true;
										netSpam = 0;
										break;
									}
								}
								while (num838 <= 100);
							}
						}
					}
					else if (this.ai[0] == -2f)
					{
						velocity *= 0.9f;
						if (Main.netMode != 0)
						{
							this.ai[3] += 15f;
						}
						else
						{
							this.ai[3] += 25f;
						}
						if (this.ai[3] >= 255f)
						{
							this.ai[3] = 255f;
							position.X = this.ai[1] * 16f - (float)(width / 2);
							position.Y = this.ai[2] * 16f - (float)(height / 2);
							SoundEngine.PlaySound(SoundID.Item8, base.Center);
							this.ai[0] = -3f;
							netUpdate = true;
							netSpam = 0;
						}
						alpha = (int)this.ai[3];
					}
					else if (this.ai[0] == -3f)
					{
						if (Main.netMode != 0)
						{
							this.ai[3] -= 15f;
						}
						else
						{
							this.ai[3] -= 25f;
						}
						if (this.ai[3] <= 0f)
						{
							this.ai[3] = 0f;
							this.ai[0] = -1f;
							netUpdate = true;
							netSpam = 0;
						}
						alpha = (int)this.ai[3];
					}
				}
				else
				{
					TargetClosest();
					Vector2 vector104 = new Vector2(base.Center.X, base.Center.Y);
					float num844 = Main.player[target].Center.X - vector104.X;
					float num845 = Main.player[target].Center.Y - vector104.Y;
					float num846 = (float)Math.Sqrt(num844 * num844 + num845 * num845);
					float num847 = 1f;
					if (Main.getGoodWorld)
					{
						num847 *= 3f;
					}
					if (num846 < num847)
					{
						velocity.X = num844;
						velocity.Y = num845;
					}
					else
					{
						num846 = num847 / num846;
						velocity.X = num844 * num846;
						velocity.Y = num845 * num846;
					}
					if (this.ai[0] == 0f)
					{
						if (Main.netMode != 1)
						{
							int num848 = 0;
							for (int num849 = 0; num849 < 200; num849++)
							{
								if (Main.npc[num849].active && Main.npc[num849].type == 267)
								{
									num848++;
								}
							}
							if (num848 == 0)
							{
								this.ai[0] = -1f;
								localAI[1] = 0f;
								alpha = 0;
								netUpdate = true;
							}
							localAI[1] += 1f;
							if (localAI[1] >= (float)(120 + Main.rand.Next(300)))
							{
								localAI[1] = 0f;
								TargetClosest();
								int num850 = 0;
								do
								{
									num850++;
									int num851 = (int)Main.player[target].Center.X / 16;
									int num852 = (int)Main.player[target].Center.Y / 16;
									int minValue2 = 7;
									int num853 = 50;
									int num854 = Main.rand.Next(minValue2, num853 + 1);
									int num855 = Main.rand.Next(minValue2, num853 + 1);
									if (Main.rand.Next(2) == 0)
									{
										num854 *= -1;
									}
									if (Main.rand.Next(2) == 0)
									{
										num855 *= -1;
									}
									num851 += num854;
									num852 += num855;
									if (num850 > 100 || (!WorldGen.SolidTile(num851, num852) && (num850 > 75 || Collision.CanHit(new Vector2(num851 * 16, num852 * 16), 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))))
									{
										this.ai[0] = 1f;
										this.ai[1] = num851;
										this.ai[2] = num852;
										netUpdate = true;
										break;
									}
								}
								while (num850 <= 100);
							}
						}
					}
					else if (this.ai[0] == 1f)
					{
						alpha += 5;
						if (alpha >= 255)
						{
							SoundEngine.PlaySound(SoundID.Item8, base.Center);
							alpha = 255;
							position.X = this.ai[1] * 16f - (float)(width / 2);
							position.Y = this.ai[2] * 16f - (float)(height / 2);
							this.ai[0] = 2f;
						}
					}
					else if (this.ai[0] == 2f)
					{
						alpha -= 5;
						if (alpha <= 0)
						{
							alpha = 0;
							this.ai[0] = 0f;
						}
					}
				}
				if (Main.player[target].dead || !Main.player[target].ZoneCrimson)
				{
					if (localAI[3] < 120f)
					{
						localAI[3]++;
					}
					if (localAI[3] > 60f)
					{
						velocity.Y += (localAI[3] - 60f) * 0.25f;
					}
					this.ai[0] = 2f;
					alpha = 10;
				}
				else if (localAI[3] > 0f)
				{
					localAI[3]--;
				}
			}
			else if (aiStyle == 55)
			{
				if (crimsonBoss < 0)
				{
					active = false;
					netUpdate = true;
					return;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1] = 0f;
					Vector2 vector105 = new Vector2(base.Center.X, base.Center.Y);
					float num856 = Main.npc[crimsonBoss].Center.X - vector105.X;
					float num857 = Main.npc[crimsonBoss].Center.Y - vector105.Y;
					float num858 = (float)Math.Sqrt(num856 * num856 + num857 * num857);
					if (num858 > 90f)
					{
						num858 = 8f / num858;
						num856 *= num858;
						num857 *= num858;
						velocity.X = (velocity.X * 15f + num856) / 16f;
						velocity.Y = (velocity.Y * 15f + num857) / 16f;
						return;
					}
					if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 8f)
					{
						velocity.Y *= 1.05f;
						velocity.X *= 1.05f;
					}
					if (Main.netMode != 1 && ((Main.expertMode && Main.rand.Next(100) == 0) || Main.rand.Next(200) == 0))
					{
						TargetClosest();
						vector105 = new Vector2(base.Center.X, base.Center.Y);
						num856 = Main.player[target].Center.X - vector105.X;
						num857 = Main.player[target].Center.Y - vector105.Y;
						num858 = (float)Math.Sqrt(num856 * num856 + num857 * num857);
						num858 = 8f / num858;
						velocity.X = num856 * num858;
						velocity.Y = num857 * num858;
						this.ai[0] = 1f;
						netUpdate = true;
					}
					return;
				}
				if (Main.expertMode)
				{
					Vector2 vector106 = Main.player[target].Center - base.Center;
					vector106.Normalize();
					if (Main.getGoodWorld)
					{
						vector106 *= 12f;
						velocity = (velocity * 49f + vector106) / 50f;
					}
					else
					{
						vector106 *= 9f;
						velocity = (velocity * 99f + vector106) / 100f;
					}
				}
				Vector2 vector107 = new Vector2(base.Center.X, base.Center.Y);
				float num859 = Main.npc[crimsonBoss].Center.X - vector107.X;
				float num860 = Main.npc[crimsonBoss].Center.Y - vector107.Y;
				float num861 = (float)Math.Sqrt(num859 * num859 + num860 * num860);
				if (num861 > 700f)
				{
					this.ai[0] = 0f;
				}
				else
				{
					if (!justHit)
					{
						return;
					}
					if (knockBackResist == 0f)
					{
						this.ai[1] += 1f;
						if (this.ai[1] > 5f)
						{
							this.ai[0] = 0f;
						}
					}
					else
					{
						this.ai[0] = 0f;
					}
				}
			}
			else if (aiStyle == 56)
			{
				TargetClosest();
				Vector2 vector108 = new Vector2(base.Center.X, base.Center.Y);
				float num862 = Main.player[target].Center.X - vector108.X;
				float num863 = Main.player[target].Center.Y - vector108.Y;
				float num864 = (float)Math.Sqrt(num862 * num862 + num863 * num863);
				float num865 = 12f;
				num864 = num865 / num864;
				num862 *= num864;
				num863 *= num864;
				velocity.X = (velocity.X * 100f + num862) / 101f;
				velocity.Y = (velocity.Y * 100f + num863) / 101f;
				rotation = (float)Math.Atan2(num863, num862) - 1.57f;
				position += netOffset;
				int num866 = Dust.NewDust(position, width, height, 180);
				Dust dust = Main.dust[num866];
				dust.velocity *= 0.1f;
				Main.dust[num866].scale = 1.3f;
				Main.dust[num866].noGravity = true;
				position -= netOffset;
			}
			else if (aiStyle == 57)
			{
				float num867 = 2f;
				noGravity = true;
				noTileCollide = true;
				if (!Main.dayTime)
				{
					TargetClosest();
				}
				bool flag45 = false;
				if ((double)life < (double)lifeMax * 0.75)
				{
					num867 = 3f;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					num867 = 4f;
				}
				if (type == 344)
				{
					Lighting.AddLight(base.Bottom + new Vector2(0f, -30f), 0.3f, 0.16f, 0.125f);
				}
				if (type == 325)
				{
					Lighting.AddLight(base.Bottom + new Vector2(0f, -30f), 0.3f, 0.125f, 0.06f);
				}
				if (Main.dayTime)
				{
					EncourageDespawn(10);
					num867 = 8f;
				}
				else if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					if ((double)life < (double)lifeMax * 0.5)
					{
						this.ai[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						this.ai[1] += 1f;
					}
					if (this.ai[1] >= 300f && Main.netMode != 1)
					{
						this.ai[1] = 0f;
						if ((double)life < (double)lifeMax * 0.25 && type != 344)
						{
							this.ai[0] = Main.rand.Next(3, 5);
						}
						else
						{
							this.ai[0] = Main.rand.Next(1, 3);
						}
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					if (type == 344)
					{
						if (Main.rand.Next(5) == 0)
						{
							int num868 = Dust.NewDust(position + Main.rand.NextVector2Square(0f, 1f) * base.Size - new Vector2(1f, 2f), 10, 14, 245, 0f, 0f, 254, Color.Transparent, 0.25f);
							Dust dust = Main.dust[num868];
							dust.velocity *= 0.2f;
						}
						flag45 = true;
						this.ai[1] += 1f;
						if (this.ai[1] % 5f == 0f)
						{
							Vector2 vector109 = new Vector2(position.X + 20f + (float)Main.rand.Next(width - 40), position.Y + 20f + (float)Main.rand.Next(height - 40));
							float num869 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector109.X;
							float num870 = Main.player[target].position.Y - vector109.Y;
							num869 += (float)Main.rand.Next(-50, 51);
							num870 += (float)Main.rand.Next(-50, 51);
							num870 -= Math.Abs(num869) * ((float)Main.rand.Next(0, 21) * 0.01f);
							float num871 = (float)Math.Sqrt(num869 * num869 + num870 * num870);
							float num872 = 12.5f;
							num871 = num872 / num871;
							num869 *= num871;
							num870 *= num871;
							num869 *= 1f + (float)Main.rand.Next(-20, 21) * 0.02f;
							num870 *= 1f + (float)Main.rand.Next(-20, 21) * 0.02f;
							int num873 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector109.X, vector109.Y, num869, num870, 345, 43, 0f, Main.myPlayer, Main.rand.Next(0, 31));
						}
						if (this.ai[1] >= 180f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
						}
					}
					else
					{
						flag45 = true;
						this.ai[1] += 1f;
						if (this.ai[1] % 15f == 0f)
						{
							Vector2 vector110 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f + 30f);
							float num874 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector110.X;
							float num875 = Main.player[target].position.Y - vector110.Y;
							float num876 = (float)Math.Sqrt(num874 * num874 + num875 * num875);
							float num877 = 10f;
							num876 = num877 / num876;
							num874 *= num876;
							num875 *= num876;
							num874 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							num875 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							int num878 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector110.X, vector110.Y, num874, num875, 325, 50, 0f, Main.myPlayer);
						}
						if (this.ai[1] >= 120f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					if (type == 344)
					{
						flag45 = true;
						this.ai[1] += 1f;
						if (this.ai[1] > 60f && this.ai[1] < 240f && this.ai[1] % 15f == 0f)
						{
							float num879 = 4.5f;
							Vector2 vector111 = new Vector2(position.X + 20f + (float)Main.rand.Next(width - 40), position.Y + 60f + (float)Main.rand.Next(height - 80));
							float num880 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector111.X;
							float num881 = Main.player[target].position.Y - vector111.Y;
							num881 -= Math.Abs(num880) * 0.3f;
							num879 += Math.Abs(num880) * 0.004f;
							num880 += (float)Main.rand.Next(-50, 51);
							num881 -= (float)Main.rand.Next(50, 201);
							float num882 = (float)Math.Sqrt(num880 * num880 + num881 * num881);
							num882 = num879 / num882;
							num880 *= num882;
							num881 *= num882;
							num880 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num881 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							int num883 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector111.X, vector111.Y, num880, num881, 346, 57, 0f, Main.myPlayer, 0f, Main.rand.Next(2));
						}
						if (this.ai[1] >= 300f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
						}
					}
					else
					{
						flag45 = true;
						this.ai[1] += 1f;
						if (this.ai[1] > 60f && this.ai[1] < 240f && this.ai[1] % 8f == 0f)
						{
							float num884 = 10f;
							Vector2 vector112 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f + 30f);
							float num885 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector112.X;
							float num886 = Main.player[target].position.Y - vector112.Y;
							num886 -= Math.Abs(num885) * 0.3f;
							num884 += Math.Abs(num885) * 0.004f;
							if (num884 > 14f)
							{
								num884 = 14f;
							}
							num885 += (float)Main.rand.Next(-50, 51);
							num886 -= (float)Main.rand.Next(50, 201);
							float num887 = (float)Math.Sqrt(num885 * num885 + num886 * num886);
							num887 = num884 / num887;
							num885 *= num887;
							num886 *= num887;
							num885 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num886 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							int num888 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector112.X, vector112.Y, num885, num886, Main.rand.Next(326, 329), 40, 0f, Main.myPlayer);
						}
						if (this.ai[1] >= 300f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					num867 = 4f;
					this.ai[1] += 1f;
					if (this.ai[1] % 30f == 0f)
					{
						Vector2 vector113 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f + 30f);
						float num889 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector113.X;
						float num890 = Main.player[target].position.Y - vector113.Y;
						float num891 = (float)Math.Sqrt(num889 * num889 + num890 * num890);
						float num892 = 16f;
						num891 = num892 / num891;
						num889 *= num891;
						num890 *= num891;
						num889 *= 1f + (float)Main.rand.Next(-20, 21) * 0.001f;
						num890 *= 1f + (float)Main.rand.Next(-20, 21) * 0.001f;
						int num893 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector113.X, vector113.Y, num889, num890, 325, 75, 0f, Main.myPlayer);
					}
					if (this.ai[1] >= 120f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 4f)
				{
					num867 = 4f;
					this.ai[1] += 1f;
					if (this.ai[1] % 10f == 0f)
					{
						float num894 = 12f;
						Vector2 vector114 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f + 30f);
						float num895 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector114.X;
						float num896 = Main.player[target].position.Y - vector114.Y;
						num896 -= Math.Abs(num895) * 0.2f;
						num894 += Math.Abs(num895) * 0.002f;
						if (num894 > 16f)
						{
							num894 = 16f;
						}
						num895 += (float)Main.rand.Next(-50, 51);
						num896 -= (float)Main.rand.Next(50, 201);
						float num897 = (float)Math.Sqrt(num895 * num895 + num896 * num896);
						num897 = num894 / num897;
						num895 *= num897;
						num896 *= num897;
						num895 *= 1f + (float)Main.rand.Next(-30, 31) * 0.005f;
						num896 *= 1f + (float)Main.rand.Next(-30, 31) * 0.005f;
						int num898 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector114.X, vector114.Y, num895, num896, Main.rand.Next(326, 329), 50, 0f, Main.myPlayer);
					}
					if (this.ai[1] >= 240f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
					}
				}
				if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 50f)
				{
					flag45 = true;
				}
				if (flag45)
				{
					velocity.X *= 0.9f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
				}
				else
				{
					if (direction > 0)
					{
						velocity.X = (velocity.X * 20f + num867) / 21f;
					}
					if (direction < 0)
					{
						velocity.X = (velocity.X * 20f - num867) / 21f;
					}
				}
				int num899 = 80;
				int num900 = 20;
				Vector2 vector115 = new Vector2(base.Center.X - (float)(num899 / 2), position.Y + (float)height - (float)num900);
				bool flag46 = false;
				if (position.X < Main.player[target].position.X && position.X + (float)width > Main.player[target].position.X + (float)Main.player[target].width && position.Y + (float)height < Main.player[target].position.Y + (float)Main.player[target].height - 16f)
				{
					flag46 = true;
				}
				if (flag46)
				{
					velocity.Y += 0.5f;
				}
				else if (Collision.SolidCollision(vector115, num899, num900))
				{
					if (velocity.Y > 0f)
					{
						velocity.Y = 0f;
					}
					if ((double)velocity.Y > -0.2)
					{
						velocity.Y -= 0.025f;
					}
					else
					{
						velocity.Y -= 0.2f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				else
				{
					if (velocity.Y < 0f)
					{
						velocity.Y = 0f;
					}
					if ((double)velocity.Y < 0.1)
					{
						velocity.Y += 0.025f;
					}
					else
					{
						velocity.Y += 0.5f;
					}
				}
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (aiStyle == 58)
			{
				localAI[0] += 1f;
				if (localAI[0] > 6f)
				{
					localAI[0] = 0f;
					localAI[1] += 1f;
					if (localAI[1] > 4f)
					{
						localAI[1] = 0f;
					}
				}
				if (type == 327)
				{
					Lighting.AddLight(base.Center, 0.4f, 0.4f, 0.2f);
				}
				if (Main.netMode != 1)
				{
					localAI[2] += 1f;
					if (localAI[2] > 300f)
					{
						this.ai[3] = Main.rand.Next(3);
						localAI[2] = 0f;
					}
					else if (this.ai[3] == 0f && localAI[2] % 30f == 0f && localAI[2] > 30f)
					{
						float num901 = 5f;
						Vector2 vector116 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f + 30f);
						if (!WorldGen.SolidTile((int)vector116.X / 16, (int)vector116.Y / 16))
						{
							float num902 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector116.X;
							float num903 = Main.player[target].position.Y - vector116.Y;
							num902 += (float)Main.rand.Next(-50, 51);
							num903 += (float)Main.rand.Next(50, 201);
							num903 *= 0.2f;
							float num904 = (float)Math.Sqrt(num902 * num902 + num903 * num903);
							num904 = num901 / num904;
							num902 *= num904;
							num903 *= num904;
							num902 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num903 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							int num905 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector116.X, vector116.Y, num902, num903, Main.rand.Next(326, 329), 40, 0f, Main.myPlayer);
						}
					}
				}
				if (this.ai[0] == 0f && Main.netMode != 1)
				{
					TargetClosest();
					this.ai[0] = 1f;
					int num906 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 328, whoAmI);
					Main.npc[num906].ai[0] = -1f;
					Main.npc[num906].ai[1] = whoAmI;
					Main.npc[num906].target = target;
					Main.npc[num906].netUpdate = true;
					num906 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 328, whoAmI);
					Main.npc[num906].ai[0] = 1f;
					Main.npc[num906].ai[1] = whoAmI;
					Main.npc[num906].ai[3] = 150f;
					Main.npc[num906].target = target;
					Main.npc[num906].netUpdate = true;
				}
				if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 2000f || Math.Abs(position.Y - Main.player[target].position.Y) > 2000f)
				{
					TargetClosest();
					if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 2000f || Math.Abs(position.Y - Main.player[target].position.Y) > 2000f)
					{
						this.ai[1] = 2f;
					}
				}
				if (Main.dayTime)
				{
					velocity.Y += 0.3f;
					velocity.X *= 0.9f;
				}
				else if (this.ai[1] == 0f)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 300f)
					{
						if (this.ai[3] != 1f)
						{
							this.ai[1] = 0f;
							this.ai[2] = 0f;
						}
						else
						{
							this.ai[2] = 0f;
							this.ai[1] = 1f;
							TargetClosest();
							netUpdate = true;
						}
					}
					Vector2 vector117 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num907 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector117.X;
					float num908 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 200f - vector117.Y;
					float num909 = (float)Math.Sqrt(num907 * num907 + num908 * num908);
					float num910 = 6f;
					if (this.ai[3] == 1f)
					{
						if (num909 > 900f)
						{
							num910 = 12f;
						}
						else if (num909 > 600f)
						{
							num910 = 10f;
						}
						else if (num909 > 300f)
						{
							num910 = 8f;
						}
					}
					if (num909 > 50f)
					{
						num909 = num910 / num909;
						velocity.X = (velocity.X * 14f + num907 * num909) / 15f;
						velocity.Y = (velocity.Y * 14f + num908 * num909) / 15f;
					}
				}
				else if (this.ai[1] == 1f)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 600f || this.ai[3] != 1f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 0f;
					}
					Vector2 vector118 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num911 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector118.X;
					float num912 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector118.Y;
					float num913 = (float)Math.Sqrt(num911 * num911 + num912 * num912);
					num913 = 16f / num913;
					velocity.X = (velocity.X * 49f + num911 * num913) / 50f;
					velocity.Y = (velocity.Y * 49f + num912 * num913) / 50f;
				}
				else if (this.ai[1] == 2f)
				{
					this.ai[1] = 3f;
					velocity.Y += 0.1f;
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.95f;
					}
					velocity.X *= 0.95f;
					EncourageDespawn(500);
				}
				rotation = velocity.X * -0.02f;
			}
			else if (aiStyle == 59)
			{
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 58)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (Main.netMode != 1 && Main.npc[(int)this.ai[1]].ai[3] == 2f)
				{
					localAI[1] += 1f;
					if (localAI[1] > 90f)
					{
						localAI[1] = 0f;
						float num914 = 0.01f;
						Vector2 vector119 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f + 30f);
						float num915 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector119.X;
						float num916 = Main.player[target].position.Y - vector119.Y;
						float num917 = (float)Math.Sqrt(num915 * num915 + num916 * num916);
						num917 = num914 / num917;
						num915 *= num917;
						num916 *= num917;
						int num918 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, num915, num916, 329, 60, 0f, Main.myPlayer, rotation, spriteDirection);
					}
				}
				if (Main.dayTime)
				{
					velocity.Y += 0.3f;
					velocity.X *= 0.9f;
				}
				else if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
					{
						EncourageDespawn(10);
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 180f)
					{
						this.ai[2] += 1f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					Vector2 vector120 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num919 = (Main.player[target].Center.X + Main.npc[(int)this.ai[1]].Center.X) / 2f;
					float num920 = (Main.player[target].Center.Y + Main.npc[(int)this.ai[1]].Center.Y) / 2f;
					num919 += -170f * this.ai[0] - vector120.X;
					num920 += 90f - vector120.Y;
					float num921 = Math.Abs(Main.player[target].Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(Main.player[target].Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
					if (num921 > 700f)
					{
						num919 = Main.npc[(int)this.ai[1]].Center.X - 170f * this.ai[0] - vector120.X;
						num920 = Main.npc[(int)this.ai[1]].Center.Y + 90f - vector120.Y;
					}
					float num922 = (float)Math.Sqrt(num919 * num919 + num920 * num920);
					float num923 = 6f;
					if (num922 > 1000f)
					{
						num923 = 21f;
					}
					else if (num922 > 800f)
					{
						num923 = 18f;
					}
					else if (num922 > 600f)
					{
						num923 = 15f;
					}
					else if (num922 > 400f)
					{
						num923 = 12f;
					}
					else if (num922 > 200f)
					{
						num923 = 9f;
					}
					if (this.ai[0] < 0f && base.Center.X > Main.npc[(int)this.ai[1]].Center.X)
					{
						num919 -= 4f;
					}
					if (this.ai[0] > 0f && base.Center.X < Main.npc[(int)this.ai[1]].Center.X)
					{
						num919 += 4f;
					}
					num922 = num923 / num922;
					velocity.X = (velocity.X * 14f + num919 * num922) / 15f;
					velocity.Y = (velocity.Y * 14f + num920 * num922) / 15f;
					num922 = (float)Math.Sqrt(num919 * num919 + num920 * num920);
					if (num922 > 20f)
					{
						rotation = (float)Math.Atan2(num920, num919) + 1.57f;
					}
				}
				else if (this.ai[2] == 1f)
				{
					Vector2 vector121 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num924 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector121.X;
					float num925 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector121.Y;
					float num926 = (float)Math.Sqrt(num924 * num924 + num925 * num925);
					rotation = (float)Math.Atan2(num925, num924) + 1.57f;
					velocity.X *= 0.95f;
					velocity.Y -= 0.3f;
					if (velocity.Y < -14f)
					{
						velocity.Y = -14f;
					}
					if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
					{
						TargetClosest();
						this.ai[2] = 2f;
						vector121 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						num924 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector121.X;
						num925 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector121.Y;
						num926 = (float)Math.Sqrt(num924 * num924 + num925 * num925);
						num926 = 18f / num926;
						velocity.X = num924 * num926;
						velocity.Y = num925 * num926;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 2f)
				{
					float num927 = Math.Abs(base.Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(base.Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
					if (position.Y > Main.player[target].position.Y || velocity.Y < 0f || num927 > 800f)
					{
						this.ai[2] = 3f;
					}
				}
				else if (this.ai[2] == 4f)
				{
					Vector2 vector122 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num928 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector122.X;
					float num929 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector122.Y;
					float num930 = (float)Math.Sqrt(num928 * num928 + num929 * num929);
					rotation = (float)Math.Atan2(num929, num928) + 1.57f;
					velocity.Y *= 0.95f;
					velocity.X += 0.3f * (0f - this.ai[0]);
					if (velocity.X < -14f)
					{
						velocity.X = -14f;
					}
					if (velocity.X > 14f)
					{
						velocity.X = 14f;
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
					{
						TargetClosest();
						this.ai[2] = 5f;
						vector122 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						num928 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector122.X;
						num929 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector122.Y;
						num930 = (float)Math.Sqrt(num928 * num928 + num929 * num929);
						num930 = 17f / num930;
						velocity.X = num928 * num930;
						velocity.Y = num929 * num930;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 5f)
				{
					float num931 = Math.Abs(base.Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(base.Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
					if ((velocity.X > 0f && position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2)) || (velocity.X < 0f && position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2)) || num931 > 800f)
					{
						this.ai[2] = 0f;
					}
				}
			}
			else if (aiStyle == 60)
			{
				if (Main.dayTime)
				{
					if (velocity.X > 0f)
					{
						velocity.X += 0.25f;
					}
					else
					{
						velocity.X -= 0.25f;
					}
					velocity.Y -= 0.1f;
					rotation = velocity.X * 0.05f;
				}
				else if (this.ai[0] == 0f)
				{
					if (this.ai[2] == 0f)
					{
						TargetClosest();
						if (base.Center.X < Main.player[target].Center.X)
						{
							this.ai[2] = 1f;
						}
						else
						{
							this.ai[2] = -1f;
						}
					}
					TargetClosest();
					int num932 = 800;
					float num933 = Math.Abs(base.Center.X - Main.player[target].Center.X);
					if (base.Center.X < Main.player[target].Center.X && this.ai[2] < 0f && num933 > (float)num932)
					{
						this.ai[2] = 0f;
					}
					if (base.Center.X > Main.player[target].Center.X && this.ai[2] > 0f && num933 > (float)num932)
					{
						this.ai[2] = 0f;
					}
					float num934 = 0.45f;
					float num935 = 7f;
					if ((double)life < (double)lifeMax * 0.75)
					{
						num934 = 0.55f;
						num935 = 8f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						num934 = 0.7f;
						num935 = 10f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						num934 = 0.8f;
						num935 = 11f;
					}
					velocity.X += this.ai[2] * num934;
					if (velocity.X > num935)
					{
						velocity.X = num935;
					}
					if (velocity.X < 0f - num935)
					{
						velocity.X = 0f - num935;
					}
					float num936 = Main.player[target].position.Y - (position.Y + (float)height);
					if (num936 < 150f)
					{
						velocity.Y -= 0.2f;
					}
					if (num936 > 200f)
					{
						velocity.Y += 0.2f;
					}
					if (velocity.Y > 8f)
					{
						velocity.Y = 8f;
					}
					if (velocity.Y < -8f)
					{
						velocity.Y = -8f;
					}
					rotation = velocity.X * 0.05f;
					if ((num933 < 500f || this.ai[3] < 0f) && position.Y < Main.player[target].position.Y)
					{
						this.ai[3] += 1f;
						int num937 = 13;
						if ((double)life < (double)lifeMax * 0.75)
						{
							num937 = 12;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							num937 = 11;
						}
						if ((double)life < (double)lifeMax * 0.25)
						{
							num937 = 10;
						}
						num937++;
						if (this.ai[3] > (float)num937)
						{
							this.ai[3] = -num937;
						}
						if (this.ai[3] == 0f && Main.netMode != 1)
						{
							Vector2 vector123 = new Vector2(base.Center.X, base.Center.Y);
							vector123.X += velocity.X * 7f;
							float num938 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector123.X;
							float num939 = Main.player[target].Center.Y - vector123.Y;
							float num940 = (float)Math.Sqrt(num938 * num938 + num939 * num939);
							float num941 = 6f;
							if ((double)life < (double)lifeMax * 0.75)
							{
								num941 = 7f;
							}
							if ((double)life < (double)lifeMax * 0.5)
							{
								num941 = 8f;
							}
							if ((double)life < (double)lifeMax * 0.25)
							{
								num941 = 9f;
							}
							num940 = num941 / num940;
							num938 *= num940;
							num939 *= num940;
							int num942 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector123.X, vector123.Y, num938, num939, 348, 42, 0f, Main.myPlayer);
						}
					}
					else if (this.ai[3] < 0f)
					{
						this.ai[3] += 1f;
					}
					if (Main.netMode != 1)
					{
						this.ai[1] += Main.rand.Next(1, 4);
						if (this.ai[1] > 800f && num933 < 600f)
						{
							this.ai[0] = -1f;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					TargetClosest();
					float num943 = 0.15f;
					float num944 = 7f;
					if ((double)life < (double)lifeMax * 0.75)
					{
						num943 = 0.17f;
						num944 = 8f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						num943 = 0.2f;
						num944 = 9f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						num943 = 0.25f;
						num944 = 10f;
					}
					num943 -= 0.05f;
					num944 -= 1f;
					if (base.Center.X < Main.player[target].Center.X)
					{
						velocity.X += num943;
						if (velocity.X < 0f)
						{
							velocity.X *= 0.98f;
						}
					}
					if (base.Center.X > Main.player[target].Center.X)
					{
						velocity.X -= num943;
						if (velocity.X > 0f)
						{
							velocity.X *= 0.98f;
						}
					}
					if (velocity.X > num944 || velocity.X < 0f - num944)
					{
						velocity.X *= 0.95f;
					}
					float num945 = Main.player[target].position.Y - (position.Y + (float)height);
					if (num945 < 180f)
					{
						velocity.Y -= 0.1f;
					}
					if (num945 > 200f)
					{
						velocity.Y += 0.1f;
					}
					if (velocity.Y > 6f)
					{
						velocity.Y = 6f;
					}
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
					rotation = velocity.X * 0.01f;
					if (Main.netMode != 1)
					{
						this.ai[3] += 1f;
						int num946 = 15;
						if ((double)life < (double)lifeMax * 0.75)
						{
							num946 = 14;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							num946 = 12;
						}
						if ((double)life < (double)lifeMax * 0.25)
						{
							num946 = 10;
						}
						if ((double)life < (double)lifeMax * 0.1)
						{
							num946 = 8;
						}
						num946 += 3;
						if (this.ai[3] >= (float)num946)
						{
							this.ai[3] = 0f;
							Vector2 vector124 = new Vector2(base.Center.X, position.Y + (float)height - 14f);
							int i2 = (int)(vector124.X / 16f);
							int j2 = (int)(vector124.Y / 16f);
							if (!WorldGen.SolidTile(i2, j2))
							{
								float num947 = velocity.Y;
								if (num947 < 0f)
								{
									num947 = 0f;
								}
								num947 += 3f;
								float speedX2 = velocity.X * 0.25f;
								int num948 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector124.X, vector124.Y, speedX2, num947, 349, 37, 0f, Main.myPlayer, Main.rand.Next(5));
							}
						}
					}
					if (Main.netMode != 1)
					{
						this.ai[1] += Main.rand.Next(1, 4);
						if (this.ai[1] > 600f)
						{
							this.ai[0] = -1f;
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					TargetClosest();
					Vector2 vector125 = new Vector2(base.Center.X, base.Center.Y - 20f);
					float num949 = Main.rand.Next(-1000, 1001);
					float num950 = Main.rand.Next(-1000, 1001);
					float num951 = (float)Math.Sqrt(num949 * num949 + num950 * num950);
					float num952 = 15f;
					velocity *= 0.95f;
					num951 = num952 / num951;
					num949 *= num951;
					num950 *= num951;
					rotation += 0.2f;
					vector125.X += num949 * 4f;
					vector125.Y += num950 * 4f;
					this.ai[3] += 1f;
					int num953 = 7;
					if ((double)life < (double)lifeMax * 0.75)
					{
						num953--;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						num953 -= 2;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						num953 -= 3;
					}
					if ((double)life < (double)lifeMax * 0.1)
					{
						num953 -= 4;
					}
					if (this.ai[3] > (float)num953)
					{
						this.ai[3] = 0f;
						int num954 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector125.X, vector125.Y, num949, num950, 349, 35, 0f, Main.myPlayer);
					}
					if (Main.netMode != 1)
					{
						this.ai[1] += Main.rand.Next(1, 4);
						if (this.ai[1] > 500f)
						{
							this.ai[0] = -1f;
						}
					}
				}
				if (this.ai[0] == -1f)
				{
					int num955 = Main.rand.Next(3);
					TargetClosest();
					if (Math.Abs(base.Center.X - Main.player[target].Center.X) > 1000f)
					{
						num955 = 0;
					}
					this.ai[0] = num955;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
			}
			else if (aiStyle == 61)
			{
				float num956 = 2f;
				noGravity = true;
				noTileCollide = true;
				if (!Main.dayTime)
				{
					TargetClosest();
				}
				bool flag47 = false;
				if ((double)life < (double)lifeMax * 0.75)
				{
					num956 = 3f;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					num956 = 4f;
				}
				if ((double)life < (double)lifeMax * 0.25)
				{
					num956 = 5f;
				}
				Vector2 center4 = base.Center;
				Point point5 = center4.ToTileCoordinates();
				if (WorldGen.InWorld(point5.X, point5.Y) && !WorldGen.SolidTile(point5.X, point5.Y))
				{
					Lighting.AddLight(center4, 0.3f, 0.26f, 0.05f);
				}
				if (Main.dayTime)
				{
					EncourageDespawn(10);
					num956 = 8f;
					if (velocity.X == 0f)
					{
						velocity.X = 0.1f;
					}
				}
				else if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] >= 300f && Main.netMode != 1)
					{
						TargetClosest();
						this.ai[1] = 0f;
						this.ai[0] = 1f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.ai[1] += 1f;
					flag47 = true;
					int num957 = 16;
					if ((double)life < (double)lifeMax * 0.25)
					{
						num957 = 8;
					}
					else if ((double)life < (double)lifeMax * 0.5)
					{
						num957 = 11;
					}
					else if ((double)life < (double)lifeMax * 0.75)
					{
						num957 = 14;
					}
					if (this.ai[1] % (float)num957 == 0f)
					{
						Vector2 vector126 = new Vector2(base.Center.X + (float)(direction * 50), base.Center.Y + (float)Main.rand.Next(15, 36));
						float num958 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector126.X;
						float num959 = Main.player[target].Center.Y - vector126.Y;
						num958 += (float)Main.rand.Next(-40, 41);
						num959 += (float)Main.rand.Next(-40, 41);
						float num960 = (float)Math.Sqrt(num958 * num958 + num959 * num959);
						float num961 = 15f;
						num960 = num961 / num960;
						num958 *= num960;
						num959 *= num960;
						num958 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						num959 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						int num962 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector126.X, vector126.Y, num958, num959, 180, 36, 0f, Main.myPlayer);
					}
					if (this.ai[1] > 240f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
				}
				if (Main.netMode != 1)
				{
					int num963 = 600;
					int num964 = 1200;
					int num965 = 2700;
					if ((double)life < (double)lifeMax * 0.25)
					{
						num963 = (int)((double)num963 * 0.5);
						num964 = (int)((double)num964 * 0.5);
						num965 = (int)((double)num965 * 0.5);
					}
					else if ((double)life < (double)lifeMax * 0.5)
					{
						num963 = (int)((double)num963 * 0.75);
						num964 = (int)((double)num964 * 0.75);
						num965 = (int)((double)num965 * 0.75);
					}
					else if ((double)life < (double)lifeMax * 0.75)
					{
						num963 = (int)((double)num963 * 0.9);
						num964 = (int)((double)num964 * 0.9);
						num965 = (int)((double)num965 * 0.9);
					}
					if (Main.rand.Next(num963) == 0)
					{
						Vector2 vector127 = new Vector2(base.Center.X - (float)(direction * 24), base.Center.Y - 64f);
						float num966 = Main.rand.Next(1, 100) * direction;
						float num967 = 1f;
						float num968 = (float)Math.Sqrt(num966 * num966 + num967 * num967);
						float num969 = 1f;
						num968 = num969 / num968;
						num966 *= num968;
						num967 *= num968;
						int num970 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector127.X, vector127.Y, num966, num967, 352, 80, 0f, Main.myPlayer);
					}
					if (Main.rand.Next(num964) == 0)
					{
						localAI[1] = 1f;
					}
					if (localAI[1] >= 1f)
					{
						localAI[1] += 1f;
						int num971 = 12;
						if (localAI[1] % (float)num971 == 0f)
						{
							Vector2 vector128 = new Vector2(base.Center.X - (float)(direction * 24), base.Center.Y - 64f);
							float num972 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector128.X;
							float num973 = Main.player[target].Center.Y - vector128.Y;
							num972 += (float)Main.rand.Next(-50, 51);
							num973 += (float)Main.rand.Next(-50, 51);
							float num974 = (float)Math.Sqrt(num972 * num972 + num973 * num973);
							float num975 = 12.5f;
							num974 = num975 / num974;
							num972 *= num974;
							num973 *= num974;
							num972 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
							num973 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
							int num976 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector128.X, vector128.Y, num972, num973, 350, 42, 0f, Main.myPlayer);
						}
						if (localAI[1] >= 100f)
						{
							localAI[1] = 0f;
						}
					}
					if (Main.rand.Next(num965) == 0)
					{
						localAI[2] = 2f;
					}
					if (localAI[2] > 0f)
					{
						localAI[2] += 1f;
						int num977 = 9;
						if (localAI[2] % (float)num977 == 0f)
						{
							Vector2 vector129 = new Vector2(base.Center.X - (float)(direction * 24), base.Center.Y - 64f);
							float num978 = Main.rand.Next(-100, 101);
							float num979 = -300f;
							float num980 = (float)Math.Sqrt(num978 * num978 + num979 * num979);
							float num981 = 11f;
							num980 = num981 / num980;
							num978 *= num980;
							num979 *= num980;
							num978 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							num979 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							int num982 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector129.X, vector129.Y, num978, num979, 351, 50, 0f, Main.myPlayer);
						}
						if (localAI[2] >= 100f)
						{
							localAI[2] = 0f;
						}
					}
				}
				if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 50f)
				{
					flag47 = true;
				}
				if (flag47)
				{
					velocity.X *= 0.9f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
				}
				else
				{
					if (direction > 0)
					{
						velocity.X = (velocity.X * 20f + num956) / 21f;
					}
					if (direction < 0)
					{
						velocity.X = (velocity.X * 20f - num956) / 21f;
					}
				}
				int num983 = 80;
				int num984 = 20;
				Vector2 vector130 = new Vector2(base.Center.X - (float)(num983 / 2), position.Y + (float)height - (float)num984);
				bool flag48 = false;
				if (position.X < Main.player[target].position.X && position.X + (float)width > Main.player[target].position.X + (float)Main.player[target].width && position.Y + (float)height < Main.player[target].position.Y + (float)Main.player[target].height - 16f)
				{
					flag48 = true;
				}
				if (flag48)
				{
					velocity.Y += 0.5f;
				}
				else if (Collision.SolidCollision(vector130, num983, num984))
				{
					if (velocity.Y > 0f)
					{
						velocity.Y = 0f;
					}
					if ((double)velocity.Y > -0.2)
					{
						velocity.Y -= 0.025f;
					}
					else
					{
						velocity.Y -= 0.2f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				else
				{
					if (velocity.Y < 0f)
					{
						velocity.Y = 0f;
					}
					if ((double)velocity.Y < 0.1)
					{
						velocity.Y += 0.025f;
					}
					else
					{
						velocity.Y += 0.5f;
					}
				}
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (aiStyle == 62)
			{
				TargetClosest();
				rotation = Math.Abs(velocity.X) * (float)direction * 0.1f;
				spriteDirection = direction;
				float num985 = 7f;
				Vector2 vector131 = new Vector2(base.Center.X + (float)(direction * 20), base.Center.Y + 6f);
				float num986 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector131.X;
				float num987 = Main.player[target].position.Y - vector131.Y;
				float num988 = (float)Math.Sqrt(num986 * num986 + num987 * num987);
				float num989 = num985 / num988;
				num986 *= num989;
				num987 *= num989;
				bool flag49 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
				if (Main.dayTime)
				{
					int num990 = 60;
					velocity.X = (velocity.X * (float)(num990 - 1) - num986) / (float)num990;
					velocity.Y = (velocity.Y * (float)(num990 - 1) - num987) / (float)num990;
					EncourageDespawn(10);
					return;
				}
				if (num988 > 600f || !flag49)
				{
					int num991 = 60;
					velocity.X = (velocity.X * (float)(num991 - 1) + num986) / (float)num991;
					velocity.Y = (velocity.Y * (float)(num991 - 1) + num987) / (float)num991;
					return;
				}
				velocity *= 0.98f;
				if (Math.Abs(velocity.X) < 1f && Math.Abs(velocity.Y) < 1f && Main.netMode != 1)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 15f)
					{
						localAI[0] = 0f;
						num986 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector131.X;
						num987 = Main.player[target].Center.Y - vector131.Y;
						num986 += (float)Main.rand.Next(-35, 36);
						num987 += (float)Main.rand.Next(-35, 36);
						num986 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						num987 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						num988 = (float)Math.Sqrt(num986 * num986 + num987 * num987);
						num985 = 10f;
						num989 = num985 / num988;
						num986 *= num989;
						num987 *= num989;
						num986 *= 1f + (float)Main.rand.Next(-20, 21) * 0.0125f;
						num987 *= 1f + (float)Main.rand.Next(-20, 21) * 0.0125f;
						int num992 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector131.X, vector131.Y, num986, num987, 180, 32, 0f, Main.myPlayer);
					}
				}
			}
			else if (aiStyle == 63)
			{
				TargetClosest();
				float num993 = 11f;
				Vector2 vector132 = new Vector2(base.Center.X + (float)(direction * 20), base.Center.Y + 6f);
				float num994 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector132.X;
				float num995 = Main.player[target].Center.Y - vector132.Y;
				float num996 = (float)Math.Sqrt(num994 * num994 + num995 * num995);
				float num997 = num993 / num996;
				num994 *= num997;
				num995 *= num997;
				if (Main.dayTime)
				{
					num994 = 0f - num994;
					num995 = 0f - num995;
				}
				this.ai[0] -= 1f;
				if (num996 < 200f || this.ai[0] > 0f)
				{
					if (num996 < 200f)
					{
						this.ai[0] = 20f;
					}
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					rotation += (float)direction * 0.3f;
					return;
				}
				velocity.X = (velocity.X * 50f + num994) / 51f;
				velocity.Y = (velocity.Y * 50f + num995) / 51f;
				if (num996 < 350f)
				{
					velocity.X = (velocity.X * 10f + num994) / 11f;
					velocity.Y = (velocity.Y * 10f + num995) / 11f;
				}
				if (num996 < 300f)
				{
					velocity.X = (velocity.X * 7f + num994) / 8f;
					velocity.Y = (velocity.Y * 7f + num995) / 8f;
				}
				rotation = velocity.X * 0.15f;
			}
			else if (aiStyle == 64)
			{
				float num998 = this.ai[0];
				float num999 = this.ai[1];
				if (Main.netMode != 1)
				{
					localAI[0] -= 1f;
					if (this.ai[3] == 0f)
					{
						this.ai[3] = (float)Main.rand.Next(75, 111) * 0.01f;
					}
					if (localAI[0] <= 0f)
					{
						TargetClosest();
						localAI[0] = Main.rand.Next(60, 180);
						float num1000 = Math.Abs(base.Center.X - Main.player[target].Center.X);
						if (num1000 > 700f && localAI[3] == 0f)
						{
							float num1001 = (float)Main.rand.Next(50, 151) * 0.01f;
							if (num1000 > 1000f)
							{
								num1001 = (float)Main.rand.Next(150, 201) * 0.01f;
							}
							else if (num1000 > 850f)
							{
								num1001 = (float)Main.rand.Next(100, 151) * 0.01f;
							}
							int num1002 = direction * Main.rand.Next(100, 251);
							int num1003 = Main.rand.Next(-50, 51);
							if (position.Y > Main.player[target].position.Y - 100f)
							{
								num1003 -= Main.rand.Next(100, 251);
							}
							float num1004 = num1001 / (float)Math.Sqrt(num1002 * num1002 + num1003 * num1003);
							num998 = (float)num1002 * num1004;
							num999 = (float)num1003 * num1004;
						}
						else
						{
							localAI[3] = 1f;
							float num1005 = (float)Main.rand.Next(5, 151) * 0.01f;
							int num1006 = Main.rand.Next(-100, 101);
							int num1007 = Main.rand.Next(-100, 101);
							float num1008 = num1005 / (float)Math.Sqrt(num1006 * num1006 + num1007 * num1007);
							num998 = (float)num1006 * num1008;
							num999 = (float)num1007 * num1008;
						}
						netUpdate = true;
					}
				}
				scale = this.ai[3];
				if (type == 677)
				{
					bool flag50 = true;
					Point point6 = base.Center.ToTileCoordinates();
					int num1009 = 40;
					if (point6.X < num1009)
					{
						num998 += 0.5f;
						if (num998 > 3f)
						{
							num998 = 3f;
						}
						flag50 = false;
					}
					else if (point6.X > Main.maxTilesX - num1009)
					{
						num998 -= 0.5f;
						if (num998 < -3f)
						{
							num998 = -3f;
						}
						flag50 = false;
					}
					if (point6.Y < num1009)
					{
						num999 += 0.5f;
						if (num999 > 3f)
						{
							velocity.Y = 3f;
						}
						flag50 = false;
					}
					else if (point6.Y > Main.maxTilesY - num1009)
					{
						num999 -= 0.5f;
						if (num999 < -3f)
						{
							num999 = -3f;
						}
						flag50 = false;
					}
					if (localAI[1] > 0f)
					{
						localAI[1]--;
					}
					else if (flag50)
					{
						localAI[1] = 15f;
						float num1010 = 0f;
						Vector2 zero = Vector2.Zero;
						for (int num1011 = 0; num1011 < 200; num1011++)
						{
							NPC nPC4 = Main.npc[num1011];
							if (nPC4.active && nPC4.damage > 0 && !nPC4.friendly && nPC4.Hitbox.Distance(base.Center) <= 100f)
							{
								num1010++;
								zero += DirectionFrom(nPC4.Center);
							}
						}
						for (int num1012 = 0; num1012 < 255; num1012++)
						{
							Player player2 = Main.player[num1012];
							if (player2.active && player2.Hitbox.Distance(base.Center) <= 150f)
							{
								num1010++;
								zero += DirectionFrom(player2.Center);
							}
						}
						if (num1010 > 0f)
						{
							float num1013 = 2f;
							zero /= num1010;
							zero *= num1013;
							velocity += zero;
							if (velocity.Length() > 8f)
							{
								velocity = velocity.SafeNormalize(Vector2.Zero) * 8f;
							}
							Vector2 vector133 = base.Center + zero * 10f;
							localAI[0] = 10f;
							netUpdate = true;
						}
					}
				}
				else if (localAI[2] > 0f)
				{
					int i3 = (int)base.Center.X / 16;
					int j3 = (int)base.Center.Y / 16;
					if (localAI[2] > 3f)
					{
						if (type == 358)
						{
							Lighting.AddLight(i3, j3, 0.10124999f * scale, 0.21374999f * scale, 0.225f * scale);
						}
						else if (type == 654)
						{
							Lighting.AddLight(i3, j3, 0.225f * scale, 0.105000004f * scale, 0.060000002f * scale);
						}
						else
						{
							Lighting.AddLight(i3, j3, 0.109500006f * scale, 0.15f * scale, 0.0615f * scale);
						}
					}
					localAI[2] -= 1f;
				}
				else if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
				else
				{
					localAI[1] = Main.rand.Next(30, 180);
					if (!Main.dayTime || (double)(position.Y / 16f) > Main.worldSurface + 10.0)
					{
						localAI[2] = Main.rand.Next(10, 30);
					}
				}
				int num1014 = 80;
				velocity.X = (velocity.X * (float)(num1014 - 1) + num998) / (float)num1014;
				velocity.Y = (velocity.Y * (float)(num1014 - 1) + num999) / (float)num1014;
				if (velocity.Y > 0f)
				{
					int num1015 = 4;
					int num1016 = (int)base.Center.X / 16;
					int num1017 = (int)base.Center.Y / 16;
					for (int num1018 = num1017; num1018 < num1017 + num1015; num1018++)
					{
						if (WorldGen.InWorld(num1016, num1018, 2) && Main.tile[num1016, num1018] != null && ((Main.tile[num1016, num1018].nactive() && Main.tileSolid[Main.tile[num1016, num1018].type]) || Main.tile[num1016, num1018].liquid > 0))
						{
							num999 *= -1f;
							if (velocity.Y > 0f)
							{
								velocity.Y *= 0.9f;
							}
						}
					}
				}
				if (velocity.Y < 0f)
				{
					int num1019 = 30;
					bool flag51 = false;
					int num1020 = (int)base.Center.X / 16;
					int num1021 = (int)base.Center.Y / 16;
					for (int num1022 = num1021; num1022 < num1021 + num1019; num1022++)
					{
						if (WorldGen.InWorld(num1020, num1022, 2) && Main.tile[num1020, num1022] != null && Main.tile[num1020, num1022].nactive() && Main.tileSolid[Main.tile[num1020, num1022].type])
						{
							flag51 = true;
						}
					}
					if (!flag51)
					{
						num999 *= -1f;
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.9f;
						}
					}
				}
				if (collideX)
				{
					num998 = ((!(velocity.X < 0f)) ? (0f - Math.Abs(num998)) : Math.Abs(num998));
					velocity.X *= -0.2f;
				}
				if (type == 677)
				{
					rotation = velocity.X * 0.3f;
				}
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				this.ai[0] = num998;
				this.ai[1] = num999;
			}
			else if (aiStyle == 65)
			{
				AI_065_Butterflies();
			}
			else if (aiStyle == 66)
			{
				if (type == 484)
				{
					float num1023 = (float)Main.rand.Next(90, 111) * 0.01f;
					num1023 *= (Main.essScale + 0.5f) / 2f;
					Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.3f * num1023, 0.1f * num1023, 0.25f * num1023);
				}
				if (velocity.Y == 0f)
				{
					if (this.ai[0] == 1f)
					{
						if (direction == 0)
						{
							TargetClosest();
						}
						if (collideX)
						{
							direction *= -1;
						}
						float num1024 = 0.2f;
						if (type == 485)
						{
							num1024 = 0.25f;
						}
						if (type == 486)
						{
							num1024 = 0.325f;
						}
						if (type == 487)
						{
							num1024 = 0.4f;
						}
						velocity.X = num1024 * (float)direction;
						if (type == 374)
						{
							velocity.X *= 3f;
						}
					}
					else
					{
						velocity.X = 0f;
					}
					if (Main.netMode != 1)
					{
						localAI[1] -= 1f;
						if (localAI[1] <= 0f)
						{
							if (this.ai[0] == 1f)
							{
								this.ai[0] = 0f;
								localAI[1] = Main.rand.Next(300, 900);
							}
							else
							{
								this.ai[0] = 1f;
								localAI[1] = Main.rand.Next(600, 1800);
							}
							netUpdate = true;
						}
					}
				}
				else if (direction == 0)
				{
					direction = 1;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
				}
				if (type != 374)
				{
					return;
				}
				spriteDirection = direction;
				bool flag52 = false;
				for (int num1025 = 0; num1025 < 255; num1025++)
				{
					Player player3 = Main.player[num1025];
					if (player3.active && !player3.dead && !(Vector2.Distance(player3.Center, base.Center) > 160f))
					{
						flag52 = true;
						break;
					}
				}
				int num1026 = 90;
				if (flag52 && this.ai[1] < (float)num1026)
				{
					this.ai[1]++;
				}
				if (this.ai[1] == (float)num1026 && Main.netMode != 1)
				{
					position.Y += 16f;
					Transform(375);
					netUpdate = true;
				}
			}
			else if (aiStyle == 67)
			{
				if (type == 359)
				{
					if (this.ai[3] != 0f)
					{
						scale = this.ai[3];
						int num1027 = (int)(12f * scale);
						int num1028 = (int)(12f * scale);
						if (num1027 != width)
						{
							position.X = position.X + (float)(width / 2) - (float)num1027 - 2f;
							width = num1027;
						}
						if (num1028 != height)
						{
							position.Y = position.Y + (float)height - (float)num1028;
							height = num1028;
						}
					}
					if (this.ai[3] == 0f && Main.netMode != 1)
					{
						this.ai[3] = (float)Main.rand.Next(80, 111) * 0.01f;
						netUpdate = true;
					}
				}
				if (type == 360)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.2f, 0.7f);
				}
				if (type == 655)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.6f, 0.3f, 0.1f);
				}
				float num1029 = 0.3f;
				if (type == 360 || type == 655)
				{
					num1029 = 0.6f;
				}
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					directionY = 1;
					this.ai[0] = 1f;
					if (direction > 0)
					{
						spriteDirection = 1;
					}
				}
				bool flag53 = false;
				if (Main.netMode != 1)
				{
					if (this.ai[2] == 0f && Main.rand.Next(7200) == 0)
					{
						this.ai[2] = 2f;
						netUpdate = true;
					}
					if (!collideX && !collideY)
					{
						localAI[3] += 1f;
						if (localAI[3] > 5f)
						{
							this.ai[2] = 2f;
							netUpdate = true;
						}
					}
					else
					{
						localAI[3] = 0f;
					}
				}
				if (this.ai[2] > 0f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 1f;
					directionY = 1;
					if (velocity.Y > num1029)
					{
						rotation += (float)direction * 0.1f;
					}
					else
					{
						rotation = 0f;
					}
					spriteDirection = direction;
					velocity.X = num1029 * (float)direction;
					noGravity = false;
					int num1030 = (int)(base.Center.X + (float)(width / 2 * -direction)) / 16;
					int num1031 = (int)(position.Y + (float)height + 8f) / 16;
					if (Main.tile[num1030, num1031] != null && !Main.tile[num1030, num1031].topSlope() && collideY)
					{
						this.ai[2] -= 1f;
					}
					num1031 = (int)(position.Y + (float)height - 4f) / 16;
					num1030 = (int)(base.Center.X + (float)(width / 2 * direction)) / 16;
					if (Main.tile[num1030, num1031] != null && Main.tile[num1030, num1031].bottomSlope())
					{
						direction *= -1;
					}
					if (collideX && velocity.Y == 0f)
					{
						flag53 = true;
						this.ai[2] = 0f;
						directionY = -1;
						this.ai[1] = 1f;
					}
					if (velocity.Y == 0f)
					{
						if (localAI[1] == position.X)
						{
							localAI[2] += 1f;
							if (localAI[2] > 10f)
							{
								direction = 1;
								velocity.X = (float)direction * num1029;
								localAI[2] = 0f;
							}
						}
						else
						{
							localAI[2] = 0f;
							localAI[1] = position.X;
						}
					}
				}
				if (this.ai[2] != 0f)
				{
					return;
				}
				noGravity = true;
				if (this.ai[1] == 0f)
				{
					if (collideY)
					{
						this.ai[0] = 2f;
					}
					if (!collideY && this.ai[0] == 2f)
					{
						direction = -direction;
						this.ai[1] = 1f;
						this.ai[0] = 1f;
					}
					if (collideX)
					{
						directionY = -directionY;
						this.ai[1] = 1f;
					}
				}
				else
				{
					if (collideX)
					{
						this.ai[0] = 2f;
					}
					if (!collideX && this.ai[0] == 2f)
					{
						directionY = -directionY;
						this.ai[1] = 0f;
						this.ai[0] = 1f;
					}
					if (collideY)
					{
						direction = -direction;
						this.ai[1] = 0f;
					}
				}
				if (!flag53)
				{
					float num1032 = rotation;
					if (directionY < 0)
					{
						if (direction < 0)
						{
							if (collideX)
							{
								rotation = 1.57f;
								spriteDirection = -1;
							}
							else if (collideY)
							{
								rotation = 3.14f;
								spriteDirection = 1;
							}
						}
						else if (collideY)
						{
							rotation = 3.14f;
							spriteDirection = -1;
						}
						else if (collideX)
						{
							rotation = 4.71f;
							spriteDirection = 1;
						}
					}
					else if (direction < 0)
					{
						if (collideY)
						{
							rotation = 0f;
							spriteDirection = -1;
						}
						else if (collideX)
						{
							rotation = 1.57f;
							spriteDirection = 1;
						}
					}
					else if (collideX)
					{
						rotation = 4.71f;
						spriteDirection = -1;
					}
					else if (collideY)
					{
						rotation = 0f;
						spriteDirection = 1;
					}
					float num1033 = rotation;
					rotation = num1032;
					if ((double)rotation > 6.28)
					{
						rotation -= 6.28f;
					}
					if (rotation < 0f)
					{
						rotation += 6.28f;
					}
					float num1034 = Math.Abs(rotation - num1033);
					float num1035 = 0.1f;
					if (rotation > num1033)
					{
						if ((double)num1034 > 3.14)
						{
							rotation += num1035;
						}
						else
						{
							rotation -= num1035;
							if (rotation < num1033)
							{
								rotation = num1033;
							}
						}
					}
					if (rotation < num1033)
					{
						if ((double)num1034 > 3.14)
						{
							rotation -= num1035;
						}
						else
						{
							rotation += num1035;
							if (rotation > num1033)
							{
								rotation = num1033;
							}
						}
					}
				}
				velocity.X = num1029 * (float)direction;
				velocity.Y = num1029 * (float)directionY;
			}
			else if (aiStyle == 68)
			{
				noGravity = true;
				if (this.ai[0] == 0f)
				{
					noGravity = false;
					int num1036 = direction;
					int num1037 = target;
					TargetClosest();
					if (num1037 >= 0 && num1036 != 0)
					{
						direction = num1036;
					}
					if (wet && WorldGen.InWorld((int)(base.Center.X + (float)((width / 2 + 8) * direction)) / 16, (int)(base.Center.Y / 16f), 5))
					{
						float num1038 = 2f;
						velocity.X = (velocity.X * 19f + num1038 * (float)direction) / 20f;
						int num1039 = (int)(base.Center.X + (float)((width / 2 + 8) * direction)) / 16;
						int num1040 = (int)(base.Center.Y / 16f);
						int j4 = (int)(position.Y / 16f);
						int num1041 = (int)((position.Y + (float)height) / 16f);
						if (Main.tile[num1039, num1040] == null)
						{
							Main.tile[num1039, num1040] = new Tile();
						}
						if (Main.tile[num1039, num1041] == null)
						{
							Main.tile[num1039, num1041] = new Tile();
						}
						if (num1039 < 5 || num1039 > Main.maxTilesX - 5 || WorldGen.SolidTile(num1039, num1040) || WorldGen.SolidTile(num1039, j4) || WorldGen.SolidTile(num1039, num1041) || Main.tile[num1039, num1041].liquid == 0)
						{
							direction *= -1;
						}
						spriteDirection = direction;
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.5f;
						}
						noGravity = true;
						num1039 = (int)(base.Center.X / 16f);
						num1040 = (int)(base.Center.Y / 16f);
						float num1042 = position.Y + (float)height;
						if (Main.tile[num1039, num1040 - 1] == null)
						{
							Main.tile[num1039, num1040 - 1] = new Tile();
						}
						if (Main.tile[num1039, num1040] == null)
						{
							Main.tile[num1039, num1040] = new Tile();
						}
						if (Main.tile[num1039, num1040 + 1] == null)
						{
							Main.tile[num1039, num1040 + 1] = new Tile();
						}
						if (Main.tile[num1039, num1040 - 1].liquid > 0)
						{
							num1042 = num1040 * 16;
							num1042 -= (float)((int)Main.tile[num1039, num1040 - 1].liquid / 16);
						}
						else if (Main.tile[num1039, num1040].liquid > 0)
						{
							num1042 = (num1040 + 1) * 16;
							num1042 -= (float)((int)Main.tile[num1039, num1040].liquid / 16);
						}
						else if (Main.tile[num1039, num1040 + 1].liquid > 0)
						{
							num1042 = (num1040 + 2) * 16;
							num1042 -= (float)((int)Main.tile[num1039, num1040 + 1].liquid / 16);
						}
						num1042 -= 6f;
						if (base.Center.Y > num1042)
						{
							velocity.Y -= 0.1f;
							if (velocity.Y < -8f)
							{
								velocity.Y = -8f;
							}
							if (base.Center.Y + velocity.Y < num1042)
							{
								velocity.Y = num1042 - base.Center.Y;
							}
						}
						else
						{
							velocity.Y = num1042 - base.Center.Y;
						}
					}
					if (Main.netMode == 1)
					{
						return;
					}
					if (!wet)
					{
						this.ai[0] = 1f;
						netUpdate = true;
						direction = -direction;
						return;
					}
					Rectangle rectangle4 = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
					if (new Rectangle((int)position.X - 100, (int)position.Y - 100, width + 200, height + 200).Intersects(rectangle4) || life < lifeMax)
					{
						this.ai[0] = 1f;
						velocity.Y -= 6f;
						netUpdate = true;
						direction = -direction;
					}
				}
				else
				{
					if (Main.player[target].dead)
					{
						return;
					}
					bool flag54 = false;
					this.ai[1] += 1f;
					if (this.ai[1] >= 300f)
					{
						flag54 = true;
					}
					if (flag54)
					{
						if (velocity.Y == 0f || collideY || wet)
						{
							velocity.X = 0f;
							velocity.Y = 0f;
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							if (Main.netMode != 1)
							{
								if ((type == 363 || type == 365 || type == 603 || type == 609) && !wet)
								{
									int num1043 = direction;
									Transform(type - 1);
									TargetClosest();
									direction = num1043;
									this.ai[0] = 0f;
									this.ai[1] = 200 + Main.rand.Next(200);
								}
								netUpdate = true;
							}
						}
						else
						{
							velocity.X *= 0.98f;
							velocity.Y += 0.1f;
							if (velocity.Y > 2f)
							{
								velocity.Y = 2f;
							}
						}
						return;
					}
					if (collideX)
					{
						direction *= -1;
						velocity.X = oldVelocity.X * -0.5f;
						if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
						{
							velocity.X = 2f;
						}
						if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
						{
							velocity.X = -2f;
						}
					}
					if (collideY)
					{
						velocity.Y = oldVelocity.Y * -0.5f;
						if (velocity.Y > 0f && velocity.Y < 1f)
						{
							velocity.Y = 1f;
						}
						if (velocity.Y < 0f && velocity.Y > -1f)
						{
							velocity.Y = -1f;
						}
					}
					if (direction == -1 && velocity.X > -3f)
					{
						velocity.X -= 0.1f;
						if (velocity.X > 3f)
						{
							velocity.X -= 0.1f;
						}
						else if (velocity.X > 0f)
						{
							velocity.X -= 0.05f;
						}
						if (velocity.X < -3f)
						{
							velocity.X = -3f;
						}
					}
					else if (direction == 1 && velocity.X < 3f)
					{
						velocity.X += 0.1f;
						if (velocity.X < -3f)
						{
							velocity.X += 0.1f;
						}
						else if (velocity.X < 0f)
						{
							velocity.X += 0.05f;
						}
						if (velocity.X > 3f)
						{
							velocity.X = 3f;
						}
					}
					int num1044 = (int)((position.X + (float)(width / 2)) / 16f) + direction;
					int num1045 = (int)((position.Y + (float)height) / 16f);
					bool flag55 = true;
					int num1046 = 15;
					bool flag56 = false;
					for (int num1047 = num1045; num1047 < num1045 + num1046; num1047++)
					{
						if (Main.tile[num1044, num1047] == null)
						{
							Main.tile[num1044, num1047] = new Tile();
						}
						if ((Main.tile[num1044, num1047].nactive() && Main.tileSolid[Main.tile[num1044, num1047].type]) || Main.tile[num1044, num1047].liquid > 0)
						{
							if (num1047 < num1045 + 5)
							{
								flag56 = true;
							}
							flag55 = false;
							break;
						}
					}
					if (flag55)
					{
						velocity.Y += 0.1f;
					}
					else
					{
						velocity.Y -= 0.1f;
					}
					if (flag56)
					{
						velocity.Y -= 0.2f;
					}
					if (velocity.Y > 3f)
					{
						velocity.Y = 3f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
			}
			else if (aiStyle == 69)
			{
				AI_069_DukeFishron();
			}
			else if (aiStyle == 70)
			{
				if (target == 255)
				{
					TargetClosest();
					this.ai[3] = (float)Main.rand.Next(80, 121) / 100f;
					float num1048 = (float)Main.rand.Next(165, 265) / 15f;
					velocity = Vector2.Normalize(Main.player[target].Center - base.Center + new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101))) * num1048;
					netUpdate = true;
				}
				Vector2 vector134 = Vector2.Normalize(Main.player[target].Center - base.Center);
				velocity = (velocity * 40f + vector134 * 20f) / 41f;
				scale = this.ai[3];
				alpha -= 30;
				if (alpha < 50)
				{
					alpha = 50;
				}
				alpha = 50;
				velocity.X = (velocity.X * 50f + Main.windSpeedCurrent * 2f + (float)Main.rand.Next(-10, 11) * 0.1f) / 51f;
				velocity.Y = (velocity.Y * 50f + -0.25f + (float)Main.rand.Next(-10, 11) * 0.2f) / 51f;
				if (velocity.Y > 0f)
				{
					velocity.Y -= 0.04f;
				}
				if (this.ai[0] == 0f)
				{
					int num1049 = 40;
					Rectangle rect = getRect();
					rect.X -= num1049 + width / 2;
					rect.Y -= num1049 + height / 2;
					rect.Width += num1049 * 2;
					rect.Height += num1049 * 2;
					for (int num1050 = 0; num1050 < 255; num1050++)
					{
						Player player4 = Main.player[num1050];
						if (player4.active && !player4.dead && rect.Intersects(player4.getRect()))
						{
							this.ai[0] = 1f;
							this.ai[1] = 4f;
							netUpdate = true;
							break;
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1]++;
					if (this.ai[1] >= 150f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 4f;
					}
				}
				if (this.ai[0] == 1f)
				{
					this.ai[1]--;
					if (this.ai[1] <= 0f)
					{
						life = 0;
						HitEffect();
						active = false;
						return;
					}
				}
				if (justHit || this.ai[0] == 1f)
				{
					dontTakeDamage = true;
					position = base.Center;
					width = (height = 100);
					position = new Vector2(position.X - (float)(width / 2), position.Y - (float)(height / 2));
					EncourageDespawn(3);
				}
			}
			else if (aiStyle == 71)
			{
				noTileCollide = true;
				int num1051 = 90;
				if (target < 0 || target == 255 || Main.player[target].dead)
				{
					TargetClosest(faceTarget: false);
					direction = 1;
					netUpdate = true;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1]++;
					_ = type;
					_ = 372;
					noGravity = true;
					dontTakeDamage = true;
					velocity.Y = this.ai[3];
					if (type == 373)
					{
						float num1052 = MathF.PI / 30f;
						float num1053 = this.ai[2];
						float num1054 = (float)(Math.Cos(num1052 * localAI[1]) - 0.5) * num1053;
						position.X -= num1054 * (float)(-direction);
						localAI[1]++;
						num1054 = (float)(Math.Cos(num1052 * localAI[1]) - 0.5) * num1053;
						position.X += num1054 * (float)(-direction);
						if (Math.Abs(Math.Cos(num1052 * localAI[1]) - 0.5) > 0.25)
						{
							spriteDirection = ((!(Math.Cos(num1052 * localAI[1]) - 0.5 >= 0.0)) ? 1 : (-1));
						}
						rotation = velocity.Y * (float)spriteDirection * 0.1f;
						if ((double)rotation < -0.2)
						{
							rotation = -0.2f;
						}
						if ((double)rotation > 0.2)
						{
							rotation = 0.2f;
						}
						alpha -= 6;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					if (this.ai[1] >= (float)num1051)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						if (!Collision.SolidCollision(position, width, height))
						{
							this.ai[1] = 1f;
						}
						SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
						TargetClosest();
						spriteDirection = direction;
						Vector2 vector135 = Main.player[target].Center - base.Center;
						vector135.Normalize();
						velocity = vector135 * 16f;
						rotation = velocity.ToRotation();
						if (direction == -1)
						{
							rotation += MathF.PI;
						}
						netUpdate = true;
					}
				}
				else
				{
					if (this.ai[0] != 1f)
					{
						return;
					}
					noGravity = true;
					if (!Collision.SolidCollision(position, width, height))
					{
						if (this.ai[1] < 1f)
						{
							this.ai[1] = 1f;
						}
					}
					else
					{
						alpha -= 15;
						if (alpha < 150)
						{
							alpha = 150;
						}
					}
					if (this.ai[1] >= 1f)
					{
						alpha -= 60;
						if (alpha < 0)
						{
							alpha = 0;
						}
						dontTakeDamage = false;
						this.ai[1]++;
						if (Collision.SolidCollision(position, width, height))
						{
							if (DeathSound != null)
							{
								SoundEngine.PlaySound(DeathSound, position);
							}
							life = 0;
							HitEffect();
							active = false;
							return;
						}
					}
					if (this.ai[1] >= 60f)
					{
						noGravity = false;
					}
					rotation = velocity.ToRotation();
					if (direction == -1)
					{
						rotation += MathF.PI;
					}
				}
			}
			else if (aiStyle == 72)
			{
				if (type == 384)
				{
					int num1055 = (int)this.ai[0];
					if (Main.npc[num1055].active && Main.npc[num1055].type == 383)
					{
						velocity = Vector2.Zero;
						position = Main.npc[num1055].Center;
						position.X -= width / 2;
						position.Y -= height / 2;
						gfxOffY = Main.npc[num1055].gfxOffY;
						Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.5f, 0.7f);
					}
					else
					{
						life = 0;
						HitEffect();
						active = false;
					}
				}
			}
			else if (aiStyle == 73)
			{
				TargetClosest(faceTarget: false);
				spriteDirection = direction;
				velocity.X *= 0.93f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				if (type == 387)
				{
					float num1056 = 120f;
					float num1057 = 60f;
					if (this.ai[1] < num1056)
					{
						this.ai[1]++;
						if (this.ai[1] > 60f)
						{
							float num1058 = (this.ai[1] - num1057) / (num1056 - num1057);
							alpha = (int)((1f - num1058) * 255f);
						}
						else
						{
							alpha = 255;
						}
						dontTakeDamage = true;
						frameCounter = 0.0;
						frame.Y = 0;
						float num1059 = this.ai[1] / num1057;
						Vector2 spinningpoint = new Vector2(0f, -30f);
						spinningpoint = spinningpoint.RotatedBy(num1059 * 1.5f * (MathF.PI * 2f)) * new Vector2(1f, 0.4f);
						for (int num1060 = 0; num1060 < 4; num1060++)
						{
							Vector2 vector136 = Vector2.Zero;
							float num1061 = 1f;
							if (num1060 == 0)
							{
								vector136 = Vector2.UnitY * -15f;
								num1061 = 0.15f;
							}
							if (num1060 == 1)
							{
								vector136 = Vector2.UnitY * -5f;
								num1061 = 0.3f;
							}
							if (num1060 == 2)
							{
								vector136 = Vector2.UnitY * 5f;
								num1061 = 0.6f;
							}
							if (num1060 == 3)
							{
								vector136 = Vector2.UnitY * 20f;
								num1061 = 0.45f;
							}
							int num1062 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
							Main.dust[num1062].noGravity = true;
							Main.dust[num1062].position = base.Center + spinningpoint * num1061 + vector136;
							Main.dust[num1062].velocity = Vector2.Zero;
							spinningpoint *= -1f;
							num1062 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
							Main.dust[num1062].noGravity = true;
							Main.dust[num1062].position = base.Center + spinningpoint * num1061 + vector136;
							Main.dust[num1062].velocity = Vector2.Zero;
						}
						Lighting.AddLight((int)base.Center.X / 16, (int)(base.Center.Y - 10f) / 16, 0.1f * num1059, 0.5f * num1059, 0.7f * num1059);
						return;
					}
					if (this.ai[1] == num1056)
					{
						this.ai[1]++;
						netUpdate = true;
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)(base.Center.Y - 10f) / 16, 0.1f, 0.5f, 0.7f);
					dontTakeDamage = false;
				}
				if (this.ai[0] < 60f)
				{
					this.ai[0]++;
				}
				if (justHit)
				{
					this.ai[0] = -30f;
					netUpdate = true;
				}
				if (this.ai[0] == 60f && Main.netMode != 1)
				{
					this.ai[0] = -120f;
					netUpdate = true;
					Vector2 center5 = Main.player[target].Center;
					Vector2 vector137 = base.Center - Vector2.UnitY * 10f;
					Vector2 vector138 = center5 - vector137;
					vector138.X += Main.rand.Next(-100, 101);
					vector138.Y += Main.rand.Next(-100, 101);
					vector138.X *= (float)Main.rand.Next(70, 131) * 0.01f;
					vector138.Y *= (float)Main.rand.Next(70, 131) * 0.01f;
					vector138.Normalize();
					if (float.IsNaN(vector138.X) || float.IsNaN(vector138.Y))
					{
						vector138 = -Vector2.UnitY;
					}
					vector138 *= 14f;
					int num1063 = 35;
					float num1064 = 1f;
					if (type >= 381 && type <= 392)
					{
						num1064 = 0.8f;
					}
					num1063 = GetAttackDamage_ForProjectiles(num1063, (float)num1063 * num1064);
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector137.X, vector137.Y, vector138.X, vector138.Y, 435, num1063, 0f, Main.myPlayer);
				}
			}
			else if (aiStyle == 74)
			{
				TargetClosest(faceTarget: false);
				rotation = velocity.ToRotation();
				if (rotation < -MathF.PI / 2f)
				{
					rotation += MathF.PI;
				}
				if (rotation > MathF.PI / 2f)
				{
					rotation -= MathF.PI;
				}
				if (Math.Sign(velocity.X) != 0)
				{
					spriteDirection = -Math.Sign(velocity.X);
				}
				if (type == 418)
				{
					spriteDirection = Math.Sign(velocity.X);
				}
				float num1065 = 0.4f;
				float num1066 = 10f;
				float num1067 = 200f;
				float num1068 = 0f;
				float num1069 = 750f;
				float num1070 = 0f;
				float num1071 = 30f;
				float num1072 = 30f;
				float num1073 = 0.95f;
				int num1074 = 50;
				float num1075 = 14f;
				float num1076 = 30f;
				float num1077 = 100f;
				float num1078 = 20f;
				float num1079 = 0f;
				float num1080 = 7f;
				bool flag57 = true;
				if (type == 418)
				{
					num1065 = 0.3f;
					num1066 = 8f;
					num1067 = 175f;
					num1068 = 175f;
					num1069 = 600f;
					num1070 = 80f;
					num1071 = 60f;
					num1072 = 20f;
					num1073 = 0.75f;
					num1074 = 0;
					num1075 = 9f;
					num1076 = 30f;
					num1077 = 150f;
					num1078 = 60f;
					num1079 = 4f / 15f;
					num1080 = 7f;
					flag57 = false;
				}
				num1079 *= num1078;
				if (Main.expertMode)
				{
					num1065 *= Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				}
				if (type == 388 && this.ai[0] != 3f)
				{
					position += netOffset;
					int num1081 = Dust.NewDust(position, width, height, 226, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num1081].noGravity = true;
					Main.dust[num1081].velocity = velocity / 5f;
					Vector2 spinningpoint2 = new Vector2(-10f, 10f);
					if (spriteDirection == 1)
					{
						spinningpoint2.X *= -1f;
					}
					spinningpoint2 = spinningpoint2.RotatedBy(rotation);
					Main.dust[num1081].position = base.Center + spinningpoint2;
					position -= netOffset;
				}
				if (type == 418)
				{
					int num1082 = ((this.ai[0] != 2f) ? 1 : 2);
					int num1083 = ((this.ai[0] == 2f) ? 30 : 20);
					for (int num1084 = 0; num1084 < 2; num1084++)
					{
						if (Main.rand.Next(3) < num1082)
						{
							position += netOffset;
							int num1085 = Dust.NewDust(base.Center - new Vector2(num1083), num1083 * 2, num1083 * 2, 6, velocity.X * 0.5f, velocity.Y * 0.5f, 90, default(Color), 1.5f);
							Main.dust[num1085].noGravity = true;
							Dust dust = Main.dust[num1085];
							dust.velocity *= 0.2f;
							Main.dust[num1085].fadeIn = 1f;
							position -= netOffset;
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					knockBackResist = num1065;
					float num1086 = num1066;
					Vector2 center6 = base.Center;
					Vector2 center7 = Main.player[target].Center;
					Vector2 vector139 = center7 - center6;
					Vector2 vector140 = vector139 - Vector2.UnitY * num1067;
					vector140 += Vector2.UnitX * ((vector139.X < 0f) ? num1068 : (0f - num1068));
					float num1087 = vector139.Length();
					vector139 = Vector2.Normalize(vector139) * num1086;
					vector140 = Vector2.Normalize(vector140) * num1086;
					bool flag58 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
					if (this.ai[3] >= 120f)
					{
						flag58 = true;
					}
					float num1088 = 8f;
					flag58 = flag58 && vector139.ToRotation() > MathF.PI / num1088 && vector139.ToRotation() < MathF.PI - MathF.PI / num1088;
					bool flag59 = num1087 < num1070;
					bool flag60 = num1087 > num1069;
					if (flag59 || flag60 || !flag58)
					{
						velocity.X = (velocity.X * (num1071 - 1f) + vector140.X) / num1071;
						velocity.Y = (velocity.Y * (num1071 - 1f) + vector140.Y) / num1071;
						if (!flag58)
						{
							if (!flag59 && !flag60)
							{
								this.ai[3]++;
							}
							if (this.ai[3] == 120f)
							{
								netUpdate = true;
							}
						}
						else
						{
							this.ai[3] = 0f;
						}
					}
					else
					{
						this.ai[0] = 1f;
						this.ai[2] = vector139.X;
						this.ai[3] = vector139.Y;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					knockBackResist = 0f;
					bool flag61 = true;
					if (type == 418)
					{
						flag61 = velocity.Length() > 2f;
						if (!flag61 && target >= 0 && !Main.player[target].DeadOrGhost)
						{
							Vector2 value = (Main.player[target].Center - base.Center).SafeNormalize(Vector2.Zero) * 0.1f;
							velocity = Vector2.Lerp(velocity, value, 0.25f);
						}
					}
					if (flag61)
					{
						velocity *= num1073;
					}
					this.ai[1]++;
					if (this.ai[1] >= num1072)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						netUpdate = true;
						Vector2 vector141 = new Vector2(this.ai[2], this.ai[3]) + new Vector2(Main.rand.Next(-num1074, num1074 + 1), Main.rand.Next(-num1074, num1074 + 1)) * 0.04f;
						vector141.Normalize();
						vector141 *= num1075;
						velocity = vector141;
					}
					if (type == 388 && Main.rand.Next(4) == 0)
					{
						position += netOffset;
						int num1089 = Dust.NewDust(position, width, height, 226, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num1089].noGravity = true;
						Dust dust = Main.dust[num1089];
						dust.velocity *= 2f;
						Main.dust[num1089].velocity = Main.dust[num1089].velocity / 2f + Vector2.Normalize(Main.dust[num1089].position - base.Center);
						position -= netOffset;
					}
				}
				else if (this.ai[0] == 2f)
				{
					knockBackResist = 0f;
					float num1090 = num1076;
					this.ai[1]++;
					bool flag62 = Vector2.Distance(base.Center, Main.player[target].Center) > num1077 && base.Center.Y > Main.player[target].Center.Y;
					if ((this.ai[1] >= num1090 && flag62) || velocity.Length() < num1080)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						velocity /= 2f;
						netUpdate = true;
						if (type == 418)
						{
							this.ai[1] = 45f;
							this.ai[0] = 4f;
						}
					}
					else
					{
						Vector2 center8 = base.Center;
						Vector2 center9 = Main.player[target].Center;
						Vector2 vector142 = center9 - center8;
						vector142.Normalize();
						if (vector142.HasNaNs())
						{
							vector142 = new Vector2(direction, 0f);
						}
						velocity = (velocity * (num1078 - 1f) + vector142 * (velocity.Length() + num1079)) / num1078;
					}
					if (flag57 && Collision.SolidCollision(position, width, height))
					{
						this.ai[0] = 3f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 4f)
				{
					this.ai[1] -= 3f;
					if (this.ai[1] <= 0f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					velocity *= 0.95f;
				}
				if (flag57 && this.ai[0] != 3f && Vector2.Distance(base.Center, Main.player[target].Center) < 64f)
				{
					this.ai[0] = 3f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				if (this.ai[0] != 3f)
				{
					return;
				}
				position = base.Center;
				width = (height = 192);
				position.X -= width / 2;
				position.Y -= height / 2;
				velocity = Vector2.Zero;
				damage = GetAttackDamage_ScaledByStrength(80f);
				alpha = 255;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.2f, 0.7f, 1.1f);
				for (int num1091 = 0; num1091 < 10; num1091++)
				{
					int num1092 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num1092];
					dust.velocity *= 1.4f;
					Main.dust[num1092].position = ((float)Main.rand.NextDouble() * (MathF.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
				}
				for (int num1093 = 0; num1093 < 40; num1093++)
				{
					int num1094 = Dust.NewDust(position, width, height, 226, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num1094].noGravity = true;
					Dust dust = Main.dust[num1094];
					dust.velocity *= 2f;
					Main.dust[num1094].position = ((float)Main.rand.NextDouble() * (MathF.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
					Main.dust[num1094].velocity = Main.dust[num1094].velocity / 2f + Vector2.Normalize(Main.dust[num1094].position - base.Center);
					if (Main.rand.Next(2) == 0)
					{
						num1094 = Dust.NewDust(position, width, height, 226, 0f, 0f, 100, default(Color), 0.9f);
						Main.dust[num1094].noGravity = true;
						dust = Main.dust[num1094];
						dust.velocity *= 1.2f;
						Main.dust[num1094].position = ((float)Main.rand.NextDouble() * (MathF.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
						Main.dust[num1094].velocity = Main.dust[num1094].velocity / 2f + Vector2.Normalize(Main.dust[num1094].position - base.Center);
					}
					if (Main.rand.Next(4) == 0)
					{
						num1094 = Dust.NewDust(position, width, height, 226, 0f, 0f, 100, default(Color), 0.7f);
						dust = Main.dust[num1094];
						dust.velocity *= 1.2f;
						Main.dust[num1094].position = ((float)Main.rand.NextDouble() * (MathF.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
						Main.dust[num1094].velocity = Main.dust[num1094].velocity / 2f + Vector2.Normalize(Main.dust[num1094].position - base.Center);
					}
				}
				this.ai[1]++;
				if (this.ai[1] >= 3f)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					life = 0;
					HitEffect();
					active = false;
				}
			}
			else if (aiStyle == 75)
			{
				int num1095 = -1;
				Vector2 vector143 = Vector2.Zero;
				int num1096 = 0;
				if (type == 390)
				{
					if (localAI[0] == 0f && Main.netMode != 1)
					{
						localAI[0] = 1f;
						int num1097 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 391, whoAmI);
						this.ai[0] = num1097;
						netUpdate = true;
					}
					int num1098 = (int)this.ai[0];
					if (Main.npc[num1098].active && Main.npc[num1098].type == 391)
					{
						DiscourageDespawn(60);
						num1095 = num1098;
						vector143 = Vector2.UnitY * -14f;
					}
				}
				if (type == 416)
				{
					if (localAI[0] == 0f && Main.netMode != 1)
					{
						localAI[0] = 1f;
						int num1099 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 415, whoAmI);
						this.ai[0] = num1099;
						netUpdate = true;
					}
					int num1100 = (int)this.ai[0];
					if (Main.npc[num1100].active && Main.npc[num1100].type == 415)
					{
						DiscourageDespawn(60);
						num1095 = num1100;
						vector143 = new Vector2(-Main.npc[num1100].spriteDirection * 10, -30f);
					}
				}
				else if (type == 392)
				{
					int num1101 = (int)this.ai[0];
					if (Main.npc[num1101].active && Main.npc[num1101].type == 395)
					{
						DiscourageDespawn(60);
						num1095 = num1101;
						vector143 = Vector2.UnitY * 2f;
						vector143 *= Main.npc[num1101].scale;
						float num1102 = Main.npc[num1101].rotation;
						vector143 = vector143.RotatedBy(num1102);
						rotation = num1102;
						if (Main.netMode != 1)
						{
							bool flag63 = true;
							if (Main.npc[num1101].ai[0] >= 1f || Main.npc[num1101].ai[0] < 0f)
							{
								flag63 = false;
							}
							if (flag63)
							{
								for (int num1103 = 0; num1103 < 2; num1103++)
								{
									if (Main.npc[(int)localAI[num1103]].active && Main.npc[(int)localAI[num1103]].type == 393)
									{
										flag63 = false;
									}
								}
								for (int num1104 = 2; num1104 < 4; num1104++)
								{
									if (Main.npc[(int)localAI[num1104]].active && Main.npc[(int)localAI[num1104]].type == 394)
									{
										flag63 = false;
									}
								}
							}
							if (Main.npc[num1101].ai[3] % 200f == 0f && Main.npc[num1101].ai[0] != 1f)
							{
								for (int num1105 = 0; num1105 < 2; num1105++)
								{
									if (Main.npc[(int)localAI[num1105]].active && Main.npc[(int)localAI[num1105]].type == 393)
									{
										Main.npc[(int)localAI[num1105]].netUpdate = true;
									}
								}
								for (int num1106 = 2; num1106 < 4; num1106++)
								{
									if (Main.npc[(int)localAI[num1106]].active && Main.npc[(int)localAI[num1106]].type == 394)
									{
										Main.npc[(int)localAI[num1106]].netUpdate = true;
									}
								}
								netUpdate = true;
							}
							if (flag63)
							{
								if (!Main.expertMode)
								{
									Main.npc[num1101].ai[0] = 3f;
									Main.npc[num1101].ai[1] = 0f;
									Main.npc[num1101].ai[2] = 0f;
									Main.npc[num1101].ai[3] = 0f;
									Main.npc[num1101].netUpdate = true;
								}
								else
								{
									Main.npc[num1101].ai[0] = 1f;
									Main.npc[num1101].ai[1] = 0f;
									Main.npc[num1101].ai[2] = 0f;
									Main.npc[num1101].ai[3] = 0f;
									Main.npc[num1101].netUpdate = true;
								}
							}
						}
					}
				}
				else if (type == 393)
				{
					int num1107 = (int)this.ai[0];
					if (Main.npc[num1107].active && Main.npc[num1107].type == 395)
					{
						DiscourageDespawn(60);
						num1095 = num1107;
						vector143 = Vector2.UnitY * 29f + ((this.ai[1] == 1f) ? Vector2.UnitX : (-Vector2.UnitX)) * 60f;
						vector143 *= Main.npc[num1107].scale;
						float num1108 = Main.npc[num1107].rotation;
						vector143 = vector143.RotatedBy(num1108);
						rotation = num1108;
					}
				}
				else if (type == 394)
				{
					int num1109 = (int)this.ai[0];
					if (Main.npc[num1109].active && Main.npc[num1109].type == 395)
					{
						DiscourageDespawn(60);
						num1095 = num1109;
						vector143 = Vector2.UnitY * -13f + ((this.ai[1] == 1f) ? Vector2.UnitX : (-Vector2.UnitX)) * 49f;
						vector143 *= Main.npc[num1109].scale;
						float num1110 = Main.npc[num1109].rotation;
						vector143 = vector143.RotatedBy(num1110);
						rotation = num1110;
						num1096 = ((this.ai[1] == 1f) ? 1 : (-1));
					}
				}
				else if (type == 492)
				{
					int num1111 = (int)this.ai[0];
					if (Main.npc[num1111].active && Main.npc[num1111].type == 491)
					{
						DiscourageDespawn(60);
						num1095 = num1111;
						vector143 = new Vector2((-122f + 68f * this.ai[1]) * (float)((Main.npc[num1111].spriteDirection != 1) ? 1 : (-1)), -6f);
						vector143 *= Main.npc[num1111].scale;
						float num1112 = Main.npc[num1111].rotation;
						vector143 = vector143.RotatedBy(num1112);
						rotation = num1112;
					}
				}
				if (num1095 != -1)
				{
					NPC nPC5 = Main.npc[num1095];
					velocity = Vector2.Zero;
					position = nPC5.Center;
					position.X -= width / 2;
					position.Y -= height / 2;
					position += vector143;
					gfxOffY = nPC5.gfxOffY;
					direction = nPC5.direction;
					if (num1096 == 0)
					{
						spriteDirection = nPC5.spriteDirection;
					}
					else
					{
						spriteDirection = num1096;
					}
					if (type == 390)
					{
						timeLeft = nPC5.timeLeft;
						velocity = nPC5.velocity;
						target = nPC5.target;
						if (this.ai[1] < 60f)
						{
							this.ai[1]++;
						}
						if (justHit)
						{
							this.ai[1] = -30f;
						}
						int num1113 = 438;
						int num1114 = 30;
						float num1115 = 7f;
						if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							Vector2 vector144 = Main.player[target].Center - base.Center;
							Vector2 vector145 = Vector2.Normalize(vector144);
							float num1116 = vector144.Length();
							float num1117 = 700f;
							if (type == 214)
							{
								num1117 = 550f;
							}
							if (type == 215)
							{
								num1117 = 800f;
							}
							if (num1116 < num1117)
							{
								if (this.ai[1] == 60f && Math.Sign(vector144.X) == direction)
								{
									this.ai[1] = -60f;
									Vector2 center10 = Main.player[target].Center;
									Vector2 vector146 = base.Center - Vector2.UnitY * 4f;
									Vector2 vector147 = center10 - vector146;
									vector147.X += Main.rand.Next(-50, 51);
									vector147.Y += Main.rand.Next(-50, 51);
									vector147.X *= (float)Main.rand.Next(80, 121) * 0.01f;
									vector147.Y *= (float)Main.rand.Next(80, 121) * 0.01f;
									vector147.Normalize();
									if (float.IsNaN(vector147.X) || float.IsNaN(vector147.Y))
									{
										vector147 = -Vector2.UnitY;
									}
									vector147 *= num1115;
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector146.X, vector146.Y, vector147.X, vector147.Y, num1113, num1114, 0f, Main.myPlayer);
									netUpdate = true;
								}
								else
								{
									float num1118 = this.ai[2];
									velocity.X *= 0.5f;
									this.ai[2] = 3f;
									if (Math.Abs(vector145.Y) > Math.Abs(vector145.X) * 2f)
									{
										if (vector145.Y > 0f)
										{
											this.ai[2] = 1f;
										}
										else
										{
											this.ai[2] = 5f;
										}
									}
									else if (Math.Abs(vector145.X) > Math.Abs(vector145.Y) * 2f)
									{
										this.ai[2] = 3f;
									}
									else if (vector145.Y > 0f)
									{
										this.ai[2] = 2f;
									}
									else
									{
										this.ai[2] = 4f;
									}
									if (this.ai[2] != num1118)
									{
										netUpdate = true;
									}
								}
							}
						}
					}
					if (type == 492)
					{
						timeLeft = nPC5.timeLeft;
						velocity = nPC5.velocity;
						if (this.ai[3] < 240f)
						{
							this.ai[3]++;
						}
						if (this.ai[3] == 2f)
						{
							TargetClosest(faceTarget: false);
						}
						if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							Vector2 vector148 = Main.player[target].Center - base.Center;
							Vector2 vector149 = Vector2.Normalize(vector148);
							if (this.ai[3] >= 240f)
							{
								this.ai[3] = 0f;
								Vector2 center11 = Main.player[target].Center;
								Vector2 center12 = base.Center;
								Vector2 vector150 = Vector2.Normalize(center11 - center12);
								if (float.IsNaN(vector150.X) || float.IsNaN(vector150.Y))
								{
									vector150 = Vector2.UnitY;
								}
								vector150 *= 14f;
								vector150 += Vector2.UnitY * -5f;
								if (Main.netMode != 1)
								{
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center12.X, center12.Y, vector150.X, vector150.Y, 240, 30, 0f, Main.myPlayer);
								}
								netUpdate = true;
							}
							else
							{
								float num1119 = this.ai[2];
								float[] array3 = new float[8];
								for (int num1120 = 0; num1120 < array3.Length; num1120++)
								{
									array3[num1120] = Vector2.Distance(base.Center + Vector2.UnitY.RotatedBy((float)num1120 * (-MathF.PI / 4f)) * 50f, Main.player[target].Center);
								}
								int num1121 = 0;
								for (int num1122 = 1; num1122 < array3.Length; num1122++)
								{
									if (array3[num1121] > array3[num1122])
									{
										num1121 = num1122;
									}
								}
								this.ai[2] = num1121 + 1;
								if (spriteDirection == 1)
								{
									this.ai[2] = 9f - this.ai[2];
								}
								if (this.ai[2] != num1119)
								{
									netUpdate = true;
								}
							}
						}
						else
						{
							if (this.ai[2] != 0f)
							{
								netUpdate = true;
							}
							this.ai[2] = 0f;
						}
					}
					if (type == 394)
					{
						timeLeft = nPC5.timeLeft;
						int attackDamage_ForProjectiles9 = GetAttackDamage_ForProjectiles(50f, 37f);
						this.ai[3] = nPC5.ai[3];
						float num1123 = 440f;
						float num1124 = 140f;
						if (this.ai[3] >= num1123 && this.ai[3] < num1123 + num1124)
						{
							float num1125 = this.ai[3] - num1123;
							if (num1125 % 20f == 0f)
							{
								if (Main.netMode != 1)
								{
									Vector2 spinningpoint3 = num1096 * Vector2.UnitX;
									spinningpoint3 = spinningpoint3.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.7853981852531433);
									spinningpoint3 *= 8f;
									Vector2 vector151 = num1096 * Vector2.UnitX * 36f + base.Center + Vector2.UnitY * 8f;
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector151.X, vector151.Y, spinningpoint3.X, spinningpoint3.Y, 448, attackDamage_ForProjectiles9, 0f, Main.myPlayer, 0f, 20f);
								}
								SoundEngine.PlaySound(SoundID.Item39, base.Center);
							}
						}
					}
					if (type == 393)
					{
						timeLeft = nPC5.timeLeft;
						int attackDamage_ForProjectiles10 = GetAttackDamage_ForProjectiles(35f, 30f);
						this.ai[3] = nPC5.ai[3];
						float num1126 = 280f;
						float num1127 = 140f;
						bool flag64 = this.ai[3] >= num1126 && this.ai[3] < num1126 + num1127;
						if (!flag64)
						{
							TargetClosest(faceTarget: false);
							Player player5 = Main.player[target];
							Vector2 v = player5.Center - base.Center;
							if (v.Y < 0f)
							{
								v.Y = 0f;
							}
							v.Normalize();
							if (float.IsNaN(v.X) || float.IsNaN(v.Y))
							{
								v = Vector2.UnitY;
							}
							this.ai[2] = v.ToRotation();
						}
						if (flag64)
						{
							float num1128 = this.ai[3] - num1126;
							if (num1128 % 6f == 0f)
							{
								if (Main.netMode != 1)
								{
									Vector2 spinningpoint4 = this.ai[2].ToRotationVector2();
									spinningpoint4 = spinningpoint4.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.7853981852531433 / 3.0);
									spinningpoint4 *= 16f;
									Vector2 vector152 = base.Center + spinningpoint4 * 1f;
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector152.X, vector152.Y, spinningpoint4.X, spinningpoint4.Y, 449, attackDamage_ForProjectiles10, 0f, Main.myPlayer);
								}
								SoundEngine.PlaySound(SoundID.Item12, base.Center);
							}
						}
					}
					if (type != 392)
					{
						return;
					}
					timeLeft = nPC5.timeLeft;
					int attackDamage_ForProjectiles11 = GetAttackDamage_ForProjectiles(50f, 50f);
					this.ai[3] = nPC5.ai[3];
					float num1129 = 20f;
					float num1130 = 240f;
					if (this.ai[3] >= num1129 && this.ai[3] < num1129 + num1130 && nPC5.ai[0] == 0f)
					{
						float num1131 = this.ai[3] - num1129;
						if (num1131 == 0f)
						{
							if (Main.netMode != 1)
							{
								Vector2 center13 = base.Center;
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center13.X, center13.Y, 0f, 0f, 447, attackDamage_ForProjectiles11, 0f, Main.myPlayer, whoAmI + 1);
							}
							SoundEngine.PlaySound(SoundID.Item12, base.Center);
						}
					}
					bool flag65 = false;
					int maxValue4 = 1000;
					int maxValue5 = 1000;
					int num1132 = 450;
					int attackDamage_ForProjectiles12 = GetAttackDamage_ForProjectiles(30f, 25f);
					if (nPC5.ai[0] == 2f)
					{
						flag65 = true;
						maxValue5 = 120;
						maxValue4 = 120;
					}
					if (!flag65)
					{
						num1129 = 280f;
						num1130 = 120f;
						flag65 = flag65 || (this.ai[3] >= num1129 && this.ai[3] < num1129 + num1130);
						if (flag65)
						{
							maxValue5 = 90;
							maxValue4 = 60;
						}
					}
					if (!flag65)
					{
						num1129 = 440f;
						num1130 = 140f;
						flag65 = flag65 || (this.ai[3] >= num1129 && this.ai[3] < num1129 + num1130);
						if (flag65)
						{
							maxValue5 = 60;
							maxValue4 = 90;
						}
					}
					bool flag66 = true;
					bool flag67 = true;
					bool flag68 = true;
					bool flag69 = true;
					if (Main.npc[(int)localAI[0]].active && Main.npc[(int)localAI[0]].type == 393)
					{
						flag66 = false;
					}
					if (Main.npc[(int)localAI[1]].active && Main.npc[(int)localAI[1]].type == 393)
					{
						flag67 = false;
					}
					if (Main.npc[(int)localAI[2]].active && Main.npc[(int)localAI[2]].type == 394)
					{
						flag68 = false;
					}
					if (Main.npc[(int)localAI[3]].active && Main.npc[(int)localAI[3]].type == 394)
					{
						flag69 = false;
					}
					if (flag65)
					{
						bool flag70 = true;
						if (flag66 && Main.rand.Next(maxValue4) == 0)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint5 = new Vector2(-1f * (float)Main.rand.NextDouble() * 3f, 1f);
								spinningpoint5 = spinningpoint5.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.7853981852531433);
								spinningpoint5 *= 3f;
								Vector2 vector153 = -1f * Vector2.UnitX * Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * Main.rand.Next(30, 45);
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector153.X, vector153.Y, spinningpoint5.X, spinningpoint5.Y, num1132, attackDamage_ForProjectiles12, 0f, Main.myPlayer);
							}
							SoundEngine.PlaySound(SoundID.Item39, base.Center);
						}
						if (flag67 && Main.rand.Next(maxValue4) == 0)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint6 = new Vector2(1f * (float)Main.rand.NextDouble() * 3f, 1f);
								spinningpoint6 = spinningpoint6.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.7853981852531433);
								spinningpoint6 *= 3f;
								Vector2 vector154 = 1f * Vector2.UnitX * Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * Main.rand.Next(30, 45);
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector154.X, vector154.Y, spinningpoint6.X, spinningpoint6.Y, num1132, attackDamage_ForProjectiles12, 0f, Main.myPlayer);
							}
							SoundEngine.PlaySound(SoundID.Item39, base.Center);
						}
					}
					if (flag65)
					{
						bool flag71 = true;
						if (flag68 && Main.rand.Next(maxValue5) == 0)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint7 = new Vector2(-1f * (float)Main.rand.NextDouble() * 2f, -1f);
								spinningpoint7 = spinningpoint7.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.7853981852531433);
								spinningpoint7 *= 3f;
								Vector2 vector155 = -1f * Vector2.UnitX * Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * Main.rand.Next(-30, -10);
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector155.X, vector155.Y, spinningpoint7.X, spinningpoint7.Y, num1132, attackDamage_ForProjectiles12, 0f, Main.myPlayer);
							}
							SoundEngine.PlaySound(SoundID.Item39, base.Center);
						}
						if (flag69 && Main.rand.Next(maxValue5) == 0)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint8 = new Vector2(1f * (float)Main.rand.NextDouble() * 2f, -1f);
								spinningpoint8 = spinningpoint8.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.7853981852531433);
								spinningpoint8 *= 3f;
								Vector2 vector156 = 1f * Vector2.UnitX * Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * Main.rand.Next(-30, -10);
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector156.X, vector156.Y, spinningpoint8.X, spinningpoint8.Y, num1132, attackDamage_ForProjectiles12, 0f, Main.myPlayer);
							}
							SoundEngine.PlaySound(SoundID.Item39, base.Center);
						}
					}
					if (flag66 && Main.rand.Next(8) == 0)
					{
						int num1133 = Dust.NewDust(-1f * Vector2.UnitX * Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * Main.rand.Next(15, 30), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num1133].velocity = new Vector2(-1f * (float)Main.rand.NextDouble() * 3f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.7853981852531433);
						Dust dust = Main.dust[num1133];
						dust.velocity *= 0.5f;
						Main.dust[num1133].velocity.Y = 0f - Math.Abs(Main.dust[num1133].velocity.Y);
					}
					if (flag67 && Main.rand.Next(8) == 0)
					{
						int num1134 = Dust.NewDust(Vector2.UnitX * Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * Main.rand.Next(15, 30), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num1134].velocity = new Vector2((float)Main.rand.NextDouble() * 3f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.7853981852531433);
						Dust dust = Main.dust[num1134];
						dust.velocity *= 0.5f;
						Main.dust[num1134].velocity.Y = 0f - Math.Abs(Main.dust[num1134].velocity.Y);
					}
					if (flag68 && Main.rand.Next(8) == 0)
					{
						int num1135 = Dust.NewDust(-1f * Vector2.UnitX * Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * Main.rand.Next(-30, -10), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num1135].velocity = new Vector2(-1f * (float)Main.rand.NextDouble() * 2f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.7853981852531433);
						Dust dust = Main.dust[num1135];
						dust.velocity *= 0.5f;
						Main.dust[num1135].velocity.Y = 0f - Math.Abs(Main.dust[num1135].velocity.Y);
					}
					if (flag69 && Main.rand.Next(8) == 0)
					{
						int num1136 = Dust.NewDust(Vector2.UnitX * Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * Main.rand.Next(-30, -10), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num1136].velocity = new Vector2((float)Main.rand.NextDouble() * 2f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.7853981852531433);
						Dust dust = Main.dust[num1136];
						dust.velocity *= 0.5f;
						Main.dust[num1136].velocity.Y = 0f - Math.Abs(Main.dust[num1136].velocity.Y);
					}
				}
				else if (type == 390)
				{
					Transform(382);
				}
				else if (type == 416)
				{
					Transform(518);
				}
				else
				{
					life = 0;
					HitEffect();
					active = false;
				}
			}
			else if (aiStyle == 76)
			{
				if (localAI[3] == 0f && Main.netMode != 1 && type == 395)
				{
					localAI[3] = 1f;
					int[] array4 = new int[4];
					int num1137 = 0;
					for (int num1138 = 0; num1138 < 2; num1138++)
					{
						int num1139 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X + num1138 * 300 - 150, (int)base.Center.Y, 393, whoAmI);
						Main.npc[num1139].ai[1] = num1138;
						Main.npc[num1139].netUpdate = true;
						array4[num1137++] = num1139;
					}
					for (int num1140 = 0; num1140 < 2; num1140++)
					{
						int num1141 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X + num1140 * 300 - 150, (int)base.Center.Y, 394, whoAmI);
						Main.npc[num1141].ai[1] = num1140;
						Main.npc[num1141].netUpdate = true;
						array4[num1137++] = num1141;
					}
					int num1142 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 392, whoAmI);
					Main.npc[num1142].ai[0] = whoAmI;
					Main.npc[num1142].netUpdate = true;
					for (int num1143 = 0; num1143 < 4; num1143++)
					{
						Main.npc[array4[num1143]].ai[0] = whoAmI;
					}
					for (int num1144 = 0; num1144 < 4; num1144++)
					{
						Main.npc[num1142].localAI[num1144] = array4[num1144];
					}
				}
				if (this.ai[0] == 3f)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					return;
				}
				Vector2 center14 = base.Center;
				Player player6 = Main.player[target];
				float num1145 = 5600f;
				if (target < 0 || target == 255 || player6.dead || !player6.active || Vector2.Distance(player6.Center, center14) > num1145)
				{
					TargetClosest();
					player6 = Main.player[target];
					netUpdate = true;
				}
				if ((player6.dead || !player6.active || Vector2.Distance(player6.Center, center14) > num1145) && this.ai[0] != 1f)
				{
					if (this.ai[0] == 0f)
					{
						this.ai[0] = -1f;
					}
					if (this.ai[0] == 2f)
					{
						this.ai[0] = -2f;
					}
					netUpdate = true;
				}
				if (this.ai[0] == -1f || this.ai[0] == -2f)
				{
					velocity.Y -= 0.4f;
					EncourageDespawn(10);
					if (!player6.dead)
					{
						timeLeft = 300;
						if (this.ai[0] == -2f)
						{
							this.ai[0] = 2f;
						}
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 0f;
						}
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 0f)
				{
					int num1146 = 0;
					int num1147 = 0;
					if (this.ai[3] >= 580f)
					{
						num1146 = 0;
					}
					else if (this.ai[3] >= 440f)
					{
						num1146 = 5;
					}
					else if (this.ai[3] >= 420f)
					{
						num1146 = 4;
					}
					else if (this.ai[3] >= 280f)
					{
						num1146 = 3;
					}
					else if (this.ai[3] >= 260f)
					{
						num1146 = 2;
					}
					else if (this.ai[3] >= 20f)
					{
						num1146 = 1;
					}
					this.ai[3]++;
					if (this.ai[3] >= 600f)
					{
						this.ai[3] = 0f;
					}
					num1147 = num1146;
					if (this.ai[3] >= 580f)
					{
						num1146 = 0;
					}
					else if (this.ai[3] >= 440f)
					{
						num1146 = 5;
					}
					else if (this.ai[3] >= 420f)
					{
						num1146 = 4;
					}
					else if (this.ai[3] >= 280f)
					{
						num1146 = 3;
					}
					else if (this.ai[3] >= 260f)
					{
						num1146 = 2;
					}
					else if (this.ai[3] >= 20f)
					{
						num1146 = 1;
					}
					if (num1146 != num1147)
					{
						if (num1146 == 0)
						{
							this.ai[2] = 0f;
						}
						if (num1146 == 1)
						{
							this.ai[2] = ((Math.Sign((player6.Center - center14).X) == 1) ? 1 : (-1));
						}
						if (num1146 == 2)
						{
							this.ai[2] = 0f;
						}
						netUpdate = true;
					}
					if (num1146 == 0)
					{
						if (this.ai[2] == 0f)
						{
							this.ai[2] = -600 * Math.Sign((center14 - player6.Center).X);
						}
						Vector2 vector157 = player6.Center + new Vector2(this.ai[2], -250f) - center14;
						if (vector157.Length() < 50f)
						{
							this.ai[3] = 19f;
						}
						else
						{
							vector157.Normalize();
							velocity = Vector2.Lerp(velocity, vector157 * 16f, 0.1f);
						}
					}
					if (num1146 == 1)
					{
						int num1148 = (int)base.Center.X / 16;
						int num1149 = (int)(position.Y + (float)height) / 16;
						int num1150 = 0;
						if (Main.tile[num1148, num1149].nactive() && Main.tileSolid[Main.tile[num1148, num1149].type] && !Main.tileSolidTop[Main.tile[num1148, num1149].type])
						{
							num1150 = 1;
						}
						else
						{
							for (; num1150 < 150 && num1149 + num1150 < Main.maxTilesY; num1150++)
							{
								int num1151 = num1149 + num1150;
								if (Main.tile[num1148, num1151].nactive() && Main.tileSolid[Main.tile[num1148, num1151].type] && !Main.tileSolidTop[Main.tile[num1148, num1151].type])
								{
									num1150--;
									break;
								}
							}
						}
						float num1152 = num1150 * 16;
						float num1153 = 250f;
						if (num1152 < num1153)
						{
							float num1154 = -4f;
							if (0f - num1154 > num1152)
							{
								num1154 = 0f - num1152;
							}
							velocity.Y = MathHelper.Lerp(velocity.Y, num1154, 0.05f);
						}
						else
						{
							velocity.Y *= 0.95f;
						}
						velocity.X = 3.5f * this.ai[2];
					}
					switch (num1146)
					{
					case 2:
					{
						if (this.ai[2] == 0f)
						{
							this.ai[2] = 300 * Math.Sign((center14 - player6.Center).X);
						}
						Vector2 vector158 = player6.Center + new Vector2(this.ai[2], -170f) - center14;
						int num1163 = (int)base.Center.X / 16;
						int num1164 = (int)(position.Y + (float)height) / 16;
						int num1165 = 0;
						if (Main.tile[num1163, num1164].nactive() && Main.tileSolid[Main.tile[num1163, num1164].type] && !Main.tileSolidTop[Main.tile[num1163, num1164].type])
						{
							num1165 = 1;
						}
						else
						{
							for (; num1165 < 150 && num1164 + num1165 < Main.maxTilesY; num1165++)
							{
								int num1166 = num1164 + num1165;
								if (Main.tile[num1163, num1166].nactive() && Main.tileSolid[Main.tile[num1163, num1166].type] && !Main.tileSolidTop[Main.tile[num1163, num1166].type])
								{
									num1165--;
									break;
								}
							}
						}
						float num1167 = num1165 * 16;
						float num1168 = 170f;
						if (num1167 < num1168)
						{
							vector158.Y -= num1168 - num1167;
						}
						if (vector158.Length() < 70f)
						{
							this.ai[3] = 279f;
							break;
						}
						vector158.Normalize();
						velocity = Vector2.Lerp(velocity, vector158 * 20f, 0.1f);
						break;
					}
					case 3:
					{
						float num1155 = 0.85f;
						int num1156 = (int)base.Center.X / 16;
						int num1157 = (int)(position.Y + (float)height) / 16;
						int num1158 = 0;
						if (Main.tile[num1156, num1157].nactive() && Main.tileSolid[Main.tile[num1156, num1157].type] && !Main.tileSolidTop[Main.tile[num1156, num1157].type])
						{
							num1158 = 1;
						}
						else
						{
							for (; num1158 < 150 && num1157 + num1158 < Main.maxTilesY; num1158++)
							{
								int num1159 = num1157 + num1158;
								if (Main.tile[num1156, num1159].nactive() && Main.tileSolid[Main.tile[num1156, num1159].type] && !Main.tileSolidTop[Main.tile[num1156, num1159].type])
								{
									num1158--;
									break;
								}
							}
						}
						float num1160 = num1158 * 16;
						float num1161 = 170f;
						if (num1160 < num1161)
						{
							float num1162 = -4f;
							if (0f - num1162 > num1160)
							{
								num1162 = 0f - num1160;
							}
							velocity.Y = MathHelper.Lerp(velocity.Y, num1162, 0.05f);
						}
						else
						{
							velocity.Y *= num1155;
						}
						velocity.X *= num1155;
						break;
					}
					}
					switch (num1146)
					{
					case 4:
					{
						Vector2 vector159 = player6.Center + new Vector2(0f, -250f) - center14;
						if (vector159.Length() < 50f)
						{
							this.ai[3] = 439f;
							break;
						}
						vector159.Normalize();
						velocity = Vector2.Lerp(velocity, vector159 * 16f, 0.1f);
						break;
					}
					case 5:
						velocity *= 0.85f;
						break;
					}
				}
				else if (this.ai[0] == 1f)
				{
					dontTakeDamage = false;
					velocity *= 0.96f;
					float num1169 = 150f;
					this.ai[1]++;
					if (this.ai[1] >= num1169)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						rotation = 0f;
						netUpdate = true;
					}
					else if (this.ai[1] < 40f)
					{
						rotation = Vector2.UnitY.RotatedBy(this.ai[1] / 40f * (MathF.PI * 2f)).Y * 0.2f;
					}
					else if (this.ai[1] < 80f)
					{
						rotation = Vector2.UnitY.RotatedBy(this.ai[1] / 20f * (MathF.PI * 2f)).Y * 0.3f;
					}
					else if (this.ai[1] < 120f)
					{
						rotation = Vector2.UnitY.RotatedBy(this.ai[1] / 10f * (MathF.PI * 2f)).Y * 0.4f;
					}
					else
					{
						rotation = (this.ai[1] - 120f) / 30f * (MathF.PI * 2f);
					}
				}
				else if (this.ai[0] == 2f)
				{
					int num1170 = 80;
					float num1171 = 3600f;
					float num1172 = 120f;
					float num1173 = 60f;
					int num1174 = 0;
					if (this.ai[3] % num1172 >= num1173)
					{
						num1174 = 1;
					}
					int num1175 = num1174;
					num1174 = 0;
					this.ai[3]++;
					if (this.ai[3] % num1172 >= num1173)
					{
						num1174 = 1;
					}
					if (num1174 != num1175)
					{
						if (num1174 == 1)
						{
							this.ai[2] = ((Math.Sign((player6.Center - center14).X) == 1) ? 1 : (-1));
							if (Main.netMode != 1)
							{
								Vector2 center15 = base.Center;
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center15.X, center15.Y, 0f, 0f, 447, num1170, 0f, Main.myPlayer, whoAmI + 1);
							}
							SoundEngine.PlaySound(SoundID.Item12, base.Center);
						}
						netUpdate = true;
					}
					if (this.ai[3] >= num1171)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					else if (num1174 == 0)
					{
						Vector2 vector160 = player6.Center + new Vector2(this.ai[2] * 350f, -250f) - center14;
						vector160.Normalize();
						velocity = Vector2.Lerp(velocity, vector160 * 16f, 0.1f);
					}
					else
					{
						int num1176 = (int)base.Center.X / 16;
						int num1177 = (int)(position.Y + (float)height) / 16;
						int num1178 = 0;
						if (Main.tile[num1176, num1177].nactive() && Main.tileSolid[Main.tile[num1176, num1177].type] && !Main.tileSolidTop[Main.tile[num1176, num1177].type])
						{
							num1178 = 1;
						}
						else
						{
							for (; num1178 < 150 && num1177 + num1178 < Main.maxTilesY; num1178++)
							{
								int num1179 = num1177 + num1178;
								if (Main.tile[num1176, num1179].nactive() && Main.tileSolid[Main.tile[num1176, num1179].type] && !Main.tileSolidTop[Main.tile[num1176, num1179].type])
								{
									num1178--;
									break;
								}
							}
						}
						float num1180 = num1178 * 16;
						float num1181 = 250f;
						if (num1180 < num1181)
						{
							float num1182 = -4f;
							if (0f - num1182 > num1180)
							{
								num1182 = 0f - num1180;
							}
							velocity.Y = MathHelper.Lerp(velocity.Y, num1182, 0.05f);
						}
						else
						{
							velocity.Y *= 0.95f;
						}
						velocity.X = 8f * this.ai[2];
					}
					rotation = 0f;
				}
				bool flag72 = false;
				if (position.Y < -100f)
				{
					flag72 = true;
				}
				if (position.X < -100f)
				{
					flag72 = true;
				}
				if (position.Y > (float)(Main.maxTilesY * 16 + 100))
				{
					flag72 = true;
				}
				if (position.X > (float)(Main.maxTilesX * 16 + 100))
				{
					flag72 = true;
				}
				if (flag72)
				{
					position = Vector2.Clamp(position, new Vector2(-100f), new Vector2(100f) + new Vector2(Main.maxTilesX, Main.maxTilesY) * 16f);
					active = false;
					netUpdate = true;
				}
			}
			else if (aiStyle == 77)
			{
				if (this.ai[0] != -1f && this.ai[0] != 2f && Main.rand.Next(200) == 0)
				{
					SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, Main.rand.Next(93, 100));
				}
				if (localAI[3] == 0f)
				{
					netUpdate = true;
					localAI[3] = 1f;
					this.ai[0] = -1f;
				}
				if (this.ai[0] == -2f)
				{
					dontTakeDamage = true;
					this.ai[1]++;
					if (this.ai[1] == 30f)
					{
						SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 92);
					}
					if (this.ai[1] < 60f)
					{
						MoonlordDeathDrama.RequestLight(this.ai[1] / 30f, base.Center);
					}
					if (this.ai[1] == 60f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						if (Main.netMode != 1 && type == 398)
						{
							this.ai[2] = Main.rand.Next(3);
							this.ai[2] = 0f;
							netUpdate = true;
						}
					}
				}
				if (this.ai[0] == -1f)
				{
					dontTakeDamage = true;
					this.ai[1]++;
					if (this.ai[1] == 30f)
					{
						SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 92);
					}
					if (this.ai[1] < 60f)
					{
						MoonlordDeathDrama.RequestLight(this.ai[1] / 30f, base.Center);
					}
					if (this.ai[1] == 60f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						if (Main.netMode != 1 && type == 398)
						{
							this.ai[2] = Main.rand.Next(3);
							this.ai[2] = 0f;
							netUpdate = true;
							int[] array5 = new int[3];
							int num1183 = 0;
							for (int num1184 = 0; num1184 < 2; num1184++)
							{
								int num1185 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X + num1184 * 800 - 400, (int)base.Center.Y - 100, 397, whoAmI);
								Main.npc[num1185].ai[2] = num1184;
								Main.npc[num1185].netUpdate = true;
								array5[num1183++] = num1185;
							}
							int num1186 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y - 400, 396, whoAmI);
							Main.npc[num1186].netUpdate = true;
							array5[num1183++] = num1186;
							for (int num1187 = 0; num1187 < 3; num1187++)
							{
								Main.npc[array5[num1187]].ai[3] = whoAmI;
							}
							for (int num1188 = 0; num1188 < 3; num1188++)
							{
								localAI[num1188] = array5[num1188];
							}
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					dontTakeDamage = true;
					TargetClosest(faceTarget: false);
					Vector2 vector161 = Main.player[target].Center - base.Center + new Vector2(0f, 130f);
					if (vector161.Length() > 20f)
					{
						Vector2 desiredVelocity = Vector2.Normalize(vector161 - velocity) * 8f;
						Vector2 value2 = velocity;
						SimpleFlyMovement(desiredVelocity, 0.5f);
						velocity = Vector2.Lerp(velocity, value2, 0.5f);
					}
					if (Main.netMode != 1)
					{
						bool flag73 = false;
						if (localAI[0] < 0f || localAI[1] < 0f || localAI[2] < 0f)
						{
							flag73 = true;
						}
						else if (!Main.npc[(int)localAI[0]].active || Main.npc[(int)localAI[0]].type != 397)
						{
							flag73 = true;
						}
						else if (!Main.npc[(int)localAI[1]].active || Main.npc[(int)localAI[1]].type != 397)
						{
							flag73 = true;
						}
						else if (!Main.npc[(int)localAI[2]].active || Main.npc[(int)localAI[2]].type != 396)
						{
							flag73 = true;
						}
						if (flag73)
						{
							life = 0;
							HitEffect();
							active = false;
						}
						bool flag74 = true;
						if (Main.npc[(int)localAI[0]].ai[0] != -2f)
						{
							flag74 = false;
						}
						if (Main.npc[(int)localAI[1]].ai[0] != -2f)
						{
							flag74 = false;
						}
						if (Main.npc[(int)localAI[2]].ai[0] != -2f)
						{
							flag74 = false;
						}
						if (flag74)
						{
							this.ai[0] = 1f;
							dontTakeDamage = false;
							netUpdate = true;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					dontTakeDamage = false;
					TargetClosest(faceTarget: false);
					Vector2 vector162 = Main.player[target].Center - base.Center + new Vector2(0f, 130f);
					if (vector162.Length() > 20f)
					{
						Vector2 desiredVelocity2 = Vector2.Normalize(vector162 - velocity) * 8f;
						Vector2 value3 = velocity;
						SimpleFlyMovement(desiredVelocity2, 0.5f);
						velocity = Vector2.Lerp(velocity, value3, 0.5f);
					}
				}
				else if (this.ai[0] == 2f)
				{
					dontTakeDamage = true;
					velocity = Vector2.Lerp(value2: new Vector2(direction, -0.5f), value1: velocity, amount: 0.98f);
					this.ai[1]++;
					if (this.ai[1] < 60f)
					{
						MoonlordDeathDrama.RequestLight(this.ai[1] / 60f, base.Center);
					}
					if (this.ai[1] == 60f)
					{
						for (int num1189 = 0; num1189 < 1000; num1189++)
						{
							Projectile projectile = Main.projectile[num1189];
							if (projectile.active && (projectile.type == 456 || projectile.type == 462 || projectile.type == 455 || projectile.type == 452 || projectile.type == 454))
							{
								projectile.Kill();
							}
						}
						for (int num1190 = 0; num1190 < 200; num1190++)
						{
							NPC nPC6 = Main.npc[num1190];
							if (nPC6.active && nPC6.type == 400)
							{
								nPC6.HitEffect(0, 9999.0);
								nPC6.active = false;
							}
						}
					}
					if (this.ai[1] % 3f == 0f && this.ai[1] < 580f && this.ai[1] > 60f)
					{
						Vector2 vector163 = Utils.RandomVector2(Main.rand, -1f, 1f);
						if (vector163 != Vector2.Zero)
						{
							vector163.Normalize();
						}
						vector163 *= 20f + Main.rand.NextFloat() * 400f;
						bool flag75 = true;
						Vector2 vector164 = base.Center + vector163;
						Point point7 = vector164.ToTileCoordinates();
						if (!WorldGen.InWorld(point7.X, point7.Y))
						{
							flag75 = false;
						}
						if (flag75 && WorldGen.SolidTile(point7.X, point7.Y))
						{
							flag75 = false;
						}
						float num1191 = Main.rand.Next(6, 19);
						float num1192 = MathF.PI * 2f / num1191;
						float num1193 = MathF.PI * 2f * Main.rand.NextFloat();
						float num1194 = 1f + Main.rand.NextFloat() * 2f;
						float num1195 = 1f + Main.rand.NextFloat();
						float fadeIn = 0.4f + Main.rand.NextFloat();
						int num1196 = Utils.SelectRandom<int>(Main.rand, 31, 229);
						if (flag75)
						{
							MoonlordDeathDrama.AddExplosion(vector164);
							for (float num1197 = 0f; num1197 < num1191 * 2f; num1197++)
							{
								Dust dust6 = Main.dust[Dust.NewDust(vector164, 0, 0, 229)];
								dust6.noGravity = true;
								dust6.position = vector164;
								dust6.velocity = Vector2.UnitY.RotatedBy(num1193 + num1192 * num1197) * num1194 * (Main.rand.NextFloat() * 1.6f + 1.6f);
								dust6.fadeIn = fadeIn;
								dust6.scale = num1195;
							}
						}
						for (float num1198 = 0f; num1198 < this.ai[1] / 60f; num1198++)
						{
							Vector2 vector165 = Utils.RandomVector2(Main.rand, -1f, 1f);
							if (vector165 != Vector2.Zero)
							{
								vector165.Normalize();
							}
							vector165 *= 20f + Main.rand.NextFloat() * 800f;
							Vector2 vec = base.Center + vector165;
							Point point8 = vec.ToTileCoordinates();
							bool flag76 = true;
							if (!WorldGen.InWorld(point8.X, point8.Y))
							{
								flag76 = false;
							}
							if (flag76 && WorldGen.SolidTile(point8.X, point8.Y))
							{
								flag76 = false;
							}
							if (flag76)
							{
								Dust dust7 = Main.dust[Dust.NewDust(vec, 0, 0, num1196)];
								dust7.noGravity = true;
								dust7.position = vec;
								dust7.velocity = -Vector2.UnitY * num1194 * (Main.rand.NextFloat() * 0.9f + 1.6f);
								dust7.fadeIn = fadeIn;
								dust7.scale = num1195;
							}
						}
					}
					if (this.ai[1] % 15f == 0f && this.ai[1] < 480f && this.ai[1] >= 90f && Main.netMode != 1)
					{
						Vector2 vector166 = Utils.RandomVector2(Main.rand, -1f, 1f);
						if (vector166 != Vector2.Zero)
						{
							vector166.Normalize();
						}
						vector166 *= 20f + Main.rand.NextFloat() * 400f;
						bool flag77 = true;
						Vector2 vec2 = base.Center + vector166;
						Point point9 = vec2.ToTileCoordinates();
						if (!WorldGen.InWorld(point9.X, point9.Y))
						{
							flag77 = false;
						}
						if (flag77 && WorldGen.SolidTile(point9.X, point9.Y))
						{
							flag77 = false;
						}
						if (flag77)
						{
							float num1199 = (float)(Main.rand.Next(4) < 2).ToDirectionInt() * (MathF.PI / 8f + MathF.PI / 4f * Main.rand.NextFloat());
							Vector2 vector167 = new Vector2(0f, (0f - Main.rand.NextFloat()) * 0.5f - 0.5f).RotatedBy(num1199) * 6f;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vec2.X, vec2.Y, vector167.X, vector167.Y, 622, 0, 0f, Main.myPlayer);
						}
					}
					if (this.ai[1] == 1f)
					{
						SoundEngine.PlaySound(SoundID.NPCDeath61, base.Center);
					}
					if (this.ai[1] >= 480f)
					{
						MoonlordDeathDrama.RequestLight((this.ai[1] - 480f) / 120f, base.Center);
					}
					if (this.ai[1] >= 600f)
					{
						life = 0;
						HitEffect(0, 1337.0);
						checkDead();
						return;
					}
				}
				else if (this.ai[0] == 3f)
				{
					dontTakeDamage = true;
					velocity = Vector2.Lerp(value2: new Vector2(direction, -0.5f), value1: velocity, amount: 0.98f);
					this.ai[1]++;
					if (this.ai[1] < 60f)
					{
						MoonlordDeathDrama.RequestLight(this.ai[1] / 40f, base.Center);
					}
					if (this.ai[1] == 40f)
					{
						for (int num1200 = 0; num1200 < 1000; num1200++)
						{
							Projectile projectile2 = Main.projectile[num1200];
							if (projectile2.active && (projectile2.type == 456 || projectile2.type == 462 || projectile2.type == 455 || projectile2.type == 452 || projectile2.type == 454))
							{
								projectile2.active = false;
								if (Main.netMode != 1)
								{
									NetMessage.SendData(27, -1, -1, null, num1200);
								}
							}
						}
						for (int num1201 = 0; num1201 < 200; num1201++)
						{
							NPC nPC7 = Main.npc[num1201];
							if (nPC7.active && nPC7.type == 400)
							{
								nPC7.active = false;
								if (Main.netMode != 1)
								{
									NetMessage.SendData(23, -1, -1, null, nPC7.whoAmI);
								}
							}
						}
						for (int num1202 = 0; num1202 < 600; num1202++)
						{
							Gore gore2 = Main.gore[num1202];
							if (gore2.active && gore2.type >= 619 && gore2.type <= 622)
							{
								gore2.active = false;
							}
						}
					}
					if (this.ai[1] >= 60f)
					{
						for (int num1203 = 0; num1203 < 200; num1203++)
						{
							NPC nPC8 = Main.npc[num1203];
							if (nPC8.active && (nPC8.type == 400 || nPC8.type == 397 || nPC8.type == 396))
							{
								nPC8.active = false;
								if (Main.netMode != 1)
								{
									NetMessage.SendData(23, -1, -1, null, nPC8.whoAmI);
								}
							}
						}
						active = false;
						if (Main.netMode != 1)
						{
							NetMessage.SendData(23, -1, -1, null, whoAmI);
						}
						LunarApocalypseIsUp = false;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(7);
						}
						return;
					}
				}
				bool flag78 = false;
				if (this.ai[0] == -2f || this.ai[0] == -1f || this.ai[0] == 2f || this.ai[0] == 3f)
				{
					flag78 = true;
				}
				if (Main.player[target].active && !Main.player[target].dead)
				{
					flag78 = true;
				}
				if (!flag78)
				{
					for (int num1204 = 0; num1204 < 255; num1204++)
					{
						if (Main.player[num1204].active && !Main.player[num1204].dead)
						{
							flag78 = true;
							break;
						}
					}
				}
				if (!flag78)
				{
					this.ai[0] = 3f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				if (!(this.ai[0] >= 0f) || !(this.ai[0] < 2f) || Main.netMode == 1 || !(Distance(Main.player[target].Center) > 2400f))
				{
					return;
				}
				this.ai[0] = -2f;
				netUpdate = true;
				Vector2 vector168 = Main.player[target].Center - Vector2.UnitY * 150f - base.Center;
				position += vector168;
				if (Main.npc[(int)localAI[0]].active)
				{
					NPC nPC3 = Main.npc[(int)localAI[0]];
					nPC3.position += vector168;
					Main.npc[(int)localAI[0]].netUpdate = true;
				}
				if (Main.npc[(int)localAI[1]].active)
				{
					NPC nPC3 = Main.npc[(int)localAI[1]];
					nPC3.position += vector168;
					Main.npc[(int)localAI[1]].netUpdate = true;
				}
				if (Main.npc[(int)localAI[2]].active)
				{
					NPC nPC3 = Main.npc[(int)localAI[2]];
					nPC3.position += vector168;
					Main.npc[(int)localAI[2]].netUpdate = true;
				}
				for (int num1205 = 0; num1205 < 200; num1205++)
				{
					NPC nPC9 = Main.npc[num1205];
					if (nPC9.active && nPC9.type == 400)
					{
						NPC nPC3 = nPC9;
						nPC3.position += vector168;
						nPC9.netUpdate = true;
					}
				}
			}
			else if (aiStyle == 78)
			{
				InitializeMoonLordAttacks();
				if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
				{
					life = 0;
					HitEffect();
					active = false;
				}
				bool flag79 = this.ai[2] == 0f;
				float num1206 = -flag79.ToDirectionInt();
				spriteDirection = (int)num1206;
				if (frameCounter == 19.0 && !dontTakeDamage)
				{
					PopAllAttachedProjectilesAndTakeDamageForThem();
				}
				dontTakeDamage = frameCounter >= 21.0;
				Vector2 vector169 = new Vector2(30f, 66f);
				float num1207 = 0f;
				float num1208 = 0f;
				bool flag80 = true;
				int num1209 = 0;
				if (this.ai[0] != -2f)
				{
					float num1210 = this.ai[0];
					this.ai[1]++;
					int num1211 = (int)Main.npc[(int)this.ai[3]].ai[2];
					int num1212 = ((!flag79) ? 1 : 0);
					int num1213 = 0;
					int num1214 = 0;
					for (; num1213 < 5; num1213++)
					{
						num1208 = MoonLordAttacksArray[num1211, num1212, 1, num1213];
						if (!(num1208 + (float)num1214 <= this.ai[1]))
						{
							break;
						}
						num1214 += (int)num1208;
					}
					if (num1213 == 5)
					{
						num1213 = 0;
						this.ai[1] = 0f;
						num1208 = MoonLordAttacksArray[num1211, num1212, 1, num1213];
						num1214 = 0;
					}
					this.ai[0] = MoonLordAttacksArray[num1211, num1212, 0, num1213];
					num1207 = (int)this.ai[1] - num1214;
					if (this.ai[0] != num1210)
					{
						netUpdate = true;
					}
				}
				if (this.ai[0] == -2f)
				{
					damage = 80;
					num1209 = 0;
					dontTakeDamage = true;
					this.ai[1]++;
					if (this.ai[1] >= 32f)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] < 0f)
					{
						this.ai[1] = 0f;
					}
					Vector2 center16 = Main.npc[(int)this.ai[3]].Center;
					Vector2 vector170 = center16 + new Vector2(350f * num1206, -100f);
					Vector2 vector171 = vector170 - base.Center;
					if (vector171.Length() > 20f)
					{
						vector171.Normalize();
						vector171 *= 6f;
						Vector2 value6 = velocity;
						if (vector171 != Vector2.Zero)
						{
							SimpleFlyMovement(vector171, 0.3f);
						}
						velocity = Vector2.Lerp(value6, velocity, 0.5f);
					}
				}
				else if (this.ai[0] == 0f)
				{
					num1209 = 3;
					localAI[1] -= 0.05f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
					Vector2 center17 = Main.npc[(int)this.ai[3]].Center;
					Vector2 vector172 = center17 + new Vector2(350f * num1206, -100f);
					Vector2 vector173 = vector172 - base.Center;
					if (vector173.Length() > 20f)
					{
						vector173.Normalize();
						vector173 *= 6f;
						Vector2 value7 = velocity;
						if (vector173 != Vector2.Zero)
						{
							SimpleFlyMovement(vector173, 0.3f);
						}
						velocity = Vector2.Lerp(value7, velocity, 0.5f);
					}
				}
				else if (this.ai[0] == 1f)
				{
					num1209 = 0;
					int num1215 = 7;
					int num1216 = 4;
					if (num1207 >= (float)(num1215 * num1216 * 2))
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
					}
					else if (num1207 >= (float)(num1215 * num1216))
					{
						localAI[1] += 0.05f;
						if (localAI[1] > 0.75f)
						{
							localAI[1] = 0.75f;
						}
						float num1217 = MathF.PI * 2f * (num1207 % (float)(num1215 * num1216)) / (float)(num1215 * num1216) - MathF.PI / 2f;
						localAI[0] = new Vector2((float)Math.Cos(num1217) * vector169.X, (float)Math.Sin(num1217) * vector169.Y).ToRotation();
						if (num1207 % (float)num1216 == 0f)
						{
							Vector2 vector174 = new Vector2(1f * (0f - num1206), 3f);
							Vector2 vector175 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector169 * localAI[1]);
							Vector2 vector176 = base.Center + Vector2.Normalize(vector175) * vector169.Length() * 0.4f + vector174;
							Vector2 vector177 = Vector2.Normalize(vector175) * 8f;
							float ai = (MathF.PI * 2f * (float)Main.rand.NextDouble() - MathF.PI) / 30f + MathF.PI / 180f * num1206;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector176.X, vector176.Y, vector177.X, vector177.Y, 452, 30, 0f, Main.myPlayer, 0f, ai);
						}
					}
					else
					{
						localAI[1] += 0.02f;
						if (localAI[1] > 0.75f)
						{
							localAI[1] = 0.75f;
						}
						float num1218 = MathF.PI * 2f * (num1207 % (float)(num1215 * num1216)) / (float)(num1215 * num1216) - MathF.PI / 2f;
						localAI[0] = new Vector2((float)Math.Cos(num1218) * vector169.X, (float)Math.Sin(num1218) * vector169.Y).ToRotation();
					}
				}
				else if (this.ai[0] == 2f)
				{
					localAI[1] -= 0.05f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
					Vector2 center18 = Main.npc[(int)this.ai[3]].Center;
					Vector2 vector178 = new Vector2(220f * num1206, -60f) + center18;
					vector178 += new Vector2(num1206 * 100f, -50f);
					Vector2 vector179 = new Vector2(400f * num1206, -60f);
					if (num1207 < 30f)
					{
						Vector2 vector180 = vector178 - base.Center;
						if (vector180 != Vector2.Zero)
						{
							Vector2 vector181 = vector180;
							vector181.Normalize();
							velocity = Vector2.SmoothStep(velocity, vector181 * Math.Min(8f, vector180.Length()), 0.2f);
						}
					}
					else if (num1207 < 210f)
					{
						num1209 = 1;
						int num1219 = (int)num1207 - 30;
						if (num1219 % 30 == 0 && Main.netMode != 1)
						{
							Vector2 vector182 = new Vector2(5f * num1206, -8f);
							int num1220 = num1219 / 30;
							vector182.X += ((float)num1220 - 3.5f) * num1206 * 3f;
							vector182.Y += ((float)num1220 - 4.5f) * 1f;
							vector182 *= 1.2f;
							int num1221 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector182.X, vector182.Y, 454, 40, 1f, Main.myPlayer, 0f, whoAmI);
						}
						Vector2 vector183 = Vector2.SmoothStep(vector178, vector178 + vector179, (num1207 - 30f) / 180f) - base.Center;
						if (vector183 != Vector2.Zero)
						{
							Vector2 vector184 = vector183;
							vector184.Normalize();
							velocity = Vector2.Lerp(velocity, vector184 * Math.Min(20f, vector183.Length()), 0.5f);
						}
					}
					else if (num1207 < 282f)
					{
						num1209 = 0;
						velocity *= 0.9f;
					}
					else if (num1207 < 287f)
					{
						num1209 = 1;
						velocity *= 0.9f;
					}
					else if (num1207 < 292f)
					{
						num1209 = 2;
						velocity *= 0.9f;
					}
					else if (num1207 < 300f)
					{
						num1209 = 3;
						if (num1207 == 292f && Main.netMode != 1)
						{
							int num1222 = Player.FindClosest(position, width, height);
							Vector2 vector185 = Vector2.Normalize(Main.player[num1222].Center - (base.Center + Vector2.UnitY * -350f));
							if (float.IsNaN(vector185.X) || float.IsNaN(vector185.Y))
							{
								vector185 = Vector2.UnitY;
							}
							vector185 *= 12f;
							for (int num1223 = 0; num1223 < 1000; num1223++)
							{
								Projectile projectile3 = Main.projectile[num1223];
								if (projectile3.active && projectile3.type == 454 && projectile3.ai[1] == (float)whoAmI && projectile3.ai[0] != -1f)
								{
									projectile3.ai[0] = -1f;
									projectile3.velocity = vector185;
									projectile3.netUpdate = true;
									NetMessage.SendData(27, -1, -1, null, num1223);
								}
							}
						}
						Vector2 vector186 = Vector2.SmoothStep(vector178, vector178 + vector179, 1f - (num1207 - 270f) / 30f) - base.Center;
						if (vector186 != Vector2.Zero)
						{
							Vector2 vector187 = vector186;
							vector187.Normalize();
							velocity = Vector2.Lerp(velocity, vector187 * Math.Min(14f, vector186.Length()), 0.1f);
						}
					}
					else
					{
						num1209 = 3;
						Vector2 vector188 = vector178 - base.Center;
						if (vector188 != Vector2.Zero)
						{
							Vector2 vector189 = vector188;
							vector189.Normalize();
							velocity = Vector2.SmoothStep(velocity, vector189 * Math.Min(8f, vector188.Length()), 0.2f);
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					if (num1207 == 0f)
					{
						TargetClosest(faceTarget: false);
						netUpdate = true;
					}
					Vector2 v2 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v2.ToRotation(), 0.5f);
					localAI[1] += 0.05f;
					if (localAI[1] > 1f)
					{
						localAI[1] = 1f;
					}
					if (num1207 == num1208 - 35f)
					{
						SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 6);
					}
					if ((num1207 == num1208 - 14f || num1207 == num1208 - 7f || num1207 == num1208) && Main.netMode != 1)
					{
						Vector2 vector190 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector169 * localAI[1]);
						Vector2 vector191 = Vector2.Normalize(v2) * 8f;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + vector190.X, base.Center.Y + vector190.Y, vector191.X, vector191.Y, 462, 30, 0f, Main.myPlayer);
					}
				}
				if (flag80)
				{
					Vector2 center19 = Main.npc[(int)this.ai[3]].Center;
					Vector2 vector192 = new Vector2(220f * num1206, -60f) + center19;
					Vector2 vector193 = vector192 + new Vector2(num1206 * 110f, -150f);
					Vector2 max = vector193 + new Vector2(num1206 * 370f, 150f);
					if (vector193.X > max.X)
					{
						Utils.Swap(ref vector193.X, ref max.X);
					}
					if (vector193.Y > max.Y)
					{
						Utils.Swap(ref vector193.Y, ref max.Y);
					}
					Vector2 vector194 = Vector2.Clamp(base.Center + velocity, vector193, max);
					if (vector194 != base.Center + velocity)
					{
						base.Center = vector194 - velocity;
					}
				}
				int num1224 = num1209 * 7;
				if ((double)num1224 > frameCounter)
				{
					frameCounter++;
				}
				if ((double)num1224 < frameCounter)
				{
					frameCounter--;
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				if (frameCounter > 21.0)
				{
					frameCounter = 21.0;
				}
				int num1225 = 0;
				if (flag79)
				{
					num1225 = 0;
				}
				switch (num1225)
				{
				case 1:
					if (this.ai[0] == 0f)
					{
						if ((this.ai[1] += 1f) >= 20f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 1f;
							netUpdate = true;
						}
						velocity = Vector2.UnitX * 4f;
					}
					else if (this.ai[0] == 1f)
					{
						if ((this.ai[1] += 1f) >= 20f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 2f;
							netUpdate = true;
						}
						velocity = Vector2.UnitX * -4f;
					}
					else if (this.ai[0] == 2f || this.ai[0] == 4f)
					{
						if ((this.ai[1] += 1f) >= 20f)
						{
							this.ai[1] = 0f;
							this.ai[0]++;
							netUpdate = true;
						}
						velocity = Vector2.UnitY * -4f * (flag79 ? 1 : (-1));
					}
					else
					{
						if (this.ai[0] != 3f && this.ai[0] != 5f)
						{
							break;
						}
						if ((this.ai[1] += 1f) >= 20f)
						{
							this.ai[1] = 0f;
							this.ai[0]++;
							if (this.ai[0] == 6f)
							{
								this.ai[0] = 0f;
							}
							netUpdate = true;
						}
						velocity = Vector2.UnitY * 4f * (flag79 ? 1 : (-1));
					}
					break;
				case 2:
				{
					Vector2 vector195 = new Vector2(30f, 66f);
					TargetClosest(faceTarget: false);
					Vector2 v3 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - base.Center;
					float num1226 = v3.Length() / 200f;
					if (num1226 > 1f)
					{
						num1226 = 1f;
					}
					num1226 = 1f - num1226;
					num1226 *= 2f;
					if (num1226 > 1f)
					{
						num1226 = 1f;
					}
					localAI[0] = v3.ToRotation();
					localAI[1] = num1226;
					localAI[1] = 1f;
					break;
				}
				case 3:
				{
					int num1232 = 7;
					int num1233 = 4;
					this.ai[1]++;
					if (this.ai[1] >= (float)(num1232 * num1233 * 10))
					{
						this.ai[1] = 0f;
						break;
					}
					if (this.ai[1] >= (float)(num1232 * num1233))
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						break;
					}
					localAI[1] += 0.05f;
					if (localAI[1] > 0.75f)
					{
						localAI[1] = 0.75f;
					}
					float num1234 = MathF.PI * 2f * (this.ai[1] % (float)(num1232 * num1233)) / (float)(num1232 * num1233) - MathF.PI / 2f;
					localAI[0] = new Vector2((float)Math.Cos(num1234) * vector169.X, (float)Math.Sin(num1234) * vector169.Y).ToRotation();
					if (this.ai[1] % (float)num1233 == 0f)
					{
						Vector2 vector206 = new Vector2(1f * (0f - num1206), 3f);
						Vector2 vector207 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector169 * localAI[1]);
						Vector2 vector208 = base.Center + Vector2.Normalize(vector207) * vector169.Length() * 0.4f + vector206;
						Vector2 vector209 = Vector2.Normalize(vector207) * 8f;
						float ai2 = (MathF.PI * 2f * (float)Main.rand.NextDouble() - MathF.PI) / 30f + MathF.PI / 180f * num1206;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector208.X, vector208.Y, vector209.X, vector209.Y, 452, 5, 0f, Main.myPlayer, 0f, ai2);
					}
					break;
				}
				case 4:
				{
					Vector2 center20 = Main.npc[(int)this.ai[3]].Center;
					Vector2 vector196 = new Vector2(220f * num1206, -60f) + center20;
					vector196 += new Vector2(num1206 * 100f, -50f);
					Vector2 vector197 = new Vector2(400f * num1206, -60f);
					this.ai[1]++;
					if (this.ai[1] < 30f)
					{
						Vector2 vector198 = vector196 - base.Center;
						if (vector198 != Vector2.Zero)
						{
							Vector2 vector199 = vector198;
							vector199.Normalize();
							velocity = Vector2.SmoothStep(velocity, vector199 * Math.Min(8f, vector198.Length()), 0.2f);
						}
					}
					else if (this.ai[1] < 210f)
					{
						int num1227 = (int)this.ai[1] - 30;
						if (num1227 % 30 == 0 && Main.netMode != 1)
						{
							Vector2 vector200 = new Vector2(5f * num1206, -8f);
							int num1228 = num1227 / 30;
							vector200.X += ((float)num1228 - 3.5f) * num1206 * 3f;
							vector200.Y += ((float)num1228 - 4.5f) * 1f;
							vector200 *= 1.2f;
							int num1229 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector200.X, vector200.Y, 454, 1, 1f, Main.myPlayer, 0f, whoAmI);
						}
						Vector2 vector201 = Vector2.SmoothStep(vector196, vector196 + vector197, (this.ai[1] - 30f) / 180f) - base.Center;
						if (vector201 != Vector2.Zero)
						{
							Vector2 vector202 = vector201;
							vector202.Normalize();
							velocity = Vector2.Lerp(velocity, vector202 * Math.Min(4f, vector201.Length()), 0.1f);
						}
					}
					else if (this.ai[1] < 270f)
					{
						velocity *= 0.9f;
					}
					else if (this.ai[1] < 300f)
					{
						if (this.ai[1] == 270f && Main.netMode != 1)
						{
							int num1230 = Player.FindClosest(position, width, height);
							Vector2 vector203 = Vector2.Normalize(Main.player[num1230].Center - (base.Center + Vector2.UnitY * -350f));
							if (float.IsNaN(vector203.X) || float.IsNaN(vector203.Y))
							{
								vector203 = Vector2.UnitY;
							}
							vector203 *= 12f;
							for (int num1231 = 0; num1231 < 1000; num1231++)
							{
								Projectile projectile4 = Main.projectile[num1231];
								if (projectile4.active && projectile4.type == 454 && projectile4.ai[1] == (float)whoAmI && projectile4.ai[0] != -1f)
								{
									projectile4.ai[0] = -1f;
									projectile4.velocity = vector203;
									projectile4.netUpdate = true;
								}
							}
						}
						Vector2 vector204 = Vector2.SmoothStep(vector196, vector196 + vector197, 1f - (this.ai[1] - 270f) / 30f) - base.Center;
						if (vector204 != Vector2.Zero)
						{
							Vector2 vector205 = vector204;
							vector205.Normalize();
							velocity = Vector2.Lerp(velocity, vector205 * Math.Min(14f, vector204.Length()), 0.1f);
						}
					}
					else
					{
						this.ai[1] = 0f;
					}
					break;
				}
				case 5:
					dontTakeDamage = true;
					this.ai[1]++;
					if (this.ai[1] >= 40f)
					{
						this.ai[1] = 0f;
					}
					break;
				}
			}
			else if (aiStyle == 79)
			{
				if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
				{
					life = 0;
					HitEffect();
					active = false;
				}
				if (localAI[3] == 13f && !dontTakeDamage)
				{
					PopAllAttachedProjectilesAndTakeDamageForThem();
				}
				dontTakeDamage = localAI[3] >= 15f;
				velocity = Vector2.Zero;
				base.Center = Main.npc[(int)this.ai[3]].Center + new Vector2(0f, -400f);
				Vector2 vector210 = new Vector2(27f, 59f);
				float num1235 = 0f;
				float num1236 = 0f;
				int num1237 = 0;
				int num1238 = 0;
				if (this.ai[0] >= 0f)
				{
					float num1239 = this.ai[0];
					this.ai[1]++;
					int num1240 = (int)Main.npc[(int)this.ai[3]].ai[2];
					int num1241 = 2;
					int num1242 = 0;
					int num1243 = 0;
					for (; num1242 < 5; num1242++)
					{
						num1236 = MoonLordAttacksArray[num1240, num1241, 1, num1242];
						if (!(num1236 + (float)num1243 <= this.ai[1]))
						{
							break;
						}
						num1243 += (int)num1236;
					}
					if (num1242 == 5)
					{
						num1242 = 0;
						this.ai[1] = 0f;
						num1236 = MoonLordAttacksArray[num1240, num1241, 1, num1242];
						num1243 = 0;
					}
					this.ai[0] = MoonLordAttacksArray[num1240, num1241, 0, num1242];
					num1235 = (int)this.ai[1] - num1243;
					if (this.ai[0] != num1239)
					{
						netUpdate = true;
					}
				}
				if (this.ai[0] == -3f)
				{
					damage = 0;
					dontTakeDamage = true;
					rotation = MathHelper.Lerp(rotation, MathF.PI / 12f, 0.07f);
					this.ai[1]++;
					if (this.ai[1] >= 32f)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] < 0f)
					{
						this.ai[1] = 0f;
					}
					if (localAI[2] < 14f)
					{
						localAI[2]++;
					}
				}
				else if (this.ai[0] == -2f)
				{
					if (Main.npc[(int)this.ai[3]].ai[0] == 2f)
					{
						this.ai[0] = -3f;
						return;
					}
					damage = 80;
					dontTakeDamage = true;
					this.ai[1]++;
					if (this.ai[1] >= 32f)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] < 0f)
					{
						this.ai[1] = 0f;
					}
					this.ai[2]++;
					if (this.ai[2] >= 555f)
					{
						this.ai[2] = 0f;
					}
					if (this.ai[2] >= 120f)
					{
						num1235 = this.ai[2] - 120f;
						num1236 = 555f;
						num1237 = 2;
						Vector2 vector211 = new Vector2(0f, 216f);
						if (num1235 == 0f && Main.netMode != 1)
						{
							Vector2 vector212 = base.Center + vector211;
							for (int num1244 = 0; num1244 < 255; num1244++)
							{
								Player player7 = Main.player[num1244];
								if (player7.active && !player7.dead && Vector2.Distance(player7.Center, vector212) <= 3000f)
								{
									Vector2 vector213 = Main.player[target].Center - vector212;
									if (vector213 != Vector2.Zero)
									{
										vector213.Normalize();
									}
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector212.X, vector212.Y, vector213.X, vector213.Y, 456, 0, 0f, Main.myPlayer, whoAmI + 1, num1244);
								}
							}
						}
						if ((num1235 == 120f || num1235 == 180f || num1235 == 240f) && Main.netMode != 1)
						{
							for (int num1245 = 0; num1245 < 1000; num1245++)
							{
								Projectile projectile5 = Main.projectile[num1245];
								if (projectile5.active && projectile5.type == 456 && Main.player[(int)projectile5.ai[1]].FindBuffIndex(145) != -1)
								{
									Vector2 center21 = Main.player[target].Center;
									int num1246 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)center21.X, (int)center21.Y, 401);
									Main.npc[num1246].netUpdate = true;
									Main.npc[num1246].ai[0] = whoAmI + 1;
									Main.npc[num1246].ai[1] = num1245;
								}
							}
						}
					}
				}
				else if (this.ai[0] == 0f)
				{
					num1238 = 3;
					TargetClosest(faceTarget: false);
					Vector2 v4 = Main.player[target].Center - base.Center - new Vector2(0f, -22f);
					float num1247 = v4.Length() / 500f;
					if (num1247 > 1f)
					{
						num1247 = 1f;
					}
					num1247 = 1f - num1247;
					num1247 *= 2f;
					if (num1247 > 1f)
					{
						num1247 = 1f;
					}
					localAI[0] = v4.ToRotation();
					localAI[1] = num1247;
					localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
				}
				if (this.ai[0] == 1f)
				{
					if (num1235 < 180f)
					{
						localAI[1] -= 0.05f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						if (num1235 >= 60f)
						{
							Vector2 center22 = base.Center;
							int num1248 = 0;
							if (num1235 >= 120f)
							{
								num1248 = 1;
							}
							for (int num1249 = 0; num1249 < 1 + num1248; num1249++)
							{
								int num1250 = 229;
								float num1251 = 0.8f;
								if (num1249 % 2 == 1)
								{
									num1250 = 229;
									num1251 = 1.65f;
								}
								Vector2 vector214 = center22 + ((float)Main.rand.NextDouble() * (MathF.PI * 2f)).ToRotationVector2() * vector210 / 2f;
								int num1252 = Dust.NewDust(vector214 - Vector2.One * 8f, 16, 16, num1250, velocity.X / 2f, velocity.Y / 2f);
								Main.dust[num1252].velocity = Vector2.Normalize(center22 - vector214) * 3.5f * (10f - (float)num1248 * 2f) / 10f;
								Main.dust[num1252].noGravity = true;
								Main.dust[num1252].scale = num1251;
								Main.dust[num1252].customData = this;
							}
						}
					}
					else if (num1235 < num1236 - 15f)
					{
						if (num1235 == 180f && Main.netMode != 1)
						{
							TargetClosest(faceTarget: false);
							Vector2 spinningpoint9 = Main.player[target].Center - base.Center;
							spinningpoint9.Normalize();
							float num1253 = -1f;
							if (spinningpoint9.X < 0f)
							{
								num1253 = 1f;
							}
							spinningpoint9 = spinningpoint9.RotatedBy((0f - num1253) * (MathF.PI * 2f) / 6f);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, spinningpoint9.X, spinningpoint9.Y, 455, 75, 0f, Main.myPlayer, num1253 * (MathF.PI * 2f) / 540f, whoAmI);
							this.ai[2] = (spinningpoint9.ToRotation() + MathF.PI * 3f) * num1253;
							netUpdate = true;
						}
						localAI[1] += 0.05f;
						if (localAI[1] > 1f)
						{
							localAI[1] = 1f;
						}
						float num1254 = (this.ai[2] >= 0f).ToDirectionInt();
						float num1255 = this.ai[2];
						if (num1255 < 0f)
						{
							num1255 *= -1f;
						}
						num1255 += MathF.PI * -3f;
						num1255 += num1254 * (MathF.PI * 2f) / 540f;
						localAI[0] = num1255;
						this.ai[2] = (num1255 + MathF.PI * 3f) * num1254;
					}
					else
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
							if (Main.netMode != 1 && Main.getGoodWorld && Main.remixWorld)
							{
								for (int num1256 = 0; num1256 < 30; num1256++)
								{
									if (!WorldGen.SolidTile((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f)))
									{
										Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, (float)Main.rand.Next(-1599, 1600) * 0.01f, (float)Main.rand.Next(-1599, 1) * 0.01f, 1021, 70, 10f);
									}
								}
							}
						}
						num1238 = 3;
					}
				}
				else if (this.ai[0] == 2f)
				{
					num1237 = 2;
					num1238 = 3;
					Vector2 vector215 = new Vector2(0f, 216f);
					if (num1235 == 0f && Main.netMode != 1)
					{
						Vector2 vector216 = base.Center + vector215;
						for (int num1257 = 0; num1257 < 255; num1257++)
						{
							Player player8 = Main.player[num1257];
							if (player8.active && !player8.dead && Vector2.Distance(player8.Center, vector216) <= 3000f)
							{
								Vector2 vector217 = Main.player[target].Center - vector216;
								if (vector217 != Vector2.Zero)
								{
									vector217.Normalize();
								}
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector216.X, vector216.Y, vector217.X, vector217.Y, 456, 0, 0f, Main.myPlayer, whoAmI + 1, num1257);
							}
						}
					}
					if ((num1235 == 120f || num1235 == 180f || num1235 == 240f) && Main.netMode != 1)
					{
						for (int num1258 = 0; num1258 < 1000; num1258++)
						{
							Projectile projectile6 = Main.projectile[num1258];
							if (projectile6.active && projectile6.type == 456 && Main.player[(int)projectile6.ai[1]].FindBuffIndex(145) != -1)
							{
								Vector2 center23 = Main.player[target].Center;
								int num1259 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)center23.X, (int)center23.Y, 401);
								Main.npc[num1259].netUpdate = true;
								Main.npc[num1259].ai[0] = whoAmI + 1;
								Main.npc[num1259].ai[1] = num1258;
							}
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					if ((double)num1235 == 1.0)
					{
						TargetClosest(faceTarget: false);
						netUpdate = true;
					}
					Vector2 v5 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v5.ToRotation(), 0.5f);
					localAI[1] += 0.05f;
					if (localAI[1] > 1f)
					{
						localAI[1] = 1f;
					}
					if (num1235 == num1236 - 35f)
					{
						SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 6);
					}
					if ((num1235 == num1236 - 14f || num1235 == num1236 - 7f || num1235 == num1236) && Main.netMode != 1)
					{
						Vector2 vector218 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector210 * localAI[1]);
						Vector2 vector219 = Vector2.Normalize(v5) * 8f;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + vector218.X, base.Center.Y + vector218.Y, vector219.X, vector219.Y, 462, 30, 0f, Main.myPlayer);
					}
				}
				int num1260 = num1237 * 7;
				if ((float)num1260 > localAI[2])
				{
					localAI[2]++;
				}
				if ((float)num1260 < localAI[2])
				{
					localAI[2]--;
				}
				if (localAI[2] < 0f)
				{
					localAI[2] = 0f;
				}
				if (localAI[2] > 14f)
				{
					localAI[2] = 14f;
				}
				int num1261 = num1238 * 5;
				if ((float)num1261 > localAI[3])
				{
					localAI[3]++;
				}
				if ((float)num1261 < localAI[3])
				{
					localAI[3]--;
				}
				if (localAI[3] < 0f)
				{
					localAI[2] = 0f;
				}
				if (localAI[3] > 15f)
				{
					localAI[2] = 15f;
				}
				int num1262 = 0;
				if (num1262 == 1)
				{
					Vector2 vector220 = new Vector2(27f, 59f);
					TargetClosest(faceTarget: false);
					Vector2 v6 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - base.Center;
					float num1263 = v6.Length() / 200f;
					if (num1263 > 1f)
					{
						num1263 = 1f;
					}
					num1263 = 1f - num1263;
					num1263 *= 2f;
					if (num1263 > 1f)
					{
						num1263 = 1f;
					}
					localAI[0] = v6.ToRotation();
					localAI[1] = num1263;
					localAI[1] = 1f;
				}
				if (num1262 == 2)
				{
					Vector2 vector221 = new Vector2(27f, 59f);
					float num1264 = MathF.PI * 2f * ((float)Main.timeForVisualEffects % 600f) / 600f;
					localAI[0] = new Vector2((float)Math.Cos(num1264) * vector221.X, (float)Math.Sin(num1264) * vector221.Y).ToRotation();
					localAI[1] = 0.75f;
					if (this.ai[1] == 0f)
					{
						Vector2 vector222 = num1264.ToRotationVector2();
						vector222 = Vector2.One;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector222.X, vector222.Y, 455, 1, 0f, Main.myPlayer, MathF.PI / 300f, whoAmI);
					}
					this.ai[1]++;
					if (this.ai[1] >= 600f)
					{
						this.ai[1] = 0f;
					}
				}
				if (num1262 == 3)
				{
					Vector2 vector223 = new Vector2(0f, 216f);
					if (this.ai[1] == 0f)
					{
						TargetClosest(faceTarget: false);
						Vector2 vector224 = Main.player[target].Center - base.Center;
						vector224.Normalize();
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + vector223.X, base.Center.Y + vector223.Y, vector224.X, vector224.Y, 456, 0, 0f, Main.myPlayer, whoAmI + 1, target);
					}
					this.ai[1]++;
					if (this.ai[1] >= 600f)
					{
						this.ai[1] = 0f;
					}
				}
				if (num1262 == 4)
				{
					Vector2 vector225 = new Vector2(27f, 59f);
					TargetClosest(faceTarget: false);
					Vector2 v7 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v7.ToRotation(), 0.5f);
					localAI[1] = 1f;
					this.ai[1]++;
					if (this.ai[1] == 55f)
					{
						SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 6);
					}
					if (this.ai[1] == 76f || this.ai[1] == 83f || this.ai[1] == 90f)
					{
						Vector2 vector226 = Utils.Vector2FromElipse(elipseSizes: new Vector2(27f, 59f) * localAI[1], angleVector: localAI[0].ToRotationVector2());
						Vector2 vector227 = Vector2.Normalize(v7) * 8f;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + vector226.X, base.Center.Y + vector226.Y, vector227.X, vector227.Y, 462, 5, 0f, Main.myPlayer);
					}
					if (this.ai[1] >= 90f)
					{
						this.ai[1] = 0f;
					}
				}
			}
			else if (aiStyle == 80)
			{
				if (this.ai[0] == 0f)
				{
					if (direction == 0)
					{
						TargetClosest();
						netUpdate = true;
					}
					if (collideX)
					{
						direction = -direction;
						netUpdate = true;
					}
					velocity.X = 3f * (float)direction;
					Vector2 center24 = base.Center;
					Point point10 = center24.ToTileCoordinates();
					int num1265 = 30;
					if (WorldGen.InWorld(point10.X, point10.Y, 30))
					{
						for (int num1266 = 0; num1266 < 30; num1266++)
						{
							if (WorldGen.SolidTile(point10.X, point10.Y + num1266))
							{
								num1265 = num1266;
								break;
							}
						}
					}
					if (num1265 < 15)
					{
						velocity.Y = Math.Max(velocity.Y - 0.05f, -3.5f);
					}
					else if (num1265 < 20)
					{
						velocity.Y *= 0.95f;
					}
					else
					{
						velocity.Y = Math.Min(velocity.Y + 0.05f, 1.5f);
					}
					float distanceToPlayer;
					int num1267 = FindClosestPlayer(out distanceToPlayer);
					if (num1267 == -1 || Main.player[num1267].dead)
					{
						return;
					}
					if (distanceToPlayer < 352f && Main.player[num1267].Center.Y > base.Center.Y)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.ai[1]++;
					velocity *= 0.95f;
					if (this.ai[1] >= 60f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 2f;
						int num1268 = FindClosestPlayer();
						if (num1268 != -1)
						{
							this.ai[3] = ((Main.player[num1268].Center.X > base.Center.X) ? (-1f) : 1f);
						}
						else
						{
							this.ai[3] = 1f;
						}
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 2f)
				{
					noTileCollide = true;
					this.ai[1]++;
					velocity.Y = Math.Max(velocity.Y - 0.1f, -10f);
					velocity.X = Math.Min(velocity.X + this.ai[3] * 0.05f, 4f);
					if ((position.Y < (float)(-height) || this.ai[1] >= 180f) && Main.netMode != 1)
					{
						Main.StartInvasion(4);
						active = false;
						netUpdate = true;
					}
				}
				Vector3 rgb = Color.SkyBlue.ToVector3();
				if (this.ai[0] == 2f)
				{
					rgb = Color.Red.ToVector3();
				}
				rgb *= 0.65f;
				Lighting.AddLight(base.Center, rgb);
			}
			else if (aiStyle == 81)
			{
				if (Main.rand.Next(420) == 0)
				{
					SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, Main.rand.Next(100, 101));
				}
				Vector2 vector228 = new Vector2(30f);
				if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
				{
					life = 0;
					HitEffect();
					active = false;
				}
				float num1269 = 0f;
				float num1270 = 0f;
				float num1271 = this.ai[0];
				this.ai[1]++;
				int num1272 = 0;
				int num1273 = 0;
				for (; num1272 < 10; num1272++)
				{
					num1270 = MoonLordAttacksArray2[1, num1272];
					if (!(num1270 + (float)num1273 <= this.ai[1]))
					{
						break;
					}
					num1273 += (int)num1270;
				}
				if (num1272 == 10)
				{
					num1272 = 0;
					this.ai[1] = 0f;
					num1270 = MoonLordAttacksArray2[1, num1272];
					num1273 = 0;
				}
				this.ai[0] = MoonLordAttacksArray2[0, num1272];
				num1269 = (int)this.ai[1] - num1273;
				if (this.ai[0] != num1271)
				{
					netUpdate = true;
				}
				if (this.ai[0] == -1f)
				{
					this.ai[1]++;
					if (this.ai[1] > 180f)
					{
						this.ai[1] = 0f;
					}
					float num1274 = 1f;
					if (this.ai[1] < 60f)
					{
						num1274 = 0.75f;
						localAI[0] = 0f;
						localAI[1] = (float)Math.Sin(this.ai[1] * (MathF.PI * 2f) / 15f) * 0.35f;
						if (localAI[1] < 0f)
						{
							localAI[0] = MathF.PI;
						}
					}
					else if (this.ai[1] < 120f)
					{
						num1274 = 1f;
						if (localAI[1] < 0.5f)
						{
							localAI[1] += 0.025f;
						}
						localAI[0] += MathF.PI / 15f;
					}
					else
					{
						num1274 = 1.15f;
						localAI[1] -= 0.05f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
					}
					localAI[2] = MathHelper.Lerp(localAI[2], num1274, 0.3f);
				}
				if (this.ai[0] == 0f)
				{
					TargetClosest(faceTarget: false);
					Vector2 v8 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v8.ToRotation(), 0.5f);
					localAI[1] += 0.05f;
					if (localAI[1] > 0.7f)
					{
						localAI[1] = 0.7f;
					}
					localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
					float num1275 = 24f;
					Vector2 center25 = base.Center;
					Vector2 center26 = Main.player[target].Center;
					Vector2 vector229 = center26 - center25;
					Vector2 vector230 = vector229 - Vector2.UnitY * 200f;
					vector230 = Vector2.Normalize(vector230) * num1275;
					int num1276 = 30;
					velocity.X = (velocity.X * (float)(num1276 - 1) + vector230.X) / (float)num1276;
					velocity.Y = (velocity.Y * (float)(num1276 - 1) + vector230.Y) / (float)num1276;
					float num1277 = 0.25f;
					for (int num1278 = 0; num1278 < 200; num1278++)
					{
						if (num1278 != whoAmI && Main.npc[num1278].active && Main.npc[num1278].type == 400 && Vector2.Distance(base.Center, Main.npc[num1278].Center) < 150f)
						{
							if (position.X < Main.npc[num1278].position.X)
							{
								velocity.X -= num1277;
							}
							else
							{
								velocity.X += num1277;
							}
							if (position.Y < Main.npc[num1278].position.Y)
							{
								velocity.Y -= num1277;
							}
							else
							{
								velocity.Y += num1277;
							}
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					if (num1269 == 0f)
					{
						TargetClosest(faceTarget: false);
						netUpdate = true;
					}
					velocity *= 0.95f;
					if (velocity.Length() < 1f)
					{
						velocity = Vector2.Zero;
					}
					Vector2 v9 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v9.ToRotation(), 0.5f);
					localAI[1] += 0.05f;
					if (localAI[1] > 1f)
					{
						localAI[1] = 1f;
					}
					if (num1269 < 20f)
					{
						localAI[2] = MathHelper.Lerp(localAI[2], 1.1f, 0.2f);
					}
					else
					{
						localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
					}
					if (num1269 == num1270 - 35f)
					{
						SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 6);
					}
					if ((num1269 == num1270 - 14f || num1269 == num1270 - 7f || num1269 == num1270) && Main.netMode != 1)
					{
						Vector2 vector231 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector228 * localAI[1]);
						Vector2 vector232 = Vector2.Normalize(v9) * 8f;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + vector231.X, base.Center.Y + vector231.Y, vector232.X, vector232.Y, 462, 35, 0f, Main.myPlayer);
					}
				}
				else if (this.ai[0] == 2f)
				{
					if (num1269 < 15f)
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
						velocity *= 0.8f;
						if (velocity.Length() < 1f)
						{
							velocity = Vector2.Zero;
						}
					}
					else if (num1269 < 75f)
					{
						float num1279 = (num1269 - 15f) / 10f;
						int num1280 = 0;
						int num1281 = 0;
						switch ((int)num1279)
						{
						case 0:
							num1280 = 0;
							num1281 = 2;
							break;
						case 1:
							num1280 = 2;
							num1281 = 5;
							break;
						case 2:
							num1280 = 5;
							num1281 = 3;
							break;
						case 3:
							num1280 = 3;
							num1281 = 1;
							break;
						case 4:
							num1280 = 1;
							num1281 = 4;
							break;
						case 5:
							num1280 = 4;
							num1281 = 0;
							break;
						}
						Vector2 spinningpoint10 = Vector2.UnitY * -30f;
						Vector2 value8 = spinningpoint10.RotatedBy((float)num1280 * (MathF.PI * 2f) / 6f);
						Vector2 value9 = spinningpoint10.RotatedBy((float)num1281 * (MathF.PI * 2f) / 6f);
						Vector2 vector233 = Vector2.Lerp(value8, value9, num1279 - (float)(int)num1279);
						float value10 = vector233.Length() / 30f;
						localAI[0] = vector233.ToRotation();
						localAI[1] = MathHelper.Lerp(localAI[1], value10, 0.5f);
						for (int num1282 = 0; num1282 < 2; num1282++)
						{
							int num1283 = Dust.NewDust(base.Center + vector233 - Vector2.One * 4f, 0, 0, 229);
							Dust dust = Main.dust[num1283];
							dust.velocity += vector233 / 15f;
							Main.dust[num1283].noGravity = true;
						}
						if ((num1269 - 15f) % 10f == 0f && Main.netMode != 1)
						{
							Vector2 vec3 = Vector2.Normalize(vector233);
							if (vec3.HasNaNs())
							{
								vec3 = Vector2.UnitY * -1f;
							}
							vec3 *= 4f;
							int num1284 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + vector233.X, base.Center.Y + vector233.Y, vec3.X, vec3.Y, 454, 55, 0f, Main.myPlayer, 30f, whoAmI);
						}
					}
					else if (num1269 < 105f)
					{
						localAI[0] = localAI[0].AngleLerp(this.ai[2] - MathF.PI / 2f, 0.2f);
						localAI[2] = MathHelper.Lerp(localAI[2], 0.75f, 0.2f);
						if (num1269 == 75f)
						{
							TargetClosest(faceTarget: false);
							netUpdate = true;
							velocity = Vector2.UnitY * -7f;
							for (int num1285 = 0; num1285 < 1000; num1285++)
							{
								Projectile projectile7 = Main.projectile[num1285];
								if (projectile7.active && projectile7.type == 454 && projectile7.ai[1] == (float)whoAmI && projectile7.ai[0] != -1f)
								{
									Projectile projectile8 = projectile7;
									projectile8.velocity += velocity;
									projectile7.netUpdate = true;
								}
							}
						}
						velocity.Y *= 0.96f;
						this.ai[2] = (Main.player[target].Center - base.Center).ToRotation() + MathF.PI / 2f;
						rotation = rotation.AngleTowards(this.ai[2], MathF.PI / 30f);
					}
					else if (num1269 < 120f)
					{
						SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 102);
						if (num1269 == 105f)
						{
							netUpdate = true;
						}
						Vector2 vector234 = (this.ai[2] - MathF.PI / 2f).ToRotationVector2() * 12f;
						velocity = vector234 * 2f;
						for (int num1286 = 0; num1286 < 1000; num1286++)
						{
							Projectile projectile9 = Main.projectile[num1286];
							if (projectile9.active && projectile9.type == 454 && projectile9.ai[1] == (float)whoAmI && projectile9.ai[0] != -1f)
							{
								projectile9.ai[0] = -1f;
								projectile9.velocity = vector234;
								projectile9.netUpdate = true;
							}
						}
					}
					else
					{
						velocity *= 0.92f;
						rotation = rotation.AngleLerp(0f, 0.2f);
					}
				}
				else if (this.ai[0] == 3f)
				{
					if (num1269 < 15f)
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
						velocity *= 0.9f;
						if (velocity.Length() < 1f)
						{
							velocity = Vector2.Zero;
						}
					}
					else if (num1269 < 45f)
					{
						localAI[0] = 0f;
						localAI[1] = (float)Math.Sin((num1269 - 15f) * (MathF.PI * 2f) / 15f) * 0.5f;
						if (localAI[1] < 0f)
						{
							localAI[0] = MathF.PI;
						}
					}
					else if (num1269 < 185f)
					{
						if (num1269 == 45f)
						{
							this.ai[2] = (float)(Main.rand.Next(2) == 0).ToDirectionInt() * (MathF.PI * 2f) / 40f;
							netUpdate = true;
						}
						if ((num1269 - 15f - 30f) % 40f == 0f)
						{
							this.ai[2] *= 0.95f;
						}
						localAI[0] += this.ai[2];
						localAI[1] += 0.05f;
						if (localAI[1] > 1f)
						{
							localAI[1] = 1f;
						}
						Vector2 vector235 = localAI[0].ToRotationVector2() * vector228 * localAI[1];
						float num1287 = MathHelper.Lerp(8f, 20f, (num1269 - 15f - 30f) / 140f);
						velocity = Vector2.Normalize(vector235) * num1287;
						rotation = rotation.AngleLerp(velocity.ToRotation() + MathF.PI / 2f, 0.2f);
						if ((num1269 - 15f - 30f) % 10f == 0f && Main.netMode != 1)
						{
							Vector2 vector236 = base.Center + Vector2.Normalize(vector235) * vector228.Length() * 0.4f;
							Vector2 vector237 = Vector2.Normalize(vector235) * 8f;
							float ai3 = (MathF.PI * 2f * (float)Main.rand.NextDouble() - MathF.PI) / 30f + MathF.PI / 180f * this.ai[2];
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector236.X, vector236.Y, vector237.X, vector237.Y, 452, 35, 0f, Main.myPlayer, 0f, ai3);
						}
					}
					else
					{
						velocity *= 0.88f;
						rotation = rotation.AngleLerp(0f, 0.2f);
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
					}
				}
				else
				{
					if (this.ai[0] != 4f)
					{
						return;
					}
					if (num1269 == 0f)
					{
						TargetClosest(faceTarget: false);
						netUpdate = true;
					}
					if (num1269 < 180f)
					{
						localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
						localAI[1] -= 0.05f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						velocity *= 0.95f;
						if (velocity.Length() < 1f)
						{
							velocity = Vector2.Zero;
						}
						if (!(num1269 >= 60f))
						{
							return;
						}
						Vector2 center27 = base.Center;
						int num1288 = 0;
						if (num1269 >= 120f)
						{
							num1288 = 1;
						}
						for (int num1289 = 0; num1289 < 1 + num1288; num1289++)
						{
							int num1290 = 229;
							float num1291 = 0.8f;
							if (num1289 % 2 == 1)
							{
								num1290 = 229;
								num1291 = 1.65f;
							}
							Vector2 vector238 = center27 + ((float)Main.rand.NextDouble() * (MathF.PI * 2f)).ToRotationVector2() * vector228 / 2f;
							int num1292 = Dust.NewDust(vector238 - Vector2.One * 8f, 16, 16, num1290, velocity.X / 2f, velocity.Y / 2f);
							Main.dust[num1292].velocity = Vector2.Normalize(center27 - vector238) * 3.5f * (10f - (float)num1288 * 2f) / 10f;
							Main.dust[num1292].noGravity = true;
							Main.dust[num1292].scale = num1291;
							Main.dust[num1292].customData = this;
						}
					}
					else if (num1269 < num1270 - 15f)
					{
						if (num1269 == 180f && Main.netMode != 1)
						{
							TargetClosest(faceTarget: false);
							Vector2 spinningpoint11 = Main.player[target].Center - base.Center;
							spinningpoint11.Normalize();
							float num1293 = -1f;
							if (spinningpoint11.X < 0f)
							{
								num1293 = 1f;
							}
							spinningpoint11 = spinningpoint11.RotatedBy((0f - num1293) * (MathF.PI * 2f) / 6f);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, spinningpoint11.X, spinningpoint11.Y, 455, 50, 0f, Main.myPlayer, num1293 * (MathF.PI * 2f) / 540f, whoAmI);
							this.ai[2] = (spinningpoint11.ToRotation() + MathF.PI * 3f) * num1293;
							netUpdate = true;
						}
						localAI[1] += 0.05f;
						if (localAI[1] > 1f)
						{
							localAI[1] = 1f;
						}
						float num1294 = (this.ai[2] >= 0f).ToDirectionInt();
						float num1295 = this.ai[2];
						if (num1295 < 0f)
						{
							num1295 *= -1f;
						}
						num1295 += MathF.PI * -3f;
						num1295 += num1294 * (MathF.PI * 2f) / 540f;
						localAI[0] = num1295;
						this.ai[2] = (num1295 + MathF.PI * 3f) * num1294;
					}
					else
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
					}
				}
			}
			else if (aiStyle == 82)
			{
				float num1296 = 90f;
				Vector2 vector239 = new Vector2(0f, 216f);
				int num1297 = (int)Math.Abs(this.ai[0]) - 1;
				int num1298 = (int)this.ai[1];
				if (!Main.npc[num1297].active || Main.npc[num1297].type != 396)
				{
					life = 0;
					HitEffect();
					active = false;
					return;
				}
				this.ai[2]++;
				if (this.ai[2] >= num1296)
				{
					if (Main.netMode != 1)
					{
						int num1299 = (int)Main.npc[num1297].ai[3];
						int num1300 = -1;
						int num1301 = -1;
						int num1302 = num1297;
						for (int num1303 = 0; num1303 < 200; num1303++)
						{
							if (Main.npc[num1303].active && Main.npc[num1303].ai[3] == (float)num1299)
							{
								if (num1300 == -1 && Main.npc[num1303].type == 397 && Main.npc[num1303].ai[2] == 0f)
								{
									num1300 = num1303;
								}
								if (num1301 == -1 && Main.npc[num1303].type == 397 && Main.npc[num1303].ai[2] == 1f)
								{
									num1301 = num1303;
								}
								if (num1300 != -1 && num1301 != -1 && num1302 != -1)
								{
									break;
								}
							}
						}
						int num1304 = 1000;
						int num1305 = Main.npc[num1299].lifeMax - Main.npc[num1299].life;
						int num1306 = Main.npc[num1300].lifeMax - Main.npc[num1300].life;
						int num1307 = Main.npc[num1301].lifeMax - Main.npc[num1301].life;
						int num1308 = Main.npc[num1302].lifeMax - Main.npc[num1302].life;
						if (num1308 > 0 && num1304 > 0)
						{
							int num1309 = num1308 - num1304;
							if (num1309 > 0)
							{
								num1309 = 0;
							}
							int num1310 = num1304 + num1309;
							num1304 -= num1310;
							NPC nPC3 = Main.npc[num1302];
							nPC3.life += num1310;
							HealEffect(Utils.CenteredRectangle(Main.npc[num1302].Center, new Vector2(50f)), num1310);
						}
						if (num1305 > 0 && num1304 > 0)
						{
							int num1311 = num1305 - num1304;
							if (num1311 > 0)
							{
								num1311 = 0;
							}
							int num1312 = num1304 + num1311;
							num1304 -= num1312;
							NPC nPC3 = Main.npc[num1299];
							nPC3.life += num1312;
							HealEffect(Utils.CenteredRectangle(Main.npc[num1299].Center, new Vector2(50f)), num1312);
						}
						if (num1306 > 0 && num1304 > 0)
						{
							int num1313 = num1306 - num1304;
							if (num1313 > 0)
							{
								num1313 = 0;
							}
							int num1314 = num1304 + num1313;
							num1304 -= num1314;
							NPC nPC3 = Main.npc[num1300];
							nPC3.life += num1314;
							HealEffect(Utils.CenteredRectangle(Main.npc[num1300].Center, new Vector2(50f)), num1314);
						}
						if (num1307 > 0 && num1304 > 0)
						{
							int num1315 = num1307 - num1304;
							if (num1315 > 0)
							{
								num1315 = 0;
							}
							int num1316 = num1304 + num1315;
							num1304 -= num1316;
							NPC nPC3 = Main.npc[num1301];
							nPC3.life += num1316;
							HealEffect(Utils.CenteredRectangle(Main.npc[num1301].Center, new Vector2(50f)), num1316);
						}
					}
					life = 0;
					HitEffect();
					active = false;
				}
				else
				{
					velocity = Vector2.Zero;
					base.Center = Vector2.Lerp(Main.projectile[num1298].Center, Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center + vector239, this.ai[2] / num1296);
					Vector2 spinningpoint12 = Vector2.UnitY * -height / 2f;
					for (int num1317 = 0; num1317 < 6; num1317++)
					{
						int num1318 = Dust.NewDust(base.Center - Vector2.One * 4f + spinningpoint12.RotatedBy((float)num1317 * (MathF.PI * 2f) / 6f), 0, 0, 229);
						Main.dust[num1318].velocity = -Vector2.UnitY;
						Main.dust[num1318].noGravity = true;
						Main.dust[num1318].scale = 0.7f;
						Main.dust[num1318].customData = this;
					}
					spinningpoint12 = Vector2.UnitY * -height / 6f;
					for (int num1319 = 0; num1319 < 3; num1319++)
					{
						int num1320 = Dust.NewDust(base.Center - Vector2.One * 4f + spinningpoint12.RotatedBy((float)num1319 * (MathF.PI * 2f) / 6f), 0, 0, 229, 0f, -2f);
						Main.dust[num1320].noGravity = true;
						Main.dust[num1320].scale = 1.5f;
						Main.dust[num1320].customData = this;
					}
				}
			}
			else if (aiStyle == 83)
			{
				if (type == 437)
				{
					if (localAI[3] == 0f && Main.netMode != 1)
					{
						localAI[3] = 1f;
						netUpdate = true;
						Point[] spawnPoints = null;
						if (!CultistRitual.CheckFloor(base.Center, out spawnPoints))
						{
							life = 0;
							HitEffect();
							active = false;
							return;
						}
						int num1321 = 0;
						int num1322 = 1;
						for (int num1323 = 0; num1323 < 4; num1323++)
						{
							int num1324 = 0;
							bool flag81 = num1323 == 1 || num1323 == 2;
							num1324 = ((!flag81) ? 379 : 438);
							int num1325 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), spawnPoints[num1323].X * 16 + 8, spawnPoints[num1323].Y * 16 - 48, num1324);
							if (flag81)
							{
								localAI[num1322++] = num1325 + 1;
								Main.npc[num1325].ai[3] = -(whoAmI + 1);
							}
							else
							{
								this.ai[num1321++] = num1325 + 1;
								Main.npc[num1325].ai[3] = -(whoAmI + 1);
							}
							Main.npc[num1325].netUpdate = true;
						}
					}
					if (localAI[0] == 1f && Main.netMode != 1)
					{
						localAI[0] = 2f;
						for (int num1326 = 0; num1326 < 2; num1326++)
						{
							Main.npc[(int)localAI[num1326 + 1] - 1].ai[1] = 1f;
							Main.npc[(int)localAI[num1326 + 1] - 1].netUpdate = true;
							Main.npc[(int)this.ai[num1326] - 1].ai[3] = 0f;
							Main.npc[(int)this.ai[num1326] - 1].TargetClosest();
							Main.npc[(int)this.ai[num1326] - 1].netUpdate = true;
						}
					}
					if (this.ai[0] != -1f && Main.netMode != 1)
					{
						bool flag82 = true;
						for (int num1327 = 0; num1327 < 2; num1327++)
						{
							if (Main.npc[(int)localAI[num1327 + 1] - 1].active && Main.npc[(int)localAI[num1327 + 1] - 1].type == 438)
							{
								flag82 = false;
							}
							if (Main.npc[(int)this.ai[num1327] - 1].active && Main.npc[(int)this.ai[num1327] - 1].type == 379)
							{
								flag82 = false;
							}
						}
						if (flag82)
						{
							this.ai[0] = -1f;
							this.ai[1] = 0f;
							this.ai[3] = 0f;
							int num1328 = (int)base.Center.X / 16 + 11 * (Main.rand.Next(2) == 0).ToDirectionInt();
							int num1329 = 0;
							for (int num1330 = -5; num1330 < 12; num1330++)
							{
								int num1331 = num1328;
								int num1332 = (int)base.Center.Y / 16 + num1330;
								if (WorldGen.SolidTile(num1331, num1332) && !Collision.SolidTiles(num1331 - 1, num1331 + 1, num1332 - 3, num1332 - 1))
								{
									num1329 = num1332;
									break;
								}
								if (num1330 == 11)
								{
									num1329 = num1332;
								}
							}
							int num1333 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), num1328 * 16 + 10, num1329 * 16 - 2, 439);
							Main.npc[num1333].direction = (Main.npc[num1333].spriteDirection = Math.Sign(base.Center.X - (float)(num1328 * 16) - 10f));
							this.ai[2] = num1333;
							netUpdate = true;
							CultistRitual.TabletDestroyed();
						}
					}
					if (this.ai[0] == -1f)
					{
						this.ai[3]++;
						if (this.ai[3] > 300f)
						{
							life = 0;
							HitEffect(0, 9999.0);
							active = false;
							if (Main.netMode != 1)
							{
								for (int num1334 = 0; num1334 < 6; num1334++)
								{
									float num1335 = 3f + Main.rand.NextFloat() * 6f;
									Vector2 vector240 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
									Vector2 center28 = base.Center;
									center28 += vector240 * 30f;
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center28.X, center28.Y, vector240.X * num1335, vector240.Y * num1335, 526, 0, 0f, Main.myPlayer, Main.npc[(int)this.ai[2]].Center.X, Main.npc[(int)this.ai[2]].Center.Y);
								}
								for (int num1336 = 0; num1336 < 20; num1336++)
								{
									if (Main.rand.Next(2) != 0)
									{
										float num1337 = 3f + Main.rand.NextFloat() * 6f;
										Vector2 vector241 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
										Vector2 center29 = base.Center;
										center29 += vector241 * 30f;
										Vector2 vector242 = base.Center + vector241 * (Main.rand.NextFloat() * 45f + 45f) + Vector2.UnitY * 20f;
										Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center29.X, center29.Y, vector241.X * num1337, -20f, 526, 0, 0f, Main.myPlayer, vector242.X, vector242.Y);
									}
								}
							}
						}
						else if (this.ai[3] % 10f == 1f && this.ai[3] > 120f && Main.netMode != 1)
						{
							float num1338 = 3f + Main.rand.NextFloat() * 6f;
							Vector2 vector243 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Vector2 center30 = base.Center;
							center30 += vector243 * 25f;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center30.X, center30.Y, vector243.X * num1338, vector243.Y * num1338, 526, 0, 0f, Main.myPlayer, Main.npc[(int)this.ai[2]].Center.X, Main.npc[(int)this.ai[2]].Center.Y);
						}
					}
				}
				if (type == 438)
				{
					velocity.X *= 0.93f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					int num1339 = (int)(0f - this.ai[3] - 1f);
					if (num1339 == -1)
					{
						life = 0;
						HitEffect();
						active = false;
						return;
					}
					int num1340 = Math.Sign(Main.npc[num1339].Center.X - base.Center.X);
					if (num1340 != direction)
					{
						velocity.X = 0f;
						direction = (spriteDirection = num1340);
						netUpdate = true;
					}
					if (justHit && Main.netMode != 1 && Main.npc[num1339].localAI[0] == 0f)
					{
						Main.npc[num1339].localAI[0] = 1f;
					}
					if ((this.ai[0] += 1f) >= 300f)
					{
						this.ai[0] = 0f;
						netUpdate = true;
					}
				}
				if (type == 437)
				{
					Lighting.AddLight(base.Center, 0.8f, 0.75f, 0.55f);
				}
			}
			else if (aiStyle == 84)
			{
				AI_084_LunaticCultist();
			}
			else if (aiStyle == 85)
			{
				noTileCollide = false;
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 1f;
					}
					else
					{
						Vector2 vector244 = Main.player[target].Center - base.Center;
						vector244.Y -= Main.player[target].height / 4;
						float num1341 = vector244.Length();
						if (num1341 > 800f)
						{
							this.ai[0] = 2f;
						}
						else
						{
							Vector2 center31 = base.Center;
							center31.X = Main.player[target].Center.X;
							Vector2 vector245 = center31 - base.Center;
							if (vector245.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center31, 1, 1))
							{
								this.ai[0] = 3f;
								this.ai[1] = center31.X;
								this.ai[2] = center31.Y;
								Vector2 center32 = base.Center;
								center32.Y = Main.player[target].Center.Y;
								if (vector245.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center32, 1, 1) && Collision.CanHit(center32, 1, 1, Main.player[target].position, 1, 1))
								{
									this.ai[0] = 3f;
									this.ai[1] = center32.X;
									this.ai[2] = center32.Y;
								}
							}
							else
							{
								center31 = base.Center;
								center31.Y = Main.player[target].Center.Y;
								if ((center31 - base.Center).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center31, 1, 1))
								{
									this.ai[0] = 3f;
									this.ai[1] = center31.X;
									this.ai[2] = center31.Y;
								}
							}
							if (this.ai[0] == 0f)
							{
								localAI[0] = 0f;
								vector244.Normalize();
								vector244 *= 0.5f;
								velocity += vector244;
								this.ai[0] = 4f;
								this.ai[1] = 0f;
							}
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					rotation += (float)direction * 0.3f;
					Vector2 vector246 = Main.player[target].Center - base.Center;
					if (type == 421)
					{
						vector246 = Main.player[target].Top - base.Center;
					}
					float num1342 = vector246.Length();
					float num1343 = 5.5f;
					if (type == 405)
					{
						num1343 = 8f;
					}
					num1343 += num1342 / 100f;
					int num1344 = 50;
					vector246.Normalize();
					vector246 *= num1343;
					velocity = (velocity * (num1344 - 1) + vector246) / num1344;
					if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
					if (type == 421 && num1342 < 40f && Main.player[target].active && !Main.player[target].dead)
					{
						bool flag83 = true;
						for (int num1345 = 0; num1345 < 200; num1345++)
						{
							NPC nPC10 = Main.npc[num1345];
							if (nPC10.active && nPC10.type == type && nPC10.ai[0] == 5f && nPC10.target == target)
							{
								flag83 = false;
								break;
							}
						}
						if (flag83)
						{
							base.Center = Main.player[target].Top;
							velocity = Vector2.Zero;
							this.ai[0] = 5f;
							this.ai[1] = 0f;
							netUpdate = true;
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					rotation = velocity.X * 0.1f;
					noTileCollide = true;
					Vector2 vector247 = Main.player[target].Center - base.Center;
					float num1346 = vector247.Length();
					float num1347 = 3f;
					if (type == 405)
					{
						num1347 = 6f;
					}
					int num1348 = 3;
					vector247.Normalize();
					vector247 *= num1347;
					velocity = (velocity * (num1348 - 1) + vector247) / num1348;
					if (num1346 < 600f && !Collision.SolidCollision(position, width, height))
					{
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 3f)
				{
					rotation = velocity.X * 0.1f;
					Vector2 vector248 = new Vector2(this.ai[1], this.ai[2]);
					Vector2 vector249 = vector248 - base.Center;
					float num1349 = vector249.Length();
					float num1350 = 2f;
					if (type == 405)
					{
						num1350 = 3f;
					}
					float num1351 = 3f;
					vector249.Normalize();
					vector249 *= num1350;
					velocity = (velocity * (num1351 - 1f) + vector249) / num1351;
					if (collideX || collideY)
					{
						this.ai[0] = 4f;
						this.ai[1] = 0f;
					}
					if (num1349 < num1350 || num1349 > 800f || Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 4f)
				{
					rotation = velocity.X * 0.1f;
					if (collideX)
					{
						velocity.X *= -0.8f;
					}
					if (collideY)
					{
						velocity.Y *= -0.8f;
					}
					Vector2 vector250;
					if (velocity.X == 0f && velocity.Y == 0f)
					{
						vector250 = Main.player[target].Center - base.Center;
						vector250.Y -= Main.player[target].height / 4;
						vector250.Normalize();
						velocity = vector250 * 0.1f;
					}
					float num1352 = 2f;
					if (type == 405)
					{
						num1352 = 3f;
					}
					float num1353 = 20f;
					vector250 = velocity;
					vector250.Normalize();
					vector250 *= num1352;
					velocity = (velocity * (num1353 - 1f) + vector250) / num1353;
					this.ai[1] += 1f;
					if (this.ai[1] > 180f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
					}
					localAI[0] += 1f;
					if (localAI[0] >= 5f && !Collision.SolidCollision(position - new Vector2(10f, 10f), width + 20, height + 20))
					{
						localAI[0] = 0f;
						Vector2 center33 = base.Center;
						center33.X = Main.player[target].Center.X;
						if (Collision.CanHit(base.Center, 1, 1, center33, 1, 1) && Collision.CanHit(base.Center, 1, 1, center33, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center33, 1, 1))
						{
							this.ai[0] = 3f;
							this.ai[1] = center33.X;
							this.ai[2] = center33.Y;
						}
						else
						{
							center33 = base.Center;
							center33.Y = Main.player[target].Center.Y;
							if (Collision.CanHit(base.Center, 1, 1, center33, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center33, 1, 1))
							{
								this.ai[0] = 3f;
								this.ai[1] = center33.X;
								this.ai[2] = center33.Y;
							}
						}
					}
				}
				else if (this.ai[0] == 5f)
				{
					Player player9 = Main.player[target];
					if (!player9.active || player9.dead)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					else
					{
						base.Center = ((player9.gravDir == 1f) ? player9.Top : player9.Bottom) + new Vector2(player9.direction * 4, 0f);
						gfxOffY = player9.gfxOffY;
						velocity = Vector2.Zero;
						if (!player9.creativeGodMode)
						{
							player9.AddBuff(163, 59);
						}
					}
				}
				if (type == 405)
				{
					rotation = 0f;
					for (int num1354 = 0; num1354 < 200; num1354++)
					{
						if (num1354 != whoAmI && Main.npc[num1354].active && Main.npc[num1354].type == type && Math.Abs(position.X - Main.npc[num1354].position.X) + Math.Abs(position.Y - Main.npc[num1354].position.Y) < (float)width)
						{
							if (position.X < Main.npc[num1354].position.X)
							{
								velocity.X -= 0.05f;
							}
							else
							{
								velocity.X += 0.05f;
							}
							if (position.Y < Main.npc[num1354].position.Y)
							{
								velocity.Y -= 0.05f;
							}
							else
							{
								velocity.Y += 0.05f;
							}
						}
					}
				}
				else
				{
					if (type != 421)
					{
						return;
					}
					hide = this.ai[0] == 5f;
					rotation = velocity.X * 0.1f;
					for (int num1355 = 0; num1355 < 200; num1355++)
					{
						if (num1355 != whoAmI && Main.npc[num1355].active && Main.npc[num1355].type == type && Math.Abs(position.X - Main.npc[num1355].position.X) + Math.Abs(position.Y - Main.npc[num1355].position.Y) < (float)width)
						{
							if (position.X < Main.npc[num1355].position.X)
							{
								velocity.X -= 0.05f;
							}
							else
							{
								velocity.X += 0.05f;
							}
							if (position.Y < Main.npc[num1355].position.Y)
							{
								velocity.Y -= 0.05f;
							}
							else
							{
								velocity.Y += 0.05f;
							}
						}
					}
				}
			}
			else if (aiStyle == 86)
			{
				if (alpha > 0)
				{
					alpha -= 30;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				for (int num1356 = 0; num1356 < 200; num1356++)
				{
					if (num1356 == whoAmI || !Main.npc[num1356].active || Main.npc[num1356].type != type)
					{
						continue;
					}
					Vector2 vector251 = Main.npc[num1356].Center - base.Center;
					if (!(vector251.Length() < 50f))
					{
						continue;
					}
					vector251.Normalize();
					if (vector251.X == 0f && vector251.Y == 0f)
					{
						if (num1356 > whoAmI)
						{
							vector251.X = 1f;
						}
						else
						{
							vector251.X = -1f;
						}
					}
					vector251 *= 0.4f;
					velocity -= vector251;
					NPC nPC3 = Main.npc[num1356];
					nPC3.velocity += vector251;
				}
				if (type == 472)
				{
					float num1357 = 120f;
					if (localAI[0] < num1357)
					{
						if (localAI[0] == 0f)
						{
							SoundEngine.PlaySound(SoundID.Item8, base.Center);
							TargetClosest();
							if (direction > 0)
							{
								velocity.X += 2f;
							}
							else
							{
								velocity.X -= 2f;
							}
							position += netOffset;
							for (int num1358 = 0; num1358 < 20; num1358++)
							{
								Vector2 center34 = base.Center;
								center34.Y -= 18f;
								Vector2 vector252 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
								vector252.Normalize();
								vector252 *= (float)Main.rand.Next(0, 100) * 0.1f;
								center34 += vector252;
								vector252.Normalize();
								vector252 *= (float)Main.rand.Next(50, 90) * 0.2f;
								int num1359 = Dust.NewDust(center34, 1, 1, 27);
								Main.dust[num1359].velocity = -vector252 * 0.3f;
								Main.dust[num1359].alpha = 100;
								if (Main.rand.Next(2) == 0)
								{
									Main.dust[num1359].noGravity = true;
									Dust dust = Main.dust[num1359];
									dust.scale += 0.3f;
								}
							}
							position -= netOffset;
						}
						localAI[0] += 1f;
						float num1360 = 1f - localAI[0] / num1357;
						float num1361 = num1360 * 20f;
						for (int num1362 = 0; (float)num1362 < num1361; num1362++)
						{
							if (Main.rand.Next(5) == 0)
							{
								position += netOffset;
								int num1363 = Dust.NewDust(position, width, height, 27);
								Main.dust[num1363].alpha = 100;
								Dust dust = Main.dust[num1363];
								dust.velocity *= 0.3f;
								dust = Main.dust[num1363];
								dust.velocity += velocity * 0.75f;
								Main.dust[num1363].noGravity = true;
								position -= netOffset;
							}
						}
					}
				}
				if (type == 521)
				{
					float num1364 = 120f;
					if (localAI[0] < num1364)
					{
						if (localAI[0] == 0f)
						{
							SoundEngine.PlaySound(SoundID.Item8, base.Center);
							TargetClosest();
							if (direction > 0)
							{
								velocity.X += 2f;
							}
							else
							{
								velocity.X -= 2f;
							}
						}
						localAI[0] += 1f;
						int num1365 = 10;
						for (int num1366 = 0; num1366 < 2; num1366++)
						{
							position += netOffset;
							int num1367 = Dust.NewDust(position - new Vector2(num1365), width + num1365 * 2, height + num1365 * 2, 228, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num1367].noGravity = true;
							Main.dust[num1367].noLight = true;
							position -= netOffset;
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					this.ai[0] = 1f;
					this.ai[1] = direction;
				}
				else if (this.ai[0] == 1f)
				{
					TargetClosest();
					float num1368 = 0.3f;
					float num1369 = 7f;
					float num1370 = 4f;
					float num1371 = 660f;
					float num1372 = 4f;
					if (type == 521)
					{
						num1368 = 0.7f;
						num1369 = 14f;
						num1371 = 500f;
						num1370 = 6f;
						num1372 = 3f;
					}
					velocity.X += this.ai[1] * num1368;
					if (velocity.X > num1369)
					{
						velocity.X = num1369;
					}
					if (velocity.X < 0f - num1369)
					{
						velocity.X = 0f - num1369;
					}
					float num1373 = Main.player[target].Center.Y - base.Center.Y;
					if (Math.Abs(num1373) > num1370)
					{
						num1372 = 15f;
					}
					if (num1373 > num1370)
					{
						num1373 = num1370;
					}
					else if (num1373 < 0f - num1370)
					{
						num1373 = 0f - num1370;
					}
					velocity.Y = (velocity.Y * (num1372 - 1f) + num1373) / num1372;
					if ((this.ai[1] > 0f && Main.player[target].Center.X - base.Center.X < 0f - num1371) || (this.ai[1] < 0f && Main.player[target].Center.X - base.Center.X > num1371))
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						if (base.Center.Y + 20f > Main.player[target].Center.Y)
						{
							this.ai[1] = -1f;
						}
						else
						{
							this.ai[1] = 1f;
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					float num1374 = 0.4f;
					float num1375 = 0.95f;
					float num1376 = 5f;
					if (type == 521)
					{
						num1374 = 0.3f;
						num1376 = 7f;
						num1375 = 0.9f;
					}
					velocity.Y += this.ai[1] * num1374;
					if (velocity.Length() > num1376)
					{
						velocity *= num1375;
					}
					if (velocity.X > -1f && velocity.X < 1f)
					{
						TargetClosest();
						this.ai[0] = 3f;
						this.ai[1] = direction;
					}
				}
				else if (this.ai[0] == 3f)
				{
					float num1377 = 0.4f;
					float num1378 = 0.2f;
					float num1379 = 5f;
					float num1380 = 0.95f;
					if (type == 521)
					{
						num1377 = 0.6f;
						num1378 = 0.3f;
						num1379 = 7f;
						num1380 = 0.9f;
					}
					velocity.X += this.ai[1] * num1377;
					if (base.Center.Y > Main.player[target].Center.Y)
					{
						velocity.Y -= num1378;
					}
					else
					{
						velocity.Y += num1378;
					}
					if (velocity.Length() > num1379)
					{
						velocity *= num1380;
					}
					if (velocity.Y > -1f && velocity.Y < 1f)
					{
						TargetClosest();
						this.ai[0] = 0f;
						this.ai[1] = direction;
					}
				}
				if (type == 521)
				{
					int num1381 = 10;
					position += netOffset;
					for (int num1382 = 0; num1382 < 1; num1382++)
					{
						int num1383 = Dust.NewDust(position - new Vector2(num1381), width + num1381 * 2, height + num1381 * 2, 228, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num1383].noGravity = true;
						Main.dust[num1383].noLight = true;
					}
					position -= netOffset;
				}
			}
			else if (aiStyle == 87)
			{
				knockBackResist = 0.2f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				dontTakeDamage = false;
				noTileCollide = false;
				noGravity = false;
				reflectsProjectiles = false;
				if (this.ai[0] != 7f && Main.player[target].dead)
				{
					TargetClosest();
					if (Main.player[target].dead)
					{
						this.ai[0] = 7f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					Vector2 vector253 = Main.player[target].Center - base.Center;
					if (Main.netMode != 1 && (velocity.X != 0f || velocity.Y > 100f || justHit || vector253.Length() < 80f))
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.ai[1] += 1f;
					if (Main.netMode != 1 && this.ai[1] > 36f)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 2f)
				{
					Vector2 vector254 = Main.player[target].Center - base.Center;
					if (Main.netMode != 1 && vector254.Length() > 600f)
					{
						this.ai[0] = 5f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					if (velocity.Y == 0f)
					{
						TargetClosest();
						velocity.X *= 0.85f;
						this.ai[1] += 1f;
						float num1384 = 15f + 30f * ((float)life / (float)lifeMax);
						float num1385 = 3f + 4f * (1f - (float)life / (float)lifeMax);
						float num1386 = 4f;
						if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							num1386 += 2f;
						}
						if (Main.netMode != 1 && this.ai[1] > num1384)
						{
							this.ai[3] += 1f;
							if (this.ai[3] >= 3f)
							{
								this.ai[3] = 0f;
								num1386 *= 2f;
								num1385 /= 2f;
							}
							this.ai[1] = 0f;
							velocity.Y -= num1386;
							velocity.X = num1385 * (float)direction;
							netUpdate = true;
						}
					}
					else
					{
						knockBackResist = 0f;
						velocity.X *= 0.99f;
						if (direction < 0 && velocity.X > -1f)
						{
							velocity.X = -1f;
						}
						if (direction > 0 && velocity.X < 1f)
						{
							velocity.X = 1f;
						}
					}
					this.ai[2] += 1f;
					if ((double)this.ai[2] > 210.0 && velocity.Y == 0f && Main.netMode != 1)
					{
						switch (Main.rand.Next(3))
						{
						case 0:
							this.ai[0] = 3f;
							break;
						case 1:
							this.ai[0] = 4f;
							noTileCollide = true;
							velocity.Y = -8f;
							break;
						case 2:
							this.ai[0] = 6f;
							break;
						default:
							this.ai[0] = 2f;
							break;
						}
						if (Main.tenthAnniversaryWorld && type == 476 && this.ai[0] == 3f && Main.rand.Next(2) == 0)
						{
							this.ai[0] = 8f;
						}
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 3f)
				{
					velocity.X *= 0.85f;
					dontTakeDamage = true;
					this.ai[1] += 1f;
					if (Main.netMode != 1 && this.ai[1] >= 180f)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					if (Main.expertMode)
					{
						ReflectProjectiles(base.Hitbox);
						reflectsProjectiles = true;
					}
				}
				else if (this.ai[0] == 4f)
				{
					noTileCollide = true;
					noGravity = true;
					knockBackResist = 0f;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					spriteDirection = direction;
					TargetClosest();
					Vector2 center35 = Main.player[target].Center;
					center35.Y -= 350f;
					Vector2 vector255 = center35 - base.Center;
					if (this.ai[2] == 1f)
					{
						this.ai[1] += 1f;
						vector255 = Main.player[target].Center - base.Center;
						vector255.Normalize();
						vector255 *= 8f;
						velocity = (velocity * 4f + vector255) / 5f;
						if (Main.netMode != 1 && this.ai[1] > 6f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 4.1f;
							this.ai[2] = 0f;
							velocity = vector255;
							netUpdate = true;
						}
					}
					else if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 40f && base.Center.Y < Main.player[target].Center.Y - 300f)
					{
						if (Main.netMode != 1)
						{
							this.ai[1] = 0f;
							this.ai[2] = 1f;
							netUpdate = true;
						}
					}
					else
					{
						vector255.Normalize();
						vector255 *= 12f;
						velocity = (velocity * 5f + vector255) / 6f;
					}
				}
				else if (this.ai[0] == 4.1f)
				{
					knockBackResist = 0f;
					if (this.ai[2] == 0f && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1) && !Collision.SolidCollision(position, width, height))
					{
						this.ai[2] = 1f;
					}
					if (position.Y + (float)height >= Main.player[target].position.Y || velocity.Y <= 0f)
					{
						this.ai[1] += 1f;
						if (Main.netMode != 1 && this.ai[1] > 10f)
						{
							this.ai[0] = 2f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
							if (Collision.SolidCollision(position, width, height))
							{
								this.ai[0] = 5f;
							}
						}
					}
					else if (this.ai[2] == 0f)
					{
						noTileCollide = true;
						noGravity = true;
						knockBackResist = 0f;
					}
					velocity.Y += 0.2f;
					if (velocity.Y > 16f)
					{
						velocity.Y = 16f;
					}
				}
				else if (this.ai[0] == 5f)
				{
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					else
					{
						direction = -1;
					}
					spriteDirection = direction;
					noTileCollide = true;
					noGravity = true;
					knockBackResist = 0f;
					Vector2 vector256 = Main.player[target].Center - base.Center;
					vector256.Y -= 4f;
					if (Main.netMode != 1 && vector256.Length() < 200f && !Collision.SolidCollision(position, width, height))
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					if (vector256.Length() > 10f)
					{
						vector256.Normalize();
						vector256 *= 10f;
					}
					velocity = (velocity * 4f + vector256) / 5f;
				}
				else if (this.ai[0] == 6f)
				{
					knockBackResist = 0f;
					if (velocity.Y == 0f)
					{
						TargetClosest();
						velocity.X *= 0.8f;
						this.ai[1] += 1f;
						if (this.ai[1] > 5f)
						{
							this.ai[1] = 0f;
							velocity.Y -= 4f;
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y)
							{
								velocity.Y -= 1.25f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 40f)
							{
								velocity.Y -= 1.5f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 80f)
							{
								velocity.Y -= 1.75f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 120f)
							{
								velocity.Y -= 2f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 160f)
							{
								velocity.Y -= 2.25f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 200f)
							{
								velocity.Y -= 2.5f;
							}
							if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
							{
								velocity.Y -= 2f;
							}
							velocity.X = 12 * direction;
							this.ai[2] += 1f;
							netUpdate = true;
						}
					}
					else
					{
						velocity.X *= 0.98f;
						if (direction < 0 && velocity.X > -8f)
						{
							velocity.X = -8f;
						}
						if (direction > 0 && velocity.X < 8f)
						{
							velocity.X = 8f;
						}
					}
					if (Main.netMode != 1 && this.ai[2] >= 3f && velocity.Y == 0f)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 7f)
				{
					damage = 0;
					life = lifeMax;
					defense = 9999;
					noTileCollide = true;
					alpha += 7;
					if (alpha > 255)
					{
						alpha = 255;
					}
					velocity.X *= 0.98f;
				}
				else
				{
					if (this.ai[0] != 8f)
					{
						return;
					}
					velocity.X *= 0.85f;
					this.ai[1] += 1f;
					if (Main.netMode != 1)
					{
						if (!Main.tenthAnniversaryWorld || this.ai[1] >= 180f)
						{
							this.ai[0] = 2f;
							this.ai[1] = 0f;
							netUpdate = true;
						}
						else if (this.ai[1] % 20f == 0f)
						{
							AI_87_BigMimic_FireStuffCannonBurst();
						}
					}
				}
			}
			else if (aiStyle == 88)
			{
				int num1387 = 7;
				noTileCollide = false;
				noGravity = true;
				knockBackResist = 0.2f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				damage = defDamage;
				if (!Main.eclipse && Main.netMode != 1)
				{
					if (this.ai[0] != -1f)
					{
						netUpdate = true;
					}
					this.ai[0] = -1f;
				}
				else if (target < 0 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
					Vector2 vector257 = Main.player[target].Center - base.Center;
					if (Main.netMode != 1 && (Main.player[target].dead || vector257.Length() > 3000f))
					{
						if (this.ai[0] != -1f)
						{
							netUpdate = true;
						}
						this.ai[0] = -1f;
					}
				}
				else
				{
					Vector2 vector258 = Main.player[target].Center - base.Center;
					if (Main.netMode != 1 && this.ai[0] > 1f && vector258.Length() > 1000f)
					{
						if (this.ai[0] != 1f)
						{
							netUpdate = true;
						}
						this.ai[0] = 1f;
					}
				}
				if (this.ai[0] == -1f)
				{
					Vector2 vector259 = new Vector2(0f, -8f);
					velocity = (velocity * 9f + vector259) / 10f;
					noTileCollide = true;
					dontTakeDamage = true;
				}
				else if (this.ai[0] == 0f)
				{
					TargetClosest();
					if (base.Center.X < Main.player[target].Center.X - 2f)
					{
						direction = 1;
					}
					if (base.Center.X > Main.player[target].Center.X + 2f)
					{
						direction = -1;
					}
					spriteDirection = direction;
					rotation = (rotation * 9f + velocity.X * 0.1f) / 10f;
					if (collideX)
					{
						velocity.X *= (0f - oldVelocity.X) * 0.5f;
						if (velocity.X > 4f)
						{
							velocity.X = 4f;
						}
						if (velocity.X < -4f)
						{
							velocity.X = -4f;
						}
					}
					if (collideY)
					{
						velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
						if (velocity.Y > 4f)
						{
							velocity.Y = 4f;
						}
						if (velocity.Y < -4f)
						{
							velocity.Y = -4f;
						}
					}
					Vector2 vector260 = Main.player[target].Center - base.Center;
					vector260.Y -= 200f;
					if (vector260.Length() > 800f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					else if (vector260.Length() > 80f)
					{
						float num1388 = 6f;
						float num1389 = 30f;
						vector260.Normalize();
						vector260 *= num1388;
						velocity = (velocity * (num1389 - 1f) + vector260) / num1389;
					}
					else if (velocity.Length() > 2f)
					{
						velocity *= 0.95f;
					}
					else if (velocity.Length() < 1f)
					{
						velocity *= 1.05f;
					}
					if (Main.netMode == 1)
					{
						return;
					}
					this.ai[1] += 1f;
					if (justHit)
					{
						this.ai[1] += Main.rand.Next(10, 30);
					}
					if (!(this.ai[1] >= 180f))
					{
						return;
					}
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
					while (this.ai[0] == 0f)
					{
						int num1390 = Main.rand.Next(3);
						if (num1390 == 0 && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							this.ai[0] = 2f;
							continue;
						}
						switch (num1390)
						{
						case 1:
							this.ai[0] = 3f;
							break;
						case 2:
							if (CountNPCS(478) + CountNPCS(479) < num1387)
							{
								this.ai[0] = 4f;
							}
							break;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					collideX = false;
					collideY = false;
					noTileCollide = true;
					knockBackResist = 0f;
					if (target < 0 || !Main.player[target].active || Main.player[target].dead)
					{
						TargetClosest();
					}
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else if (velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
					rotation = (rotation * 9f + velocity.X * 0.08f) / 10f;
					Vector2 vector261 = Main.player[target].Center - base.Center;
					if (Main.netMode != 1 && vector261.Length() < 300f && !Collision.SolidCollision(position, width, height))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					float num1391 = 7f + vector261.Length() / 100f;
					float num1392 = 25f;
					vector261.Normalize();
					vector261 *= num1391;
					velocity = (velocity * (num1392 - 1f) + vector261) / num1392;
				}
				else if (this.ai[0] == 2f)
				{
					damage = (int)((double)defDamage * 0.5);
					knockBackResist = 0f;
					if (target < 0 || !Main.player[target].active || Main.player[target].dead)
					{
						TargetClosest();
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					if (Main.player[target].Center.X - 10f < base.Center.X)
					{
						direction = -1;
					}
					else if (Main.player[target].Center.X + 10f > base.Center.X)
					{
						direction = 1;
					}
					spriteDirection = direction;
					rotation = (rotation * 4f + velocity.X * 0.1f) / 5f;
					if (collideX)
					{
						velocity.X *= (0f - oldVelocity.X) * 0.5f;
						if (velocity.X > 4f)
						{
							velocity.X = 4f;
						}
						if (velocity.X < -4f)
						{
							velocity.X = -4f;
						}
					}
					if (collideY)
					{
						velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
						if (velocity.Y > 4f)
						{
							velocity.Y = 4f;
						}
						if (velocity.Y < -4f)
						{
							velocity.Y = -4f;
						}
					}
					Vector2 vector262 = Main.player[target].Center - base.Center;
					vector262.Y -= 20f;
					this.ai[2] += 1f / 45f;
					if (Main.expertMode)
					{
						this.ai[2] += 1f / 60f;
					}
					float num1393 = 4f + this.ai[2] + vector262.Length() / 120f;
					float num1394 = 20f;
					vector262.Normalize();
					vector262 *= num1393;
					velocity = (velocity * (num1394 - 1f) + vector262) / num1394;
					if (Main.netMode != 1)
					{
						this.ai[1] += 1f;
						if (this.ai[1] > 240f || !Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					knockBackResist = 0f;
					noTileCollide = true;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					spriteDirection = direction;
					rotation = (rotation * 4f + velocity.X * 0.07f) / 5f;
					Vector2 vector263 = Main.player[target].Center - base.Center;
					vector263.Y -= 12f;
					if (base.Center.X > Main.player[target].Center.X)
					{
						vector263.X += 400f;
					}
					else
					{
						vector263.X -= 400f;
					}
					if (Main.netMode != 1 && Math.Abs(base.Center.X - Main.player[target].Center.X) > 350f && Math.Abs(base.Center.Y - Main.player[target].Center.Y) < 20f)
					{
						this.ai[0] = 3.1f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					this.ai[1] += 1f / 30f;
					float num1395 = 8f + this.ai[1];
					float num1396 = 4f;
					vector263.Normalize();
					vector263 *= num1395;
					velocity = (velocity * (num1396 - 1f) + vector263) / num1396;
				}
				else if (this.ai[0] == 3.1f)
				{
					knockBackResist = 0f;
					noTileCollide = true;
					rotation = (rotation * 4f + velocity.X * 0.07f) / 5f;
					Vector2 vector264 = Main.player[target].Center - base.Center;
					vector264.Y -= 12f;
					float num1397 = 16f;
					float num1398 = 8f;
					vector264.Normalize();
					vector264 *= num1397;
					velocity = (velocity * (num1398 - 1f) + vector264) / num1398;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					spriteDirection = direction;
					this.ai[1] += 1f;
					if (Main.netMode != 1 && this.ai[1] > 10f)
					{
						velocity = vector264;
						if (velocity.X < 0f)
						{
							direction = -1;
						}
						else
						{
							direction = 1;
						}
						this.ai[0] = 3.2f;
						this.ai[1] = 0f;
						this.ai[1] = direction;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 3.2f)
				{
					damage = (int)((double)defDamage * 1.3);
					collideX = false;
					collideY = false;
					knockBackResist = 0f;
					noTileCollide = true;
					this.ai[2] += 1f / 30f;
					velocity.X = (16f + this.ai[2]) * this.ai[1];
					if ((this.ai[1] > 0f && base.Center.X > Main.player[target].Center.X + 260f) || (this.ai[1] < 0f && base.Center.X < Main.player[target].Center.X - 260f))
					{
						if (Main.netMode != 1 && !Collision.SolidCollision(position, width, height))
						{
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						else if (Main.netMode != 1 && Math.Abs(base.Center.X - Main.player[target].Center.X) > 800f)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
					}
					rotation = (rotation * 4f + velocity.X * 0.07f) / 5f;
				}
				else if (this.ai[0] == 4f)
				{
					bool flag84 = (double)(base.Center.Y / 16f) < Main.worldSurface;
					TargetClosest();
					if (Main.netMode != 1)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						for (int num1399 = 0; num1399 < 1000; num1399++)
						{
							int num1400 = (int)Main.player[target].Center.X / 16;
							int num1401 = (int)Main.player[target].Center.Y / 16;
							int num1402 = 30 + num1399 / 50;
							int num1403 = 20 + num1399 / 75;
							num1400 += Main.rand.Next(-num1402, num1402 + 1);
							num1401 += Main.rand.Next(-num1403, num1403 + 1);
							if (WorldGen.SolidTile(num1400, num1401))
							{
								continue;
							}
							bool flag85 = false;
							int num1404 = 50;
							while (num1404 > 0)
							{
								num1404--;
								if (!WorldGen.InWorld(num1400, num1401, 5))
								{
									flag85 = true;
									break;
								}
								Tile tile = Main.tile[num1400, num1401];
								if (tile == null)
								{
									flag85 = true;
									break;
								}
								if (tile.liquid > 0 && tile.lava())
								{
									flag85 = true;
									break;
								}
								Tile tile2 = Main.tile[num1400, num1401 - 1];
								if (tile2 == null)
								{
									flag85 = true;
									break;
								}
								if (tile2.liquid > 0 && tile2.lava())
								{
									flag85 = true;
									break;
								}
								if (WorldGen.SolidTile(num1400, num1401) || (flag84 && (double)num1401 > Main.worldSurface))
								{
									break;
								}
								num1401++;
							}
							if (!(num1404 <= 0 || flag85) && (new Vector2(num1400 * 16 + 8, num1401 * 16 + 8) - Main.player[target].Center).Length() < 600f)
							{
								this.ai[0] = 4.1f;
								this.ai[1] = num1400;
								this.ai[2] = num1401;
								break;
							}
						}
					}
					netUpdate = true;
				}
				else if (this.ai[0] == 4.1f)
				{
					if (velocity.X < -2f)
					{
						direction = -1;
					}
					else if (velocity.X > 2f)
					{
						direction = 1;
					}
					spriteDirection = direction;
					rotation = (rotation * 9f + velocity.X * 0.1f) / 10f;
					noTileCollide = true;
					int num1405 = (int)this.ai[1];
					int num1406 = (int)this.ai[2];
					float x3 = num1405 * 16 + 8;
					float y5 = num1406 * 16 - 20;
					Vector2 v10 = new Vector2(x3, y5);
					v10 -= base.Center;
					float num1407 = 6f + v10.Length() / 150f;
					if (num1407 > 10f)
					{
						num1407 = 10f;
					}
					float num1408 = 10f;
					if (v10.Length() < 10f)
					{
						this.ai[0] = 4.2f;
						netUpdate = true;
					}
					v10 = v10.SafeNormalize(Vector2.Zero);
					v10 *= num1407;
					velocity = (velocity * (num1408 - 1f) + v10) / num1408;
					if (velocity.Length() > num1407)
					{
						velocity.Normalize();
						velocity *= num1407;
					}
				}
				else
				{
					if (this.ai[0] != 4.2f)
					{
						return;
					}
					rotation = (rotation * 9f + velocity.X * 0.1f) / 10f;
					knockBackResist = 0f;
					noTileCollide = true;
					int num1409 = (int)this.ai[1];
					int num1410 = (int)this.ai[2];
					float x4 = num1409 * 16 + 8;
					float y6 = num1410 * 16 - 20;
					Vector2 vector265 = new Vector2(x4, y6);
					vector265 -= base.Center;
					float num1411 = 4f;
					float num1412 = 2f;
					if (Main.netMode != 1 && vector265.Length() < 4f)
					{
						int num1413 = 70;
						if (Main.expertMode)
						{
							num1413 = (int)((double)num1413 * 0.75);
						}
						this.ai[3] += 1f;
						if (this.ai[3] == (float)num1413)
						{
							int num1414 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), num1409 * 16 + 8, num1410 * 16, 478, whoAmI);
							Main.npc[num1414].netUpdate = true;
						}
						else if (this.ai[3] == (float)(num1413 * 2))
						{
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
							if (CountNPCS(478) + CountNPCS(479) < num1387 && Main.rand.Next(3) != 0)
							{
								this.ai[0] = 4f;
							}
							else if (Collision.SolidCollision(position, width, height))
							{
								this.ai[0] = 1f;
							}
						}
					}
					if (vector265.Length() > num1411)
					{
						vector265.Normalize();
						vector265 *= num1411;
					}
					velocity = (velocity * (num1412 - 1f) + vector265) / num1412;
					if (velocity.Length() > num1411)
					{
						velocity.Normalize();
						velocity *= num1411;
					}
				}
			}
			else if (aiStyle == 89)
			{
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.9f;
					rotation += velocity.X * 0.02f;
				}
				else
				{
					velocity.X *= 0.99f;
					rotation += velocity.X * 0.04f;
				}
				int num1415 = 900;
				if (Main.expertMode)
				{
					num1415 = 600;
				}
				if (justHit)
				{
					this.ai[0] -= Main.rand.Next(10, 21);
					if (!Main.expertMode)
					{
						this.ai[0] -= Main.rand.Next(10, 21);
					}
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= (float)num1415)
				{
					Transform(479);
				}
				if (Main.netMode != 1 && velocity.Y == 0f && (double)Math.Abs(velocity.X) < 0.2 && (double)this.ai[0] >= (double)num1415 * 0.75)
				{
					float num1416 = this.ai[0] - (float)num1415 * 0.75f;
					num1416 /= (float)num1415 * 0.25f;
					if ((float)Main.rand.Next(-10, 120) < num1416 * 100f)
					{
						velocity.Y -= (float)Main.rand.Next(20, 40) * 0.025f;
						velocity.X += (float)Main.rand.Next(-20, 20) * 0.025f;
						velocity *= 1f + num1416 * 2f;
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 90)
			{
				noTileCollide = false;
				knockBackResist = 0.4f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				noGravity = true;
				rotation = (rotation * 9f + velocity.X * 0.1f) / 10f;
				if (!Main.eclipse)
				{
					EncourageDespawn(5);
					velocity.Y -= 0.2f;
					if (velocity.Y < -8f)
					{
						velocity.Y = -8f;
					}
					noTileCollide = true;
					return;
				}
				if (this.ai[0] == 0f || this.ai[0] == 1f)
				{
					for (int num1417 = 0; num1417 < 200; num1417++)
					{
						if (num1417 != whoAmI && Main.npc[num1417].active && Main.npc[num1417].type == type)
						{
							Vector2 vector266 = Main.npc[num1417].Center - base.Center;
							if (vector266.Length() < (float)(width + height))
							{
								vector266.Normalize();
								vector266 *= -0.1f;
								velocity += vector266;
								NPC nPC3 = Main.npc[num1417];
								nPC3.velocity -= vector266;
							}
						}
					}
				}
				if (target < 0 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
					Vector2 vector267 = Main.player[target].Center - base.Center;
					if (Main.player[target].dead || vector267.Length() > 3000f)
					{
						this.ai[0] = -1f;
					}
				}
				else
				{
					Vector2 vector268 = Main.player[target].Center - base.Center;
					if (this.ai[0] > 1f && vector268.Length() > 1000f)
					{
						this.ai[0] = 1f;
					}
				}
				if (this.ai[0] == -1f)
				{
					Vector2 vector269 = new Vector2(0f, -8f);
					velocity = (velocity * 9f + vector269) / 10f;
					noTileCollide = true;
					dontTakeDamage = true;
				}
				else if (this.ai[0] == 0f)
				{
					TargetClosest();
					spriteDirection = direction;
					if (collideX)
					{
						velocity.X *= (0f - oldVelocity.X) * 0.5f;
						if (velocity.X > 4f)
						{
							velocity.X = 4f;
						}
						if (velocity.X < -4f)
						{
							velocity.X = -4f;
						}
					}
					if (collideY)
					{
						velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
						if (velocity.Y > 4f)
						{
							velocity.Y = 4f;
						}
						if (velocity.Y < -4f)
						{
							velocity.Y = -4f;
						}
					}
					Vector2 vector270 = Main.player[target].Center - base.Center;
					if (vector270.Length() > 800f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					else if (vector270.Length() > 200f)
					{
						float num1418 = 5.5f + vector270.Length() / 100f + this.ai[1] / 15f;
						float num1419 = 40f;
						vector270.Normalize();
						vector270 *= num1418;
						velocity = (velocity * (num1419 - 1f) + vector270) / num1419;
					}
					else if (velocity.Length() > 2f)
					{
						velocity *= 0.95f;
					}
					else if (velocity.Length() < 1f)
					{
						velocity *= 1.05f;
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 90f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 2f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					collideX = false;
					collideY = false;
					noTileCollide = true;
					knockBackResist = 0f;
					if (target < 0 || !Main.player[target].active || Main.player[target].dead)
					{
						TargetClosest();
					}
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else if (velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
					rotation = (rotation * 9f + velocity.X * 0.08f) / 10f;
					Vector2 vector271 = Main.player[target].Center - base.Center;
					if (vector271.Length() < 300f && !Collision.SolidCollision(position, width, height))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					this.ai[2] += 1f / 60f;
					float num1420 = 5.5f + this.ai[2] + vector271.Length() / 150f;
					float num1421 = 35f;
					vector271.Normalize();
					vector271 *= num1420;
					velocity = (velocity * (num1421 - 1f) + vector271) / num1421;
				}
				else if (this.ai[0] == 2f)
				{
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else if (velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
					rotation = (rotation * 7f + velocity.X * 0.1f) / 8f;
					knockBackResist = 0f;
					noTileCollide = true;
					Vector2 vector272 = Main.player[target].Center - base.Center;
					vector272.Y -= 8f;
					float num1422 = 9f;
					float num1423 = 8f;
					vector272.Normalize();
					vector272 *= num1422;
					velocity = (velocity * (num1423 - 1f) + vector272) / num1423;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					spriteDirection = direction;
					this.ai[1] += 1f;
					if (this.ai[1] > 10f)
					{
						velocity = vector272;
						if (velocity.X < 0f)
						{
							direction = -1;
						}
						else
						{
							direction = 1;
						}
						this.ai[0] = 2.1f;
						this.ai[1] = 0f;
					}
				}
				else
				{
					if (this.ai[0] != 2.1f)
					{
						return;
					}
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else if (velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
					velocity *= 1.01f;
					knockBackResist = 0f;
					noTileCollide = true;
					this.ai[1] += 1f;
					int num1424 = 45;
					if (this.ai[1] > (float)num1424)
					{
						if (!Collision.SolidCollision(position, width, height))
						{
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
						}
						else if (this.ai[1] > (float)(num1424 * 2))
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
						}
					}
				}
			}
			else if (aiStyle == 91)
			{
				noGravity = true;
				noTileCollide = false;
				dontTakeDamage = false;
				if (justHit && Main.netMode != 1 && Main.expertMode && Main.rand.Next(6) == 0)
				{
					netUpdate = true;
					this.ai[0] = -1f;
					this.ai[1] = 0f;
				}
				if (this.ai[0] == -1f)
				{
					dontTakeDamage = true;
					noGravity = false;
					velocity.X *= 0.98f;
					this.ai[1] += 1f;
					if (this.ai[1] >= 120f)
					{
						this.ai[0] = (this.ai[1] = (this.ai[2] = (this.ai[3] = 0f)));
					}
				}
				else if (this.ai[0] == 0f)
				{
					TargetClosest();
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 1f;
						return;
					}
					Vector2 vector273 = Main.player[target].Center - base.Center;
					vector273.Y -= Main.player[target].height / 4;
					float num1425 = vector273.Length();
					Vector2 center36 = base.Center;
					center36.X = Main.player[target].Center.X;
					Vector2 vector274 = center36 - base.Center;
					if (vector274.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center36, 1, 1))
					{
						this.ai[0] = 3f;
						this.ai[1] = center36.X;
						this.ai[2] = center36.Y;
						Vector2 center37 = base.Center;
						center37.Y = Main.player[target].Center.Y;
						if (vector274.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center37, 1, 1) && Collision.CanHit(center37, 1, 1, Main.player[target].position, 1, 1))
						{
							this.ai[0] = 3f;
							this.ai[1] = center37.X;
							this.ai[2] = center37.Y;
						}
					}
					else
					{
						center36 = base.Center;
						center36.Y = Main.player[target].Center.Y;
						if ((center36 - base.Center).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center36, 1, 1))
						{
							this.ai[0] = 3f;
							this.ai[1] = center36.X;
							this.ai[2] = center36.Y;
						}
					}
					if (this.ai[0] == 0f)
					{
						localAI[0] = 0f;
						vector273.Normalize();
						vector273 *= 0.5f;
						velocity += vector273;
						this.ai[0] = 4f;
						this.ai[1] = 0f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					Vector2 vector275 = Main.player[target].Center - base.Center;
					float num1426 = vector275.Length();
					float num1427 = 2f;
					num1427 += num1426 / 200f;
					int num1428 = 50;
					vector275.Normalize();
					vector275 *= num1427;
					velocity = (velocity * (num1428 - 1) + vector275) / num1428;
					if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					noTileCollide = true;
					Vector2 vector276 = Main.player[target].Center - base.Center;
					float num1429 = vector276.Length();
					float num1430 = 2f;
					int num1431 = 4;
					vector276.Normalize();
					vector276 *= num1430;
					velocity = (velocity * (num1431 - 1) + vector276) / num1431;
					if (num1429 < 600f && !Collision.SolidCollision(position, width, height))
					{
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 3f)
				{
					Vector2 vector277 = new Vector2(this.ai[1], this.ai[2]);
					Vector2 vector278 = vector277 - base.Center;
					float num1432 = vector278.Length();
					float num1433 = 1f;
					float num1434 = 3f;
					vector278.Normalize();
					vector278 *= num1433;
					velocity = (velocity * (num1434 - 1f) + vector278) / num1434;
					if (collideX || collideY)
					{
						this.ai[0] = 4f;
						this.ai[1] = 0f;
					}
					if (num1432 < num1433 || num1432 > 800f || Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
					}
				}
				else
				{
					if (this.ai[0] != 4f)
					{
						return;
					}
					if (collideX)
					{
						velocity.X *= -0.8f;
					}
					if (collideY)
					{
						velocity.Y *= -0.8f;
					}
					Vector2 vector279;
					if (velocity.X == 0f && velocity.Y == 0f)
					{
						vector279 = Main.player[target].Center - base.Center;
						vector279.Y -= Main.player[target].height / 4;
						vector279.Normalize();
						velocity = vector279 * 0.1f;
					}
					float num1435 = 1.5f;
					float num1436 = 20f;
					vector279 = velocity;
					vector279.Normalize();
					vector279 *= num1435;
					velocity = (velocity * (num1436 - 1f) + vector279) / num1436;
					this.ai[1] += 1f;
					if (this.ai[1] > 180f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
					}
					localAI[0] += 1f;
					if (!(localAI[0] >= 5f) || Collision.SolidCollision(position - new Vector2(10f, 10f), width + 20, height + 20))
					{
						return;
					}
					localAI[0] = 0f;
					Vector2 center38 = base.Center;
					center38.X = Main.player[target].Center.X;
					if (Collision.CanHit(base.Center, 1, 1, center38, 1, 1) && Collision.CanHit(base.Center, 1, 1, center38, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center38, 1, 1))
					{
						this.ai[0] = 3f;
						this.ai[1] = center38.X;
						this.ai[2] = center38.Y;
						return;
					}
					center38 = base.Center;
					center38.Y = Main.player[target].Center.Y;
					if (Collision.CanHit(base.Center, 1, 1, center38, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center38, 1, 1))
					{
						this.ai[0] = 3f;
						this.ai[1] = center38.X;
						this.ai[2] = center38.Y;
					}
				}
			}
			else if (aiStyle == 92)
			{
				if (Main.rand.Next(20) == 0)
				{
					switch (Main.rand.Next(15, 18))
					{
					case 15:
						HitSound = SoundID.NPCHit15;
						break;
					case 16:
						HitSound = SoundID.NPCHit16;
						break;
					case 17:
						HitSound = SoundID.NPCHit17;
						break;
					}
				}
				if (Main.netMode == 1)
				{
					return;
				}
				bool flag86 = false;
				int num1437 = (int)this.ai[0];
				int num1438 = (int)this.ai[1];
				if (!flag86 && (!Main.tile[num1437, num1438].active() || Main.tile[num1437, num1438].type != 378))
				{
					flag86 = true;
				}
				if (!flag86 && (target == 255 || Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 160000f))
				{
					TargetClosest(faceTarget: false);
					if (target == 255 || Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 160000f)
					{
						flag86 = true;
					}
				}
				if (flag86)
				{
					life = 0;
					HitEffect();
					active = false;
					int num1439 = TETrainingDummy.Find((int)this.ai[0], (int)this.ai[1]);
					if (num1439 != -1)
					{
						((TETrainingDummy)TileEntity.ByID[num1439]).Deactivate();
					}
				}
			}
			else if (aiStyle == 93)
			{
				if (Main.netMode != 1 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num1440 = 0; num1440 < 4; num1440++)
					{
						int num1441 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X + num1440 * 40 - 150, (int)base.Center.Y, 492, whoAmI, whoAmI, num1440, 0f, 60 * num1440);
						Main.npc[num1441].TargetClosest(faceTarget: false);
						Main.npc[num1441].timeLeft = 600;
						Main.npc[num1441].netUpdate = true;
						this.ai[num1440] = num1441;
					}
					netUpdate = true;
				}
				bool flag87 = true;
				for (int num1442 = 0; num1442 < 4; num1442++)
				{
					if (this.ai[num1442] >= 0f && (!Main.npc[(int)this.ai[num1442]].active || Main.npc[(int)this.ai[num1442]].type != 492))
					{
						this.ai[num1442] = -1f;
						netUpdate = true;
					}
					else if (this.ai[num1442] >= 0f)
					{
						flag87 = false;
					}
				}
				if (flag87)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					return;
				}
				if (Main.netMode != 1 && Main.rand.Next(300) == 0)
				{
					Vector2 vector280 = new Vector2((Main.rand.NextFloat() - 0.5f) * (float)(width - 70), (Main.rand.NextFloat() - 0.5f) * 20f - (float)(height / 2) - 20f).RotatedBy(rotation);
					vector280 += base.Center;
					int num1443 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector280.X, (int)vector280.Y, Utils.SelectRandom<int>(Main.rand, 213, 215, 214, 212));
					Main.npc[num1443].velocity = new Vector2((Main.rand.NextFloat() - 0.5f) * 5f, -8.01f) + velocity;
					Main.npc[num1443].netUpdate = true;
					Main.npc[num1443].timeLeft = 600;
				}
				if ((localAI[3] += 1f) >= 64f)
				{
					localAI[3] = 0f;
				}
				TargetClosest();
				int num1444 = (int)base.Center.X / 16 + Math.Sign(velocity.X) * 10;
				int num1445 = (int)(position.Y + (float)height) / 16;
				int num1446 = 0;
				if (Main.tile[num1444, num1445].nactive() && Main.tileSolid[Main.tile[num1444, num1445].type] && !Main.tileSolidTop[Main.tile[num1444, num1445].type])
				{
					num1446 = 1;
				}
				else
				{
					for (; num1446 < 150 && num1445 + num1446 < Main.maxTilesY; num1446++)
					{
						int num1447 = num1445 + num1446;
						if (Main.tile[num1444, num1447].nactive() && Main.tileSolid[Main.tile[num1444, num1447].type] && !Main.tileSolidTop[Main.tile[num1444, num1447].type])
						{
							num1446--;
							break;
						}
					}
				}
				float num1448 = num1446 * 16;
				if (num1448 < 350f)
				{
					float num1449 = num1448 - 350f;
					if (num1449 < -4f)
					{
						num1449 = -4f;
					}
					velocity.Y = MathHelper.Lerp(velocity.Y, num1449, 0.05f);
				}
				else if (num1448 > 450f)
				{
					float num1450 = num1448 - 350f;
					if (num1450 > 4f)
					{
						num1450 = 4f;
					}
					velocity.Y = MathHelper.Lerp(velocity.Y, num1450, 0.05f);
				}
				else
				{
					velocity.Y *= 0.95f;
				}
				float num1451 = Main.player[target].Center.X - base.Center.X;
				if (Math.Abs(num1451) >= 300f && (Math.Abs(velocity.X) < 6f || Math.Sign(velocity.X) != direction))
				{
					velocity.X += (float)direction * 0.06f;
				}
				rotation = velocity.X * 0.025f;
				spriteDirection = -Math.Sign(velocity.X);
				for (int num1452 = 0; num1452 < 2; num1452++)
				{
					if (Main.rand.Next(2) != 0)
					{
						Vector2 vector281 = new Vector2((Main.rand.NextFloat() - 0.5f) * (float)(width - 70), (Main.rand.NextFloat() - 0.5f) * 20f + (float)(height / 2) + 10f).RotatedBy(rotation);
						Dust dust8 = Main.dust[Dust.NewDust(base.Center, 0, 0, 228)];
						dust8.position = base.Center + vector281;
						dust8.velocity = Vector2.Zero;
						dust8.noGravity = true;
						dust8.noLight = true;
						dust8.fadeIn = 1.5f;
						dust8.scale = 0.5f;
					}
				}
			}
			else if (aiStyle == 94)
			{
				if (this.ai[2] == 1f)
				{
					velocity = Vector2.UnitY * velocity.Length();
					if (velocity.Y < 0.25f)
					{
						velocity.Y += 0.02f;
					}
					if (velocity.Y > 0.25f)
					{
						velocity.Y -= 0.02f;
					}
					dontTakeDamage = true;
					this.ai[1]++;
					if (this.ai[1] > 120f)
					{
						Opacity = 1f - (this.ai[1] - 120f) / 60f;
					}
					int num1453 = 6;
					switch (type)
					{
					case 517:
						num1453 = 127;
						break;
					case 422:
						num1453 = 229;
						break;
					case 507:
						num1453 = 242;
						break;
					case 493:
						num1453 = 135;
						break;
					}
					if (Main.rand.Next(5) == 0 && this.ai[1] < 120f)
					{
						for (int num1454 = 0; num1454 < 3; num1454++)
						{
							Dust dust9 = Main.dust[Dust.NewDust(base.Left, width, height / 2, num1453)];
							dust9.position = base.Center + Vector2.UnitY.RotatedByRandom(4.188790321350098) * new Vector2((float)width * 1.5f, (float)height * 1.1f) * 0.8f * (0.8f + Main.rand.NextFloat() * 0.2f);
							dust9.velocity.X = 0f;
							dust9.velocity.Y = (0f - Math.Abs(dust9.velocity.Y - (float)num1454 + velocity.Y - 4f)) * 3f;
							dust9.noGravity = true;
							dust9.fadeIn = 1f;
							dust9.scale = 1f + Main.rand.NextFloat() + (float)num1454 * 0.3f;
						}
					}
					if (this.ai[1] < 150f)
					{
						for (int num1455 = 0; num1455 < 3; num1455++)
						{
							if (Main.rand.Next(4) == 0)
							{
								Dust dust10 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1455), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1455)), 20, num1453)];
								dust10.velocity.X = 0f;
								dust10.velocity.Y = (0f - Math.Abs(dust10.velocity.Y - (float)num1455 + velocity.Y - 4f)) * (1f + this.ai[1] / 180f * 0.5f);
								dust10.noGravity = true;
								dust10.fadeIn = 1f;
								dust10.scale = 1f + Main.rand.NextFloat() + (float)num1455 * 0.3f;
							}
						}
					}
					if (Main.rand.Next(5) == 0 && this.ai[1] < 150f)
					{
						for (int num1456 = 0; num1456 < 3; num1456++)
						{
							Vector2 vector282 = base.Center + Vector2.UnitY.RotatedByRandom(4.188790321350098) * new Vector2(width, height) * 0.7f * Main.rand.NextFloat();
							float num1457 = 1f + Main.rand.NextFloat() * 2f + this.ai[1] / 180f * 4f;
							for (int num1458 = 0; num1458 < 6; num1458++)
							{
								Dust dust11 = Main.dust[Dust.NewDust(vector282, 4, 4, num1453)];
								dust11.position = vector282;
								dust11.velocity.X *= num1457;
								dust11.velocity.Y = (0f - Math.Abs(dust11.velocity.Y)) * num1457;
								dust11.noGravity = true;
								dust11.fadeIn = 1f;
								dust11.scale = 1.5f + Main.rand.NextFloat() + (float)num1458 * 0.13f;
							}
							SoundEngine.PlaySound(3, vector282, Utils.SelectRandom<int>(Main.rand, 1, 18));
						}
					}
					if (Main.rand.Next(3) != 0 && this.ai[1] < 150f)
					{
						Dust dust12 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
						dust12.position = base.Center + Vector2.UnitY.RotatedByRandom(4.188790321350098) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
						dust12.velocity.X = 0f;
						dust12.velocity.Y = Math.Abs(dust12.velocity.Y) * 0.25f;
					}
					if (this.ai[1] % 60f == 1f)
					{
						SoundEngine.PlaySound(4, base.Center, 22);
					}
					if (this.ai[1] >= 180f)
					{
						life = 0;
						HitEffect(0, 1337.0);
						checkDead();
					}
					return;
				}
				if (this.ai[3] > 0f)
				{
					bool flag88 = dontTakeDamage;
					switch (type)
					{
					case 517:
						flag88 = ShieldStrengthTowerSolar != 0;
						break;
					case 422:
						flag88 = ShieldStrengthTowerVortex != 0;
						break;
					case 507:
						flag88 = ShieldStrengthTowerNebula != 0;
						break;
					case 493:
						flag88 = ShieldStrengthTowerStardust != 0;
						break;
					}
					if (flag88 != dontTakeDamage)
					{
						SoundEngine.PlaySound(SoundID.NPCDeath58, position);
					}
					else if (this.ai[3] == 1f)
					{
						SoundEngine.PlaySound(SoundID.NPCDeath3, position);
					}
					this.ai[3]++;
					if (this.ai[3] > 120f)
					{
						this.ai[3] = 0f;
					}
				}
				switch (type)
				{
				case 517:
					dontTakeDamage = ShieldStrengthTowerSolar != 0;
					break;
				case 422:
					dontTakeDamage = ShieldStrengthTowerVortex != 0;
					break;
				case 507:
					dontTakeDamage = ShieldStrengthTowerNebula != 0;
					break;
				case 493:
					dontTakeDamage = ShieldStrengthTowerStardust != 0;
					break;
				}
				TargetClosest(faceTarget: false);
				if (Main.player[target].Distance(base.Center) > 2000f)
				{
					localAI[0]++;
				}
				if (localAI[0] >= 60f && Main.netMode != 1)
				{
					localAI[0] = 0f;
					netUpdate = true;
					life = (int)MathHelper.Clamp(life + 200, 0f, lifeMax);
				}
				else
				{
					localAI[0] = 0f;
				}
				velocity = new Vector2(0f, (float)Math.Sin(MathF.PI * 2f * this.ai[0] / 300f) * 0.5f);
				Point origin = base.Bottom.ToTileCoordinates();
				int maxDistance = 10;
				int num1459 = 20;
				int num1460 = 30;
				if (WorldGen.InWorld(origin.X, origin.Y, 20) && Main.tile[origin.X, origin.Y] != null)
				{
					if (WorldUtils.Find(origin, Searches.Chain(new Searches.Down(maxDistance), new Terraria.WorldBuilding.Conditions.IsSolid()), out var result))
					{
						float num1461 = 1f - (float)Math.Abs(origin.Y - result.Y) / 10f;
						position.Y -= 1.5f * num1461;
					}
					else if (!WorldUtils.Find(origin, Searches.Chain(new Searches.Down(num1459), new Terraria.WorldBuilding.Conditions.IsSolid()), out result))
					{
						float num1462 = 1f;
						if (WorldUtils.Find(origin, Searches.Chain(new Searches.Down(num1460), new Terraria.WorldBuilding.Conditions.IsSolid()), out result))
						{
							num1462 = Utils.GetLerpValue(num1459, num1460, Math.Abs(origin.Y - result.Y), clamped: true);
						}
						position.Y += 1.5f * num1462;
					}
				}
				if (!Main.remixWorld && !Main.getGoodWorld && (double)base.Bottom.Y > Main.worldSurface * 16.0 - 100.0)
				{
					position.Y = (float)Main.worldSurface * 16f - (float)height - 100f;
				}
				this.ai[0]++;
				if (this.ai[0] >= 300f)
				{
					this.ai[0] = 0f;
					netUpdate = true;
				}
				if (type == 493)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust13 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
						dust13.position = base.Center + Vector2.UnitY.RotatedByRandom(2.094395160675049) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
						dust13.velocity.X = 0f;
						dust13.velocity.Y = Math.Abs(dust13.velocity.Y) * 0.25f;
					}
					for (int num1463 = 0; num1463 < 3; num1463++)
					{
						if (Main.rand.Next(5) == 0)
						{
							Dust dust14 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1463), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1463)), 20, 135)];
							dust14.velocity.X = 0f;
							dust14.velocity.Y = (0f - Math.Abs(dust14.velocity.Y - (float)num1463 + velocity.Y - 4f)) * 1f;
							dust14.noGravity = true;
							dust14.fadeIn = 1f;
							dust14.scale = 1f + Main.rand.NextFloat() + (float)num1463 * 0.3f;
						}
					}
					if (this.ai[1] > 0f)
					{
						this.ai[1]--;
					}
					if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f && Main.player[target].position.Y - position.Y < 400f)
					{
						SpawnStardustMark_StardustTower();
					}
				}
				if (type == 507)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust15 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
						dust15.position = base.Center + Vector2.UnitY.RotatedByRandom(2.094395160675049) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
						dust15.velocity.X = 0f;
						dust15.velocity.Y = Math.Abs(dust15.velocity.Y) * 0.25f;
					}
					for (int num1464 = 0; num1464 < 3; num1464++)
					{
						if (Main.rand.Next(5) == 0)
						{
							Dust dust16 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1464), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1464)), 20, 242)];
							dust16.velocity.X = 0f;
							dust16.velocity.Y = (0f - Math.Abs(dust16.velocity.Y - (float)num1464 + velocity.Y - 4f)) * 1f;
							dust16.noGravity = true;
							dust16.fadeIn = 1f;
							dust16.color = Color.Black;
							dust16.scale = 1f + Main.rand.NextFloat() + (float)num1464 * 0.3f;
						}
					}
				}
				if (type == 422)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust17 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
						dust17.position = base.Center + Vector2.UnitY.RotatedByRandom(2.094395160675049) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
						dust17.velocity.X = 0f;
						dust17.velocity.Y = Math.Abs(dust17.velocity.Y) * 0.25f;
					}
					for (int num1465 = 0; num1465 < 3; num1465++)
					{
						if (Main.rand.Next(5) == 0)
						{
							Dust dust18 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1465), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1465)), 20, 229)];
							dust18.velocity.X = 0f;
							dust18.velocity.Y = (0f - Math.Abs(dust18.velocity.Y - (float)num1465 + velocity.Y - 4f)) * 1f;
							dust18.noGravity = true;
							dust18.fadeIn = 1f;
							dust18.color = Color.Black;
							dust18.scale = 1f + Main.rand.NextFloat() + (float)num1465 * 0.3f;
						}
					}
					if (this.ai[1] > 0f)
					{
						this.ai[1]--;
					}
					if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 3240f && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						this.ai[1] = 60 + Main.rand.Next(120);
						Point point11 = Main.player[target].Top.ToTileCoordinates();
						bool flag89 = CountNPCS(428) + CountNPCS(427) + CountNPCS(426) < 14;
						for (int num1466 = 0; num1466 < 10; num1466++)
						{
							if (WorldGen.SolidTile(point11.X, point11.Y))
							{
								break;
							}
							if (point11.Y <= 10)
							{
								break;
							}
							point11.Y--;
						}
						if (flag89)
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), point11.X * 16 + 8, point11.Y * 16 + 24, 0f, 0f, 579, 0, 0f, Main.myPlayer);
						}
						else
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), point11.X * 16 + 8, point11.Y * 16 + 17, 0f, 0f, 578, 0, 1f, Main.myPlayer);
						}
					}
					if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f && Main.player[target].position.Y - position.Y < 400f && CountNPCS(427) + CountNPCS(426) * 3 + CountNPCS(428) < 20)
					{
						this.ai[1] = 420 + Main.rand.Next(360);
						Point point12 = base.Center.ToTileCoordinates();
						Point point13 = Main.player[target].Center.ToTileCoordinates();
						Vector2 vector283 = Main.player[target].Center - base.Center;
						int num1467 = 20;
						int num1468 = 3;
						int num1469 = 8;
						int num1470 = 2;
						int num1471 = 0;
						bool flag90 = false;
						if (vector283.Length() > 2000f)
						{
							flag90 = true;
						}
						while (!flag90 && num1471 < 100)
						{
							num1471++;
							int num1472 = Main.rand.Next(point13.X - num1467, point13.X + num1467 + 1);
							int num1473 = Main.rand.Next(point13.Y - num1467, point13.Y + num1467 + 1);
							if ((num1473 < point13.Y - num1469 || num1473 > point13.Y + num1469 || num1472 < point13.X - num1469 || num1472 > point13.X + num1469) && (num1473 < point12.Y - num1468 || num1473 > point12.Y + num1468 || num1472 < point12.X - num1468 || num1472 > point12.X + num1468) && !Main.tile[num1472, num1473].nactive())
							{
								bool flag91 = true;
								if (flag91 && Main.tile[num1472, num1473].lava())
								{
									flag91 = false;
								}
								if (flag91 && Collision.SolidTiles(num1472 - num1470, num1472 + num1470, num1473 - num1470, num1473 + num1470))
								{
									flag91 = false;
								}
								if (flag91 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
								{
									flag91 = false;
								}
								if (flag91)
								{
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), num1472 * 16 + 8, num1473 * 16 + 8, 0f, 0f, 579, 0, 0f, Main.myPlayer);
									flag90 = true;
									break;
								}
							}
						}
					}
				}
				if (type != 517)
				{
					return;
				}
				if (Main.rand.Next(5) == 0)
				{
					Dust dust19 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
					dust19.position = base.Center + Vector2.UnitY.RotatedByRandom(2.094395160675049) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
					dust19.velocity.X = 0f;
					dust19.velocity.Y = Math.Abs(dust19.velocity.Y) * 0.25f;
				}
				for (int num1474 = 0; num1474 < 3; num1474++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust20 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1474), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1474)), 20, 6)];
						dust20.velocity.X = 0f;
						dust20.velocity.Y = (0f - Math.Abs(dust20.velocity.Y - (float)num1474 + velocity.Y - 4f)) * 1f;
						dust20.noGravity = true;
						dust20.fadeIn = 1f;
						dust20.scale = 1f + Main.rand.NextFloat() + (float)num1474 * 0.3f;
					}
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1]--;
				}
				if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f && Main.player[target].position.Y - position.Y < 700f)
				{
					Vector2 vector284 = base.Top + new Vector2((float)(-width) * 0.33f, -20f) + new Vector2((float)width * 0.66f, 20f) * Utils.RandomVector2(Main.rand, 0f, 1f);
					Vector2 vector285 = -Vector2.UnitY.RotatedByRandom(0.7853981852531433) * (7f + Main.rand.NextFloat() * 5f);
					int num1475 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector284.X, (int)vector284.Y, 519, whoAmI);
					Main.npc[num1475].velocity = vector285;
					Main.npc[num1475].netUpdate = true;
					this.ai[1] = 60f;
				}
			}
			else if (aiStyle == 95)
			{
				float num1476 = 300f;
				if (velocity.Length() > 4f)
				{
					velocity *= 0.95f;
				}
				velocity *= 0.99f;
				this.ai[0]++;
				float num1477 = MathHelper.Clamp(this.ai[0] / num1476, 0f, 1f);
				scale = 1f + 0.3f * num1477;
				if (this.ai[0] >= num1476)
				{
					if (Main.netMode != 1)
					{
						Transform(405);
						netUpdate = true;
					}
					return;
				}
				rotation += velocity.X * 0.1f;
				if (!(this.ai[0] > 20f))
				{
					return;
				}
				Vector2 center39 = base.Center;
				int num1478 = (int)(this.ai[0] / (num1476 / 2f));
				for (int num1479 = 0; num1479 < num1478 + 1; num1479++)
				{
					if (Main.rand.Next(2) != 0)
					{
						int num1480 = 226;
						float num1481 = 0.4f;
						if (num1479 % 2 == 1)
						{
							num1480 = 226;
							num1481 = 0.65f;
						}
						Vector2 vector286 = center39 + ((float)Main.rand.NextDouble() * (MathF.PI * 2f)).ToRotationVector2() * (12f - (float)(num1478 * 2));
						int num1482 = Dust.NewDust(vector286 - Vector2.One * 12f, 24, 24, num1480, velocity.X / 2f, velocity.Y / 2f);
						Dust dust = Main.dust[num1482];
						dust.position -= new Vector2(2f);
						Main.dust[num1482].velocity = Vector2.Normalize(center39 - vector286) * 1.5f * (10f - (float)num1478 * 2f) / 10f;
						Main.dust[num1482].noGravity = true;
						Main.dust[num1482].scale = num1481;
						Main.dust[num1482].customData = this;
					}
				}
			}
			else if (aiStyle == 96)
			{
				float num1483 = 5f;
				float moveSpeed = 0.15f;
				TargetClosest();
				Vector2 desiredVelocity3 = Main.player[target].Center - base.Center + new Vector2(0f, -250f);
				float num1484 = desiredVelocity3.Length();
				if (num1484 < 20f)
				{
					desiredVelocity3 = velocity;
				}
				else if (num1484 < 40f)
				{
					desiredVelocity3.Normalize();
					desiredVelocity3 *= num1483 * 0.35f;
				}
				else if (num1484 < 80f)
				{
					desiredVelocity3.Normalize();
					desiredVelocity3 *= num1483 * 0.65f;
				}
				else
				{
					desiredVelocity3.Normalize();
					desiredVelocity3 *= num1483;
				}
				SimpleFlyMovement(desiredVelocity3, moveSpeed);
				rotation = velocity.X * 0.1f;
				if (!((this.ai[0] += 1f) >= 70f))
				{
					return;
				}
				this.ai[0] = 0f;
				if (Main.netMode != 1)
				{
					Vector2 vector287 = Vector2.Zero;
					while (Math.Abs(vector287.X) < 1.5f)
					{
						vector287 = Vector2.UnitY.RotatedByRandom(1.5707963705062866) * new Vector2(5f, 3f);
					}
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector287.X, vector287.Y, 539, 60, 0f, Main.myPlayer, 0f, whoAmI);
				}
			}
			else if (aiStyle == 97)
			{
				float num1485 = 7f;
				int num1486 = 480;
				int num1487 = 30;
				int maxValue6 = 6;
				if (localAI[2] < 180f)
				{
					localAI[2]++;
					if (Main.netMode != 1 && localAI[2] % 60f == 0f)
					{
						Vector2 vector288 = Vector2.Zero;
						while (Math.Abs(vector288.X) < 1.5f)
						{
							vector288 = Vector2.UnitY.RotatedByRandom(1.5707963705062866) * new Vector2(4f, 2.5f);
						}
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector288.X, vector288.Y, 574, 0, 0f, Main.myPlayer, 0f, whoAmI);
					}
				}
				if (localAI[1] == 1f)
				{
					localAI[1] = 0f;
					if (Main.rand.Next(maxValue6) == 0)
					{
						this.ai[0] = num1486;
					}
				}
				TargetClosest();
				if (Main.netMode != 1 && (!Main.player[target].active || Main.player[target].dead))
				{
					this.ai[0] = 0f;
					this.ai[1] = 1f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				rotation = Math.Abs(velocity.X) * (float)direction * 0.1f;
				spriteDirection = -direction;
				Vector2 vector289 = base.Center + new Vector2(direction * 20, 6f);
				Vector2 vector290 = Main.player[target].Center - vector289;
				bool flag92 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
				bool flag93 = false;
				if (this.ai[1] == 1f)
				{
					if (localAI[3] == 0f)
					{
						localAI[3] = 1f;
						this.ai[3] = 3f;
						SoundEngine.PlaySound(SoundID.Item8, base.Center);
						for (int num1488 = 0; num1488 < 20; num1488++)
						{
							int num1489 = Dust.NewDust(position, width, height, 242);
							Dust dust = Main.dust[num1489];
							dust.velocity *= 3f;
							Main.dust[num1489].noGravity = true;
							Main.dust[num1489].scale = 2.5f;
						}
					}
					this.ai[3]--;
					if (this.ai[3] <= 0f)
					{
						active = false;
						netUpdate = true;
					}
					return;
				}
				if (vector290.Length() > 400f || !flag92)
				{
					Vector2 vector291 = vector290;
					if (vector291.Length() > num1485)
					{
						vector291.Normalize();
						vector291 *= num1485;
					}
					int num1490 = 30;
					velocity = (velocity * (num1490 - 1) + vector291) / num1490;
				}
				else
				{
					velocity *= 0.98f;
					flag93 = true;
				}
				if (this.ai[2] != 0f && this.ai[3] != 0f)
				{
					SoundEngine.PlaySound(SoundID.Item8, base.Center);
					for (int num1491 = 0; num1491 < 20; num1491++)
					{
						int num1492 = Dust.NewDust(position, width, height, 242);
						Dust dust = Main.dust[num1492];
						dust.velocity *= 3f;
						Main.dust[num1492].noGravity = true;
						Main.dust[num1492].scale = 2.5f;
					}
					base.Center = new Vector2(this.ai[2] * 16f, this.ai[3] * 16f);
					velocity = Vector2.Zero;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					SoundEngine.PlaySound(SoundID.Item8, base.Center);
					for (int num1493 = 0; num1493 < 20; num1493++)
					{
						int num1494 = Dust.NewDust(position, width, height, 242);
						Dust dust = Main.dust[num1494];
						dust.velocity *= 3f;
						Main.dust[num1494].noGravity = true;
						Main.dust[num1494].scale = 2.5f;
					}
				}
				this.ai[0]++;
				if (this.ai[0] >= (float)num1486 && Main.netMode != 1)
				{
					this.ai[0] = 0f;
					Point point14 = base.Center.ToTileCoordinates();
					Point point15 = Main.player[target].Center.ToTileCoordinates();
					Vector2 chosenTile2 = Vector2.Zero;
					if (AI_AttemptToFindTeleportSpot(ref chosenTile2, point15.X, point15.Y, 20, 12, 1, solidTileCheckCentered: true, teleportInAir: true))
					{
						this.ai[1] = 20f;
						this.ai[2] = chosenTile2.X;
						this.ai[3] = chosenTile2.Y;
						bool flag94 = true;
						for (int num1495 = 0; num1495 < 1000; num1495++)
						{
							Projectile projectile10 = Main.projectile[num1495];
							if (projectile10.active && projectile10.type == 574 && projectile10.ai[1] == (float)whoAmI && !(projectile10.ai[0] >= 0f))
							{
								flag94 = false;
								break;
							}
						}
						if (flag94)
						{
							for (int num1496 = 0; num1496 < 1000; num1496++)
							{
								Projectile projectile11 = Main.projectile[num1496];
								if (projectile11.active && projectile11.type == 574 && projectile11.ai[1] == (float)whoAmI)
								{
									projectile11.ai[0] -= num1487;
								}
							}
						}
					}
					netUpdate = true;
				}
				if (flag93 && velocity.Length() < 2f && Main.netMode != 1)
				{
					localAI[0] += 1f;
					_ = localAI[0];
					_ = 13f;
				}
			}
			else if (aiStyle == 98)
			{
				noTileCollide = false;
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
				bool flag95 = Collision.CanHit(base.Center, 1, 1, Main.player[target].position, 1, 1);
				bool flag96 = true;
				if (!flag95 || Main.player[target].dead)
				{
					flag96 = false;
				}
				else
				{
					int num1497 = (int)(Main.player[target].Center.X / 16f);
					int num1498 = (int)(Main.player[target].Center.Y / 16f);
					for (int num1499 = num1497 - 2; num1499 <= num1497 + 2; num1499++)
					{
						for (int num1500 = num1498; num1500 <= num1498 + 25; num1500++)
						{
							if (WorldGen.SolidTile2(num1499, num1500))
							{
								flag96 = false;
							}
						}
					}
				}
				if (this.ai[0] < 0f)
				{
					Vector2 vector292 = Main.player[target].Center - base.Center;
					float num1501 = vector292.Length();
					if (this.ai[0] == -1f)
					{
						vector292.Normalize();
						if (vector292.HasNaNs())
						{
							vector292 = new Vector2(direction, 0f);
						}
						float num1502 = 8f + num1501 / 100f;
						float num1503 = 12f;
						if (Main.player[target].velocity.Length() > num1503)
						{
							num1503 = Main.player[target].velocity.Length();
						}
						if (num1502 > num1503)
						{
							num1502 = num1503;
						}
						vector292 *= num1502;
						float num1504 = 10f;
						velocity = (velocity * (num1504 - 1f) + vector292) / num1504;
						for (int num1505 = 0; num1505 < 200; num1505++)
						{
							if (Main.npc[num1505].active && Main.npc[num1505].type == type && num1505 != whoAmI)
							{
								Vector2 vector293 = Main.npc[num1505].Center - base.Center;
								if (vector293.Length() < 40f)
								{
									vector293.Normalize();
									vector293 *= 1f;
									velocity -= vector293;
								}
							}
						}
						rotation += velocity.X * 0.03f;
						if ((double)rotation < -6.2831)
						{
							rotation += 6.2831f;
						}
						if ((double)rotation > 6.2831)
						{
							rotation -= 6.2831f;
						}
						if (velocity.X > 0f)
						{
							direction = 1;
						}
						else if (velocity.X < 0f)
						{
							direction = -1;
						}
						spriteDirection = direction;
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 60f && !flag96)
					{
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					rotation *= 0.92f;
					if ((double)Math.Abs(rotation) < 0.02)
					{
						rotation = 0f;
					}
					int num1506 = 300;
					float num1507 = Math.Abs(base.Center.X - Main.player[target].Center.X);
					if (num1507 < (float)num1506 && Collision.CanHit(base.Center, 1, 1, Main.player[target].position, 1, 1))
					{
						velocity.X *= 0.96f;
						velocity.Y *= 0.96f;
						this.ai[1] += 1f;
						if (this.ai[1] == 20f)
						{
							if (Main.netMode != 1)
							{
								int num1508 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y + 26, 516, 0, 0f, 0f, 0f, 0f, target);
							}
						}
						else if (this.ai[1] >= 30f)
						{
							this.ai[1] = 0f;
						}
						for (int num1509 = 0; num1509 < 200; num1509++)
						{
							if (Main.npc[num1509].active && Main.npc[num1509].type == type && num1509 != whoAmI)
							{
								Vector2 vector294 = Main.npc[num1509].Center - base.Center;
								if (vector294.Length() < 100f)
								{
									vector294.Normalize();
									vector294 *= 0.1f;
									velocity -= vector294;
								}
							}
						}
					}
					else
					{
						this.ai[0] = 0f;
					}
					if (Main.player[target].Center.X < base.Center.X)
					{
						direction = -1;
					}
					else if (Main.player[target].Center.X > base.Center.X)
					{
						direction = 1;
					}
					spriteDirection = direction;
				}
				if (this.ai[0] != 1f)
				{
					return;
				}
				rotation *= 0.92f;
				if ((double)Math.Abs(rotation) < 0.02)
				{
					rotation = 0f;
				}
				if (flag96)
				{
					this.ai[0] = -1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
				int num1510 = 300;
				for (int num1511 = 0; num1511 < 200; num1511++)
				{
					if (Main.npc[num1511].active && Main.npc[num1511].type == type && num1511 != whoAmI)
					{
						Vector2 vector295 = Main.npc[num1511].Center - base.Center;
						if (vector295.Length() < 50f)
						{
							vector295.Normalize();
							vector295 *= 0.1f;
							velocity -= vector295;
							velocity.X -= vector295.X * 1f;
						}
					}
				}
				int num1512 = 800;
				float num1513 = Math.Abs(base.Center.X - Main.player[target].Center.X);
				if (num1513 < (float)num1510 && flag95)
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
				}
				else
				{
					if (collideX)
					{
						velocity.X *= -0.5f;
						this.ai[1] = 60f;
						direction *= -1;
					}
					if (this.ai[1] > 0f)
					{
						this.ai[1] -= 1f;
					}
					else if (flag95)
					{
						if (base.Center.X > Main.player[target].Center.X)
						{
							direction = -1;
						}
						else
						{
							direction = 1;
						}
					}
					else if (num1513 > (float)num1512)
					{
						if (base.Center.X > Main.player[target].Center.X)
						{
							direction = -1;
						}
						else
						{
							direction = 1;
						}
					}
					float num1514 = 2f;
					float num1515 = 0.1f;
					if (velocity.X > num1514 || velocity.X < 0f - num1514)
					{
						if (Math.Abs(velocity.X) < num1514 + num1515 * 2f)
						{
							if (velocity.X < 0f)
							{
								velocity.X = 0f - num1514;
							}
							else
							{
								velocity.X = num1514;
							}
						}
						else
						{
							velocity.X *= 0.99f;
						}
					}
					else
					{
						velocity.X += (float)direction * num1515;
					}
					spriteDirection = direction;
				}
				if (collideY)
				{
					this.ai[2] = 60f;
					directionY *= -1;
					velocity.Y *= -0.5f;
				}
				if (this.ai[2] > 0f)
				{
					this.ai[2] -= 1f;
				}
				else
				{
					int num1516 = (int)(base.Center.Y / 16f);
					int num1517 = (int)((base.Center.X - 8f) / 16f);
					int num1518 = 30;
					int num1519 = 15;
					int num1520 = 0;
					for (int num1521 = num1516; num1521 < num1516 + num1518; num1521++)
					{
						for (int num1522 = num1517; num1522 <= num1517 + 1; num1522++)
						{
							if (WorldGen.SolidTile(num1522, num1521) || Main.tile[num1522, num1521].liquid > 0)
							{
								num1520 = num1521 - num1516;
								break;
							}
						}
						if (num1520 != 0)
						{
							break;
						}
					}
					if (num1520 == 0)
					{
						directionY = 1;
					}
					else if (num1520 < num1519)
					{
						directionY = -1;
					}
				}
				float num1523 = 2f;
				float num1524 = 0.1f;
				if (velocity.Y > num1523 || velocity.Y < 0f - num1523)
				{
					if (Math.Abs(velocity.Y) < num1523 + num1524 * 2f)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y = 0f - num1523;
						}
						else
						{
							velocity.Y = num1523;
						}
					}
					else
					{
						velocity.Y *= 0.99f;
					}
				}
				else
				{
					velocity.Y += (float)directionY * num1524;
				}
			}
			else if (aiStyle == 99)
			{
				if (velocity.Y == 0f && this.ai[0] == 0f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
					return;
				}
				if (this.ai[0] == 1f)
				{
					velocity = Vector2.Zero;
					position = oldPosition;
					this.ai[1]++;
					if (this.ai[1] >= 5f)
					{
						HitEffect(0, 9999.0);
						active = false;
					}
					return;
				}
				velocity.Y += 0.2f;
				if (velocity.Y > 12f)
				{
					velocity.Y = 12f;
				}
				rotation = velocity.ToRotation() - MathF.PI / 2f;
				if (type != 519)
				{
					return;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num1525 = 0; num1525 < 13; num1525++)
					{
						int num1526 = Dust.NewDust(position, width, height, 6, velocity.X * 0.5f, velocity.Y * 0.5f, 90, default(Color), 2.5f);
						Main.dust[num1526].noGravity = true;
						Main.dust[num1526].fadeIn = 1f;
						Dust dust = Main.dust[num1526];
						dust.velocity *= 4f;
						Main.dust[num1526].noLight = true;
					}
				}
				for (int num1527 = 0; num1527 < 3; num1527++)
				{
					if (Main.rand.Next(3) < 2)
					{
						int num1528 = Dust.NewDust(position, width, height, 6, velocity.X * 0.5f, velocity.Y * 0.5f, 90, default(Color), 2.5f);
						Main.dust[num1528].noGravity = true;
						Dust dust = Main.dust[num1528];
						dust.velocity *= 0.2f;
						Main.dust[num1528].fadeIn = 1f;
						if (Main.rand.Next(6) == 0)
						{
							dust = Main.dust[num1528];
							dust.velocity *= 30f;
							Main.dust[num1528].noGravity = false;
							Main.dust[num1528].noLight = true;
						}
						else
						{
							Main.dust[num1528].velocity = DirectionFrom(Main.dust[num1528].position) * Main.dust[num1528].velocity.Length();
						}
					}
				}
			}
			else if (aiStyle == 100)
			{
				if (velocity.Y == 0f && this.ai[0] >= 0f)
				{
					this.ai[0] = -1f;
					this.ai[1] = 0f;
					netUpdate = true;
					return;
				}
				if (this.ai[0] == -1f)
				{
					velocity = Vector2.Zero;
					position = oldPosition;
					this.ai[1]++;
					if (this.ai[1] >= 5f)
					{
						HitEffect(0, 9999.0);
						active = false;
					}
					return;
				}
				rotation = velocity.ToRotation() - MathF.PI / 2f;
				if (type != 522)
				{
					return;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					velocity.X = this.ai[2];
					velocity.Y = this.ai[3];
					for (int num1529 = 0; num1529 < 13; num1529++)
					{
						int num1530 = Dust.NewDust(position, width, height, 261, velocity.X * 0.5f, velocity.Y * 0.5f, 90, default(Color), 2.5f);
						Main.dust[num1530].noGravity = true;
						Main.dust[num1530].fadeIn = 1f;
						Dust dust = Main.dust[num1530];
						dust.velocity *= 4f;
						Main.dust[num1530].noLight = true;
					}
				}
				for (int num1531 = 0; num1531 < 2; num1531++)
				{
					if (Main.rand.Next(10 - (int)Math.Min(7f, velocity.Length())) < 1)
					{
						int num1532 = Dust.NewDust(position, width, height, 261, velocity.X * 0.5f, velocity.Y * 0.5f, 90, default(Color), 2.5f);
						Main.dust[num1532].noGravity = true;
						Dust dust = Main.dust[num1532];
						dust.velocity *= 0.2f;
						Main.dust[num1532].fadeIn = 0.4f;
						if (Main.rand.Next(6) == 0)
						{
							dust = Main.dust[num1532];
							dust.velocity *= 5f;
							Main.dust[num1532].noLight = true;
						}
						else
						{
							Main.dust[num1532].velocity = DirectionFrom(Main.dust[num1532].position) * Main.dust[num1532].velocity.Length();
						}
					}
				}
				if (this.ai[0] >= 0f)
				{
					this.ai[0]++;
					if (this.ai[0] > 60f)
					{
						velocity = velocity.RotatedBy(this.ai[1]);
					}
					if (this.ai[0] > 120f)
					{
						velocity *= 0.98f;
					}
					if (velocity.Length() < 0.2f)
					{
						velocity = Vector2.Zero;
					}
				}
			}
			else if (aiStyle == 101)
			{
				float num1533 = 420f;
				float num1534 = 120f;
				int num1535 = 1;
				float value11 = 0f;
				float value12 = 1f;
				float num1536 = 4f;
				bool flag97 = !(this.ai[1] >= 0f) || !Main.npc[(int)this.ai[0]].active;
				if (Main.npc[(int)this.ai[0]].type == 439)
				{
					if (Main.npc[(int)this.ai[0]].life < Main.npc[(int)this.ai[0]].lifeMax / 2)
					{
						num1535 = 2;
					}
					if (Main.npc[(int)this.ai[0]].life < Main.npc[(int)this.ai[0]].lifeMax / 4)
					{
						num1535 = 3;
					}
				}
				else
				{
					flag97 = true;
				}
				this.ai[1] += num1535;
				float num1537 = this.ai[1] / num1534;
				num1537 = MathHelper.Clamp(num1537, 0f, 1f);
				position = base.Center;
				scale = MathHelper.Lerp(value11, value12, num1537);
				base.Center = position;
				alpha = (int)(255f - num1537 * 255f);
				if (Main.rand.Next(6) == 0)
				{
					Vector2 vector296 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust21 = Main.dust[Dust.NewDust(base.Center - vector296 * 20f, 0, 0, 27)];
					dust21.noGravity = true;
					dust21.position = base.Center - vector296 * Main.rand.Next(10, 21) * scale;
					dust21.velocity = vector296.RotatedBy(1.5707963705062866) * 4f;
					dust21.scale = 0.5f + Main.rand.NextFloat();
					dust21.fadeIn = 0.5f;
				}
				if (Main.rand.Next(6) == 0)
				{
					Vector2 vector297 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust22 = Main.dust[Dust.NewDust(base.Center - vector297 * 30f, 0, 0, 240)];
					dust22.noGravity = true;
					dust22.position = base.Center - vector297 * 20f * scale;
					dust22.velocity = vector297.RotatedBy(-1.5707963705062866) * 2f;
					dust22.scale = 0.5f + Main.rand.NextFloat();
					dust22.fadeIn = 0.5f;
				}
				if (Main.rand.Next(6) == 0)
				{
					Vector2 vector298 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust23 = Main.dust[Dust.NewDust(base.Center - vector298 * 30f, 0, 0, 240)];
					dust23.position = base.Center - vector298 * 20f * scale;
					dust23.velocity = Vector2.Zero;
					dust23.scale = 0.5f + Main.rand.NextFloat();
					dust23.fadeIn = 0.5f;
					dust23.noLight = true;
				}
				localAI[0] += MathF.PI / 60f;
				localAI[1] = 0.25f + Vector2.UnitY.RotatedBy(this.ai[1] * (MathF.PI * 2f) / 60f).Y * 0.25f;
				if (this.ai[1] >= num1533)
				{
					flag97 = true;
					if (Main.netMode != 1)
					{
						for (int num1538 = 0; num1538 < 4; num1538++)
						{
							Vector2 vector299 = new Vector2(0f, 0f - num1536).RotatedBy(MathF.PI / 2f * (float)num1538);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector299.X, vector299.Y, 593, damage, 0f, Main.myPlayer);
						}
					}
				}
				if (flag97)
				{
					HitEffect(0, 9999.0);
					active = false;
				}
			}
			else if (aiStyle == 102)
			{
				bool flag98 = false;
				bool flag99 = false;
				bool flag100 = true;
				bool flag101 = false;
				int num1539 = 4;
				int num1540 = 3;
				int num1541 = 0;
				float num1542 = 0.2f;
				float num1543 = 2f;
				float num1544 = -0.2f;
				float num1545 = -4f;
				bool flag102 = true;
				float num1546 = 2f;
				float num1547 = 0.1f;
				float num1548 = 1f;
				float num1549 = 0.04f;
				bool flag103 = false;
				float num1550 = 0.96f;
				bool flag104 = true;
				if (type == 541)
				{
					flag102 = false;
					rotation = velocity.X * 0.04f;
					spriteDirection = ((direction > 0) ? 1 : (-1));
					num1541 = 3;
					num1544 = -0.1f;
					num1542 = 0.1f;
					float num1551 = (float)life / (float)lifeMax;
					num1546 += (1f - num1551) * 2f;
					num1547 += (1f - num1551) * 0.02f;
					if (num1551 < 0.5f)
					{
						knockBackResist = 0f;
					}
					position += netOffset;
					Vector2 vector300 = base.BottomLeft + new Vector2(0f, -12f);
					Vector2 bottomRight = base.BottomRight;
					Vector2 vector301 = new Vector2(-spriteDirection * 10, -4f);
					Color color = new Color(222, 108, 48) * 0.7f;
					float num1552 = -0.3f + MathHelper.Max(velocity.Y * 2f, 0f);
					for (int num1553 = 0; num1553 < 2; num1553++)
					{
						if (Main.rand.Next(2) != 0)
						{
							Dust dust24 = Main.dust[Dust.NewDust(base.Bottom, 0, 0, 268)];
							dust24.position = new Vector2(MathHelper.Lerp(vector300.X, bottomRight.X, Main.rand.NextFloat()), MathHelper.Lerp(vector300.Y, bottomRight.Y, Main.rand.NextFloat())) + vector301;
							if (num1553 == 1)
							{
								dust24.position = base.Bottom + Utils.RandomVector2(Main.rand, -6f, 6f);
							}
							dust24.color = color;
							dust24.scale = 0.8f;
							dust24.velocity.Y += num1552;
							dust24.velocity.X += (float)spriteDirection * 0.2f;
						}
					}
					position -= netOffset;
					localAI[2] = 0f;
					if (this.ai[0] < 0f)
					{
						this.ai[0] = MathHelper.Min(this.ai[0] + 1f, 0f);
					}
					if (this.ai[0] > 0f)
					{
						flag104 = false;
						flag103 = true;
						this.ai[0]++;
						if (this.ai[0] >= 135f)
						{
							this.ai[0] = -300f;
							netUpdate = true;
						}
						Vector2 vector302 = base.Center + Vector2.UnitX * direction * 200f;
						Vector2 vector303 = base.Center + Vector2.UnitX * direction * 50f - Vector2.UnitY * 6f;
						if (this.ai[0] == 54f && Main.netMode != 1)
						{
							List<Point> list = new List<Point>();
							Vector2 vector304 = Main.player[target].Center + new Vector2(Main.player[target].velocity.X * 30f, 0f);
							if (Distance(vector304) < 2000f)
							{
								Point point16 = vector304.ToTileCoordinates();
								for (int num1554 = 0; num1554 < 1000; num1554++)
								{
									if (list.Count >= 3)
									{
										break;
									}
									bool flag105 = false;
									int num1555 = Main.rand.Next(point16.X - 30, point16.X + 30 + 1);
									foreach (Point item in list)
									{
										if (Math.Abs(item.X - num1555) < 10)
										{
											flag105 = true;
											break;
										}
									}
									if (!flag105)
									{
										int startY = point16.Y - 20;
										Collision.ExpandVertically(num1555, startY, out var _, out var bottomY, 1, 51);
										if (StrayMethods.CanSpawnSandstormHostile(new Vector2(num1555, bottomY - 15) * 16f, 15, 15))
										{
											list.Add(new Point(num1555, bottomY - 15));
										}
									}
								}
								foreach (Point item2 in list)
								{
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), item2.X * 16, item2.Y * 16, 0f, 0f, 658, 0, 0f, Main.myPlayer);
								}
							}
							else
							{
								this.ai[0] = -200f;
								netUpdate = true;
							}
						}
						Vector2 vector305 = new Vector2(0.9f, 2f);
						if (this.ai[0] < 114f && this.ai[0] > 0f)
						{
							List<Vector2> list2 = new List<Vector2>();
							for (int num1556 = 0; num1556 < 1000; num1556++)
							{
								Projectile projectile12 = Main.projectile[num1556];
								if (projectile12.active && projectile12.type == 658)
								{
									list2.Add(projectile12.Center);
								}
							}
							Vector2 vector306 = new Vector2(0f, 1500f);
							float num1557 = (this.ai[0] - 54f) / 30f;
							if (num1557 < 0.95f && num1557 >= 0f)
							{
								foreach (Vector2 item3 in list2)
								{
									Vector2 value13 = Vector2.CatmullRom(vector303 + vector306, vector303, item3, item3 + vector306, num1557);
									Vector2 value14 = Vector2.CatmullRom(vector303 + vector306, vector303, item3, item3 + vector306, num1557 + 0.05f);
									float num1558 = num1557;
									if (num1558 > 0.5f)
									{
										num1558 = 1f - num1558;
									}
									float num1559 = 2f;
									if (Vector2.Distance(value13, value14) > 5f)
									{
										num1559 = 3f;
									}
									if (Vector2.Distance(value13, value14) > 10f)
									{
										num1559 = 4f;
									}
									for (float num1560 = 0f; num1560 < num1559; num1560++)
									{
										Dust dust25 = Main.dust[Dust.NewDust(vector303, 0, 0, 269)];
										dust25.position = Vector2.Lerp(value13, value14, num1560 / num1559) + Utils.RandomVector2(Main.rand, -2f, 2f);
										dust25.noLight = true;
										dust25.scale = 0.3f + num1557;
									}
								}
							}
						}
						_ = this.ai[0];
						_ = 100f;
					}
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 1f;
						netUpdate = true;
						flag103 = true;
					}
				}
				if (justHit)
				{
					localAI[2] = 0f;
				}
				if (!flag99)
				{
					if (localAI[2] >= 0f)
					{
						float num1561 = 16f;
						bool flag106 = false;
						bool flag107 = false;
						if (position.X > localAI[0] - num1561 && position.X < localAI[0] + num1561)
						{
							flag106 = true;
						}
						else if ((velocity.X < 0f && direction > 0) || (velocity.X > 0f && direction < 0))
						{
							flag106 = true;
							num1561 += 24f;
						}
						if (position.Y > localAI[1] - num1561 && position.Y < localAI[1] + num1561)
						{
							flag107 = true;
						}
						if (flag106 && flag107)
						{
							localAI[2] += 1f;
							if (localAI[2] >= 30f && num1561 == 16f)
							{
								flag98 = true;
							}
							if (localAI[2] >= 60f)
							{
								localAI[2] = -180f;
								direction *= -1;
								velocity.X *= -1f;
								collideX = false;
							}
						}
						else
						{
							localAI[0] = position.X;
							localAI[1] = position.Y;
							localAI[2] = 0f;
						}
						if (flag104)
						{
							TargetClosest();
						}
					}
					else
					{
						localAI[2] += 1f;
						direction = ((Main.player[target].Center.X > base.Center.X) ? 1 : (-1));
					}
				}
				int num1562 = (int)((position.X + (float)(width / 2)) / 16f) + direction * 2;
				int num1563 = (int)((position.Y + (float)height) / 16f);
				int num1564 = (int)base.Bottom.Y / 16;
				int num1565 = (int)base.Bottom.X / 16;
				if (flag103)
				{
					velocity *= num1550;
					return;
				}
				for (int num1566 = num1563; num1566 < num1563 + num1539; num1566++)
				{
					if (Main.tile[num1562, num1566] == null)
					{
						Main.tile[num1562, num1566] = new Tile();
					}
					if ((Main.tile[num1562, num1566].nactive() && Main.tileSolid[Main.tile[num1562, num1566].type]) || Main.tile[num1562, num1566].liquid > 0)
					{
						if (num1566 <= num1563 + 1)
						{
							flag101 = true;
						}
						flag100 = false;
						break;
					}
				}
				for (int num1567 = num1564; num1567 < num1564 + num1541; num1567++)
				{
					if (Main.tile[num1565, num1567] == null)
					{
						Main.tile[num1565, num1567] = new Tile();
					}
					if ((Main.tile[num1565, num1567].nactive() && Main.tileSolid[Main.tile[num1565, num1567].type]) || Main.tile[num1565, num1567].liquid > 0)
					{
						flag101 = true;
						flag100 = false;
						break;
					}
				}
				if (flag102)
				{
					for (int num1568 = num1563 - num1540; num1568 < num1563; num1568++)
					{
						if (Main.tile[num1562, num1568] == null)
						{
							Main.tile[num1562, num1568] = new Tile();
						}
						if ((Main.tile[num1562, num1568].nactive() && Main.tileSolid[Main.tile[num1562, num1568].type]) || Main.tile[num1562, num1568].liquid > 0)
						{
							flag101 = false;
							flag98 = true;
							break;
						}
					}
				}
				if (flag98)
				{
					flag101 = false;
					flag100 = true;
				}
				if (flag100)
				{
					velocity.Y += num1542;
					if (velocity.Y > num1543)
					{
						velocity.Y = num1543;
					}
				}
				else
				{
					if ((directionY < 0 && velocity.Y > 0f) || flag101)
					{
						velocity.Y += num1544;
					}
					if (velocity.Y < num1545)
					{
						velocity.Y = num1545;
					}
				}
				if (collideX)
				{
					velocity.X = oldVelocity.X * -0.4f;
					if (direction == -1 && velocity.X > 0f && velocity.X < 1f)
					{
						velocity.X = 1f;
					}
					if (direction == 1 && velocity.X < 0f && velocity.X > -1f)
					{
						velocity.X = -1f;
					}
				}
				if (collideY)
				{
					velocity.Y = oldVelocity.Y * -0.25f;
					if (velocity.Y > 0f && velocity.Y < 1f)
					{
						velocity.Y = 1f;
					}
					if (velocity.Y < 0f && velocity.Y > -1f)
					{
						velocity.Y = -1f;
					}
				}
				if (direction == -1 && velocity.X > 0f - num1546)
				{
					velocity.X -= num1547;
					if (velocity.X > num1546)
					{
						velocity.X -= num1547;
					}
					else if (velocity.X > 0f)
					{
						velocity.X += num1547 / 2f;
					}
					if (velocity.X < 0f - num1546)
					{
						velocity.X = 0f - num1546;
					}
				}
				else if (direction == 1 && velocity.X < num1546)
				{
					velocity.X += num1547;
					if (velocity.X < 0f - num1546)
					{
						velocity.X += num1547;
					}
					else if (velocity.X < 0f)
					{
						velocity.X -= num1547 / 2f;
					}
					if (velocity.X > num1546)
					{
						velocity.X = num1546;
					}
				}
				if (directionY == -1 && velocity.Y > 0f - num1548)
				{
					velocity.Y -= num1549;
					if (velocity.Y > num1548)
					{
						velocity.Y -= num1549 * 1.25f;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y += num1549 * 0.75f;
					}
					if (velocity.Y < 0f - num1548)
					{
						velocity.Y = 0f - num1546;
					}
				}
				else if (directionY == 1 && velocity.Y < num1548)
				{
					velocity.Y += num1549;
					if (velocity.Y < 0f - num1548)
					{
						velocity.Y += num1549 * 1.25f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y -= num1549 * 0.75f;
					}
					if (velocity.Y > num1548)
					{
						velocity.Y = num1548;
					}
				}
			}
			else if (aiStyle == 103)
			{
				if (direction == 0)
				{
					TargetClosest();
				}
				bool flag108 = true;
				Point pt = base.Center.ToTileCoordinates();
				Tile tileSafely7 = Framing.GetTileSafely(pt);
				flag108 = tileSafely7.nactive() && (TileID.Sets.Conversion.Sand[tileSafely7.type] || TileID.Sets.Conversion.Sandstone[tileSafely7.type] || TileID.Sets.Conversion.HardenedSand[tileSafely7.type]);
				flag108 |= wet;
				bool flag109 = false;
				TargetClosest(faceTarget: false);
				Vector2 vector307 = targetRect.Center.ToVector2();
				if (Main.player[target].velocity.Y > -0.1f && !Main.player[target].dead && Distance(vector307) > 150f)
				{
					flag109 = true;
				}
				if (localAI[0] == -1f && !flag108)
				{
					localAI[0] = 20f;
				}
				if (localAI[0] > 0f)
				{
					localAI[0]--;
				}
				if (flag108)
				{
					if (soundDelay == 0)
					{
						float num1569 = Distance(vector307) / 40f;
						if (num1569 < 10f)
						{
							num1569 = 10f;
						}
						if (num1569 > 20f)
						{
							num1569 = 20f;
						}
						soundDelay = (int)num1569;
						SoundEngine.PlaySound(15, base.Center, 4);
					}
					float num1570 = this.ai[1];
					bool flag110 = false;
					pt = (base.Center + new Vector2(0f, 24f)).ToTileCoordinates();
					tileSafely7 = Framing.GetTileSafely(pt.X, pt.Y - 2);
					if (tileSafely7.nactive() && (TileID.Sets.Conversion.Sand[tileSafely7.type] || TileID.Sets.Conversion.Sandstone[tileSafely7.type] || TileID.Sets.Conversion.HardenedSand[tileSafely7.type]))
					{
						flag110 = true;
					}
					this.ai[1] = flag110.ToInt();
					if (this.ai[2] < 30f)
					{
						this.ai[2]++;
					}
					if (flag109)
					{
						TargetClosest();
						velocity.X += (float)direction * 0.15f;
						velocity.Y += (float)directionY * 0.15f;
						if (velocity.X > 5f)
						{
							velocity.X = 5f;
						}
						if (velocity.X < -5f)
						{
							velocity.X = -5f;
						}
						if (velocity.Y > 3f)
						{
							velocity.Y = 3f;
						}
						if (velocity.Y < -3f)
						{
							velocity.Y = -3f;
						}
						Vector2 vec4 = base.Center + velocity.SafeNormalize(Vector2.Zero) * base.Size.Length() / 2f + velocity;
						pt = vec4.ToTileCoordinates();
						tileSafely7 = Framing.GetTileSafely(pt);
						bool flag111 = tileSafely7.nactive() && (TileID.Sets.Conversion.Sand[tileSafely7.type] || TileID.Sets.Conversion.Sandstone[tileSafely7.type] || TileID.Sets.Conversion.HardenedSand[tileSafely7.type]);
						if (!flag111 && wet)
						{
							flag111 = tileSafely7.liquid > 0;
						}
						int num1571 = 400;
						if (Main.remixWorld)
						{
							num1571 = 700;
						}
						if (!flag111 && Math.Sign(velocity.X) == direction && Distance(vector307) < (float)num1571 && (this.ai[2] >= 30f || this.ai[2] < 0f))
						{
							if (localAI[0] == 0f)
							{
								SoundEngine.PlaySound(14, base.Center, 542);
								localAI[0] = -1f;
							}
							this.ai[2] = -30f;
							Vector2 vector308 = DirectionTo(vector307 + new Vector2(0f, -80f));
							velocity = vector308 * 12f;
						}
					}
					else
					{
						if (collideX)
						{
							velocity.X *= -1f;
							direction *= -1;
							netUpdate = true;
						}
						if (collideY)
						{
							netUpdate = true;
							velocity.Y *= -1f;
							directionY = Math.Sign(velocity.Y);
							this.ai[0] = directionY;
						}
						float num1572 = 6f;
						velocity.X += (float)direction * 0.1f;
						if (velocity.X < 0f - num1572 || velocity.X > num1572)
						{
							velocity.X *= 0.95f;
						}
						if (flag110)
						{
							this.ai[0] = -1f;
						}
						else
						{
							this.ai[0] = 1f;
						}
						float num1573 = 0.06f;
						float num1574 = 0.01f;
						if (this.ai[0] == -1f)
						{
							velocity.Y -= num1574;
							if (velocity.Y < 0f - num1573)
							{
								this.ai[0] = 1f;
							}
						}
						else
						{
							velocity.Y += num1574;
							if (velocity.Y > num1573)
							{
								this.ai[0] = -1f;
							}
						}
						if (velocity.Y > 0.4f || velocity.Y < -0.4f)
						{
							velocity.Y *= 0.95f;
						}
					}
				}
				else
				{
					if (velocity.Y == 0f)
					{
						if (flag109)
						{
							TargetClosest();
						}
						float num1575 = 1f;
						velocity.X += (float)direction * 0.1f;
						if (velocity.X < 0f - num1575 || velocity.X > num1575)
						{
							velocity.X *= 0.95f;
						}
					}
					velocity.Y += 0.3f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
					this.ai[0] = 1f;
				}
				rotation = velocity.Y * (float)direction * 0.1f;
				if (rotation < -0.2f)
				{
					rotation = -0.2f;
				}
				if (rotation > 0.2f)
				{
					rotation = 0.2f;
				}
			}
			else if (aiStyle == 104)
			{
				active = false;
			}
			else if (aiStyle == 105)
			{
				if (alpha == 0)
				{
					Lighting.AddLight(base.Center, 1.3f, 0.5f, 1.5f);
				}
				if (this.ai[1] == 0f)
				{
					if (this.ai[0] > 0f)
					{
						this.ai[0]--;
					}
					if (this.ai[0] != 0f)
					{
						return;
					}
					this.ai[0] = 180f;
					netUpdate = true;
					if (localAI[0] == 0f)
					{
						StrayMethods.CheckArenaScore(base.Bottom, out var xLeftEnd, out var xRightEnd);
						localAI[0] = 1f;
						xLeftEnd.X += 2;
						xRightEnd.X -= 2;
						int num1576 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), xLeftEnd.X, xLeftEnd.Y, 549);
						Main.npc[num1576].Bottom = xLeftEnd.ToWorldCoordinates(8f, 16f);
						num1576 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), xRightEnd.X, xRightEnd.Y, 549);
						Main.npc[num1576].Bottom = xRightEnd.ToWorldCoordinates(8f, 16f);
						if (Main.netMode != 1)
						{
							DD2Event.FindArenaHitbox();
						}
					}
				}
				else if (this.ai[1] == 2f)
				{
					dontTakeDamageFromHostiles = true;
					life = lifeMax;
					if (this.ai[0] == 3f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_WinScene, base.Center);
						for (int num1577 = 0; num1577 < 200; num1577++)
						{
							NPC nPC11 = Main.npc[num1577];
							if (nPC11.active && nPC11.type == 549)
							{
								nPC11.ai[1] = 1f;
								nPC11.ai[0] = 0f;
								nPC11.netUpdate = true;
							}
						}
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center - Vector2.UnitY * 40f, Vector2.Zero, 713, 0, 0f, Main.myPlayer);
						}
					}
					this.ai[0]++;
					noGravity = true;
					if (this.ai[0] <= 120f)
					{
						float num1578 = this.ai[0] / 120f;
						velocity.Y = (float)Math.Cos(num1578 * (MathF.PI * 2f)) * 0.25f - 0.25f;
					}
					else
					{
						velocity.Y = 0f;
					}
					float lerpValue = Utils.GetLerpValue(480f, 570f, this.ai[0], clamped: true);
					if (lerpValue != 0f)
					{
						MoonlordDeathDrama.RequestLight(lerpValue, base.Center);
					}
					if (this.ai[0] >= 600f)
					{
						DD2Event.StopInvasion(win: true);
						dontTakeDamage = false;
						life = 0;
						checkDead();
						netUpdate = true;
					}
					if (true)
					{
						Vector2 vector309 = base.Center + new Vector2(0f, -20f);
						float num1579 = 0.99f;
						if (this.ai[0] >= 60f)
						{
							num1579 = 0.79f;
						}
						if (this.ai[0] >= 120f)
						{
							num1579 = 0.58f;
						}
						if (this.ai[0] >= 180f)
						{
							num1579 = 0.43f;
						}
						if (this.ai[0] >= 240f)
						{
							num1579 = 0.33f;
						}
						if (this.ai[0] >= 540f)
						{
							num1579 = 1f;
						}
						for (int num1580 = 0; num1580 < 9; num1580++)
						{
							if (!(Main.rand.NextFloat() < num1579))
							{
								float num1581 = Main.rand.NextFloat() * (MathF.PI * 2f);
								float num1582 = Main.rand.NextFloat();
								Vector2 vector310 = vector309 + num1581.ToRotationVector2() * (110f + 600f * num1582);
								Vector2 vector311 = (num1581 - MathF.PI).ToRotationVector2() * (14f + 0f * Main.rand.NextFloat() + 8f * num1582);
								Dust dust26 = Dust.NewDustPerfect(vector310, 264, vector311);
								dust26.scale = 0.9f;
								dust26.fadeIn = 1.15f + num1582 * 0.3f;
								dust26.color = new Color(1f, 1f, 1f, num1579) * (1f - num1579);
								dust26.noGravity = true;
								dust26.noLight = true;
							}
						}
					}
					if (this.ai[0] == 100f || this.ai[0] == 160f || this.ai[0] == 220f || this.ai[0] == 280f || this.ai[0] == 340f || this.ai[0] == 370f || this.ai[0] == 400f || this.ai[0] == 430f || this.ai[0] == 460f || this.ai[0] == 500f || this.ai[0] == 520f || this.ai[0] == 540f)
					{
						float num1583 = Main.rand.NextFloat() * (MathF.PI * 2f);
						float num1584 = 120f;
						for (int num1585 = 0; (float)num1585 < num1584; num1585++)
						{
							float num1586 = (float)num1585 / num1584 * (MathF.PI * 2f);
							float num1587 = Main.rand.NextFloat();
							Vector2 vector312 = base.Center + new Vector2(0f, -20f) + num1586.ToRotationVector2() * (810f - this.ai[0]);
							Vector2 vector313 = (num1586 - MathF.PI).ToRotationVector2() * (14f + 5f * (this.ai[0] / 600f) + 8f * num1587);
							Dust dust27 = Dust.NewDustPerfect(vector312, 264, vector313);
							dust27.scale = 0.9f;
							dust27.fadeIn = 1.15f + num1587 * 0.3f;
							dust27.color = new Color(1f, 1f, 1f, 0f);
							dust27.noGravity = true;
							dust27.noLight = true;
						}
					}
				}
				else
				{
					if (this.ai[1] != 1f)
					{
						return;
					}
					dontTakeDamageFromHostiles = true;
					life = lifeMax;
					if (this.ai[0] == 0f)
					{
						for (int num1588 = 0; num1588 < 200; num1588++)
						{
							NPC nPC12 = Main.npc[num1588];
							if (nPC12.active && nPC12.type == 549)
							{
								nPC12.ai[1] = 1f;
								nPC12.ai[0] = 0f;
								nPC12.netUpdate = true;
							}
						}
						if (Main.netMode != 1)
						{
							DD2Event.ReportLoss();
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center - Vector2.UnitY * 40f, Vector2.Zero, 672, 0, 0f, Main.myPlayer);
						}
					}
					this.ai[0]++;
					float lerpValue2 = Utils.GetLerpValue(480f, 600f, this.ai[0], clamped: true);
					if (lerpValue2 != 0f)
					{
						MoonlordDeathDrama.RequestLight(lerpValue2, base.Center);
					}
					float num1589 = 96f;
					if (this.ai[0] < num1589)
					{
						velocity.Y = MathHelper.Lerp(0f, -1f, this.ai[0] / num1589);
					}
					if (this.ai[0] >= num1589)
					{
						alpha += 50;
						if (alpha > 255)
						{
							alpha = 255;
						}
					}
					if (true)
					{
						Vector2 vector314 = base.Center + new Vector2(0f, MathHelper.Lerp(0f, -70f, Utils.GetLerpValue(0f, 300f, this.ai[0], clamped: true)));
						float num1590 = 0.99f;
						if (this.ai[0] >= 60f)
						{
							num1590 = 0.79f;
						}
						if (this.ai[0] >= 120f)
						{
							num1590 = 0.58f;
						}
						if (this.ai[0] >= 180f)
						{
							num1590 = 0.23f;
						}
						if (this.ai[0] >= 240f)
						{
							num1590 = 0.35f;
						}
						if (this.ai[0] >= 300f)
						{
							num1590 = 0.6f;
						}
						if (this.ai[0] >= 360f)
						{
							num1590 = 0.98f;
						}
						if (this.ai[0] >= 420f)
						{
							num1590 = 0.995f;
						}
						if (this.ai[0] >= 450f)
						{
							num1590 = 1f;
						}
						for (int num1591 = 0; num1591 < 12; num1591++)
						{
							if (!(Main.rand.NextFloat() < num1590))
							{
								float num1592 = Main.rand.NextFloat() * (MathF.PI * 2f);
								float num1593 = Main.rand.NextFloat();
								Vector2 vector315 = vector314 + num1592.ToRotationVector2() * (70f + 600f * num1593);
								Vector2 vector316 = (num1592 - MathF.PI / 2f - MathF.PI / 8f).ToRotationVector2() * (12f + 9f * Main.rand.NextFloat() + 4f * num1593);
								Dust dust28 = Dust.NewDustPerfect(vector315, 240, vector316);
								dust28.scale = 0.8f;
								dust28.fadeIn = 0.95f + num1593 * 0.3f;
								dust28.noGravity = true;
							}
						}
					}
					if (this.ai[0] >= 600f)
					{
						DD2Event.StopInvasion();
						if (!Main.dedServ)
						{
							Filters.Scene.Deactivate("CrystalDestructionVortex");
							Filters.Scene.Deactivate("CrystalDestructionColor");
							Filters.Scene.Deactivate("CrystalWin");
						}
						dontTakeDamage = false;
						life = 0;
						checkDead();
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 106)
			{
				if (alpha == 0)
				{
					Lighting.AddLight(base.Center, 0.5f, 0.1f, 0.3f);
				}
				SlotId val;
				if (this.ai[1] == 0f)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalOpen, base.Center);
						float[] array6 = localAI;
						val = SlotId.Invalid;
						array6[3] = ((SlotId)(ref val)).ToFloat();
					}
					if (localAI[0] > 150f)
					{
						ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[3]));
						if (activeSound == null)
						{
							float[] array7 = localAI;
							val = SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalIdleLoop, base.Center);
							array7[3] = ((SlotId)(ref val)).ToFloat();
						}
					}
					if (!DD2Event.EnemySpawningIsOnHold)
					{
						this.ai[0]++;
					}
					if (this.ai[0] >= (float)DD2Event.LaneSpawnRate)
					{
						if (this.ai[0] >= (float)(DD2Event.LaneSpawnRate * 3))
						{
							this.ai[0] = 0f;
						}
						netUpdate = true;
						if (Main.netMode != 1 && (int)this.ai[0] % DD2Event.LaneSpawnRate == 0)
						{
							DD2Event.SpawnMonsterFromGate(base.Bottom);
							if (DD2Event.EnemySpawningIsOnHold)
							{
								this.ai[0] += 1f;
							}
						}
					}
					localAI[0]++;
					if (localAI[0] > 180f)
					{
						localAI[0] = 180f;
					}
					if (Main.netMode != 1 && localAI[0] >= 180f)
					{
						if (AnyNPCs(548))
						{
							dontTakeDamage = true;
							return;
						}
						this.ai[1] = 1f;
						this.ai[0] = 0f;
						dontTakeDamage = true;
					}
				}
				else if (this.ai[1] == 1f)
				{
					this.ai[0]++;
					scale = MathHelper.Lerp(1f, 0.05f, Utils.GetLerpValue(500f, 600f, this.ai[0], clamped: true));
					ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[3]));
					if (activeSound2 == null)
					{
						float[] array8 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalIdleLoop, base.Center);
						array8[3] = ((SlotId)(ref val)).ToFloat();
					}
					activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[3]));
					if (activeSound2 != null)
					{
						activeSound2.Volume = scale;
					}
					if (this.ai[0] >= 550f)
					{
						dontTakeDamage = false;
						life = 0;
						checkDead();
						netUpdate = true;
						activeSound2?.Stop();
					}
				}
			}
			else if (aiStyle == 107)
			{
				AI_107_ImprovedWalkers();
			}
			else if (aiStyle == 108)
			{
				AI_108_DivingFlyer();
			}
			else if (aiStyle == 109)
			{
				AI_109_DarkMage();
			}
			else if (aiStyle == 110)
			{
				AI_110_Betsy();
			}
			else if (aiStyle == 111)
			{
				AI_111_DD2LightningBug();
			}
			else if (aiStyle == 112)
			{
				AI_112_FairyCritter();
			}
			else if (aiStyle == 113)
			{
				AI_113_WindyBalloon();
			}
			else if (aiStyle == 114)
			{
				AI_114_Dragonflies();
			}
			else if (aiStyle == 115)
			{
				AI_115_LadyBugs();
			}
			else if (aiStyle == 116)
			{
				AI_116_WaterStriders();
			}
			else if (aiStyle == 117)
			{
				AI_117_BloodNautilus();
			}
			else if (aiStyle == 118)
			{
				AI_118_Seahorses();
			}
			else if (aiStyle == 119)
			{
				AI_119_Dandelion();
			}
			else if (aiStyle == 120)
			{
				AI_120_HallowBoss();
			}
			else if (aiStyle == 121)
			{
				AI_121_QueenSlime();
			}
			else if (aiStyle == 122)
			{
				AI_122_PirateGhost();
			}
			else if (aiStyle == 123)
			{
				AI_123_Deerclops();
			}
			else if (aiStyle == 124)
			{
				AI_124_ElderSlimeChest();
			}
			else if (aiStyle == 125)
			{
				AI_125_ClumsySlimeBalloon();
			}
		}

		private void AI_124_ElderSlimeChest()
		{
			velocity.Y += 0.2f;
		}

		private void AI_125_ClumsySlimeBalloon()
		{
			if (localAI[0] == 0f && Main.netMode != 1)
			{
				TargetClosest();
				localAI[0] = 1f;
				netUpdate = true;
			}
			spriteDirection = direction;
			rotation = velocity.X * 0.05f;
			NPCAimedTarget targetData = GetTargetData();
			float num = float.PositiveInfinity;
			int num2 = 0;
			Vector2 zero = Vector2.Zero;
			if (!targetData.Invalid)
			{
				zero = targetData.Center - base.Bottom;
				if (zero.Y < 0f)
				{
					num2 = (int)zero.Y / -16;
				}
				num = zero.Length();
				if (direction != Math.Sign(zero.X))
				{
					num2 = 0;
				}
			}
			if (wet || collideX || (collideY && oldVelocity.Y < 0f))
			{
				float num3 = oldVelocity.X + (float)(direction * 8);
				position.X -= num3;
				TargetClosest(faceTarget: false);
				direction *= -1;
				velocity.X = direction * 2;
				life = -1;
				HitEffect();
				active = false;
				netUpdate = true;
				SoundEngine.PlaySound(DeathSound, position);
				return;
			}
			if (collideY)
			{
				velocity.Y = ((oldVelocity.Y > 0f) ? 1 : (-1));
				TargetClosest(faceTarget: false);
			}
			float num4 = 3f + Math.Abs(Main.windSpeedTarget) * 2f;
			if (Math.Sign(velocity.X) != direction || Math.Abs(velocity.X) < num4)
			{
				velocity.X += (float)direction * 0.04f;
				if (velocity.X * (float)direction < 0f)
				{
					if (Math.Abs(velocity.X) > num4)
					{
						velocity.X += (float)direction * 0.15f;
					}
					else
					{
						velocity.X += (float)direction * 0.1f;
					}
				}
				else if (Math.Abs(velocity.X) > num4)
				{
					velocity.X = (float)direction * num4;
				}
			}
			int num5 = (int)((position.X + (float)(width / 2)) / 16f) + direction;
			int num6 = (int)((position.Y + (float)height) / 16f);
			bool flag = true;
			int num7 = 8 + num2;
			bool flag2 = false;
			for (int i = num6; i < num6 + num7; i++)
			{
				if (Main.tile[num5, i] == null)
				{
					Main.tile[num5, i] = new Tile();
				}
				if ((Main.tile[num5, i].nactive() && Main.tileSolid[Main.tile[num5, i].type]) || Main.tile[num5, i].liquid > 0)
				{
					if (i < num6 + 5 + num2)
					{
						flag2 = true;
					}
					flag = false;
					break;
				}
			}
			if (num < 400f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
			{
				float num8 = 2f;
				float num9 = 0.035f;
				if (base.Center.Y + (float)(height / 4) > Main.player[target].position.Y + (float)(Main.player[target].height / 4) && velocity.Y > 0f - num8)
				{
					velocity.Y -= num9;
					if (velocity.Y > 0f)
					{
						velocity.Y -= num9;
					}
				}
				else if (base.Center.Y + (float)(height / 4) < Main.player[target].position.Y + (float)(Main.player[target].height / 4) && velocity.Y < num8)
				{
					velocity.Y += num9;
					if (velocity.Y < 0f)
					{
						velocity.Y += num9;
					}
				}
			}
			else
			{
				if (flag)
				{
					velocity.Y += 0.05f;
				}
				else
				{
					velocity.Y -= 0.1f;
				}
				if (flag2)
				{
					velocity.Y -= 0.2f;
				}
				if (velocity.Y > 2f)
				{
					velocity.Y = 2f;
				}
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
			}
		}

		private void SpawnStardustMark_StardustTower()
		{
			List<int> list = new List<int>();
			if (CountNPCS(405) + CountNPCS(406) < 2)
			{
				list.Add(405);
			}
			if (CountNPCS(402) < 2)
			{
				list.Add(402);
			}
			if (CountNPCS(407) < 1)
			{
				list.Add(407);
			}
			if (list.Count > 0)
			{
				int num = Utils.SelectRandom(Main.rand, list.ToArray());
				ai[1] = 30 * Main.rand.Next(5, 16);
				int num2 = Main.rand.Next(3, 6);
				int num3 = Main.rand.Next(0, 4);
				int num4 = 0;
				List<Tuple<Vector2, int, int>> list2 = new List<Tuple<Vector2, int, int>>();
				List<Vector2> list3 = new List<Vector2>();
				list2.Add(Tuple.Create(base.Top - Vector2.UnitY * 120f, num2, 0));
				int num5 = 0;
				int num6 = list2.Count;
				while (list2.Count > 0)
				{
					Vector2 item = list2[0].Item1;
					int num7 = 1;
					int num8 = 1;
					if (num5 > 0 && num3 > 0 && (Main.rand.Next(3) != 0 || num5 == 1))
					{
						num8 = Main.rand.Next(Math.Max(1, list2[0].Item2));
						num7++;
						num3--;
					}
					for (int i = 0; i < num7; i++)
					{
						int num9 = list2[0].Item3;
						if (num5 == 0)
						{
							num9 = Utils.SelectRandom<int>(Main.rand, -1, 1);
						}
						else if (i == 1)
						{
							num9 *= -1;
						}
						float num10 = ((num5 % 2 == 0) ? 0f : MathF.PI) + (0.5f - Main.rand.NextFloat()) * (MathF.PI / 4f) + (float)num9 * (MathF.PI / 4f) * (float)(num5 % 2 == 0).ToDirectionInt();
						float num11 = 100f + 50f * Main.rand.NextFloat();
						int num12 = list2[0].Item2;
						if (i != 0)
						{
							num12 = num8;
						}
						if (num5 == 0)
						{
							num10 = (0.5f - Main.rand.NextFloat()) * (MathF.PI / 4f);
							num11 = 100f + 100f * Main.rand.NextFloat();
						}
						Vector2 vector = (-Vector2.UnitY).RotatedBy(num10) * num11;
						if (num12 - 1 < 0)
						{
							vector = Vector2.Zero;
						}
						num4 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), item.X, item.Y, vector.X, vector.Y, 540, 0, 0f, Main.myPlayer, (float)(-num5) * 10f, 0.5f + Main.rand.NextFloat() * 0.5f);
						list3.Add(item + vector);
						if (num5 < num2 && list2[0].Item2 > 0)
						{
							list2.Add(Tuple.Create(item + vector, num12 - 1, num9));
						}
					}
					list2.Remove(list2[0]);
					if (--num6 == 0)
					{
						num6 = list2.Count;
						num5++;
					}
				}
				Main.projectile[num4].localAI[0] = num;
			}
			else
			{
				ai[1] = 30f;
			}
		}

		private void SpawnStardustMark_StardustWorm()
		{
			List<int> list = new List<int>();
			if (CountNPCS(405) + CountNPCS(406) < 2)
			{
				list.Add(405);
			}
			if (CountNPCS(402) < 3)
			{
				list.Add(402);
			}
			if (CountNPCS(407) < 1)
			{
				list.Add(407);
			}
			if (list.Count <= 0)
			{
				return;
			}
			int num = Utils.SelectRandom(Main.rand, list.ToArray());
			int num2 = Main.rand.Next(3, 6);
			int num3 = Main.rand.Next(0, 4);
			int num4 = 0;
			List<Tuple<Vector2, int, int>> list2 = new List<Tuple<Vector2, int, int>>();
			List<Vector2> list3 = new List<Vector2>();
			list2.Add(Tuple.Create(base.Center, num2, 0));
			int num5 = 0;
			int num6 = list2.Count;
			while (list2.Count > 0)
			{
				Vector2 item = list2[0].Item1;
				int num7 = 1;
				int num8 = 1;
				if (num5 > 0 && num3 > 0 && (Main.rand.Next(3) != 0 || num5 == 1))
				{
					num8 = Main.rand.Next(Math.Max(1, list2[0].Item2));
					num7++;
					num3--;
				}
				for (int i = 0; i < num7; i++)
				{
					int num9 = list2[0].Item3;
					if (num5 == 0)
					{
						num9 = Utils.SelectRandom<int>(Main.rand, -1, 1);
					}
					else if (i == 1)
					{
						num9 *= -1;
					}
					float num10 = ((num5 % 2 == 0) ? 0f : MathF.PI) + (0.5f - Main.rand.NextFloat()) * (MathF.PI / 4f) + (float)num9 * (MathF.PI / 4f) * (float)(num5 % 2 == 0).ToDirectionInt();
					float num11 = 100f + 50f * Main.rand.NextFloat();
					int num12 = list2[0].Item2;
					if (i != 0)
					{
						num12 = num8;
					}
					if (num5 == 0)
					{
						num10 = (0.5f - Main.rand.NextFloat()) * (MathF.PI / 4f);
						num11 = 100f + 100f * Main.rand.NextFloat();
					}
					Vector2 vector = (-Vector2.UnitY).RotatedBy(num10) * num11;
					if (num12 - 1 < 0)
					{
						vector = Vector2.Zero;
					}
					num4 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), item.X, item.Y, vector.X, vector.Y, 540, 0, 0f, Main.myPlayer, (float)(-num5) * 10f, 0.5f + Main.rand.NextFloat() * 0.5f);
					list3.Add(item + vector);
					if (num5 < num2 && list2[0].Item2 > 0)
					{
						list2.Add(Tuple.Create(item + vector, num12 - 1, num9));
					}
				}
				list2.Remove(list2[0]);
				if (--num6 == 0)
				{
					num6 = list2.Count;
					num5++;
				}
			}
			Main.projectile[num4].localAI[0] = num;
		}

		public static bool IsDeerclopsHostile()
		{
			if (deerclopsBoss == -1)
			{
				return false;
			}
			NPC nPC = Main.npc[deerclopsBoss];
			if (!nPC.active || nPC.type != 668)
			{
				return false;
			}
			int num = (int)nPC.ai[0];
			if (num == 6 || num == 7 || num == 8)
			{
				Rectangle rectangle = new Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
				rectangle.Inflate(960, 960);
				if (!nPC.Hitbox.Intersects(rectangle))
				{
					return false;
				}
			}
			return true;
		}

		private void AI_123_Deerclops()
		{
			deerclopsBoss = whoAmI;
			int num = 15;
			NPCAimedTarget targetData = GetTargetData();
			bool haltMovement = false;
			bool goHome = false;
			bool flag = Distance(targetData.Center) >= 450f;
			localAI[3] = MathHelper.Clamp(localAI[3] + (float)flag.ToDirectionInt(), 0f, 30f);
			dontTakeDamage = localAI[3] >= 30f;
			float lifePercent = (float)life / (float)lifeMax;
			bool expertMode = Main.expertMode;
			int shadowHandDamage = 10;
			float num2 = Utils.Remap(localAI[3], 0f, 30f, 0f, 1f);
			if (num2 > 0f)
			{
				float num3 = Main.rand.NextFloat() * num2 * 3f;
				while (num3 > 0f)
				{
					num3 -= 1f;
					Dust.NewDustDirect(position, width, height, 109, 0f, -3f, 0, default(Color), 1.4f).noGravity = true;
				}
			}
			if (homeTileX == -1 && homeTileY == -1)
			{
				Point point = base.Bottom.ToTileCoordinates();
				homeTileX = point.X;
				homeTileY = point.Y;
				this.ai[2] = homeTileX;
				this.ai[3] = homeTileY;
				netUpdate = true;
				timeLeft = 86400;
			}
			timeLeft -= Main.dayRate;
			if (timeLeft < 0)
			{
				timeLeft = 0;
			}
			homeTileX = (int)this.ai[2];
			homeTileY = (int)this.ai[3];
			if (!expertMode)
			{
				localAI[2] = 0f;
			}
			if (expertMode && Main.netMode != 1)
			{
				SpawnPassiveShadowHands(lifePercent, shadowHandDamage);
			}
			switch ((int)this.ai[0])
			{
			case -1:
				localAI[3] = -10f;
				break;
			case 6:
			{
				TargetClosest(faceTarget: false);
				targetData = GetTargetData();
				if (Main.netMode != 1)
				{
					if (!ShouldRunAway(ref targetData, isChasing: false))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						localAI[1] = 0f;
						netUpdate = true;
						break;
					}
					if (timeLeft <= 0)
					{
						this.ai[0] = 8f;
						this.ai[1] = 0f;
						localAI[1] = 0f;
						netUpdate = true;
						break;
					}
				}
				if (direction != oldDirection)
				{
					netUpdate = true;
				}
				goHome = true;
				this.ai[1] += 1f;
				Vector2 other = new Vector2(homeTileX * 16, homeTileY * 16);
				bool flag2 = base.Top.Y > other.Y + 1600f;
				bool num4 = Distance(other) < 1020f;
				Distance(targetData.Center);
				float num5 = this.ai[1] % 600f;
				if (num4 && num5 < 420f)
				{
					haltMovement = true;
				}
				bool flag3 = false;
				int num6 = 300;
				if (flag2 && this.ai[1] >= (float)num6)
				{
					flag3 = true;
				}
				int num7 = 1500;
				if (!num4 && this.ai[1] >= (float)num7)
				{
					flag3 = true;
				}
				if (flag3)
				{
					this.ai[0] = 7f;
					this.ai[1] = 0f;
					localAI[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 0:
			{
				TargetClosest();
				targetData = GetTargetData();
				if (ShouldRunAway(ref targetData, isChasing: true))
				{
					this.ai[0] = 6f;
					this.ai[1] = 0f;
					localAI[1] = 0f;
					netUpdate = true;
					break;
				}
				this.ai[1] += 1f;
				Vector2 vector = base.Bottom + new Vector2(0f, -32f);
				Vector2 vector2 = targetData.Hitbox.ClosestPointInRect(vector);
				Vector2 vector3 = vector2 - vector;
				(vector2 - base.Center).Length();
				float num15 = 0.6f;
				bool flag4 = Math.Abs(vector3.X) >= Math.Abs(vector3.Y) * num15 || vector3.Length() < 48f;
				bool flag5 = vector3.Y <= (float)(100 + targetData.Height) && vector3.Y >= -200f;
				if (Math.Abs(vector3.X) < 120f && flag5 && velocity.Y == 0f && localAI[1] >= 2f)
				{
					velocity.X = 0f;
					this.ai[0] = 4f;
					this.ai[1] = 0f;
					localAI[1] = 0f;
					netUpdate = true;
					break;
				}
				if (Math.Abs(vector3.X) < 120f && flag5 && velocity.Y == 0f && flag4)
				{
					velocity.X = 0f;
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					localAI[1] += 1f;
					netUpdate = true;
					break;
				}
				bool flag6 = this.ai[1] >= 240f;
				if (velocity.Y == 0f && velocity.X != 0f && flag6)
				{
					velocity.X = 0f;
					this.ai[0] = 2f;
					this.ai[1] = 0f;
					localAI[1] = 0f;
					netUpdate = true;
					break;
				}
				bool flag7 = this.ai[1] >= 90f;
				if (velocity.Y == 0f && velocity.X == 0f && flag7)
				{
					velocity.X = 0f;
					this.ai[0] = 5f;
					this.ai[1] = 0f;
					localAI[1] = 0f;
					netUpdate = true;
					break;
				}
				bool flag8 = this.ai[1] >= 120f;
				int num16 = 32;
				bool flag9 = targetData.Type == NPCTargetType.Player && !Main.player[target].buffImmune[num16] && Main.player[target].FindBuffIndex(num16) == -1;
				if (velocity.Y == 0f && flag8 && flag9 && Math.Abs(vector3.X) > 100f)
				{
					velocity.X = 0f;
					this.ai[0] = 3f;
					this.ai[1] = 0f;
					localAI[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 1:
				this.ai[1] += 1f;
				haltMovement = true;
				AI_123_Deerclops_MakeSpikesForward(1, targetData);
				if (this.ai[1] >= 80f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			case 4:
				this.ai[1] += 1f;
				haltMovement = true;
				TargetClosest();
				AI_123_Deerclops_MakeSpikesBothSides(1, targetData);
				if (this.ai[1] >= 90f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			case 2:
			{
				int num8 = 4;
				int num9 = 8 * num8;
				this.ai[1] += 1f;
				if (this.ai[1] == (float)(num9 - 20))
				{
					SoundEngine.PlaySound(SoundID.DeerclopsScream, base.Center);
				}
				if (this.ai[1] == (float)num9)
				{
					SoundEngine.PlaySound(SoundID.DeerclopsRubbleAttack, base.Center);
				}
				haltMovement = true;
				if (Main.netMode != 1 && this.ai[1] >= (float)num9)
				{
					Point sourceTileCoords = base.Top.ToTileCoordinates();
					int num10 = 20;
					int distancedByThisManyTiles = 1;
					float upBiasPerSpike = 200f;
					sourceTileCoords.X += direction * 3;
					sourceTileCoords.Y -= 10;
					int num11 = (int)this.ai[1] - num9;
					if (num11 == 0)
					{
						PunchCameraModifier modifier4 = new PunchCameraModifier(base.Center, new Vector2(0f, -1f), 20f, 6f, 30, 1000f, "Deerclops");
						Main.instance.CameraModifiers.Add(modifier4);
					}
					int num12 = 1;
					int num13 = num11 / num12 * num12;
					int num14 = num13 + num12;
					if (num11 % num12 != 0)
					{
						num14 = num13;
					}
					for (int j = num13; j < num14 && j < num10; j++)
					{
						AI_123_Deerclops_ShootRubbleUp(ref targetData, ref sourceTileCoords, num10, distancedByThisManyTiles, upBiasPerSpike, j);
					}
				}
				if (this.ai[1] >= 60f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 3:
				if (this.ai[1] == 30f)
				{
					SoundEngine.PlaySound(SoundID.DeerclopsScream, base.Center);
				}
				this.ai[1] += 1f;
				haltMovement = true;
				if ((int)this.ai[1] % 4 == 0 && this.ai[1] >= 28f)
				{
					PunchCameraModifier modifier5 = new PunchCameraModifier(base.Center, (Main.rand.NextFloat() * (MathF.PI * 2f)).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
					Main.instance.CameraModifiers.Add(modifier5);
					if (Main.netMode != 2)
					{
						Player player = Main.player[Main.myPlayer];
						_ = Main.myPlayer;
						int num17 = 32;
						int timeToAdd = 720;
						if (!player.dead && player.active && player.FindBuffIndex(num17) == -1 && (player.Center - base.Center).Length() < 800f && !player.creativeGodMode)
						{
							player.AddBuff(num17, timeToAdd);
						}
					}
				}
				if (this.ai[1] == 30f)
				{
					TargetClosest();
				}
				if (this.ai[1] >= 60f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			case 7:
				if (this.ai[1] == 30f)
				{
					SoundEngine.PlaySound(SoundID.DeerclopsScream, base.Center);
				}
				this.ai[1] += 1f;
				haltMovement = true;
				if ((int)this.ai[1] % 4 == 0 && this.ai[1] >= 28f)
				{
					PunchCameraModifier modifier3 = new PunchCameraModifier(base.Center, (Main.rand.NextFloat() * (MathF.PI * 2f)).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
					Main.instance.CameraModifiers.Add(modifier3);
				}
				if (this.ai[1] == 40f)
				{
					TargetClosest();
					if (Main.netMode != 1)
					{
						netUpdate = true;
						base.Bottom = new Vector2(homeTileX * 16, homeTileY * 16);
					}
				}
				if (this.ai[1] >= 60f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			case 8:
				if (this.ai[1] == 30f)
				{
					SoundEngine.PlaySound(SoundID.DeerclopsScream, base.Center);
				}
				this.ai[1] += 1f;
				haltMovement = true;
				if ((int)this.ai[1] % 4 == 0 && this.ai[1] >= 28f)
				{
					PunchCameraModifier modifier2 = new PunchCameraModifier(base.Center, (Main.rand.NextFloat() * (MathF.PI * 2f)).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
					Main.instance.CameraModifiers.Add(modifier2);
				}
				if (this.ai[1] >= 40f)
				{
					life = -1;
					HitEffect();
					active = false;
					if (Main.netMode != 1)
					{
						NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
					}
					return;
				}
				break;
			case 5:
				if (this.ai[1] == 30f)
				{
					SoundEngine.PlaySound(SoundID.DeerclopsScream, base.Center);
				}
				this.ai[1] += 1f;
				haltMovement = true;
				if ((int)this.ai[1] % 4 == 0 && this.ai[1] >= 28f)
				{
					PunchCameraModifier modifier = new PunchCameraModifier(base.Center, (Main.rand.NextFloat() * (MathF.PI * 2f)).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
					Main.instance.CameraModifiers.Add(modifier);
				}
				if (this.ai[1] == 30f)
				{
					TargetClosest();
					if (Main.netMode != 1)
					{
						for (int i = 0; i < 6; i++)
						{
							Projectile.RandomizeInsanityShadowFor(Main.player[target], isHostile: true, out var spawnposition, out var spawnvelocity, out var ai, out var ai2);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), spawnposition, spawnvelocity, 965, num, 0f, Main.myPlayer, ai, ai2);
						}
					}
				}
				if (this.ai[1] >= 60f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			AI_123_Deerclops_Movement(haltMovement, goHome);
		}

		private bool ShouldRunAway(ref NPCAimedTarget targetData, bool isChasing)
		{
			if (targetData.Type == NPCTargetType.Player)
			{
				Player player = Main.player[target];
				bool zoneSnow = player.ZoneSnow;
				Vector2 other = new Vector2(homeTileX * 16, homeTileY * 16);
				int num = 480;
				zoneSnow |= player.Distance(other) <= (float)num;
				return (player.dead || (!isChasing && !zoneSnow)) | (Distance(player.Center) >= 2400f);
			}
			if (targetData.Type == NPCTargetType.None)
			{
				return true;
			}
			return false;
		}

		private void SpawnPassiveShadowHands(float lifePercent, int shadowHandDamage)
		{
			int num = (int)Utils.Remap(lifePercent, 1f, 0f, 80f, 40f);
			localAI[2] += 1f;
			int num2 = (int)localAI[2];
			if (num2 % num != 0)
			{
				return;
			}
			int num3 = num2 / num;
			if (num2 / num >= 3)
			{
				localAI[2] = 0f;
			}
			for (int i = 0; i < 255; i++)
			{
				if (Boss_CanShootExtraAt(i, num3 % 3, 3, 1200f, alwaysSkipMainTarget: false))
				{
					Projectile.RandomizeInsanityShadowFor(Main.player[i], isHostile: true, out var spawnposition, out var spawnvelocity, out var ai, out var ai2);
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), spawnposition, spawnvelocity, 965, shadowHandDamage, 0f, Main.myPlayer, ai, ai2);
				}
			}
		}

		private void AI_123_Deerclops_ShootRubbleUp(ref NPCAimedTarget targetData, ref Point sourceTileCoords, int howMany, int distancedByThisManyTiles, float upBiasPerSpike, int whichOne)
		{
			int num = 18;
			int num2 = whichOne * distancedByThisManyTiles;
			for (int i = 0; i < 35; i++)
			{
				int num3 = sourceTileCoords.X + num2 * direction;
				int num4 = sourceTileCoords.Y + i;
				if (WorldGen.SolidTile(num3, num4))
				{
					Vector2 vector = targetData.Center + new Vector2(num2 * direction * 20, (0f - upBiasPerSpike) * (float)howMany + (float)num2 * upBiasPerSpike / (float)distancedByThisManyTiles);
					Vector2 vector2 = new Vector2(num3 * 16 + 8, num4 * 16 + 8);
					Vector2 vector3 = (vector - vector2).SafeNormalize(-Vector2.UnitY);
					vector3 = new Vector2(0f, -1f).RotatedBy((float)(whichOne * direction) * 0.7f * (MathF.PI / 4f / (float)howMany));
					int num5 = Main.rand.Next(Main.projFrames[962] * 4);
					num5 = 6 + Main.rand.Next(6);
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), new Vector2(num3 * 16 + 8, num4 * 16 - 8), vector3 * (8f + Main.rand.NextFloat() * 8f), 962, num, 0f, Main.myPlayer, 0f, num5);
					break;
				}
			}
		}

		private void AI_123_Deerclops_MakeSpikesForward(int AISLOT_PhaseCounter, NPCAimedTarget targetData)
		{
			int num = 9;
			int num2 = 4;
			if (Main.netMode == 1)
			{
				return;
			}
			int num3 = num * num2;
			if (!(ai[AISLOT_PhaseCounter] < (float)num3))
			{
				Point sourceTileCoords = base.Bottom.ToTileCoordinates();
				int num4 = 20;
				int num5 = 1;
				sourceTileCoords.X += direction * 3;
				int num6 = (int)ai[AISLOT_PhaseCounter] - num3;
				if (num6 == 0)
				{
					PunchCameraModifier modifier = new PunchCameraModifier(base.Center, new Vector2(0f, 1f), 20f, 6f, 30, 1000f, "Deerclops");
					Main.instance.CameraModifiers.Add(modifier);
				}
				int num7 = 4;
				int num8 = num6 / num7 * num7;
				int num9 = num8 + num7;
				if (num6 % num7 != 0)
				{
					num9 = num8;
				}
				for (int i = num8; i < num9 && i < num4; i++)
				{
					int xOffset = i * num5;
					AI_123_Deerclops_TryMakingSpike(ref sourceTileCoords, direction, num4, i, xOffset);
				}
			}
		}

		private void AI_123_Deerclops_MakeSpikesBothSides(int AISLOT_PhaseCounter, NPCAimedTarget targetData)
		{
			if (Main.netMode == 1)
			{
				return;
			}
			int num = 56;
			if (!(ai[AISLOT_PhaseCounter] < (float)num))
			{
				Point sourceTileCoords = base.Bottom.ToTileCoordinates();
				int num2 = 15;
				int num3 = 1;
				int num4 = (int)ai[AISLOT_PhaseCounter] - num;
				if (num4 == 0)
				{
					PunchCameraModifier modifier = new PunchCameraModifier(base.Center, new Vector2(0f, 1f), 20f, 6f, 30, 1000f, "Deerclops");
					Main.instance.CameraModifiers.Add(modifier);
				}
				int num5 = 2;
				int num6 = num4 / num5 * num5;
				int num7 = num6 + num5;
				if (num4 % num5 != 0)
				{
					num7 = num6;
				}
				for (int i = num6; i >= 0 && i < num7 && i < num2; i++)
				{
					int xOffset = i * num3;
					AI_123_Deerclops_TryMakingSpike(ref sourceTileCoords, direction, num2, -i, xOffset);
					AI_123_Deerclops_TryMakingSpike(ref sourceTileCoords, -direction, num2, -i, xOffset);
				}
			}
		}

		public static bool IsADeerclopsNearScreen()
		{
			return npcsFoundForCheckActive[668];
		}

		private void AI_123_Deerclops_FindSpotToSpawnSpike(int howMany, int whichOne, ref int x, ref int y)
		{
			if (WorldGen.ActiveAndWalkableTile(x, y))
			{
				return;
			}
			Rectangle rectangle = targetRect;
			int num = rectangle.Center.X / 16;
			int num2 = (rectangle.Bottom - 16) / 16;
			int num3 = ((num2 - y > 0) ? 1 : (-1));
			int num4 = y;
			for (int i = 1; i <= 10; i++)
			{
				int num5 = y + num3 * i;
				if (num5 >= 20 && num5 <= Main.maxTilesY - 20 && WorldGen.ActiveAndWalkableTile(x, num5))
				{
					num4 = num5;
				}
			}
			if (num4 != y)
			{
				y = num4;
				return;
			}
			y = (int)MathHelper.Lerp(num2, y, (float)Math.Abs(num - x) * 0.1f);
			for (int j = 0; j < 4; j++)
			{
				int num6 = y + j;
				if (num6 >= 20 && num6 <= Main.maxTilesY - 20 && WorldGen.ActiveAndWalkableTile(x, num6))
				{
					y = num6;
					break;
				}
			}
		}

		private void AI_123_Deerclops_TryMakingSpike(ref Point sourceTileCoords, int dir, int howMany, int whichOne, int xOffset)
		{
			int num = 13;
			int num2 = sourceTileCoords.X + xOffset * dir;
			int num3 = AI_123_Deerclops_TryMakingSpike_FindBestY(ref sourceTileCoords, num2);
			if (WorldGen.ActiveAndWalkableTile(num2, num3))
			{
				Vector2 vector = new Vector2(num2 * 16 + 8, num3 * 16 - 8);
				Vector2 vector2 = new Vector2(0f, -1f).RotatedBy((float)(whichOne * dir) * 0.7f * (MathF.PI / 4f / (float)howMany));
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector, vector2, 961, num, 0f, Main.myPlayer, 0f, 0.1f + Main.rand.NextFloat() * 0.1f + (float)xOffset * 1.1f / (float)howMany);
			}
		}

		private int AI_123_Deerclops_TryMakingSpike_FindBestY(ref Point sourceTileCoords, int x)
		{
			int num = sourceTileCoords.Y;
			NPCAimedTarget targetData = GetTargetData();
			if (!targetData.Invalid)
			{
				Rectangle hitbox = targetData.Hitbox;
				Vector2 vector = new Vector2(hitbox.Center.X, hitbox.Bottom);
				int num2 = (int)(vector.Y / 16f);
				int num3 = Math.Sign(num2 - num);
				int num4 = num2 + num3 * 15;
				int? num5 = null;
				float num6 = float.PositiveInfinity;
				for (int i = num; i != num4; i += num3)
				{
					if (WorldGen.ActiveAndWalkableTile(x, i))
					{
						float num7 = new Point(x, i).ToWorldCoordinates().Distance(vector);
						if (!num5.HasValue || !(num7 >= num6))
						{
							num5 = i;
							num6 = num7;
						}
					}
				}
				if (num5.HasValue)
				{
					num = num5.Value;
				}
			}
			for (int j = 0; j < 20; j++)
			{
				if (num < 10)
				{
					break;
				}
				if (!WorldGen.SolidTile(x, num))
				{
					break;
				}
				num--;
			}
			for (int k = 0; k < 20; k++)
			{
				if (num > Main.maxTilesY - 10)
				{
					break;
				}
				if (WorldGen.ActiveAndWalkableTile(x, num))
				{
					break;
				}
				num++;
			}
			return num;
		}

		private void AI_123_Deerclops_Movement(bool haltMovement, bool goHome)
		{
			float num = (float)life / (float)lifeMax;
			float num2 = 1f - num;
			float num3 = 3.5f + 1f * num2;
			float num4 = 4f;
			float num5 = -0.4f;
			float min = -8f;
			float num6 = 0.4f;
			Rectangle rectangle = GetTargetData().Hitbox;
			if (goHome)
			{
				rectangle = new Rectangle(homeTileX * 16, homeTileY * 16, 16, 16);
				if (Distance(rectangle.Center.ToVector2()) < 240f)
				{
					rectangle.X = (int)(base.Center.X + (float)(160 * direction));
				}
			}
			float num7 = (float)rectangle.Center.X - base.Center.X;
			float num8 = Math.Abs(num7);
			if (goHome && num7 != 0f)
			{
				direction = (spriteDirection = Math.Sign(num7));
			}
			bool flag = num8 < 80f;
			bool flag2 = flag || haltMovement;
			if (ai[0] == -1f)
			{
				num7 = 5f;
				num3 = 5.35f;
				flag2 = false;
			}
			if (flag2)
			{
				velocity.X *= 0.9f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
			}
			else
			{
				int num9 = Math.Sign(num7);
				velocity.X = MathHelper.Lerp(velocity.X, (float)num9 * num3, 1f / num4);
			}
			int num10 = 40;
			int num11 = 20;
			int num12 = 0;
			Vector2 vector = new Vector2(base.Center.X - (float)(num10 / 2), position.Y + (float)height - (float)num11 + (float)num12);
			bool num13 = vector.X < (float)rectangle.X && vector.X + (float)width > (float)(rectangle.X + rectangle.Width);
			bool flag3 = vector.Y + (float)num11 < (float)(rectangle.Y + rectangle.Height - 16);
			bool acceptTopSurfaces = base.Bottom.Y >= (float)rectangle.Top;
			bool flag4 = Collision.SolidCollision(vector, num10, num11, acceptTopSurfaces);
			bool flag5 = Collision.SolidCollision(vector, num10, num11 - 4, acceptTopSurfaces);
			bool flag6 = !Collision.SolidCollision(vector + new Vector2(num10 * direction, 0f), 16, 80, acceptTopSurfaces);
			float num14 = 8f;
			if (flag4 || flag5)
			{
				localAI[0] = 0f;
			}
			if ((num13 || flag) && flag3)
			{
				velocity.Y = MathHelper.Clamp(velocity.Y + num6 * 2f, 0.001f, 16f);
			}
			else if (flag4 && !flag5)
			{
				velocity.Y = 0f;
			}
			else if (flag4)
			{
				velocity.Y = MathHelper.Clamp(velocity.Y + num5, min, 0f);
			}
			else if (velocity.Y == 0f && flag6)
			{
				velocity.Y = 0f - num14;
				localAI[0] = 1f;
			}
			else
			{
				velocity.Y = MathHelper.Clamp(velocity.Y + num6, 0f - num14, 16f);
			}
		}

		private void AI_124_DeerclopsLeg()
		{
			int num = (int)ai[0];
			if (num < 0 || num > 200)
			{
				active = false;
				if (Main.netMode != 1)
				{
					NetMessage.SendData(23, -1, -1, null, whoAmI);
				}
				return;
			}
			NPC nPC = Main.npc[num];
			if (!nPC.active || nPC.type != 668)
			{
				active = false;
				if (Main.netMode != 1)
				{
					NetMessage.SendData(23, -1, -1, null, whoAmI);
				}
				return;
			}
			NPCAimedTarget targetData = nPC.GetTargetData();
			Vector2 vector = targetData.Center - base.Center;
			float num2 = targetData.Center.X - (float)(width / 2);
			int num3 = Math.Sign(num2 - position.X);
			float val = Math.Abs(num2 - position.X);
			float num4 = Math.Min(50f, val);
			float num5 = num2 + (float)(-num3) * num4;
			Math.Abs(vector.X);
			if (Math.Abs(num5 - base.Center.X) >= 30f && localAI[0] == 0f)
			{
				localAI[0] = 1f;
			}
			float num6 = 4f;
			float num7 = 30f;
			if (localAI[0] < 0f)
			{
				localAI[0] += 1f;
			}
			if (localAI[0] > 0f)
			{
				localAI[0] += 1f;
				if (localAI[0] >= num7)
				{
					localAI[0] = 0f - num6;
				}
			}
			int num8 = ((ai[1] != 0f) ? 1 : (-1));
			if (localAI[0] > 0f)
			{
				Vector2 vector2 = new Vector2(num8 * 14, -20f);
				Vector2 searchStartPositionInWorld = nPC.Bottom + vector2 + new Vector2(0f, 30f);
				int searchRange = 16;
				int tilesTraveled = 0;
				float? num9 = TryFindingFloor(searchStartPositionInWorld, searchRange, out tilesTraveled);
				float amount = 1f / 3f;
				Vector2 value = new Vector2(searchStartPositionInWorld.X, searchStartPositionInWorld.Y + 100f);
				float num10 = localAI[0] / num7;
				if (num9.HasValue && tilesTraveled > 2)
				{
					new Vector2(searchStartPositionInWorld.X, num9.Value * 16f);
					value = new Vector2(searchStartPositionInWorld.X, num9.Value * 16f);
					amount = num10;
				}
				value.Y -= (1f - num10) * 30f;
				Vector2 vector4 = (base.Bottom = Vector2.Lerp(base.Bottom, value, amount));
			}
			int num11 = num8;
			if (Math.Abs(vector.X) > 30f)
			{
				num11 = Math.Sign(vector.X);
			}
			spriteDirection = -num11;
		}

		private static float? TryFindingFloor(Vector2 searchStartPositionInWorld, int searchRange, out int tilesTraveled)
		{
			Point point = searchStartPositionInWorld.ToTileCoordinates();
			int x = point.X;
			for (int i = point.Y; i < point.Y + searchRange; i++)
			{
				if (Main.tile[x, i] == null)
				{
					Main.tile[x, i] = new Tile();
				}
				if (Main.tile[x, i].nactive() && Main.tileSolid[Main.tile[x, i].type])
				{
					tilesTraveled = i - point.Y;
					return i;
				}
			}
			tilesTraveled = 0;
			return null;
		}

		private void AI_87_BigMimic_FireStuffCannonBurst()
		{
			int num = 10;
			for (int i = 0; i < num; i++)
			{
				int itemID = ItemID.Sets.ItemsForStuffCannon[Main.rand.Next(ItemID.Sets.ItemsForStuffCannon.Length)];
				AI_87_BigMimic_ShootItem(itemID);
			}
		}

		private void AI_87_BigMimic_ShootItem(int itemID)
		{
			int num = Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, itemID, 1, noBroadcast: false, -1, noGrabDelay: true);
			float num2 = Main.rand.Next(10, 26);
			Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			Vector2 vector2 = Main.player[target].Center - new Vector2(0f, 120f);
			float num3 = vector2.X - vector.X;
			float num4 = vector2.Y - vector.Y;
			num3 += (float)Main.rand.Next(-50, 51) * 0.1f;
			num4 += (float)Main.rand.Next(-50, 51) * 0.1f;
			float num5 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
			num5 = num2 / num5;
			num3 *= num5;
			num4 *= num5;
			num3 += (float)Main.rand.Next(-50, 51) * 0.1f;
			num4 += (float)Main.rand.Next(-50, 51) * 0.1f;
			Main.item[num].velocity.X = num3;
			Main.item[num].velocity.Y = num4;
			Main.item[num].noGrabDelay = 100;
			if (Main.netMode != 0)
			{
				NetMessage.SendData(21, -1, -1, null, num);
			}
		}

		public void AI_122_PirateGhost()
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.NPCHit6, position);
			}
			NPCAimedTarget targetData = GetTargetData();
			if (targetData.Invalid)
			{
				TargetClosest();
				targetData = GetTargetData();
			}
			if (targetData.Invalid)
			{
				velocity *= 0.9f;
				alpha = Utils.Clamp(alpha + 5, 0, 255);
				if (alpha >= 255)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
				}
				return;
			}
			alpha = Utils.Clamp(alpha - 5, 0, 255);
			Vector2 targetPosition = Vector2.Zero.MoveTowards(targetData.Center - base.Center, 4f);
			velocity = velocity.MoveTowards(targetPosition, 2f / 15f);
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == type && i != whoAmI)
				{
					Vector2 vector = Main.npc[i].Center - base.Center;
					if (vector.Length() < 50f)
					{
						vector.Normalize();
						vector *= 0.1f;
						velocity -= vector;
						velocity.X -= vector.X * 1f;
					}
				}
			}
		}

		public void AI_000_TransformBoundNPC(int playerID, int npcType)
		{
			Transform(npcType);
			Main.BestiaryTracker.Chats.RegisterChatStartWith(this);
			Main.player[playerID].SetTalkNPC(whoAmI);
			if (Main.netMode == 2)
			{
				NetMessage.SendData(40, -1, -1, null, playerID);
			}
		}

		private void AI_065_Butterflies()
		{
			float num = ai[0];
			float num2 = ai[1];
			if (type == 661)
			{
				Vector3 rgb = Main.hslToRgb(Main.GlobalTimeWrappedHourly * 0.33f % 1f, 1f, 0.5f).ToVector3() * 0.3f;
				rgb += Vector3.One * 0.1f;
				Lighting.AddLight(base.Center, rgb);
				int num3 = 60;
				bool flag = false;
				int num4 = 50;
				NPCAimedTarget targetData = GetTargetData();
				if (targetData.Invalid || targetData.Center.Distance(base.Center) >= 300f)
				{
					flag = true;
				}
				if (!Main.remixWorld && !targetData.Invalid && targetData.Type == NPCTargetType.Player && !Main.player[target].ZoneHallow)
				{
					num4 = num3;
					flag = true;
				}
				ai[2] = MathHelper.Clamp(ai[2] + (float)flag.ToDirectionInt(), 0f, num4);
				if (ai[2] >= (float)num3)
				{
					active = false;
					if (Main.netMode != 1)
					{
						NetMessage.SendData(23, -1, -1, null, whoAmI);
					}
					return;
				}
				Opacity = Utils.GetLerpValue(num3, (float)num4 / 2f, ai[2], clamped: true);
				if (ai[2] > 0f)
				{
					int num5 = 1;
					for (int i = 0; i < num5; i++)
					{
						if (Main.rand.Next(5) == 0)
						{
							float num6 = MathHelper.Lerp(0.9f, 0.6f, Opacity);
							Color newColor = Main.hslToRgb(Main.GlobalTimeWrappedHourly * 0.3f % 1f, 1f, 0.5f) * 0.5f;
							int num7 = Dust.NewDust(position, width, height, 267, 0f, 0f, 0, newColor);
							Main.dust[num7].position = base.Center + Main.rand.NextVector2Circular(width, height);
							Main.dust[num7].velocity *= Main.rand.NextFloat() * 0.8f;
							Main.dust[num7].velocity += velocity * 0.6f;
							Main.dust[num7].noGravity = true;
							Main.dust[num7].fadeIn = 0.6f + Main.rand.NextFloat() * 0.7f * num6;
							Main.dust[num7].scale = 0.35f;
							if (num7 != 6000)
							{
								Dust dust = Dust.CloneDust(num7);
								dust.scale /= 2f;
								dust.fadeIn *= 0.85f;
								dust.color = new Color(255, 255, 255, 255) * 0.5f;
							}
						}
					}
				}
				dontTakeDamage = ai[2] >= (float)(num4 / 2);
			}
			if (Main.netMode != 1)
			{
				if (ai[2] == 0f && type != 661)
				{
					int num8 = 0;
					int num9 = 4;
					int num10 = 6;
					int num11 = 3;
					int num12 = 7;
					int num13 = 2;
					int num14 = 1;
					int num15 = 5;
					int num16 = Main.rand.Next(100);
					num16 = ((num16 == 0) ? num15 : ((num16 < 3) ? num14 : ((num16 < 9) ? num13 : ((num16 < 19) ? num12 : ((num16 < 34) ? num11 : ((num16 < 53) ? num10 : ((num16 >= 75) ? num8 : num9)))))));
					ai[2] = 1 + num16;
				}
				if (ai[3] == 0f)
				{
					ai[3] = (float)Main.rand.Next(75, 111) * 0.01f;
				}
				localAI[0] -= 1f;
				if (localAI[0] <= 0f)
				{
					localAI[0] = Main.rand.Next(90, 240);
					TargetClosest();
					float num17 = Math.Abs(base.Center.X - Main.player[target].Center.X);
					if (num17 > 700f && localAI[3] == 0f)
					{
						float num18 = (float)Main.rand.Next(50, 151) * 0.01f;
						if (num17 > 1000f)
						{
							num18 = (float)Main.rand.Next(150, 201) * 0.01f;
						}
						else if (num17 > 850f)
						{
							num18 = (float)Main.rand.Next(100, 151) * 0.01f;
						}
						int num19 = direction * Main.rand.Next(100, 251);
						int num20 = Main.rand.Next(-50, 51);
						if (position.Y > Main.player[target].position.Y - 100f)
						{
							num20 -= Main.rand.Next(100, 251);
						}
						float num21 = num18 / (float)Math.Sqrt(num19 * num19 + num20 * num20);
						num = (float)num19 * num21;
						num2 = (float)num20 * num21;
					}
					else
					{
						localAI[3] = 1f;
						float num22 = (float)Main.rand.Next(26, 301) * 0.01f;
						int num23 = Main.rand.Next(-100, 101);
						int num24 = Main.rand.Next(-100, 101);
						float num25 = num22 / (float)Math.Sqrt(num23 * num23 + num24 * num24);
						num = (float)num23 * num25;
						num2 = (float)num24 * num25;
					}
					netUpdate = true;
				}
			}
			scale = ai[3];
			int num26 = 60;
			velocity.X = (velocity.X * (float)(num26 - 1) + num) / (float)num26;
			velocity.Y = (velocity.Y * (float)(num26 - 1) + num2) / (float)num26;
			if (velocity.Y > 0f)
			{
				int num27 = 3;
				int num28 = (int)base.Center.X / 16;
				int num29 = (int)base.Center.Y / 16;
				for (int j = num29; j < num29 + num27; j++)
				{
					if (Main.tile[num28, j] != null && ((Main.tile[num28, j].nactive() && Main.tileSolid[Main.tile[num28, j].type]) || Main.tile[num28, j].liquid > 0))
					{
						num2 *= -1f;
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.9f;
						}
					}
				}
			}
			if (velocity.Y < 0f)
			{
				int num30 = 30;
				bool flag2 = false;
				int num31 = (int)base.Center.X / 16;
				int num32 = (int)base.Center.Y / 16;
				for (int k = num32; k < num32 + num30; k++)
				{
					if (Main.tile[num31, k] != null && Main.tile[num31, k].nactive() && Main.tileSolid[Main.tile[num31, k].type])
					{
						flag2 = true;
					}
				}
				if (!flag2)
				{
					num2 *= -1f;
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.9f;
					}
				}
			}
			if (localAI[1] > 0f)
			{
				localAI[1] -= 1f;
			}
			else
			{
				localAI[1] = 15f;
				if (type == 661)
				{
					localAI[1] = 10f;
				}
				float num33 = 0f;
				Vector2 zero = Vector2.Zero;
				for (int l = 0; l < 200; l++)
				{
					NPC nPC = Main.npc[l];
					if (nPC.active && nPC.damage > 0 && !nPC.friendly && nPC.Hitbox.Distance(base.Center) <= 100f)
					{
						num33 += 1f;
						zero += DirectionFrom(nPC.Center);
					}
				}
				if (num33 > 0f)
				{
					zero /= num33;
					zero *= 2f;
					velocity += zero;
					if (velocity.Length() > 16f)
					{
						velocity = velocity.SafeNormalize(Vector2.Zero) * 16f;
					}
				}
			}
			if (collideX)
			{
				num = ((!(velocity.X < 0f)) ? (0f - Math.Abs(num)) : Math.Abs(num));
				velocity.X *= -0.2f;
			}
			if (velocity.X < 0f)
			{
				direction = -1;
			}
			if (velocity.X > 0f)
			{
				direction = 1;
			}
			ai[0] = num;
			ai[1] = num2;
			if (type == 356)
			{
				catchItem = (short)(1994f + ai[2] - 1f);
			}
			if (type == 653)
			{
				position += netOffset;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.6f, 0.3f, 0.1f);
				if (Main.rand.Next(60) == 0)
				{
					int num34 = Dust.NewDust(position, width, height, 6, 0f, 0f, 254);
					Main.dust[num34].velocity *= 0f;
				}
				position -= netOffset;
			}
		}

		public static Color AI_121_QueenSlime_GetDustColor()
		{
			Color value = new Color(0, 160, 255);
			Color value3 = Color.Lerp(value2: new Color(255, 80, 255), value1: new Color(200, 200, 200), amount: Main.rand.NextFloat());
			return Color.Lerp(value, value3, Main.rand.NextFloat());
		}

		private void AI_121_QueenSlime_FlyMovement()
		{
			noTileCollide = true;
			noGravity = true;
			float num = 12f;
			float num2 = 0.085f;
			float num3 = 250f;
			TargetClosest();
			Vector2 desiredVelocity = base.Center;
			if (timeLeft > 10)
			{
				if (!Collision.CanHit(this, Main.player[target]))
				{
					bool flag = false;
					Vector2 center = Main.player[target].Center;
					for (int i = 0; i < 16; i++)
					{
						float num4 = 16 * i;
						Point point = (center + new Vector2(0f, 0f - num4)).ToTileCoordinates();
						if (WorldGen.SolidOrSlopedTile(point.X, point.Y))
						{
							desiredVelocity = center + new Vector2(0f, 0f - num4 + 16f) - base.Center;
							flag = true;
							break;
						}
					}
					if (!flag)
					{
						desiredVelocity = center - base.Center;
					}
				}
				else
				{
					desiredVelocity = Main.player[target].Center + new Vector2(0f, 0f - num3) - base.Center;
				}
			}
			else
			{
				desiredVelocity = base.Center + new Vector2(500f * (float)direction, 0f - num3) - base.Center;
			}
			float num5 = desiredVelocity.Length();
			if (Math.Abs(desiredVelocity.X) < 40f)
			{
				desiredVelocity.X = velocity.X;
			}
			float num6 = num - 2f;
			if (num5 > 100f && ((velocity.X < 0f - num6 && desiredVelocity.X > 0f) || (velocity.X > num6 && desiredVelocity.X < 0f)))
			{
				num2 *= 2f;
			}
			if (num5 < 40f)
			{
				desiredVelocity = velocity;
			}
			else if (num5 < 80f)
			{
				desiredVelocity.Normalize();
				desiredVelocity *= num * 0.65f;
			}
			else
			{
				desiredVelocity.Normalize();
				desiredVelocity *= num;
			}
			SimpleFlyMovement(desiredVelocity, num2);
			rotation = velocity.X * 0.1f;
			if (rotation > 0.5f)
			{
				rotation = 0.5f;
			}
			if (rotation < -0.5f)
			{
				rotation = -0.5f;
			}
		}

		private void AI_121_QueenSlime()
		{
			int num = 30;
			int num2 = 40;
			_ = Main.expertMode;
			float num3 = 1f;
			bool flag = false;
			bool flag2 = life <= lifeMax / 2;
			if (localAI[0] == 0f)
			{
				ai[1] = -100f;
				localAI[0] = lifeMax;
				TargetClosest();
				netUpdate = true;
			}
			Lighting.AddLight(base.Center, 1f, 0.7f, 0.9f);
			int num4 = 500;
			if (Main.player[target].dead || Math.Abs(base.Center.X - Main.player[target].Center.X) / 16f > (float)num4)
			{
				TargetClosest();
				if (Main.player[target].dead || Math.Abs(base.Center.X - Main.player[target].Center.X) / 16f > (float)num4)
				{
					EncourageDespawn(10);
					if (Main.player[target].Center.X < base.Center.X)
					{
						direction = 1;
					}
					else
					{
						direction = -1;
					}
				}
			}
			if (!Main.player[target].dead && timeLeft > 10 && !flag2 && ai[3] >= 300f && ai[0] == 0f && velocity.Y == 0f)
			{
				ai[0] = 2f;
				ai[1] = 0f;
				if (Main.netMode != 1)
				{
					netUpdate = true;
					TargetClosest(faceTarget: false);
					Point point = base.Center.ToTileCoordinates();
					Point point2 = Main.player[target].Center.ToTileCoordinates();
					Vector2 vector = Main.player[target].Center - base.Center;
					int num5 = 10;
					int num6 = 0;
					int num7 = 7;
					int num8 = 0;
					bool flag3 = false;
					if (ai[3] >= 360f || vector.Length() > 2000f)
					{
						if (ai[3] > 360f)
						{
							ai[3] = 360f;
						}
						flag3 = true;
						num8 = 100;
					}
					while (!flag3 && num8 < 100)
					{
						num8++;
						int num9 = Main.rand.Next(point2.X - num5, point2.X + num5 + 1);
						int num10 = Main.rand.Next(point2.Y - num5, point2.Y + 1);
						if ((num10 >= point2.Y - num7 && num10 <= point2.Y + num7 && num9 >= point2.X - num7 && num9 <= point2.X + num7) || (num10 >= point.Y - num6 && num10 <= point.Y + num6 && num9 >= point.X - num6 && num9 <= point.X + num6) || Main.tile[num9, num10].nactive())
						{
							continue;
						}
						int num11 = num10;
						int i = 0;
						if (Main.tile[num9, num11].nactive() && Main.tileSolid[Main.tile[num9, num11].type] && !Main.tileSolidTop[Main.tile[num9, num11].type])
						{
							i = 1;
						}
						else
						{
							for (; i < 150 && num11 + i < Main.maxTilesY; i++)
							{
								int num12 = num11 + i;
								if (Main.tile[num9, num12].nactive() && Main.tileSolid[Main.tile[num9, num12].type] && !Main.tileSolidTop[Main.tile[num9, num12].type])
								{
									i--;
									break;
								}
							}
						}
						num10 += i;
						bool flag4 = true;
						if (flag4 && Main.tile[num9, num10].lava())
						{
							flag4 = false;
						}
						if (flag4 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
						{
							flag4 = false;
						}
						if (flag4)
						{
							localAI[1] = num9 * 16 + 8;
							localAI[2] = num10 * 16 + 16;
							flag3 = true;
							break;
						}
					}
					if (num8 >= 100)
					{
						Vector2 bottom = Main.player[Player.FindClosest(position, width, height)].Bottom;
						localAI[1] = bottom.X;
						localAI[2] = bottom.Y;
						ai[3] = 0f;
					}
				}
			}
			if (!flag2 && (!Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0) || Math.Abs(base.Top.Y - Main.player[target].Bottom.Y) > 320f))
			{
				ai[3] += 1.5f;
			}
			else
			{
				float num13 = ai[3];
				ai[3] -= 1f;
				if (ai[3] < 0f)
				{
					if (Main.netMode != 1 && num13 > 0f)
					{
						netUpdate = true;
					}
					ai[3] = 0f;
				}
			}
			if (timeLeft <= 10 && ((flag2 && ai[0] != 0f) || (!flag2 && ai[0] != 3f)))
			{
				if (flag2)
				{
					ai[0] = 0f;
				}
				else
				{
					ai[0] = 3f;
				}
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] = 0f;
				netUpdate = true;
			}
			noTileCollide = false;
			noGravity = false;
			if (flag2)
			{
				localAI[3] += 1f;
				if (localAI[3] >= 24f)
				{
					localAI[3] = 0f;
				}
				if (ai[0] == 4f && ai[2] == 1f)
				{
					localAI[3] = 6f;
				}
				if (ai[0] == 5f && ai[2] != 1f)
				{
					localAI[3] = 7f;
				}
			}
			switch ((int)ai[0])
			{
			case 0:
			{
				if (flag2)
				{
					AI_121_QueenSlime_FlyMovement();
				}
				else
				{
					noTileCollide = false;
					noGravity = false;
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.8f;
						if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
						{
							velocity.X = 0f;
						}
					}
				}
				if (timeLeft <= 10 || (!flag2 && velocity.Y != 0f))
				{
					break;
				}
				ai[1] += 1f;
				int num18 = 60;
				if (flag2)
				{
					num18 = 120;
				}
				if (!(ai[1] > (float)num18))
				{
					break;
				}
				ai[1] = 0f;
				if (flag2)
				{
					Player player = Main.player[target];
					int num19 = Main.rand.Next(2);
					if (num19 != 1)
					{
						ai[0] = 4f;
					}
					else
					{
						ai[0] = 5f;
					}
					if (ai[0] == 4f)
					{
						ai[2] = 1f;
						if (player != null && player.active && !player.dead && (player.Bottom.Y < base.Bottom.Y || Math.Abs(player.Center.X - base.Center.X) > 250f))
						{
							ai[0] = 5f;
							ai[2] = 0f;
						}
					}
				}
				else
				{
					switch (Main.rand.Next(3))
					{
					default:
						ai[0] = 3f;
						break;
					case 1:
						ai[0] = 4f;
						break;
					case 2:
						ai[0] = 5f;
						break;
					}
				}
				netUpdate = true;
				break;
			}
			case 1:
			{
				rotation = 0f;
				ai[1] += 1f;
				num3 = MathHelper.Clamp(ai[1] / 30f, 0f, 1f);
				num3 = 0.5f + num3 * 0.5f;
				if (ai[1] >= 30f && Main.netMode != 1)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					netUpdate = true;
					TargetClosest();
				}
				if (Main.netMode == 1 && ai[1] >= 60f)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					TargetClosest();
				}
				Color newColor2 = AI_121_QueenSlime_GetDustColor();
				newColor2.A = 150;
				for (int num27 = 0; num27 < 10; num27++)
				{
					int num28 = Dust.NewDust(position + Vector2.UnitX * -20f, width + 40, height, 4, velocity.X, velocity.Y, 50, newColor2, 1.5f);
					Main.dust[num28].noGravity = true;
					Main.dust[num28].velocity *= 2f;
				}
				break;
			}
			case 2:
				rotation = 0f;
				ai[1] += 1f;
				num3 = MathHelper.Clamp((60f - ai[1]) / 60f, 0f, 1f);
				num3 = 0.5f + num3 * 0.5f;
				if (ai[1] >= 60f)
				{
					flag = true;
				}
				if (ai[1] == 60f)
				{
					Gore.NewGore(base.Center + new Vector2(-40f, -height / 2), velocity, 1258);
				}
				if (ai[1] >= 60f && Main.netMode != 1)
				{
					base.Bottom = new Vector2(localAI[1], localAI[2]);
					ai[0] = 1f;
					ai[1] = 0f;
					netUpdate = true;
				}
				if (Main.netMode == 1 && ai[1] >= 120f)
				{
					ai[0] = 1f;
					ai[1] = 0f;
				}
				if (!flag)
				{
					Color newColor = AI_121_QueenSlime_GetDustColor();
					newColor.A = 150;
					for (int n = 0; n < 10; n++)
					{
						int num26 = Dust.NewDust(position + Vector2.UnitX * -20f, width + 40, height, 4, velocity.X, velocity.Y, 50, newColor, 1.5f);
						Main.dust[num26].noGravity = true;
						Main.dust[num26].velocity *= 0.5f;
					}
				}
				break;
			case 3:
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.8f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					ai[1] += 4f;
					if ((double)life < (double)lifeMax * 0.66)
					{
						ai[1] += 4f;
					}
					if ((double)life < (double)lifeMax * 0.33)
					{
						ai[1] += 4f;
					}
					if (!(ai[1] >= 0f))
					{
						break;
					}
					netUpdate = true;
					TargetClosest();
					if (ai[2] == 3f)
					{
						velocity.Y = -13f;
						velocity.X += 3.5f * (float)direction;
						ai[1] = 0f;
						ai[2] = 0f;
						if (timeLeft > 10)
						{
							ai[0] = 0f;
						}
						else
						{
							ai[1] = -60f;
						}
					}
					else if (ai[2] == 2f)
					{
						velocity.Y = -6f;
						velocity.X += 4.5f * (float)direction;
						ai[1] = -40f;
						ai[2] += 1f;
					}
					else
					{
						velocity.Y = -8f;
						velocity.X += 4f * (float)direction;
						ai[1] = -40f;
						ai[2] += 1f;
					}
				}
				else
				{
					if (target >= 255)
					{
						break;
					}
					float num20 = 3f;
					if (Main.getGoodWorld)
					{
						num20 = 7f;
					}
					if ((direction == 1 && velocity.X < num20) || (direction == -1 && velocity.X > 0f - num20))
					{
						if ((direction == -1 && (double)velocity.X < 0.1) || (direction == 1 && (double)velocity.X > -0.1))
						{
							velocity.X += 0.2f * (float)direction;
						}
						else
						{
							velocity.X *= 0.93f;
						}
					}
				}
				break;
			case 4:
			{
				rotation *= 0.9f;
				noTileCollide = true;
				noGravity = true;
				if (ai[2] == 1f)
				{
					noTileCollide = false;
					noGravity = false;
					int num21 = 30;
					if (flag2)
					{
						num21 = 10;
					}
					if (Main.getGoodWorld)
					{
						num21 = 0;
					}
					Player player2 = Main.player[target];
					_ = base.Center;
					if (!player2.dead && player2.active && Math.Abs(base.Center.X - player2.Center.X) / 16f <= (float)num4)
					{
						_ = player2.Center;
					}
					if (velocity.Y == 0f)
					{
						ai[0] = 0f;
						ai[1] = 0f;
						ai[2] = 0f;
						netUpdate = true;
						SoundEngine.PlaySound(SoundID.Item167, base.Center);
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Bottom, Vector2.Zero, 922, num2, 0f, Main.myPlayer);
						}
						for (int l = 0; l < 20; l++)
						{
							int num22 = Dust.NewDust(base.Bottom - new Vector2(width / 2, 30f), width, 30, 31, velocity.X, velocity.Y, 40, AI_121_QueenSlime_GetDustColor());
							Main.dust[num22].noGravity = true;
							Main.dust[num22].velocity.Y = -5f + Main.rand.NextFloat() * -3f;
							Main.dust[num22].velocity.X *= 7f;
						}
					}
					else if (ai[1] >= (float)num21)
					{
						for (int m = 0; m < 4; m++)
						{
							Vector2 vector3 = base.Bottom - new Vector2(Main.rand.NextFloatDirection() * 16f, Main.rand.Next(8));
							int num23 = Dust.NewDust(vector3, 2, 2, 31, velocity.X, velocity.Y, 40, AI_121_QueenSlime_GetDustColor(), 1.4f);
							Main.dust[num23].position = vector3;
							Main.dust[num23].noGravity = true;
							Main.dust[num23].velocity.Y = velocity.Y * 0.9f;
							Main.dust[num23].velocity.X = ((Main.rand.Next(2) == 0) ? (-10f) : 10f) + Main.rand.NextFloatDirection() * 3f;
						}
					}
					velocity.X *= 0.8f;
					float num24 = ai[1];
					ai[1] += 1f;
					if (ai[1] >= (float)num21)
					{
						if (num24 < (float)num21)
						{
							netUpdate = true;
						}
						if (flag2 && ai[1] > (float)(num21 + 120))
						{
							ai[0] = 0f;
							ai[1] = 0f;
							ai[2] = 0f;
							velocity.Y *= 0.8f;
							netUpdate = true;
							break;
						}
						velocity.Y += 1f;
						float num25 = 14f;
						if (Main.getGoodWorld)
						{
							velocity.Y += 1f;
							num25 = 15.99f;
						}
						if (velocity.Y == 0f)
						{
							velocity.Y = 0.01f;
						}
						if (velocity.Y >= num25)
						{
							velocity.Y = num25;
						}
					}
					else
					{
						velocity.Y *= 0.8f;
					}
					break;
				}
				if (Main.netMode != 1 && ai[1] == 0f)
				{
					TargetClosest();
					netUpdate = true;
				}
				ai[1] += 1f;
				if (!(ai[1] >= 30f))
				{
					break;
				}
				if (ai[1] >= 60f)
				{
					ai[1] = 60f;
					if (Main.netMode != 1)
					{
						ai[1] = 0f;
						ai[2] = 1f;
						velocity.Y = -3f;
						netUpdate = true;
					}
				}
				Player player3 = Main.player[target];
				Vector2 center = base.Center;
				if (!player3.dead && player3.active && Math.Abs(base.Center.X - player3.Center.X) / 16f <= (float)num4)
				{
					center = player3.Center;
				}
				center.Y -= 384f;
				if (velocity.Y == 0f)
				{
					velocity = center - base.Center;
					velocity = velocity.SafeNormalize(Vector2.Zero);
					velocity *= 20f;
				}
				else
				{
					velocity.Y *= 0.95f;
				}
				break;
			}
			case 5:
			{
				rotation *= 0.9f;
				noTileCollide = true;
				noGravity = true;
				if (flag2)
				{
					ai[3] = 0f;
				}
				if (ai[2] == 1f)
				{
					ai[1] += 1f;
					if (!(ai[1] >= 10f))
					{
						break;
					}
					if (Main.netMode != 1)
					{
						int num14 = 10;
						if (Main.getGoodWorld)
						{
							num14 = 15;
						}
						int num15 = num14;
						if (!flag2)
						{
							num15 = 6;
						}
						for (int j = 0; j < num15; j++)
						{
							Vector2 spinningpoint = new Vector2(9f, 0f);
							spinningpoint = spinningpoint.RotatedBy((float)(-j) * (MathF.PI * 2f) / (float)num14, Vector2.Zero);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, spinningpoint.X, spinningpoint.Y, 926, num, 0f, Main.myPlayer);
						}
					}
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					netUpdate = true;
					break;
				}
				if (Main.netMode != 1 && ai[1] == 0f)
				{
					TargetClosest();
					netUpdate = true;
				}
				ai[1] += 1f;
				if (ai[1] >= 50f)
				{
					ai[1] = 50f;
					if (Main.netMode != 1)
					{
						ai[1] = 0f;
						ai[2] = 1f;
						netUpdate = true;
					}
				}
				float num16 = 100f;
				for (int k = 0; k < 4; k++)
				{
					Vector2 vector2 = base.Center + Main.rand.NextVector2CircularEdge(num16, num16);
					if (!flag2)
					{
						vector2 += new Vector2(0f, 20f);
					}
					Vector2 v = vector2 - base.Center;
					v = v.SafeNormalize(Vector2.Zero) * -8f;
					int num17 = Dust.NewDust(vector2, 2, 2, 31, v.X, v.Y, 40, AI_121_QueenSlime_GetDustColor(), 1.8f);
					Main.dust[num17].position = vector2;
					Main.dust[num17].noGravity = true;
					Main.dust[num17].alpha = 250;
					Main.dust[num17].velocity = v;
					Main.dust[num17].customData = this;
				}
				if (flag2)
				{
					AI_121_QueenSlime_FlyMovement();
				}
				break;
			}
			}
			dontTakeDamage = (hide = flag);
			if (num3 != scale)
			{
				position.X += width / 2;
				position.Y += height;
				scale = num3;
				width = (int)(114f * scale);
				height = (int)(100f * scale);
				position.X -= width / 2;
				position.Y -= height;
			}
			if (life <= 0)
			{
				return;
			}
			if (Main.rand.Next(360) == 0)
			{
				SoundEngine.PlaySound(65, position);
			}
			if (Main.netMode == 1)
			{
				return;
			}
			if (localAI[0] >= (float)(lifeMax / 2) && life < lifeMax / 2)
			{
				localAI[0] = life;
				ai[0] = 0f;
				ai[1] = 0f;
				ai[2] = 0f;
				netUpdate = true;
			}
			int num29 = (int)((float)lifeMax * 0.02f);
			if (flag2)
			{
				num29 = (int)((float)lifeMax * 0.015f);
			}
			if (!((float)(life + num29) < localAI[0]))
			{
				return;
			}
			localAI[0] = life;
			int num30 = Main.rand.Next(1, 3);
			for (int num31 = 0; num31 < num30; num31++)
			{
				int x = (int)(position.X + (float)Main.rand.Next(width - 32));
				int y = (int)(position.Y + (float)Main.rand.Next(height - 32));
				int num32 = 658;
				switch (Main.rand.Next(3))
				{
				case 0:
					num32 = 658;
					break;
				case 1:
					num32 = 659;
					break;
				case 2:
					num32 = 660;
					break;
				}
				int num33 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), x, y, num32);
				Main.npc[num33].SetDefaults(num32);
				Main.npc[num33].velocity.X = (float)Main.rand.Next(-15, 16) * 0.1f;
				Main.npc[num33].velocity.Y = (float)Main.rand.Next(-30, 1) * 0.1f;
				Main.npc[num33].ai[0] = -500 * Main.rand.Next(3);
				Main.npc[num33].ai[1] = 0f;
				if (Main.netMode == 2 && num33 < 200)
				{
					NetMessage.SendData(23, -1, -1, null, num33);
				}
			}
		}

		public bool AI_120_HallowBoss_IsInPhase2()
		{
			if (ai[3] != 1f)
			{
				return ai[3] == 3f;
			}
			return true;
		}

		public bool AI_120_HallowBoss_IsGenuinelyEnraged()
		{
			if (ai[3] != 2f)
			{
				return ai[3] == 3f;
			}
			return true;
		}

		private void AI_120_HallowBoss_DoMagicEffect(Vector2 spot, int effectType, float progress)
		{
			float num = 4f;
			float num2 = 1f;
			float fadeIn = 0f;
			float num3 = 0.5f;
			int num4 = 2;
			int num5 = 267;
			switch (effectType)
			{
			case 1:
				num2 = 0.5f;
				fadeIn = 2f;
				num3 = 0f;
				break;
			case 2:
			case 4:
				num = 50f;
				num2 = 0.5f;
				fadeIn = 0f;
				num3 = 0f;
				num4 = 4;
				break;
			case 3:
				num = 30f;
				num2 = 0.1f;
				fadeIn = 2.5f;
				num3 = 0f;
				break;
			case 5:
				if (progress == 0f)
				{
					num4 = 0;
				}
				else
				{
					num4 = 5;
					num5 = Main.rand.Next(86, 92);
				}
				if (progress >= 1f)
				{
					num4 = 0;
				}
				break;
			}
			for (int i = 0; i < num4; i++)
			{
				Dust dust = Dust.NewDustPerfect(spot, num5, Main.rand.NextVector2CircularEdge(num, num) * (Main.rand.NextFloat() * (1f - num3) + num3), 0, Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f), (Main.rand.NextFloat() * 2f + 2f) * num2);
				dust.fadeIn = fadeIn;
				dust.noGravity = true;
				switch (effectType)
				{
				case 2:
				case 4:
				{
					dust.velocity *= 0.005f;
					dust.scale = 3f * Utils.GetLerpValue(0.7f, 0f, progress, clamped: true) * Utils.GetLerpValue(0f, 0.3f, progress, clamped: true);
					dust.velocity = (MathF.PI * 2f * ((float)i / 4f) + MathF.PI / 4f).ToRotationVector2() * 8f * Utils.GetLerpValue(1f, 0f, progress, clamped: true);
					dust.velocity += velocity * 0.3f;
					float num6 = 0f;
					if (effectType == 4)
					{
						num6 = 0.5f;
					}
					dust.color = Main.hslToRgb(((float)i / 5f + num6 + progress * 0.5f) % 1f, 1f, 0.5f);
					dust.color.A /= 2;
					dust.alpha = 127;
					break;
				}
				case 5:
					if (progress == 0f)
					{
						dust.customData = this;
						dust.scale = 1.5f;
						dust.fadeIn = 0f;
						dust.velocity = new Vector2(0f, -1f) + Main.rand.NextVector2Circular(1f, 1f);
						dust.color = new Color(255, 255, 255, 80) * 0.3f;
					}
					else
					{
						dust.color = Main.hslToRgb(progress * 2f % 1f, 1f, 0.5f);
						dust.alpha = 0;
						dust.scale = 1f;
						dust.fadeIn = 1.3f;
						dust.velocity *= 3f;
						dust.velocity.X *= 0.1f;
						dust.velocity += velocity * 1f;
					}
					break;
				}
			}
		}

		public static bool ShouldEmpressBeEnraged()
		{
			if (Main.remixWorld)
			{
				if (empressRageMode)
				{
					return true;
				}
				int num = -1;
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].type == 636)
					{
						num = i;
						break;
					}
				}
				if (num >= 0 && (double)Main.npc[num].Center.Y < Main.worldSurface * 16.0)
				{
					empressRageMode = true;
					return true;
				}
				empressRageMode = false;
				return false;
			}
			return Main.dayTime;
		}

		private void AI_120_HallowBoss()
		{
			Vector2 vector = new Vector2(-150f, -250f);
			Vector2 vector2 = new Vector2(150f, -250f);
			Vector2 vector3 = new Vector2(0f, -350f);
			Vector2 vector4 = new Vector2(0f, -350f);
			Vector2 vector5 = new Vector2(-80f, -500f);
			float num = 0.5f;
			float num2 = 12f;
			float num3 = 40f;
			float num4 = 6400f;
			int num5 = 40;
			int num6 = 50;
			int num7 = 70;
			int num8 = 45;
			int num9 = 45;
			int num10 = 50;
			bool flag = AI_120_HallowBoss_IsInPhase2();
			bool flag2 = Main.expertMode;
			bool flag3 = flag && flag2;
			bool flag4 = ShouldEmpressBeEnraged();
			if (life == lifeMax && flag4 && !AI_120_HallowBoss_IsGenuinelyEnraged())
			{
				this.ai[3] += 2f;
			}
			bool flag5 = true;
			int num11 = 30;
			int num12 = 30;
			int num13 = 30;
			int num14 = 35;
			int num15 = 65;
			if (flag)
			{
				num6 = 60;
				num8 = 50;
				num9 = 50;
				num10 = 60;
				num7 = 65;
				num11 = 35;
				num12 = 35;
				num13 = 35;
				num14 = 40;
				num15 = 30;
			}
			num6 = GetAttackDamage_ForProjectiles(num6, num11);
			num8 = GetAttackDamage_ForProjectiles(num8, num12);
			num9 = GetAttackDamage_ForProjectiles(num9, num13);
			num10 = GetAttackDamage_ForProjectiles(num10, num14);
			num7 = GetAttackDamage_ForProjectiles(num7, num15);
			if (flag4)
			{
				num6 = 9999;
				num8 = 9999;
				num9 = 9999;
				num10 = 9999;
				num7 = 9999;
				flag2 = true;
			}
			float num16 = (flag2 ? 0.3f : 1f);
			bool flag6 = true;
			int num17 = 0;
			if (flag)
			{
				num17 += 15;
			}
			if (flag2)
			{
				num17 += 5;
			}
			switch ((int)this.ai[0])
			{
			case 0:
				if (this.ai[1] == 0f)
				{
					velocity = new Vector2(0f, 5f);
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + new Vector2(0f, -80f), Vector2.Zero, 874, 0, 0f, Main.myPlayer);
					}
				}
				if (this.ai[1] == 10f)
				{
					SoundEngine.PlaySound(SoundID.Item161, base.Center);
				}
				velocity *= 0.95f;
				if (this.ai[1] > 10f && this.ai[1] < 150f)
				{
					int num67 = 2;
					for (int m = 0; m < num67; m++)
					{
						float num68 = MathHelper.Lerp(1.3f, 0.7f, Opacity) * Utils.GetLerpValue(0f, 120f, this.ai[1], clamped: true);
						Color newColor2 = Main.hslToRgb(this.ai[1] / 180f, 1f, 0.5f);
						int num69 = Dust.NewDust(position, width, height, 267, 0f, 0f, 0, newColor2);
						Main.dust[num69].position = base.Center + Main.rand.NextVector2Circular((float)width * 3f, (float)height * 3f) + new Vector2(0f, -150f);
						Main.dust[num69].velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num69].noGravity = true;
						Main.dust[num69].fadeIn = 0.6f + Main.rand.NextFloat() * 0.7f * num68;
						Main.dust[num69].velocity += Vector2.UnitY * 3f;
						Main.dust[num69].scale = 0.35f;
						if (num69 != 6000)
						{
							Dust dust2 = Dust.CloneDust(num69);
							dust2.scale /= 2f;
							dust2.fadeIn *= 0.85f;
							dust2.color = new Color(255, 255, 255, 255);
						}
					}
				}
				this.ai[1] += 1f;
				flag5 = false;
				flag6 = false;
				Opacity = MathHelper.Clamp(this.ai[1] / 180f, 0f, 1f);
				if (this.ai[1] >= 180f)
				{
					if (flag4 && !AI_120_HallowBoss_IsGenuinelyEnraged())
					{
						this.ai[3] += 2f;
					}
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
					TargetClosest();
				}
				break;
			case 1:
			{
				float num34 = (flag ? 20f : 45f);
				if (Main.getGoodWorld)
				{
					num34 /= 2f;
				}
				if (this.ai[1] <= 10f)
				{
					if (this.ai[1] == 0f)
					{
						TargetClosest();
					}
					NPCAimedTarget targetData4 = GetTargetData();
					if (targetData4.Invalid)
					{
						this.ai[0] = 13f;
						this.ai[1] = 0f;
						this.ai[2] += 1f;
						velocity /= 4f;
						netUpdate = true;
						break;
					}
					Vector2 center = targetData4.Center;
					AI_120_HallowBoss_DashTo(center);
					netUpdate = true;
				}
				if (velocity.Length() > 16f && this.ai[1] > 10f)
				{
					velocity /= 2f;
				}
				velocity *= 0.92f;
				this.ai[1] += 1f;
				if (!(this.ai[1] >= num34))
				{
					break;
				}
				int num35 = (int)this.ai[2];
				int num36 = 2;
				int num37 = 0;
				if (!flag)
				{
					int num38 = num37++;
					int num39 = num37++;
					int num40 = num37++;
					int num41 = num37++;
					int num42 = num37++;
					int num43 = num37++;
					int num44 = num37++;
					int num45 = num37++;
					int num46 = num37++;
					int num47 = num37++;
					if (num35 % num37 == num38)
					{
						num36 = 2;
					}
					if (num35 % num37 == num39)
					{
						num36 = 8;
					}
					if (num35 % num37 == num40)
					{
						num36 = 6;
					}
					if (num35 % num37 == num41)
					{
						num36 = 8;
					}
					if (num35 % num37 == num42)
					{
						num36 = 5;
					}
					if (num35 % num37 == num43)
					{
						num36 = 2;
					}
					if (num35 % num37 == num44)
					{
						num36 = 8;
					}
					if (num35 % num37 == num45)
					{
						num36 = 4;
					}
					if (num35 % num37 == num46)
					{
						num36 = 8;
					}
					if (num35 % num37 == num47)
					{
						num36 = 5;
					}
					if ((float)life / (float)lifeMax <= 0.5f)
					{
						num36 = 10;
					}
				}
				if (flag)
				{
					int num48 = num37++;
					int num49 = num37++;
					int num50 = num37++;
					int num51 = -1;
					if (flag2)
					{
						num51 = num37++;
					}
					int num52 = num37++;
					int num53 = num37++;
					int num54 = num37++;
					int num55 = num37++;
					int num56 = num37++;
					int num57 = num37++;
					if (num35 % num37 == num48)
					{
						num36 = 7;
					}
					if (num35 % num37 == num49)
					{
						num36 = 2;
					}
					if (num35 % num37 == num50)
					{
						num36 = 8;
					}
					if (num35 % num37 == num52)
					{
						num36 = 5;
					}
					if (num35 % num37 == num53)
					{
						num36 = 2;
					}
					if (num35 % num37 == num54)
					{
						num36 = 6;
					}
					if (num35 % num37 == num54)
					{
						num36 = 6;
					}
					if (num35 % num37 == num55)
					{
						num36 = 4;
					}
					if (num35 % num37 == num56)
					{
						num36 = 8;
					}
					if (num35 % num37 == num51)
					{
						num36 = 11;
					}
					if (num35 % num37 == num57)
					{
						num36 = 12;
					}
				}
				TargetClosest();
				NPCAimedTarget targetData5 = GetTargetData();
				bool flag12 = false;
				if (AI_120_HallowBoss_IsGenuinelyEnraged())
				{
					if (!Main.dayTime)
					{
						flag12 = true;
					}
					if (Main.dayTime && Main.time >= 53400.0)
					{
						flag12 = true;
					}
				}
				if (targetData5.Invalid || Distance(targetData5.Center) > num4 || flag12)
				{
					num36 = 13;
				}
				if (num36 == 8 && targetData5.Center.X > base.Center.X)
				{
					num36 = 9;
				}
				if (flag2 && num36 != 5 && num36 != 12)
				{
					velocity = DirectionFrom(targetData5.Center).SafeNormalize(Vector2.Zero).RotatedBy(MathF.PI / 2f * (float)(targetData5.Center.X > base.Center.X).ToDirectionInt()) * 20f;
				}
				this.ai[0] = num36;
				this.ai[1] = 0f;
				this.ai[2] += 1f;
				netUpdate = true;
				break;
			}
			case 2:
			{
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item164, base.Center);
				}
				float num90 = 90f - (float)num17;
				Vector2 vector36 = new Vector2(-55f, -30f);
				NPCAimedTarget targetData11 = GetTargetData();
				Vector2 vector37 = (targetData11.Invalid ? base.Center : targetData11.Center);
				if (Distance(vector37 + vector) > num3)
				{
					SimpleFlyMovement(DirectionTo(vector37 + vector).SafeNormalize(Vector2.Zero) * num2, num);
				}
				if (this.ai[1] < 60f)
				{
					AI_120_HallowBoss_DoMagicEffect(base.Center + vector36, 1, Utils.GetLerpValue(0f, 60f, this.ai[1], clamped: true));
				}
				int num91 = 3;
				if (flag2)
				{
					num91 = 2;
				}
				if ((int)this.ai[1] % num91 == 0 && this.ai[1] < 60f)
				{
					float ai3 = this.ai[1] / 60f;
					Vector2 vector38 = new Vector2(0f, -6f).RotatedBy(MathF.PI / 2f * Main.rand.NextFloatDirection());
					if (flag3)
					{
						vector38 = new Vector2(0f, -10f).RotatedBy(MathF.PI * 2f * Main.rand.NextFloat());
					}
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + vector36, vector38, 873, num8, 0f, Main.myPlayer, target, ai3);
					}
					if (Main.netMode != 1)
					{
						int num92 = (int)(this.ai[1] / (float)num91);
						for (int num93 = 0; num93 < 255; num93++)
						{
							if (Boss_CanShootExtraAt(num93, num92 % 3, 3, 2400f))
							{
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + vector36, vector38, 873, num8, 0f, Main.myPlayer, num93, ai3);
							}
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 60f + num90)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 3:
			{
				this.ai[1] += 1f;
				NPCAimedTarget targetData8 = GetTargetData();
				Vector2 vector23 = (targetData8.Invalid ? base.Center : targetData8.Center);
				if (Distance(vector23 + vector2) > num3)
				{
					SimpleFlyMovement(DirectionTo(vector23 + vector2).SafeNormalize(Vector2.Zero) * num2, num);
				}
				if ((int)this.ai[1] % 180 == 0)
				{
					Vector2 vector24 = new Vector2(0f, -100f);
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), targetData8.Center + vector24, Vector2.Zero, 874, num5, 0f, Main.myPlayer);
				}
				if (this.ai[1] >= 120f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 4:
			{
				float num81 = 20 - num17;
				new Vector2(0f, -100f);
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item162, base.Center);
				}
				if (this.ai[1] >= 6f && this.ai[1] < 54f)
				{
					AI_120_HallowBoss_DoMagicEffect(base.Center + new Vector2(-55f, -20f), 2, Utils.GetLerpValue(0f, 100f, this.ai[1], clamped: true));
					AI_120_HallowBoss_DoMagicEffect(base.Center + new Vector2(55f, -20f), 4, Utils.GetLerpValue(0f, 100f, this.ai[1], clamped: true));
				}
				NPCAimedTarget targetData10 = GetTargetData();
				Vector2 vector29 = (targetData10.Invalid ? base.Center : targetData10.Center);
				if (Distance(vector29 + vector3) > num3)
				{
					SimpleFlyMovement(DirectionTo(vector29 + vector3).SafeNormalize(Vector2.Zero) * num2, num);
				}
				int num82 = 4;
				if (flag2)
				{
					num82 = 5;
				}
				if ((int)this.ai[1] % 4 == 0 && this.ai[1] < 100f)
				{
					int num83 = 1;
					int num84 = 0;
					for (int n = 0; n < num83; n++)
					{
						int num85 = (int)this.ai[1] / 4;
						Vector2 vector30 = Vector2.UnitX.RotatedBy(MathF.PI / (float)(num82 * 2) + (float)num85 * (MathF.PI / (float)num82) + 0f);
						if (!flag2)
						{
							vector30.X += ((vector30.X > 0f) ? 0.5f : (-0.5f));
						}
						vector30.Normalize();
						float num86 = 300f;
						if (flag2)
						{
							num86 = 450f;
						}
						Vector2 center4 = targetData10.Center;
						if (Distance(center4) > 2400f)
						{
							continue;
						}
						if (Vector2.Dot(targetData10.Velocity.SafeNormalize(Vector2.UnitY), vector30) > 0f)
						{
							vector30 *= -1f;
						}
						int num87 = 90;
						Vector2 vector31 = center4 + targetData10.Velocity * num87;
						Vector2 vector32 = center4 + vector30 * num86 - targetData10.Velocity * 30f;
						if (vector32.Distance(center4) < num86)
						{
							Vector2 vector33 = center4 - vector32;
							if (vector33 == Vector2.Zero)
							{
								vector33 = vector30;
							}
							vector32 = center4 - Vector2.Normalize(vector33) * num86;
						}
						Vector2 v3 = vector31 - vector32;
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector32, Vector2.Zero, 919, num6, 0f, Main.myPlayer, v3.ToRotation(), this.ai[1] / 100f);
						}
						if (Main.netMode == 1)
						{
							continue;
						}
						int num88 = (int)(this.ai[1] / 4f);
						for (int num89 = 0; num89 < 255; num89++)
						{
							if (!Boss_CanShootExtraAt(num89, num88 % 3, 3, 2400f))
							{
								continue;
							}
							Player player2 = Main.player[num89];
							center4 = player2.Center;
							if (Vector2.Dot(player2.velocity.SafeNormalize(Vector2.UnitY), vector30) > 0f)
							{
								vector30 *= -1f;
							}
							Vector2 vector34 = center4 + player2.velocity * num87;
							vector32 = center4 + vector30 * num86 - player2.velocity * 30f;
							if (vector32.Distance(center4) < num86)
							{
								Vector2 vector35 = center4 - vector32;
								if (vector35 == Vector2.Zero)
								{
									vector35 = vector30;
								}
								vector32 = center4 - Vector2.Normalize(vector35) * num86;
							}
							v3 = vector34 - vector32;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector32, Vector2.Zero, 919, num6, 0f, Main.myPlayer, v3.ToRotation(), this.ai[1] / 100f);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 100f + num81)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 5:
			{
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item163, base.Center);
				}
				float num63 = 30f;
				num63 -= (float)num17;
				Vector2 vector19 = new Vector2(55f, -30f);
				Vector2 vector20 = base.Center + vector19;
				if (this.ai[1] < 42f)
				{
					AI_120_HallowBoss_DoMagicEffect(base.Center + vector19, 3, Utils.GetLerpValue(0f, 42f, this.ai[1], clamped: true));
				}
				NPCAimedTarget targetData7 = GetTargetData();
				Vector2 vector21 = (targetData7.Invalid ? base.Center : targetData7.Center);
				if (Distance(vector21 + vector4) > num3)
				{
					SimpleFlyMovement(DirectionTo(vector21 + vector4).SafeNormalize(Vector2.Zero) * num2, num);
				}
				if ((int)this.ai[1] % 42 == 0 && this.ai[1] < 42f)
				{
					float num64 = MathF.PI * 2f * Main.rand.NextFloat();
					for (float num65 = 0f; num65 < 1f; num65 += 1f / 13f)
					{
						float num66 = num65;
						Vector2 vector22 = Vector2.UnitY.RotatedBy(MathF.PI / 2f + MathF.PI * 2f * num66 + num64);
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector20 + vector22.RotatedBy(-1.5707963705062866) * 30f, vector22 * 8f, 872, num9, 0f, Main.myPlayer, 0f, num66);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 42f + num63)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 6:
			{
				float num25 = 120 - num17;
				Vector2 vector8 = new Vector2(0f, -100f);
				Vector2 vector9 = base.Center + vector8;
				NPCAimedTarget targetData2 = GetTargetData();
				Vector2 vector10 = (targetData2.Invalid ? base.Center : targetData2.Center);
				if (Distance(vector10 + vector5) > num3)
				{
					SimpleFlyMovement(DirectionTo(vector10 + vector5).SafeNormalize(Vector2.Zero) * num2 * 0.3f, num * 0.7f);
				}
				if ((int)this.ai[1] % 60 == 0 && this.ai[1] < 180f)
				{
					int num26 = (int)this.ai[1] / 60;
					int num27 = ((targetData2.Center.X > base.Center.X) ? 1 : 0);
					float num28 = 6f;
					if (flag2)
					{
						num28 = 8f;
					}
					float num29 = 1f / num28;
					for (float num30 = 0f; num30 < 1f; num30 += num29)
					{
						float num31 = (num30 + num29 * 0.5f + (float)num26 * num29 * 0.5f) % 1f;
						float ai = MathF.PI * 2f * (num31 + (float)num27);
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector9, Vector2.Zero, 923, num10, 0f, Main.myPlayer, ai, whoAmI);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 180f + num25)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 7:
			{
				float num70 = 20f;
				float num71 = 60f;
				float num72 = num71 * 4f;
				if (flag2)
				{
					num70 = 40f;
					num71 = 40f;
					num72 = num71 * 6f;
				}
				num70 -= (float)num17;
				NPCAimedTarget targetData9 = GetTargetData();
				Vector2 vector25 = (targetData9.Invalid ? base.Center : targetData9.Center);
				if (Distance(vector25 + vector4) > num3)
				{
					SimpleFlyMovement(DirectionTo(vector25 + vector4).SafeNormalize(Vector2.Zero) * num2 * 0.4f, num);
				}
				if ((float)(int)this.ai[1] % num71 == 0f && this.ai[1] < num72)
				{
					SoundEngine.PlaySound(SoundID.Item162, base.Center);
					Main.rand.NextFloat();
					int num73 = (int)this.ai[1] / (int)num71;
					float num74 = 13f;
					float num75 = 150f;
					float num76 = num74 * num75;
					Vector2 center3 = targetData9.Center;
					if (Distance(center3) <= 3200f)
					{
						Vector2 vector26 = Vector2.Zero;
						Vector2 vector27 = Vector2.UnitY;
						float num77 = 0.4f;
						float num78 = 1.4f;
						float num79 = 1f;
						if (flag2)
						{
							num74 += 5f;
							num75 += 50f;
							num79 *= 1f;
							num76 *= 0.5f;
						}
						switch (num73)
						{
						case 0:
							center3 += new Vector2((0f - num76) / 2f, 0f) * num79;
							vector26 = new Vector2(0f, num76);
							vector27 = Vector2.UnitX;
							break;
						case 1:
							center3 += new Vector2(num76 / 2f, num75 / 2f) * num79;
							vector26 = new Vector2(0f, num76);
							vector27 = -Vector2.UnitX;
							break;
						case 2:
							center3 += new Vector2(0f - num76, 0f - num76) * num77 * num79;
							vector26 = new Vector2(num76 * num78, 0f);
							vector27 = new Vector2(1f, 1f);
							break;
						case 3:
							center3 += new Vector2(num76 * num77 + num75 / 2f, (0f - num76) * num77) * num79;
							vector26 = new Vector2((0f - num76) * num78, 0f);
							vector27 = new Vector2(-1f, 1f);
							break;
						case 4:
							center3 += new Vector2(0f - num76, num76) * num77 * num79;
							vector26 = new Vector2(num76 * num78, 0f);
							vector27 = center3.DirectionTo(targetData9.Center);
							break;
						case 5:
							center3 += new Vector2(num76 * num77 + num75 / 2f, num76 * num77) * num79;
							vector26 = new Vector2((0f - num76) * num78, 0f);
							vector27 = center3.DirectionTo(targetData9.Center);
							break;
						}
						for (float num80 = 0f; num80 <= 1f; num80 += 1f / num74)
						{
							Vector2 origin = center3 + vector26 * (num80 - 0.5f);
							Vector2 v2 = vector27;
							if (flag2)
							{
								Vector2 vector28 = targetData9.Velocity * 20f * num80;
								Vector2 value2 = origin.DirectionTo(targetData9.Center + vector28);
								v2 = Vector2.Lerp(vector27, value2, 0.75f).SafeNormalize(Vector2.UnitY);
							}
							float ai2 = num80;
							if (Main.netMode != 1)
							{
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), origin, Vector2.Zero, 919, num7, 0f, Main.myPlayer, v2.ToRotation(), ai2);
							}
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= num72 + num70)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 8:
			case 9:
			{
				float num32 = 20 - num17;
				Vector2 vector11 = new Vector2(0f, -100f);
				_ = base.Center + vector11;
				flag6 = !(this.ai[1] >= 6f) || !(this.ai[1] <= 40f);
				int num33 = ((this.ai[0] != 8f) ? 1 : (-1));
				AI_120_HallowBoss_DoMagicEffect(base.Center, 5, Utils.GetLerpValue(40f, 90f, this.ai[1], clamped: true));
				if (this.ai[1] <= 40f)
				{
					if (this.ai[1] == 20f)
					{
						SoundEngine.PlaySound(SoundID.Item160, base.Center);
					}
					NPCAimedTarget targetData3 = GetTargetData();
					Vector2 destination = (targetData3.Invalid ? base.Center : targetData3.Center) + new Vector2(num33 * -550, 0f);
					SimpleFlyMovement(DirectionTo(destination).SafeNormalize(Vector2.Zero) * num2, num * 2f);
					if (this.ai[1] == 40f)
					{
						velocity *= 0.3f;
					}
				}
				else if (this.ai[1] <= 90f)
				{
					velocity = Vector2.Lerp(value2: new Vector2(num33 * 50, 0f), value1: velocity, amount: 0.05f);
					if (this.ai[1] == 90f)
					{
						velocity *= 0.7f;
					}
					num16 *= 1.5f;
				}
				else
				{
					velocity *= 0.92f;
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 90f + num32)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 10:
			{
				float num94 = 20 - num17;
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item161, base.Center);
				}
				flag6 = !(this.ai[1] >= 30f) || !(this.ai[1] <= 170f);
				velocity *= 0.95f;
				if (this.ai[1] == 90f)
				{
					if (this.ai[3] == 0f)
					{
						this.ai[3] = 1f;
					}
					if (this.ai[3] == 2f)
					{
						this.ai[3] = 3f;
					}
					base.Center = GetTargetData().Center + new Vector2(0f, -250f);
					netUpdate = true;
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 180f + num94)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 11:
			{
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item162, base.Center);
				}
				float num58 = 20 - num17;
				new Vector2(0f, -100f);
				if (this.ai[1] >= 6f && this.ai[1] < 54f)
				{
					AI_120_HallowBoss_DoMagicEffect(base.Center + new Vector2(-55f, -20f), 2, Utils.GetLerpValue(0f, 100f, this.ai[1], clamped: true));
					AI_120_HallowBoss_DoMagicEffect(base.Center + new Vector2(55f, -20f), 4, Utils.GetLerpValue(0f, 100f, this.ai[1], clamped: true));
				}
				NPCAimedTarget targetData6 = GetTargetData();
				Vector2 vector12 = (targetData6.Invalid ? base.Center : targetData6.Center);
				if (Distance(vector12 + vector3) > num3)
				{
					SimpleFlyMovement(DirectionTo(vector12 + vector3).SafeNormalize(Vector2.Zero) * num2, num);
				}
				if ((int)this.ai[1] % 3 == 0 && this.ai[1] < 100f)
				{
					int num59 = 1;
					for (int k = 0; k < num59; k++)
					{
						Vector2 vector13 = -targetData6.Velocity;
						vector13.SafeNormalize(-Vector2.UnitY);
						float num60 = 100f;
						Vector2 center2 = targetData6.Center;
						if (Distance(center2) > 2400f)
						{
							continue;
						}
						int num61 = 90;
						Vector2 vector14 = center2 + targetData6.Velocity * num61;
						Vector2 vector15 = center2 + vector13 * num60;
						if (vector15.Distance(center2) < num60)
						{
							Vector2 vector16 = center2 - vector15;
							if (vector16 == Vector2.Zero)
							{
								vector16 = vector13;
							}
							vector15 = center2 - Vector2.Normalize(vector16) * num60;
						}
						Vector2 v = vector14 - vector15;
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector15, Vector2.Zero, 919, num6, 0f, Main.myPlayer, v.ToRotation(), this.ai[1] / 100f);
						}
						if (Main.netMode == 1)
						{
							continue;
						}
						int num62 = (int)(this.ai[1] / 3f);
						for (int l = 0; l < 255; l++)
						{
							if (!Boss_CanShootExtraAt(l, num62 % 3, 3, 2400f))
							{
								continue;
							}
							Player player = Main.player[l];
							vector13 = -player.velocity;
							vector13.SafeNormalize(-Vector2.UnitY);
							num60 = 100f;
							center2 = player.Center;
							num61 = 90;
							Vector2 vector17 = center2 + player.velocity * num61;
							vector15 = center2 + vector13 * num60;
							if (vector15.Distance(center2) < num60)
							{
								Vector2 vector18 = center2 - vector15;
								if (vector18 == Vector2.Zero)
								{
									vector18 = vector13;
								}
								vector15 = center2 - Vector2.Normalize(vector18) * num60;
							}
							v = vector17 - vector15;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector15, Vector2.Zero, 919, num6, 0f, Main.myPlayer, v.ToRotation(), this.ai[1] / 100f);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 100f + num58)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 12:
			{
				float num21 = 90f - (float)num17;
				Vector2 vector6 = new Vector2(-55f, -30f);
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item165, base.Center);
					velocity = new Vector2(0f, -12f);
				}
				velocity *= 0.95f;
				bool flag11 = this.ai[1] < 60f && this.ai[1] >= 10f;
				if (flag11)
				{
					AI_120_HallowBoss_DoMagicEffect(base.Center + vector6, 1, Utils.GetLerpValue(0f, 60f, this.ai[1], clamped: true));
				}
				int num22 = 6;
				if (flag2)
				{
					num22 = 4;
				}
				float num23 = (this.ai[1] - 10f) / 50f;
				if ((int)this.ai[1] % num22 == 0 && flag11)
				{
					_ = this.ai[1] / 60f;
					Vector2 vector7 = (vector7 = new Vector2(0f, -20f).RotatedBy(MathF.PI * 2f * num23));
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + vector6, vector7, 873, num8, 0f, Main.myPlayer, target, num23);
					}
					if (Main.netMode != 1)
					{
						int num24 = (int)(this.ai[1] % (float)num22);
						for (int j = 0; j < 255; j++)
						{
							if (Boss_CanShootExtraAt(j, num24 % 3, 3, 2400f))
							{
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + vector6, vector7, 873, num8, 0f, Main.myPlayer, j, num23);
							}
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 60f + num21)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 13:
			{
				new Vector2(-55f, -30f);
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item165, base.Center);
					velocity = new Vector2(0f, -7f);
				}
				velocity *= 0.95f;
				TargetClosest();
				NPCAimedTarget targetData = GetTargetData();
				flag5 = false;
				bool flag7 = false;
				bool flag8 = false;
				if (!flag7)
				{
					if (AI_120_HallowBoss_IsGenuinelyEnraged())
					{
						if (!Main.dayTime)
						{
							flag8 = true;
						}
						if (Main.dayTime && Main.time >= 53400.0)
						{
							flag8 = true;
						}
					}
					flag7 = flag7 || flag8;
				}
				if (!flag7)
				{
					bool flag9 = targetData.Invalid || Distance(targetData.Center) > num4;
					flag7 = flag7 || flag9;
				}
				alpha = Utils.Clamp(alpha + flag7.ToDirectionInt() * 5, 0, 255);
				bool flag10 = alpha == 0 || alpha == 255;
				int num18 = 5;
				for (int i = 0; i < num18; i++)
				{
					float num19 = MathHelper.Lerp(1.3f, 0.7f, Opacity);
					Color newColor = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
					int num20 = Dust.NewDust(position - base.Size * 0.5f, width * 2, height * 2, 267, 0f, 0f, 0, newColor);
					Main.dust[num20].position = base.Center + Main.rand.NextVector2Circular(width, height);
					Main.dust[num20].velocity *= Main.rand.NextFloat() * 0.8f;
					Main.dust[num20].noGravity = true;
					Main.dust[num20].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
					Main.dust[num20].fadeIn = 0.4f + Main.rand.NextFloat() * 1.2f * num19;
					Main.dust[num20].velocity += Vector2.UnitY * -2f;
					Main.dust[num20].scale = 0.35f;
					if (num20 != 6000)
					{
						Dust dust = Dust.CloneDust(num20);
						dust.scale /= 2f;
						dust.fadeIn *= 0.85f;
						dust.color = new Color(255, 255, 255, 255);
					}
				}
				this.ai[1] += 1f;
				if (!(this.ai[1] >= 20f && flag10))
				{
					break;
				}
				if (alpha == 255)
				{
					active = false;
					if (Main.netMode != 1)
					{
						NetMessage.SendData(23, -1, -1, null, whoAmI);
					}
					return;
				}
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
				break;
			}
			}
			dontTakeDamage = !flag6;
			damage = GetAttackDamage_ScaledByStrength((float)defDamage * num16);
			if (flag4)
			{
				damage = 9999;
			}
			if (flag)
			{
				defense = (int)((float)defDefense * 1.2f);
			}
			else
			{
				defense = defDefense;
			}
			if ((localAI[0] += 1f) >= 44f)
			{
				localAI[0] = 0f;
			}
			if (flag5)
			{
				alpha = Utils.Clamp(alpha - 5, 0, 255);
			}
			Lighting.AddLight(base.Center, Vector3.One * Opacity);
		}

		private void AI_120_HallowBoss_DashTo(Vector2 targetPosition)
		{
			DirectionTo(targetPosition);
			targetPosition += new Vector2(0f, -300f);
			if (Distance(targetPosition) > 200f)
			{
				targetPosition -= DirectionTo(targetPosition) * 100f;
			}
			Vector2 vector = targetPosition - base.Center;
			float lerpValue = Utils.GetLerpValue(100f, 600f, vector.Length(), clamped: true);
			float num = vector.Length();
			if (num > 18f)
			{
				num = 18f;
			}
			velocity = Vector2.Lerp(vector.SafeNormalize(Vector2.Zero) * num, vector / 6f, lerpValue);
		}

		public bool Boss_CanShootExtraAt(int playerIndex, int rotationIndexToAttack, int rotationSize, float attackScanDistance, bool alwaysSkipMainTarget = true)
		{
			if (playerIndex == target && alwaysSkipMainTarget)
			{
				return false;
			}
			if (playerIndex % rotationSize != rotationIndexToAttack)
			{
				return false;
			}
			Player player = Main.player[playerIndex];
			if (!player.active || player.dead || !playerInteraction[playerIndex])
			{
				return false;
			}
			if (Distance(player.Center) > attackScanDistance)
			{
				return false;
			}
			return true;
		}

		private void AI_119_Dandelion()
		{
			if (!Main.IsItAHappyWindyDay && timeLeft > 10)
			{
				timeLeft = 10;
			}
			bool flag = false;
			float num = 0f;
			float num2 = 0f;
			NPCUtils.TargetClosestDownwindFromNPC(this, 600f);
			NPCAimedTarget targetData = GetTargetData();
			if (targetData.Type == NPCTargetType.Player)
			{
				Rectangle hitbox = targetData.Hitbox;
				float windSpeedCurrent = Main.windSpeedCurrent;
				num = (float)hitbox.Center.X - base.Center.X;
				num2 = Math.Abs(num);
				flag = Math.Abs((float)hitbox.Center.Y - base.Center.Y) < 100f && num2 < 600f && ((num > 0f && windSpeedCurrent > 0f) || (num < 0f && windSpeedCurrent < 0f));
			}
			if (ai[0] == 1f)
			{
				localAI[0] = 0f;
				if (num2 < 500f)
				{
					localAI[0] = 1f;
				}
				if (Main.netMode == 1)
				{
					return;
				}
				if (!flag)
				{
					ai[0] = 0f;
					netUpdate = true;
				}
				else
				{
					if (localAI[0] != 1f)
					{
						return;
					}
					localAI[1] += 1f;
					if (localAI[1] > 80f)
					{
						ai[0] = 0f;
						netUpdate = true;
					}
					else
					{
						if (localAI[1] != 40f)
						{
							return;
						}
						for (int i = 0; i < 1 + Main.rand.Next(3); i++)
						{
							int num3 = -1;
							if (num > 0f)
							{
								num3 = 1;
							}
							Vector2 vector = new Vector2(num3 * Main.rand.Next(-2, 10), 10 + Main.rand.Next(-6, 6));
							Vector2 vector2 = new Vector2(2f * (float)num3, -2f);
							vector2 += vector * 0.25f;
							if (vector2.Y > -3f)
							{
								vector2.Y = -3f;
							}
							Vector2 vector3 = base.Center + vector;
							vector3.X += num3 * 6;
							int num4 = 7;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector3, vector2, 836, num4, 1f, Main.myPlayer, 0f, target);
						}
						netUpdate = true;
					}
				}
			}
			else if (ai[0] == 0f)
			{
				localAI[0] = 0f;
				localAI[1] = 0f;
				if (Main.netMode != 1 && flag)
				{
					ai[0] = 1f;
					netUpdate = true;
				}
			}
		}

		private void AI_118_Seahorses()
		{
			noGravity = wet;
			Collision.GetWaterLineIterate(base.Center.ToTileCoordinates(), out var waterLineHeight);
			bool flag = waterLineHeight > 0f && base.Top.Y - waterLineHeight < 20f;
			if (!wet)
			{
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.95f;
				}
				rotation += (velocity.X + velocity.Y) / 2f * 0.05f;
			}
			else
			{
				ai[1] -= 1f;
				if (ai[1] <= 0f)
				{
					velocity += ai[0].ToRotationVector2() * 0.06f;
					float num = velocity.Length();
					if (num > 3f || num < -3f)
					{
						velocity.X = Math.Min(3f, Math.Max(-3f, velocity.X));
						ai[1] = Main.rand.Next(450, 600);
						ai[0] = Main.rand.NextFloat() * (MathF.PI * 2f);
						if (flag && ai[0] > MathF.PI)
						{
							ai[0] -= MathF.PI;
						}
						netUpdate = true;
					}
				}
				else
				{
					velocity *= 0.95f;
				}
				rotation = velocity.X * 0.1f;
			}
			bool flag2 = collideY && wet && (!flag || velocity.Y < 0f);
			if (collideX || flag2)
			{
				Vector2 v = ai[0].ToRotationVector2();
				if (collideX)
				{
					v.X *= -1f;
				}
				if (flag2)
				{
					v.Y *= -1f;
				}
				ai[0] = v.ToRotation();
				velocity = ai[0].ToRotationVector2() * velocity.Length();
				netUpdate = true;
			}
		}

		private void AI_117_BloodNautilus()
		{
			float moveSpeed = 0.15f;
			float num = 7.5f;
			float num2 = 60f;
			float num3 = 90f;
			float num4 = 180f;
			float num5 = 90f;
			float num6 = 90f;
			int num7 = 3;
			float num8 = 180f;
			bool flag = false;
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				alpha = 255;
				if (Main.netMode != 1)
				{
					ai[0] = -1f;
					netUpdate = true;
				}
			}
			if (ai[0] != -1f && Main.rand.Next(4) == 0)
			{
				position += netOffset;
				Dust dust = Dust.NewDustDirect(position + new Vector2(5f), width - 10, height - 10, 5);
				dust.velocity *= 0.5f;
				if (dust.velocity.Y < 0f)
				{
					dust.velocity.Y *= -1f;
				}
				dust.alpha = 120;
				dust.scale = 1f + Main.rand.NextFloat() * 0.4f;
				dust.velocity += velocity * 0.3f;
				position -= netOffset;
			}
			if (target == 255)
			{
				TargetClosest();
				ai[2] = direction;
			}
			if (Main.player[target].dead || Vector2.Distance(Main.player[target].Center, base.Center) > 2000f)
			{
				TargetClosest();
			}
			NPCAimedTarget nPCAimedTarget = GetTargetData();
			if (Main.dayTime || !Main.bloodMoon)
			{
				nPCAimedTarget = default(NPCAimedTarget);
			}
			int num9 = -1;
			switch ((int)ai[0])
			{
			case -1:
			{
				velocity *= 0.98f;
				int num17 = Math.Sign(nPCAimedTarget.Center.X - base.Center.X);
				if (num17 != 0)
				{
					direction = num17;
					spriteDirection = -direction;
				}
				if (localAI[1] == 0f && alpha < 100)
				{
					localAI[1] = 1f;
					int num18 = 36;
					for (int l = 0; l < num18; l++)
					{
						position += netOffset;
						Vector2 vector3 = (Vector2.Normalize(velocity) * new Vector2((float)width / 2f, height) * 0.75f * 0.5f).RotatedBy((float)(l - (num18 / 2 - 1)) * (MathF.PI * 2f) / (float)num18) + base.Center;
						Vector2 vector4 = vector3 - base.Center;
						int num19 = Dust.NewDust(vector3 + vector4, 0, 0, 5, vector4.X * 2f, vector4.Y * 2f, 100, default(Color), 1.4f);
						Main.dust[num19].noGravity = true;
						Main.dust[num19].velocity = Vector2.Normalize(vector4) * 3f;
						position -= netOffset;
					}
				}
				if (ai[2] > 5f)
				{
					velocity.Y = -2.5f;
					alpha -= 10;
					if (Collision.SolidCollision(position, width, height))
					{
						alpha += 15;
						if (alpha > 150)
						{
							alpha = 150;
						}
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				ai[2] += 1f;
				if (ai[2] >= 50f)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 0:
			{
				Vector2 destination = nPCAimedTarget.Center + new Vector2((0f - ai[2]) * 300f, -200f);
				if (base.Center.Distance(destination) > 50f)
				{
					Vector2 desiredVelocity = DirectionTo(destination) * num;
					SimpleFlyMovement(desiredVelocity, moveSpeed);
				}
				direction = ((base.Center.X < nPCAimedTarget.Center.X) ? 1 : (-1));
				float num15 = base.Center.DirectionTo(nPCAimedTarget.Center).ToRotation() - 0.47123894f * (float)spriteDirection;
				if (spriteDirection == -1)
				{
					num15 += MathF.PI;
				}
				if (spriteDirection != direction)
				{
					spriteDirection = direction;
					rotation = 0f - rotation;
					num15 = 0f - num15;
				}
				rotation = rotation.AngleTowards(num15, 0.02f);
				ai[1] += 1f;
				if (ai[1] > num2)
				{
					num9 = 1;
					int num16 = (int)ai[3];
					if (num16 % 7 == 3)
					{
						num9 = 3;
					}
					else if (num16 % 2 == 0)
					{
						SoundEngine.PlaySound(SoundID.Item170, base.Center);
						num9 = 2;
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item170, base.Center);
						num9 = 1;
					}
				}
				break;
			}
			case 1:
			{
				direction = ((!(base.Center.X < nPCAimedTarget.Center.X)) ? 1 : (-1));
				float num20 = base.Center.DirectionFrom(nPCAimedTarget.Center).ToRotation() - 0.47123894f * (float)spriteDirection;
				if (spriteDirection == -1)
				{
					num20 += MathF.PI;
				}
				bool flag2 = ai[1] < num3;
				if (spriteDirection != direction && flag2)
				{
					spriteDirection = direction;
					rotation = 0f - rotation;
					num20 = 0f - num20;
				}
				if (ai[1] < num3)
				{
					if (ai[1] == num3 - 1f)
					{
						SoundEngine.PlaySound(SoundID.Item172, base.Center);
					}
					flag = true;
					velocity *= 0.95f;
					rotation = rotation.AngleLerp(num20, 0.02f);
					position += netOffset;
					BloodNautilus_GetMouthPositionAndRotation(out var mouthPosition4, out var mouthDirection4);
					Dust dust6 = Dust.NewDustDirect(mouthPosition4 + mouthDirection4 * 60f - new Vector2(40f), 80, 80, 16, 0f, 0f, 150, Color.Transparent, 0.6f);
					dust6.fadeIn = 1f;
					dust6.velocity = dust6.position.DirectionTo(mouthPosition4 + Main.rand.NextVector2Circular(15f, 15f)) * dust6.velocity.Length();
					dust6.noGravity = true;
					dust6 = Dust.NewDustDirect(mouthPosition4 + mouthDirection4 * 100f - new Vector2(30f), 60, 60, 16, 0f, 0f, 100, Color.Transparent, 0.9f);
					dust6.fadeIn = 1.5f;
					dust6.velocity = dust6.position.DirectionTo(mouthPosition4 + Main.rand.NextVector2Circular(15f, 15f)) * (dust6.velocity.Length() + 5f);
					dust6.noGravity = true;
					position -= netOffset;
				}
				else if (ai[1] < num3 + num4)
				{
					position += netOffset;
					rotation = rotation.AngleLerp(num20, 0.05f);
					BloodNautilus_GetMouthPositionAndRotation(out var mouthPosition5, out var mouthDirection5);
					if (base.Center.Distance(nPCAimedTarget.Center) > 150f)
					{
						velocity = mouthDirection5 * -16f + base.Center.DirectionTo(nPCAimedTarget.Center) * 1.5f;
					}
					for (int m = 0; m < 4; m++)
					{
						Dust dust7 = Dust.NewDustDirect(mouthPosition5 + mouthDirection5 * 60f - new Vector2(15f), 30, 30, 5, 0f, 0f, 0, Color.Transparent, 1.5f);
						dust7.velocity = dust7.position.DirectionFrom(mouthPosition5 + Main.rand.NextVector2Circular(5f, 5f)) * dust7.velocity.Length();
						dust7.position -= mouthDirection5 * 60f;
						dust7 = Dust.NewDustDirect(mouthPosition5 + mouthDirection5 * 100f - new Vector2(20f), 40, 40, 5, 0f, 0f, 100, Color.Transparent, 1.5f);
						dust7.velocity = dust7.position.DirectionFrom(mouthPosition5 + Main.rand.NextVector2Circular(10f, 10f)) * (dust7.velocity.Length() + 5f);
						dust7.position -= mouthDirection5 * 100f;
					}
					position -= netOffset;
				}
				ai[1] += 1f;
				if (ai[1] >= num3 + num4)
				{
					num9 = 0;
				}
				break;
			}
			case 2:
			{
				direction = ((base.Center.X < nPCAimedTarget.Center.X) ? 1 : (-1));
				float num12 = base.Center.DirectionTo(nPCAimedTarget.Center).ToRotation() - 0.47123894f * (float)spriteDirection;
				if (spriteDirection == -1)
				{
					num12 += MathF.PI;
				}
				if (spriteDirection != direction)
				{
					spriteDirection = direction;
					rotation = 0f - rotation;
					num12 = 0f - num12;
				}
				rotation = rotation.AngleLerp(num12, 0.2f);
				if (ai[1] < num5)
				{
					position += netOffset;
					velocity *= 0.95f;
					BloodNautilus_GetMouthPositionAndRotation(out var mouthPosition2, out var mouthDirection2);
					if (Main.rand.Next(4) != 0)
					{
						Dust dust3 = Dust.NewDustDirect(mouthPosition2 + mouthDirection2 * 60f - new Vector2(60f), 120, 120, 16, 0f, 0f, 150, Color.Transparent, 0.6f);
						dust3.fadeIn = 1f;
						dust3.velocity = dust3.position.DirectionTo(mouthPosition2 + Main.rand.NextVector2Circular(15f, 15f)) * (dust3.velocity.Length() + 3f);
						dust3.noGravity = true;
						dust3 = Dust.NewDustDirect(mouthPosition2 + mouthDirection2 * 100f - new Vector2(80f), 160, 160, 16, 0f, 0f, 100, Color.Transparent, 0.9f);
						dust3.fadeIn = 1.5f;
						dust3.velocity = dust3.position.DirectionTo(mouthPosition2 + Main.rand.NextVector2Circular(15f, 15f)) * (dust3.velocity.Length() + 5f);
						dust3.noGravity = true;
					}
					position -= netOffset;
				}
				else if (ai[1] < num5 + num6)
				{
					position += netOffset;
					velocity *= 0.9f;
					float num13 = (ai[1] - num5) % (num6 / (float)num7);
					BloodNautilus_GetMouthPositionAndRotation(out var mouthPosition3, out var mouthDirection3);
					if (num13 < num6 / (float)num7 * 0.8f)
					{
						for (int i = 0; i < 5; i++)
						{
							Dust dust4 = Dust.NewDustDirect(mouthPosition3 + mouthDirection3 * 50f - new Vector2(15f), 30, 30, 5, 0f, 0f, 0, Color.Transparent, 1.5f);
							dust4.velocity = dust4.position.DirectionFrom(mouthPosition3 + Main.rand.NextVector2Circular(5f, 5f)) * dust4.velocity.Length();
							dust4.position -= mouthDirection3 * 60f;
							dust4 = Dust.NewDustDirect(mouthPosition3 + mouthDirection3 * 90f - new Vector2(20f), 40, 40, 5, 0f, 0f, 100, Color.Transparent, 1.5f);
							dust4.velocity = dust4.position.DirectionFrom(mouthPosition3 + Main.rand.NextVector2Circular(10f, 10f)) * (dust4.velocity.Length() + 5f);
							dust4.position -= mouthDirection3 * 100f;
						}
					}
					if ((int)num13 == 0)
					{
						velocity += mouthDirection3 * -8f;
						for (int j = 0; j < 20; j++)
						{
							Dust dust5 = Dust.NewDustDirect(mouthPosition3 + mouthDirection3 * 60f - new Vector2(15f), 30, 30, 5, 0f, 0f, 0, Color.Transparent, 1.5f);
							dust5.velocity = dust5.position.DirectionFrom(mouthPosition3 + Main.rand.NextVector2Circular(5f, 5f)) * dust5.velocity.Length();
							dust5.position -= mouthDirection3 * 60f;
							dust5 = Dust.NewDustDirect(mouthPosition3 + mouthDirection3 * 100f - new Vector2(20f), 40, 40, 5, 0f, 0f, 100, Color.Transparent, 1.5f);
							dust5.velocity = dust5.position.DirectionFrom(mouthPosition3 + Main.rand.NextVector2Circular(10f, 10f)) * (dust5.velocity.Length() + 5f);
							dust5.position -= mouthDirection3 * 100f;
						}
						if (Main.netMode != 1)
						{
							int num14 = Main.rand.Next(5, 11);
							Vector2 vector = mouthDirection3 * 10f;
							int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(30f, 25f);
							for (int k = 0; k < num14; k++)
							{
								Vector2 vector2 = vector + Main.rand.NextVector2Square(-6f, 6f);
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), mouthPosition3 - mouthDirection3 * 5f, vector2, 814, attackDamage_ForProjectiles, 0f, Main.myPlayer);
							}
						}
					}
					position -= netOffset;
				}
				ai[1] += 1f;
				if (ai[1] >= num5 + num6)
				{
					num9 = 0;
				}
				break;
			}
			case 3:
			{
				direction = ((base.Center.X < nPCAimedTarget.Center.X) ? 1 : (-1));
				float targetAngle = 0f;
				spriteDirection = direction;
				if (ai[1] < num8)
				{
					position += netOffset;
					float num10 = MathHelper.Clamp(1f - ai[1] / num8 * 1.5f, 0f, 1f);
					velocity = Vector2.Lerp(value2: new Vector2(0f, num10 * -1.5f), value1: velocity, amount: 0.03f);
					velocity = Vector2.Zero;
					rotation = rotation.AngleLerp(targetAngle, 0.02f);
					BloodNautilus_GetMouthPositionAndRotation(out var _, out var _);
					float t = ai[1] / num8;
					float num11 = Utils.GetLerpValue(0f, 0.5f, t) * Utils.GetLerpValue(1f, 0.5f, t);
					Lighting.AddLight(base.Center, new Vector3(1f, 0.5f, 0.5f) * num11);
					if (Main.rand.Next(3) != 0)
					{
						Dust dust2 = Dust.NewDustDirect(base.Center - new Vector2(6f), 12, 12, 5, 0f, 0f, 60, Color.Transparent, 1.4f);
						dust2.position += new Vector2(spriteDirection * 12, 12f);
						dust2.velocity *= 0.1f;
					}
					position -= netOffset;
				}
				if (ai[1] == 10f || ai[1] == 20f || ai[1] == 30f)
				{
					BloodNautilus_CallForHelp();
				}
				ai[1] += 1f;
				if (ai[1] >= num8)
				{
					num9 = 0;
				}
				break;
			}
			}
			if (num9 != -1)
			{
				ai[0] = num9;
				ai[1] = 0f;
				ai[2] = 0f;
				netUpdate = true;
				TargetClosest();
				if (num9 == 0)
				{
					ai[2] = direction;
				}
				else
				{
					ai[3] += 1f;
				}
			}
			reflectsProjectiles = flag;
		}

		private void BloodNautilus_CallForHelp()
		{
			if (Main.netMode == 1 || !Main.player[target].active || Main.player[target].dead || Distance(Main.player[target].Center) > 2000f || CountNPCS(619) >= 3)
			{
				return;
			}
			Point point = base.Center.ToTileCoordinates();
			Point point2 = point;
			int num = 20;
			int num2 = 3;
			int num3 = 8;
			int num4 = 2;
			int num5 = 0;
			bool flag = false;
			while (!flag && num5 < 100)
			{
				num5++;
				int num6 = Main.rand.Next(point2.X - num, point2.X + num + 1);
				int num7 = Main.rand.Next(point2.Y - num, point2.Y + num + 1);
				if ((num7 < point2.Y - num3 || num7 > point2.Y + num3 || num6 < point2.X - num3 || num6 > point2.X + num3) && (num7 < point.Y - num2 || num7 > point.Y + num2 || num6 < point.X - num2 || num6 > point.X + num2) && !Main.tile[num6, num7].nactive())
				{
					bool flag2 = true;
					if (flag2 && Main.tile[num6, num7].lava())
					{
						flag2 = false;
					}
					if (flag2 && Collision.SolidTiles(num6 - num4, num6 + num4, num7 - num4, num7 + num4))
					{
						flag2 = false;
					}
					if (flag2 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						flag2 = false;
					}
					if (flag2)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), num6 * 16 + 8, num7 * 16 + 8, 0f, 0f, 813, 0, 0f, Main.myPlayer);
						flag = true;
						break;
					}
				}
			}
		}

		private void AI_116_WaterStriders()
		{
			bool flag = false;
			if (Collision.GetWaterLine(base.Center.ToTileCoordinates(), out var waterLineHeight))
			{
				float num = base.Bottom.Y - 1f;
				if (base.Center.Y > waterLineHeight)
				{
					velocity.Y -= 0.8f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
					if (num + velocity.Y < waterLineHeight)
					{
						velocity.Y = waterLineHeight - num;
					}
				}
				else
				{
					velocity.Y = MathHelper.Min(velocity.Y, waterLineHeight - num);
					flag = true;
				}
			}
			else if (wet)
			{
				velocity.Y -= 0.2f;
			}
			if ((int)ai[0] != 0)
			{
				return;
			}
			ai[1] += 1f;
			velocity.X *= 0.9f;
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.6f;
			}
			bool flag2 = wet || flag;
			bool flag3 = flag2 || velocity.Y == 0f;
			int num2 = Main.rand.Next(120, 241);
			if (!flag2)
			{
				num2 = Main.rand.Next(60, 241);
			}
			if (!flag3 || !(ai[1] >= (float)num2))
			{
				return;
			}
			ai[1] = 0f;
			velocity.X = Main.rand.NextFloatDirection() * 5f;
			netUpdate = true;
			if (!flag2)
			{
				if (velocity.Y == 0f)
				{
					velocity.Y = -2f;
				}
				ai[1] = 60f;
			}
		}

		private void AI_115_LadyBugs()
		{
			if (Main.netMode != 1)
			{
				if (ai[1] == 0f)
				{
					ai[1] = Main.rand.NextFloat() * 0.2f + 0.7f;
					netUpdate = true;
				}
				if ((localAI[0] -= 1f) <= 0f)
				{
					localAI[0] = Main.rand.Next(60, 181);
					if (Main.rand.Next(5) == 0)
					{
						if (ai[2] == 0f)
						{
							ai[2] = 1f;
							ai[0] = 0f;
							netUpdate = true;
						}
						else if (ai[2] == 1f)
						{
							TargetClosest();
							ai[2] = 0f;
							ai[0] = Main.rand.NextFloat() * (MathF.PI * 2f);
							if (Distance(Main.player[target].Center) > 700f)
							{
								ai[0] = AngleTo(Main.player[target].Center) + Main.rand.NextFloatDirection() * 0.3f;
							}
							netUpdate = true;
						}
					}
					TargetClosest();
					ai[0] = Main.rand.NextFloat() * (MathF.PI * 2f);
					if (Distance(Main.player[target].Center) > 700f)
					{
						ai[0] = AngleTo(Main.player[target].Center) + Main.rand.NextFloatDirection() * 0.3f;
					}
					netUpdate = true;
				}
			}
			scale = ai[1];
			if (ai[2] == 0f)
			{
				Vector2 value = ai[0].ToRotationVector2() * 1f;
				value.X += Main.windSpeedTarget * 0.8f;
				velocity = Vector2.Lerp(velocity, value, 0.0125f);
				if (velocity.Y > 0f)
				{
					int num = 4;
					int num2 = (int)base.Center.X / 16;
					int num3 = (int)base.Center.Y / 16;
					for (int i = num3; i < num3 + num; i++)
					{
						if (Main.tile[num2, i] != null && ((Main.tile[num2, i].nactive() && Main.tileSolid[Main.tile[num2, i].type]) || Main.tile[num2, i].liquid > 0))
						{
							ai[0] = 0f - ai[0];
							if (velocity.Y > 0f)
							{
								velocity.Y *= 0.9f;
							}
						}
					}
				}
				if (velocity.Y < 0f)
				{
					int num4 = 30;
					bool flag = false;
					int num5 = (int)base.Center.X / 16;
					int num6 = (int)base.Center.Y / 16;
					for (int j = num6; j < num6 + num4; j++)
					{
						if (Main.tile[num5, j] != null && ((Main.tile[num5, j].nactive() && Main.tileSolid[Main.tile[num5, j].type]) || Main.tile[num5, j].liquid > 0))
						{
							flag = true;
						}
					}
					if (!flag)
					{
						ai[0] = 0f - ai[0];
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.9f;
						}
					}
				}
				if (collideX)
				{
					ai[0] = 0f - ai[0] + MathF.PI;
					velocity.X *= -0.2f;
				}
			}
			else
			{
				if (velocity.Y > 0f)
				{
					int num7 = 4;
					int num8 = (int)base.Center.X / 16 + direction;
					int num9 = (int)base.Center.Y / 16;
					for (int k = num9; k < num9 + num7; k++)
					{
						if (Main.tile[num8, k] != null && Main.tile[num8, k].liquid > 0)
						{
							TargetClosest();
							velocity.Y = -1f;
							ai[2] = 0f;
							ai[0] = Main.rand.NextFloat() * (MathF.PI / 4f) - MathF.PI / 2f;
							if (Distance(Main.player[target].Center) > 700f)
							{
								ai[0] = AngleTo(Main.player[target].Center) + Main.rand.NextFloatDirection() * 0.3f;
							}
							netUpdate = true;
							return;
						}
					}
				}
				if (velocity.Y != 0f)
				{
					velocity.X *= 0.98f;
					velocity.Y = MathHelper.Lerp(velocity.Y, 2f, 0.005f);
				}
				else
				{
					velocity = Vector2.Lerp(velocity, Vector2.UnitX * direction, 0.05f);
					velocity.Y += 0.2f;
					if (collideX)
					{
						direction *= -1;
						velocity.X *= -0.2f;
						netUpdate = true;
					}
				}
			}
			direction = ((velocity.X > 0f) ? 1 : (-1));
		}

		private void AI_114_Dragonflies()
		{
			if (localAI[0] == 0f && Main.netMode != 1)
			{
				localAI[0] = 1f;
				Vector2 center = base.Center;
				ai[2] = center.X;
				ai[3] = center.Y;
				velocity = (Main.rand.NextVector2Circular(5f, 3f) + Main.rand.NextVector2CircularEdge(5f, 3f)) * 0.4f;
				ai[1] = 0f;
				ai[0] = 1f;
				netUpdate = true;
			}
			switch ((int)ai[0])
			{
			case 0:
				velocity *= 0.94f;
				if (Main.netMode != 1 && (ai[1] += 1f) >= (float)(60 + Main.rand.Next(60)))
				{
					Vector2 vector = new Vector2(ai[2], ai[3]);
					if (Distance(vector) > 96f)
					{
						velocity = DirectionTo(vector) * 3f;
					}
					else if (Distance(vector) > 16f)
					{
						velocity = DirectionTo(vector) * 1f + Main.rand.NextVector2Circular(1f, 0.5f);
					}
					else
					{
						velocity = (Main.rand.NextVector2Circular(5f, 3f) + Main.rand.NextVector2CircularEdge(5f, 3f)) * 0.4f;
					}
					ai[1] = 0f;
					ai[0] = 1f;
					netUpdate = true;
				}
				break;
			case 1:
			{
				int num = 4;
				Vector2 other = new Vector2(ai[2], ai[3]);
				if (Distance(other) > 112f)
				{
					num = 200;
				}
				if ((ai[1] += 1f) >= (float)num)
				{
					ai[1] = 0f;
					ai[0] = 0f;
					netUpdate = true;
				}
				int num2 = (int)base.Center.X / 16;
				int num3 = (int)base.Center.Y / 16;
				int num4 = 3;
				for (int i = num3; i < num3 + num4; i++)
				{
					if (Main.tile[num2, i] != null && ((Main.tile[num2, i].nactive() && Main.tileSolid[Main.tile[num2, i].type]) || Main.tile[num2, i].liquid > 0))
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.9f;
						}
						velocity.Y -= 0.2f;
					}
				}
				if (!(velocity.Y < 0f))
				{
					break;
				}
				int num5 = 30;
				bool flag = false;
				for (int j = num3; j < num3 + num5; j++)
				{
					if (Main.tile[num2, j] != null && Main.tile[num2, j].nactive() && Main.tileSolid[Main.tile[num2, j].type])
					{
						flag = true;
						break;
					}
				}
				if (!flag && velocity.Y < 0f)
				{
					velocity.Y *= 0.9f;
				}
				break;
			}
			}
			if (velocity.X != 0f)
			{
				direction = ((velocity.X > 0f) ? 1 : (-1));
			}
			if (wet)
			{
				velocity.Y = -3f;
			}
			if (localAI[1] > 0f)
			{
				localAI[1] -= 1f;
				return;
			}
			localAI[1] = 15f;
			float num6 = 0f;
			Vector2 zero = Vector2.Zero;
			for (int k = 0; k < 200; k++)
			{
				NPC nPC = Main.npc[k];
				if (nPC.active && nPC.damage > 0 && !nPC.friendly && nPC.Hitbox.Distance(base.Center) <= 100f)
				{
					num6 += 1f;
					zero += DirectionFrom(nPC.Center);
				}
			}
			for (int l = 0; l < 255; l++)
			{
				Player player = Main.player[l];
				if (player.active && player.Hitbox.Distance(base.Center) <= 150f)
				{
					num6 += 1f;
					zero += DirectionFrom(player.Center);
				}
			}
			if (num6 > 0f)
			{
				float num7 = 2f;
				zero /= num6;
				zero *= num7;
				velocity += zero;
				if (velocity.Length() > 16f)
				{
					velocity = velocity.SafeNormalize(Vector2.Zero) * 16f;
				}
				Vector2 vector2 = base.Center + zero * 10f;
				ai[1] = -10f;
				ai[0] = 1f;
				ai[2] = vector2.X;
				ai[3] = vector2.Y;
				netUpdate = true;
			}
			else
			{
				if (Main.netMode == 1 || !((new Vector2(ai[2], ai[3]) - base.Center).Length() < 16f))
				{
					return;
				}
				int maxValue = 30;
				if (Main.tile[(int)ai[2] / 16, (int)ai[3] / 16].type != 519)
				{
					maxValue = 4;
				}
				if (Main.rand.Next(maxValue) != 0)
				{
					return;
				}
				int cattailX = (int)ai[2];
				int cattailY = (int)ai[2];
				if (FindCattailTop((int)ai[2] / 16, (int)ai[3] / 16, out cattailX, out cattailY))
				{
					ai[2] = cattailX * 16;
					ai[3] = cattailY * 16;
					netUpdate = true;
					return;
				}
				int num8 = (int)(base.Center.X / 16f);
				int m;
				for (m = (int)(base.Center.Y / 16f); !WorldGen.SolidTile(num8, m) && (double)m < Main.worldSurface; m++)
				{
				}
				m -= Main.rand.Next(3, 6);
				ai[2] = num8 * 16;
				ai[3] = m * 16;
				netUpdate = true;
			}
		}

		private void AI_113_WindyBalloon()
		{
			if (localAI[0] == 0f && Main.netMode != 1)
			{
				TargetClosest();
				localAI[0] = 1f;
				ai[2] = Main.rand.Next(7) + 1;
				int num = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)position.X, (int)position.Y, 1);
				if (Main.rand.Next(180) == 0)
				{
					Main.npc[num].SetDefaults(-4);
				}
				else if (Main.rand.Next(10) == 0)
				{
					Main.npc[num].SetDefaults(-7);
				}
				else if (Main.rand.Next(3) == 0)
				{
					Main.npc[num].SetDefaults(-3);
				}
				Main.npc[num].ai[0] = -999f;
				Main.npc[num].netUpdate = true;
				ai[3] = num;
				netUpdate = true;
				ai[1] = Main.npc[num].scale;
			}
			position = base.Center;
			base.Size = new Vector2(20f, 20f) * ai[1];
			scale = ai[1];
			base.Center = position;
			NPC nPC = AI_113_WindyBalloon_GetSlaveNPC();
			rotation = velocity.X * 0.05f;
			if (nPC != null)
			{
				NPCAimedTarget targetData = GetTargetData();
				float num2 = float.PositiveInfinity;
				int num3 = 0;
				Vector2 zero = Vector2.Zero;
				if (!targetData.Invalid)
				{
					zero = targetData.Center - base.Bottom;
					if (zero.Y < 0f)
					{
						num3 = (int)zero.Y / -16;
					}
					num2 = zero.Length();
					if (direction != Math.Sign(zero.X))
					{
						num3 = 0;
					}
				}
				if (wet || nPC.wet || collideX || (collideY && oldVelocity.Y < 0f))
				{
					float num4 = oldVelocity.X + (float)(direction * 8);
					position.X -= num4;
					nPC.position.X -= num4;
					TargetClosest(faceTarget: false);
					direction *= -1;
					velocity.X = direction * 2;
					life = -1;
					HitEffect();
					active = false;
					netUpdate = true;
					SoundEngine.PlaySound(DeathSound, position);
					return;
				}
				if (collideY)
				{
					velocity.Y = ((oldVelocity.Y > 0f) ? 1 : (-1));
					TargetClosest(faceTarget: false);
				}
				float num5 = 2f + Math.Abs(Main.windSpeedTarget) * 2f;
				if (Math.Sign(velocity.X) != direction || Math.Abs(velocity.X) < num5)
				{
					velocity.X += (float)direction * 0.01f;
					if (velocity.X * (float)direction < 0f)
					{
						if (Math.Abs(velocity.X) > num5)
						{
							velocity.X += (float)direction * 0.1f;
						}
						else
						{
							velocity.X += (float)direction * 0.05f;
						}
					}
					else if (Math.Abs(velocity.X) > num5)
					{
						velocity.X = (float)direction * num5;
					}
				}
				int num6 = (int)((position.X + (float)(width / 2)) / 16f) + direction;
				int num7 = (int)((position.Y + (float)height) / 16f);
				bool flag = true;
				int num8 = 8 + num3;
				bool flag2 = false;
				for (int i = num7; i < num7 + num8; i++)
				{
					if (Main.tile[num6, i] == null)
					{
						Main.tile[num6, i] = new Tile();
					}
					if ((Main.tile[num6, i].nactive() && Main.tileSolid[Main.tile[num6, i].type]) || Main.tile[num6, i].liquid > 0)
					{
						if (i < num7 + 5 + num3)
						{
							flag2 = true;
						}
						flag = false;
						break;
					}
				}
				if (num2 < 400f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					float num9 = 2f;
					float num10 = 0.035f;
					if (base.Center.Y + (float)(height / 4) > Main.player[target].position.Y + (float)(Main.player[target].height / 4) && velocity.Y > 0f - num9)
					{
						velocity.Y -= num10;
						if (velocity.Y > 0f)
						{
							velocity.Y -= num10;
						}
					}
					else if (base.Center.Y + (float)(height / 4) < Main.player[target].position.Y + (float)(Main.player[target].height / 4) && velocity.Y < num9)
					{
						velocity.Y += num10;
						if (velocity.Y < 0f)
						{
							velocity.Y += num10;
						}
					}
				}
				else
				{
					if (flag)
					{
						velocity.Y += 0.05f;
					}
					else
					{
						velocity.Y -= 0.1f;
					}
					if (flag2)
					{
						velocity.Y -= 0.2f;
					}
					if (velocity.Y > 2f)
					{
						velocity.Y = 2f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				nPC.Center = base.Bottom + new Vector2(0f, -8f) + new Vector2(0f, 56f * ai[1]);
				nPC.velocity = velocity;
			}
			else
			{
				velocity.Y = MathHelper.Clamp(velocity.Y - 0.2f, -8f, 8f);
				velocity.X = MathHelper.Clamp(velocity.X + Main.windSpeedTarget * 0.3f, -4f, 4f);
				if (collideX || collideY)
				{
					float num11 = oldVelocity.X + (float)(direction * 8);
					position.X -= num11;
					TargetClosest(faceTarget: false);
					direction *= -1;
					velocity.X = direction * 2;
					life = -1;
					HitEffect();
					active = false;
					netUpdate = true;
					SoundEngine.PlaySound(DeathSound, position);
				}
			}
		}

		public NPC AI_113_WindyBalloon_GetSlaveNPC()
		{
			NPC nPC = null;
			int num = (int)ai[3];
			if (num >= 0 && num < 200)
			{
				nPC = Main.npc[num];
				if (!nPC.active || nPC.type != 1 || nPC.ai[0] != -999f)
				{
					nPC = null;
					ai[3] = -1f;
					netUpdate = true;
				}
			}
			else
			{
				nPC = null;
			}
			return nPC;
		}

		private void AI_112_FairyCritter()
		{
			bool flag = false;
			lavaImmune = true;
			if (Main.netMode != 1 && ai[2] > 1f)
			{
				int num = 18000;
				localAI[1] += 1f;
				if (localAI[1] >= (float)num)
				{
					ai[2] = 7f;
					if (Main.player[target].Center.X < base.Center.X)
					{
						direction = 1;
					}
					else
					{
						direction = -1;
					}
					netUpdate = true;
				}
			}
			switch ((int)ai[2])
			{
			case 0:
			{
				lavaImmune = false;
				noTileCollide = false;
				if (ai[0] == 0f && ai[1] == 0f)
				{
					ai[0] = base.Center.X;
					ai[1] = base.Center.Y;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					velocity = new Vector2(MathHelper.Lerp(2f, 4f, Main.rand.NextFloat()) * (float)(Main.rand.Next(2) * 2 - 1), MathHelper.Lerp(1f, 2f, Main.rand.NextFloat()) * (float)(Main.rand.Next(2) * 2 - 1));
					velocity *= 0.7f;
					netUpdate = true;
				}
				Vector2 vector4 = new Vector2(ai[0], ai[1]) - base.Center;
				if (vector4.Length() > 20f)
				{
					Vector2 vector5 = new Vector2((vector4.X > 0f) ? 1 : (-1), (vector4.Y > 0f) ? 1 : (-1));
					velocity += vector5 * 0.04f;
					if (Math.Abs(velocity.Y) > 2f)
					{
						velocity.Y *= 0.95f;
					}
				}
				TargetClosest();
				Player player = Main.player[target];
				if (!player.dead && player.Distance(base.Center) < 250f)
				{
					ai[2] = 1f;
					direction = ((!(player.Center.X > base.Center.X)) ? 1 : (-1));
					if (velocity.X * (float)direction < 0f)
					{
						velocity.X = direction * 2;
					}
					ai[3] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 1:
			{
				lavaImmune = false;
				noTileCollide = false;
				if (collideX)
				{
					direction *= -1;
					velocity.X = direction * 2;
				}
				if (collideY)
				{
					velocity.Y = ((oldVelocity.Y > 0f) ? 1 : (-1));
				}
				float num12 = 4.5f;
				if (Math.Sign(velocity.X) != direction || Math.Abs(velocity.X) < num12)
				{
					velocity.X += (float)direction * 0.04f;
					if (velocity.X * (float)direction < 0f)
					{
						if (Math.Abs(velocity.X) > num12)
						{
							velocity.X += (float)direction * 0.4f;
						}
						else
						{
							velocity.X += (float)direction * 0.2f;
						}
					}
					else if (Math.Abs(velocity.X) > num12)
					{
						velocity.X = (float)direction * num12;
					}
				}
				int num13 = (int)((position.X + (float)(width / 2)) / 16f);
				int num14 = 20;
				if (direction < 0)
				{
					num13 -= num14;
				}
				int num15 = (int)((position.Y + (float)height) / 16f);
				bool flag5 = true;
				int num16 = 8;
				bool flag6 = false;
				for (int i = num13; i <= num13 + num14; i++)
				{
					for (int j = num15; j < num15 + num16; j++)
					{
						if (Main.tile[i, j] == null)
						{
							Main.tile[i, j] = new Tile();
						}
						if ((Main.tile[i, j].nactive() && Main.tileSolid[Main.tile[i, j].type]) || Main.tile[i, j].liquid > 0)
						{
							if (j < num15 + 5)
							{
								flag6 = true;
							}
							flag5 = false;
							break;
						}
					}
				}
				if (flag5)
				{
					velocity.Y += 0.05f;
				}
				else
				{
					velocity.Y -= 0.2f;
				}
				if (flag6)
				{
					velocity.Y -= 0.3f;
				}
				if (velocity.Y > 3f)
				{
					velocity.Y = 3f;
				}
				if (velocity.Y < -5f)
				{
					velocity.Y = -5f;
				}
				break;
			}
			case 2:
			{
				noTileCollide = true;
				NPCAimedTarget targetData = GetTargetData();
				bool flag3 = false;
				if (targetData.Type == NPCTargetType.Player)
				{
					flag3 = Main.player[target].dead;
				}
				if (flag3)
				{
					ai[2] = 1f;
					direction = ((!(targetData.Center.X > base.Center.X)) ? 1 : (-1));
					if (velocity.X * (float)direction < 0f)
					{
						velocity.X = direction * 2;
					}
					ai[3] = 0f;
					netUpdate = true;
					break;
				}
				Rectangle r = Utils.CenteredRectangle(targetData.Center, new Vector2(targetData.Width + 60, targetData.Height / 2));
				if (Main.netMode != 1 && base.Hitbox.Intersects(r))
				{
					if (GetFairyTreasureCoords(out var treasureCoords2))
					{
						ai[0] = treasureCoords2.X;
						ai[1] = treasureCoords2.Y;
						ai[2] = 3f;
						ai[3] = 0f;
						netUpdate = true;
					}
					else
					{
						ai[2] = 6f;
						ai[3] = 0f;
						netUpdate = true;
					}
					break;
				}
				Vector2 vector3 = r.ClosestPointInRect(base.Center);
				Vector2 value = DirectionTo(vector3) * 2f;
				float num8 = Distance(vector3);
				if (num8 > 150f)
				{
					value *= 2f;
				}
				else if (num8 > 80f)
				{
					value *= 1.5f;
				}
				velocity = Vector2.Lerp(velocity, value, 0.07f);
				Point point = base.Center.ToTileCoordinates();
				if (ai[3] < 300f)
				{
					GetBirdFlightRecommendation(6, 3, point, out var goDownwards, out var goUpwards);
					if (goDownwards)
					{
						velocity.Y += 0.05f;
					}
					if (goUpwards)
					{
						velocity.Y -= 0.02f;
					}
					if (velocity.Y > 2f)
					{
						velocity.Y = 2f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				if (WorldGen.InWorld(point.X, point.Y))
				{
					if (WorldGen.SolidTile(point))
					{
						ai[3] = Math.Min(ai[3] + 2f, 400f);
					}
					else
					{
						ai[3] = Math.Max(ai[3] - 1f, 0f);
					}
				}
				break;
			}
			case 3:
				noTileCollide = true;
				if (ai[3] == 15f)
				{
					SoundEngine.PlaySound(27, (int)position.X, (int)position.Y);
				}
				if (ai[3] <= 15f)
				{
					velocity *= 0.9f;
				}
				else
				{
					if (Main.player[target].Center.X > base.Center.X)
					{
						spriteDirection = -1;
					}
					else
					{
						spriteDirection = 1;
					}
					flag = true;
					float num6 = 0f;
					float num7 = ai[3] - 15f;
					float circleHeight = 22f;
					if (num7 <= 65f)
					{
						num6 = MathF.PI / 8f;
						circleHeight = 14f;
					}
					else if (num7 <= 130f)
					{
						num6 = -MathF.PI / 8f;
						circleHeight = 18f;
					}
					num6 *= (float)direction;
					Vector2 fairyCircleOffset3 = GetFairyCircleOffset(num7 / 65f, num6, circleHeight);
					Vector2 fairyCircleOffset4 = GetFairyCircleOffset(num7 / 65f + 1f / 65f, num6, circleHeight);
					velocity = fairyCircleOffset4 - fairyCircleOffset3;
				}
				ai[3] += 1f;
				if (ai[3] >= 210f)
				{
					ai[2] = 4f;
					TargetClosest();
					ai[3] = 0f;
					netUpdate = true;
				}
				break;
			case 6:
			{
				noTileCollide = true;
				Vector2 vector = Main.player[target].Center - base.Center;
				if (vector.Length() > 100f)
				{
					ai[2] = 2f;
					TargetClosest();
					ai[3] = 0f;
					netUpdate = true;
					break;
				}
				if (!Collision.SolidCollision(position, width, height))
				{
					noTileCollide = false;
					if (collideX)
					{
						velocity.X *= -1f;
					}
					if (collideY)
					{
						velocity.Y *= -1f;
					}
				}
				if (vector.Length() > 20f)
				{
					Vector2 vector2 = new Vector2((vector.X > 0f) ? 1 : (-1), (vector.Y > 0f) ? 1 : (-1));
					velocity += vector2 * 0.04f;
					if (Math.Abs(velocity.Y) > 2f)
					{
						velocity.Y *= 0.95f;
					}
				}
				if (Main.netMode != 1 && GetFairyTreasureCoords(out var treasureCoords))
				{
					ai[0] = treasureCoords.X;
					ai[1] = treasureCoords.Y;
					ai[2] = 3f;
					ai[3] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 4:
			{
				noTileCollide = true;
				NPCAimedTarget targetData2 = GetTargetData();
				bool flag4 = false;
				if (targetData2.Type == NPCTargetType.Player)
				{
					flag4 = Main.player[target].dead;
				}
				if (flag4)
				{
					ai[2] = 1f;
					direction = ((!(targetData2.Center.X > base.Center.X)) ? 1 : (-1));
					if (velocity.X * (float)direction < 0f)
					{
						velocity.X = direction * 2;
					}
					ai[3] = 0f;
					netUpdate = true;
					break;
				}
				Rectangle r2 = Utils.CenteredRectangle(new Vector2(ai[0] * 16f + 8f, ai[1] * 16f + 8f), Vector2.One * 5f);
				if (base.Hitbox.Intersects(r2))
				{
					ai[2] = 5f;
					ai[3] = 0f;
					netUpdate = true;
					break;
				}
				float num9 = Distance(targetData2.Center);
				float num10 = 300f;
				if (num9 > num10)
				{
					if (num9 < num10 + 100f && !Collision.SolidCollision(position, width, height))
					{
						noTileCollide = false;
						if (collideX)
						{
							velocity.X *= -1f;
						}
						if (collideY)
						{
							velocity.Y *= -1f;
						}
					}
					flag = true;
					if (Main.player[target].Center.X > base.Center.X)
					{
						spriteDirection = -1;
					}
					else
					{
						spriteDirection = 1;
					}
					Vector2 vector6 = DirectionFrom(targetData2.Center);
					if (num9 > num10 + 60f)
					{
						velocity += vector6 * -0.1f;
						if (Main.rand.Next(30) == 0)
						{
							SoundEngine.PlaySound(27, (int)position.X, (int)position.Y);
						}
					}
					else if (num9 < num10 + 30f)
					{
						Vector2 destination = r2.ClosestPointInRect(base.Center);
						Vector2 vector7 = DirectionTo(destination);
						velocity += vector7 * 0.1f;
					}
					if (velocity.Length() > 1f)
					{
						velocity *= 1f / velocity.Length();
					}
					break;
				}
				Vector2 vector8 = r2.ClosestPointInRect(base.Center);
				Vector2 value2 = DirectionTo(vector8);
				float num11 = Distance(vector8);
				if (num11 > 150f)
				{
					value2 *= 3f;
				}
				else if (num11 > 80f)
				{
					value2 *= 2f;
				}
				Point point2 = base.Center.ToTileCoordinates();
				if (ai[3] < 300f)
				{
					velocity = Vector2.Lerp(velocity, value2, 0.07f);
					GetBirdFlightRecommendation(4, 2, point2, out var goDownwards2, out var goUpwards2);
					if (goDownwards2)
					{
						velocity.Y += 0.05f;
					}
					if (goUpwards2)
					{
						velocity.Y -= 0.05f;
					}
					if (velocity.Y > 1f)
					{
						velocity.Y = 1f;
					}
					if (velocity.Y < -1f)
					{
						velocity.Y = -1f;
					}
				}
				else
				{
					velocity = Vector2.Lerp(velocity, value2, 0.07f);
				}
				if (WorldGen.SolidTile(point2))
				{
					ai[3] = Math.Min(ai[3] + 2f, 400f);
				}
				else
				{
					ai[3] = Math.Max(ai[3] - 1f, 0f);
				}
				break;
			}
			case 5:
			{
				localAI[1] = 0f;
				noTileCollide = true;
				bool flag2 = false;
				Tile tileSafely = Framing.GetTileSafely(new Point((int)ai[0], (int)ai[1]));
				if (!tileSafely.active() || !SceneMetrics.IsValidForOreFinder(tileSafely))
				{
					flag2 = true;
				}
				if (ai[3] == 15f)
				{
					SoundEngine.PlaySound(27, (int)position.X, (int)position.Y);
				}
				if (ai[3] <= 15f)
				{
					velocity *= 0.9f;
				}
				else
				{
					flag = true;
					float num2 = 0f;
					float num3 = ai[3] - 15f;
					float num4 = 22f;
					int num5 = (int)(num3 / 50f);
					num2 = (float)Math.Cos((float)num5 * 1f) * (MathF.PI * 2f) / 16f;
					num4 = (float)Math.Cos((float)num5 * 2f) * 10f + 8f;
					num2 *= (float)direction;
					Vector2 fairyCircleOffset = GetFairyCircleOffset(num3 / 50f, num2, num4);
					Vector2 fairyCircleOffset2 = GetFairyCircleOffset(num3 / 50f + 0.02f, num2, num4);
					velocity = fairyCircleOffset2 - fairyCircleOffset;
					if (Main.player[target].Center.X > base.Center.X)
					{
						spriteDirection = -1;
					}
					else
					{
						spriteDirection = 1;
					}
				}
				ai[3] += 1f;
				if (Main.netMode != 1 && ai[3] > 200f)
				{
					active = false;
					if (Main.netMode == 0)
					{
						FairyEffects(base.Center, type - 583);
					}
					else if (Main.netMode == 2)
					{
						netSkip = -1;
						life = 0;
						NetMessage.SendData(23, -1, -1, null, whoAmI);
						NetMessage.SendData(112, -1, -1, null, 2, (int)base.Center.X, (int)base.Center.Y, 0f, type - 583);
					}
				}
				break;
			}
			case 7:
				noTileCollide = true;
				velocity.X += 0.05f * (float)direction;
				velocity.X = MathHelper.Clamp(velocity.X, -10f, 10f);
				velocity.Y -= 0.025f;
				velocity.Y = MathHelper.Clamp(velocity.Y, -5f, 5f);
				EncourageDespawn(10);
				break;
			}
			dontTakeDamage = (dontTakeDamageFromHostiles = ai[2] > 1f);
			for (int k = 0; k < 200; k++)
			{
				if (k != whoAmI && Main.npc[k].active && Main.npc[k].aiStyle == 112 && Math.Abs(position.X - Main.npc[k].position.X) + Math.Abs(position.Y - Main.npc[k].position.Y) < (float)width * 1.5f)
				{
					if (position.Y < Main.npc[k].position.Y)
					{
						velocity.Y -= 0.05f;
					}
					else
					{
						velocity.Y += 0.05f;
					}
				}
			}
			if (!flag)
			{
				direction = ((velocity.X >= 0f) ? 1 : (-1));
				spriteDirection = -direction;
			}
			Color value3 = Color.HotPink;
			Color value4 = Color.LightPink;
			int num17 = 4;
			if (type == 584)
			{
				value3 = Color.LimeGreen;
				value4 = Color.LightSeaGreen;
			}
			if (type == 585)
			{
				value3 = Color.RoyalBlue;
				value4 = Color.LightBlue;
			}
			if ((int)Main.timeForVisualEffects % 2 == 0)
			{
				position += netOffset;
				Dust dust = Dust.NewDustDirect(base.Center - new Vector2(num17) * 0.5f, num17 + 4, num17 + 4, 278, 0f, 0f, 200, Color.Lerp(value3, value4, Main.rand.NextFloat()), 0.65f);
				dust.velocity *= 0f;
				dust.velocity += velocity * 0.3f;
				dust.noGravity = true;
				dust.noLight = true;
				position -= netOffset;
			}
			Lighting.AddLight(base.Center, value3.ToVector3() * 0.7f);
			if (Main.netMode != 2)
			{
				Player localPlayer = Main.LocalPlayer;
				if (!localPlayer.dead && localPlayer.HitboxForBestiaryNearbyCheck.Intersects(base.Hitbox))
				{
					AchievementsHelper.HandleSpecialEvent(localPlayer, 22);
				}
			}
		}

		public static void FairyEffects(Vector2 Position, int type)
		{
			Color value = Color.HotPink;
			Color value2 = Color.LightPink;
			int num = 4;
			if (type == 1)
			{
				value = Color.LimeGreen;
				value2 = Color.LightSeaGreen;
			}
			if (type == 2)
			{
				value = Color.RoyalBlue;
				value2 = Color.LightBlue;
			}
			for (int i = 0; i < 40; i++)
			{
				Dust dust = Dust.NewDustDirect(Position - new Vector2(num) * 0.5f, num + 4, num + 4, 278, 0f, 0f, 200, Color.Lerp(value, value2, Main.rand.NextFloat()), 0.65f);
				dust.velocity *= 1.5f;
				if (i >= 30)
				{
					dust.velocity *= 3.5f;
				}
				else if (i >= 20)
				{
					dust.velocity *= 2f;
				}
				dust.fadeIn = (float)Main.rand.Next(0, 17) * 0.1f;
				dust.noGravity = true;
			}
			SoundEngine.PlaySound(SoundID.Item4, (int)Position.X, (int)Position.Y);
		}

		private void GetBirdFlightRecommendation(int downScanRange, int upRange, Point tCoords, out bool goDownwards, out bool goUpwards)
		{
			tCoords.X += direction;
			goDownwards = true;
			goUpwards = false;
			int x = tCoords.X;
			for (int i = tCoords.Y; i < tCoords.Y + downScanRange && WorldGen.InWorld(x, i); i++)
			{
				Tile tile = Main.tile[x, i];
				if (tile == null)
				{
					break;
				}
				if ((tile.nactive() && Main.tileSolid[tile.type]) || tile.liquid > 0)
				{
					if (i < tCoords.Y + upRange)
					{
						goUpwards = true;
					}
					goDownwards = false;
					break;
				}
			}
		}

		private Vector2 GetFairyCircleOffset(float elapsedTime, float circleRotation, float circleHeight)
		{
			return (((MathF.PI * 2f * elapsedTime + MathF.PI / 2f).ToRotationVector2() + new Vector2(0f, -1f)) * new Vector2(6 * -direction, circleHeight)).RotatedBy(circleRotation);
		}

		private bool GetFairyTreasureCoords(out Point treasureCoords)
		{
			treasureCoords = default(Point);
			Point point = base.Center.ToTileCoordinates();
			Rectangle value = new Rectangle(point.X, point.Y, 1, 1);
			value.Inflate(75, 50);
			int num = 40;
			Rectangle value2 = new Rectangle(0, 0, Main.maxTilesX, Main.maxTilesY);
			value2.Inflate(-num, -num);
			value = Rectangle.Intersect(value, value2);
			int num2 = -1;
			float num3 = -1f;
			for (int i = value.Left; i <= value.Right; i++)
			{
				for (int j = value.Top; j <= value.Bottom; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile == null || !tile.active() || !TileID.Sets.FriendlyFairyCanLureTo[tile.type] || !SceneMetrics.IsValidForOreFinder(tile))
					{
						continue;
					}
					short num4 = Main.tileOreFinderPriority[tile.type];
					if (TileID.Sets.Ore[tile.type])
					{
						int num5 = 3;
						int num6 = 3;
						int num7 = 40;
						int num8 = 0;
						for (int k = i - num5; k <= i + num5; k++)
						{
							for (int l = j - num6; l <= j + num6; l++)
							{
								if (Main.tile[k, l].active() && Main.tile[k, l].type == tile.type)
								{
									num8++;
								}
							}
						}
						if (num8 < num7)
						{
							num4 = -1;
						}
					}
					if (num2 <= num4)
					{
						float num9 = Distance(new Vector2(i * 16 + 8, j * 16 + 8));
						if (num2 != num4 || !(num9 >= num3))
						{
							num2 = num4;
							num3 = num9;
							treasureCoords.X = i;
							treasureCoords.Y = j;
						}
					}
				}
			}
			return num2 != -1;
		}

		private void AI_069_DukeFishron()
		{
			bool expertMode = Main.expertMode;
			float num = (expertMode ? 1.2f : 1f);
			bool flag = (double)life <= (double)lifeMax * 0.5;
			bool flag2 = expertMode && (double)life <= (double)lifeMax * 0.15;
			bool flag3 = ai[0] > 4f;
			bool flag4 = ai[0] > 9f;
			bool flag5 = ai[3] < 10f;
			if (flag4)
			{
				damage = (int)((float)defDamage * 1.1f * num);
				defense = 0;
			}
			else if (flag3)
			{
				damage = (int)((float)defDamage * 1.2f * num);
				defense = (int)((float)defDefense * 0.8f);
			}
			else
			{
				damage = defDamage;
				defense = defDefense;
			}
			int num2 = (expertMode ? 40 : 60);
			float num3 = (expertMode ? 0.55f : 0.45f);
			float num4 = (expertMode ? 8.5f : 7.5f);
			if (flag4)
			{
				num3 = 0.7f;
				num4 = 12f;
				num2 = 30;
			}
			else if (flag3 && flag5)
			{
				num3 = (expertMode ? 0.6f : 0.5f);
				num4 = (expertMode ? 10f : 8f);
				num2 = (expertMode ? 40 : 20);
			}
			else if (flag5 && !flag3 && !flag4)
			{
				num2 = 30;
			}
			int num5 = (expertMode ? 28 : 30);
			float num6 = (expertMode ? 17f : 16f);
			if (flag4)
			{
				num5 = 25;
				num6 = 27f;
			}
			else if (flag5 && flag3)
			{
				num5 = (expertMode ? 27 : 30);
				if (expertMode)
				{
					num6 = 21f;
				}
			}
			int num7 = 80;
			int num8 = 4;
			float num9 = 0.3f;
			float num10 = 5f;
			int num11 = 90;
			int num12 = 180;
			int num13 = 180;
			int num14 = 30;
			int num15 = 120;
			int num16 = 4;
			float num17 = 6f;
			float num18 = 20f;
			float num19 = MathF.PI * 2f / (float)(num15 / 2);
			int num20 = 75;
			Vector2 center = base.Center;
			Player player = Main.player[target];
			if (target < 0 || target == 255 || player.dead || !player.active || Vector2.Distance(player.Center, center) > 5600f)
			{
				TargetClosest();
				player = Main.player[target];
				netUpdate = true;
			}
			if (player.dead || Vector2.Distance(player.Center, center) > 5600f)
			{
				velocity.Y -= 0.4f;
				EncourageDespawn(10);
				if (ai[0] > 4f)
				{
					ai[0] = 5f;
				}
				else
				{
					ai[0] = 0f;
				}
				ai[2] = 0f;
			}
			bool flag6 = player.position.Y < 800f || (double)player.position.Y > Main.worldSurface * 16.0 || (player.position.X > 6400f && player.position.X < (float)(Main.maxTilesX * 16 - 6400));
			if (flag6)
			{
				num2 = 10;
				damage = defDamage * 2;
				defense = defDefense * 2;
				num6 += 6f;
			}
			bool flag7 = true;
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				alpha = 255;
				rotation = 0f;
				if (Main.netMode != 1)
				{
					ai[0] = -1f;
					netUpdate = true;
				}
			}
			float num21 = (float)Math.Atan2(player.Center.Y - center.Y, player.Center.X - center.X);
			if (spriteDirection == 1)
			{
				num21 += MathF.PI;
			}
			if (num21 < 0f)
			{
				num21 += MathF.PI * 2f;
			}
			if (num21 > MathF.PI * 2f)
			{
				num21 -= MathF.PI * 2f;
			}
			if (ai[0] == -1f)
			{
				num21 = 0f;
			}
			if (ai[0] == 3f)
			{
				num21 = 0f;
			}
			if (ai[0] == 4f)
			{
				num21 = 0f;
			}
			if (ai[0] == 8f)
			{
				num21 = 0f;
			}
			float num22 = 0.04f;
			if (ai[0] == 1f || ai[0] == 6f)
			{
				num22 = 0f;
			}
			if (ai[0] == 7f)
			{
				num22 = 0f;
			}
			if (ai[0] == 3f)
			{
				num22 = 0.01f;
			}
			if (ai[0] == 4f)
			{
				num22 = 0.01f;
			}
			if (ai[0] == 8f)
			{
				num22 = 0.01f;
			}
			if (rotation < num21)
			{
				if ((double)(num21 - rotation) > Math.PI)
				{
					rotation -= num22;
				}
				else
				{
					rotation += num22;
				}
			}
			if (rotation > num21)
			{
				if ((double)(rotation - num21) > Math.PI)
				{
					rotation += num22;
				}
				else
				{
					rotation -= num22;
				}
			}
			if (rotation > num21 - num22 && rotation < num21 + num22)
			{
				rotation = num21;
			}
			if (rotation < 0f)
			{
				rotation += MathF.PI * 2f;
			}
			if (rotation > MathF.PI * 2f)
			{
				rotation -= MathF.PI * 2f;
			}
			if (rotation > num21 - num22 && rotation < num21 + num22)
			{
				rotation = num21;
			}
			if (ai[0] != -1f && ai[0] < 9f)
			{
				if (Collision.SolidCollision(position, width, height))
				{
					alpha += 15;
				}
				else
				{
					alpha -= 15;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha > 150)
				{
					alpha = 150;
				}
			}
			if (ai[0] == -1f)
			{
				flag7 = false;
				velocity *= 0.98f;
				int num23 = Math.Sign(player.Center.X - center.X);
				if (num23 != 0)
				{
					direction = num23;
					spriteDirection = -direction;
				}
				if (ai[2] > 20f)
				{
					velocity.Y = -2f;
					alpha -= 5;
					if (Collision.SolidCollision(position, width, height))
					{
						alpha += 15;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (alpha > 150)
					{
						alpha = 150;
					}
				}
				if (ai[2] == (float)(num11 - 30))
				{
					int num24 = 36;
					for (int i = 0; i < num24; i++)
					{
						Vector2 vector = (Vector2.Normalize(velocity) * new Vector2((float)width / 2f, height) * 0.75f * 0.5f).RotatedBy((float)(i - (num24 / 2 - 1)) * (MathF.PI * 2f) / (float)num24) + base.Center;
						Vector2 vector2 = vector - base.Center;
						int num25 = Dust.NewDust(vector + vector2, 0, 0, 172, vector2.X * 2f, vector2.Y * 2f, 100, default(Color), 1.4f);
						Main.dust[num25].noGravity = true;
						Main.dust[num25].noLight = true;
						Main.dust[num25].velocity = Vector2.Normalize(vector2) * 3f;
					}
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num20)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 0f && !player.dead)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 300 * Math.Sign((center - player.Center).X);
				}
				Vector2 vector3 = Vector2.Normalize(player.Center + new Vector2(ai[1], -200f) - center - velocity) * num4;
				if (velocity.X < vector3.X)
				{
					velocity.X += num3;
					if (velocity.X < 0f && vector3.X > 0f)
					{
						velocity.X += num3;
					}
				}
				else if (velocity.X > vector3.X)
				{
					velocity.X -= num3;
					if (velocity.X > 0f && vector3.X < 0f)
					{
						velocity.X -= num3;
					}
				}
				if (velocity.Y < vector3.Y)
				{
					velocity.Y += num3;
					if (velocity.Y < 0f && vector3.Y > 0f)
					{
						velocity.Y += num3;
					}
				}
				else if (velocity.Y > vector3.Y)
				{
					velocity.Y -= num3;
					if (velocity.Y > 0f && vector3.Y < 0f)
					{
						velocity.Y -= num3;
					}
				}
				int num26 = Math.Sign(player.Center.X - center.X);
				if (num26 != 0)
				{
					if (ai[2] == 0f && num26 != direction)
					{
						rotation += MathF.PI;
					}
					direction = num26;
					if (spriteDirection != -direction)
					{
						rotation += MathF.PI;
					}
					spriteDirection = -direction;
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num2)
				{
					int num27 = 0;
					switch ((int)ai[3])
					{
					case 0:
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 9:
						num27 = 1;
						break;
					case 10:
						ai[3] = 1f;
						num27 = 2;
						break;
					case 11:
						ai[3] = 0f;
						num27 = 3;
						break;
					}
					if (flag6 && num27 == 2)
					{
						num27 = 3;
					}
					if (flag)
					{
						num27 = 4;
					}
					switch (num27)
					{
					case 1:
						ai[0] = 1f;
						ai[1] = 0f;
						ai[2] = 0f;
						velocity = Vector2.Normalize(player.Center - center) * num6;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X);
						if (num26 != 0)
						{
							direction = num26;
							if (spriteDirection == 1)
							{
								rotation += MathF.PI;
							}
							spriteDirection = -direction;
						}
						break;
					case 2:
						ai[0] = 2f;
						ai[1] = 0f;
						ai[2] = 0f;
						break;
					case 3:
						ai[0] = 3f;
						ai[1] = 0f;
						ai[2] = 0f;
						if (flag6)
						{
							ai[2] = num11 - 40;
						}
						break;
					case 4:
						ai[0] = 4f;
						ai[1] = 0f;
						ai[2] = 0f;
						break;
					}
					netUpdate = true;
				}
			}
			else if (ai[0] == 1f)
			{
				int num28 = 7;
				for (int j = 0; j < num28; j++)
				{
					Vector2 vector4 = (Vector2.Normalize(velocity) * new Vector2((float)(width + 50) / 2f, height) * 0.75f).RotatedBy((double)(j - (num28 / 2 - 1)) * Math.PI / (double)(float)num28) + center;
					Vector2 vector5 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - MathF.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
					int num29 = Dust.NewDust(vector4 + vector5, 0, 0, 172, vector5.X * 2f, vector5.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num29].noGravity = true;
					Main.dust[num29].noLight = true;
					Main.dust[num29].velocity /= 4f;
					Main.dust[num29].velocity -= velocity;
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num5)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] += 2f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 2f)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 300 * Math.Sign((center - player.Center).X);
				}
				Vector2 vector6 = Vector2.Normalize(player.Center + new Vector2(ai[1], -200f) - center - velocity) * num10;
				if (velocity.X < vector6.X)
				{
					velocity.X += num9;
					if (velocity.X < 0f && vector6.X > 0f)
					{
						velocity.X += num9;
					}
				}
				else if (velocity.X > vector6.X)
				{
					velocity.X -= num9;
					if (velocity.X > 0f && vector6.X < 0f)
					{
						velocity.X -= num9;
					}
				}
				if (velocity.Y < vector6.Y)
				{
					velocity.Y += num9;
					if (velocity.Y < 0f && vector6.Y > 0f)
					{
						velocity.Y += num9;
					}
				}
				else if (velocity.Y > vector6.Y)
				{
					velocity.Y -= num9;
					if (velocity.Y > 0f && vector6.Y < 0f)
					{
						velocity.Y -= num9;
					}
				}
				if (ai[2] == 0f)
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				if (ai[2] % (float)num8 == 0f)
				{
					SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
					if (Main.netMode != 1)
					{
						Vector2 vector7 = Vector2.Normalize(player.Center - center) * (width + 20) / 2f + center;
						NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector7.X, (int)vector7.Y + 45, 371);
					}
				}
				int num30 = Math.Sign(player.Center.X - center.X);
				if (num30 != 0)
				{
					direction = num30;
					if (spriteDirection != -direction)
					{
						rotation += MathF.PI;
					}
					spriteDirection = -direction;
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num7)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 3f)
			{
				velocity *= 0.98f;
				velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
				if (ai[2] == (float)(num11 - 30))
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 9);
				}
				if (Main.netMode != 1 && ai[2] == (float)(num11 - 30))
				{
					Vector2 vector8 = rotation.ToRotationVector2() * (Vector2.UnitX * direction) * (width + 20) / 2f + center;
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector8.X, vector8.Y, direction * 2, 8f, 385, 0, 0f, Main.myPlayer);
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector8.X, vector8.Y, -direction * 2, 8f, 385, 0, 0f, Main.myPlayer);
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num11)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 4f)
			{
				flag7 = false;
				velocity *= 0.98f;
				velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
				if (ai[2] == (float)(num12 - 60))
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num12)
				{
					ai[0] = 5f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 5f && !player.dead)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 300 * Math.Sign((center - player.Center).X);
				}
				Vector2 vector9 = Vector2.Normalize(player.Center + new Vector2(ai[1], -200f) - center - velocity) * num4;
				if (velocity.X < vector9.X)
				{
					velocity.X += num3;
					if (velocity.X < 0f && vector9.X > 0f)
					{
						velocity.X += num3;
					}
				}
				else if (velocity.X > vector9.X)
				{
					velocity.X -= num3;
					if (velocity.X > 0f && vector9.X < 0f)
					{
						velocity.X -= num3;
					}
				}
				if (velocity.Y < vector9.Y)
				{
					velocity.Y += num3;
					if (velocity.Y < 0f && vector9.Y > 0f)
					{
						velocity.Y += num3;
					}
				}
				else if (velocity.Y > vector9.Y)
				{
					velocity.Y -= num3;
					if (velocity.Y > 0f && vector9.Y < 0f)
					{
						velocity.Y -= num3;
					}
				}
				int num31 = Math.Sign(player.Center.X - center.X);
				if (num31 != 0)
				{
					if (ai[2] == 0f && num31 != direction)
					{
						rotation += MathF.PI;
					}
					direction = num31;
					if (spriteDirection != -direction)
					{
						rotation += MathF.PI;
					}
					spriteDirection = -direction;
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num2)
				{
					int num32 = 0;
					switch ((int)ai[3])
					{
					case 0:
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
						num32 = 1;
						break;
					case 6:
						ai[3] = 1f;
						num32 = 2;
						break;
					case 7:
						ai[3] = 0f;
						num32 = 3;
						break;
					}
					if (flag2)
					{
						num32 = 4;
					}
					if (flag6 && num32 == 2)
					{
						num32 = 3;
					}
					switch (num32)
					{
					case 1:
						ai[0] = 6f;
						ai[1] = 0f;
						ai[2] = 0f;
						velocity = Vector2.Normalize(player.Center - center) * num6;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X);
						if (num31 != 0)
						{
							direction = num31;
							if (spriteDirection == 1)
							{
								rotation += MathF.PI;
							}
							spriteDirection = -direction;
						}
						break;
					case 2:
						velocity = Vector2.Normalize(player.Center - center) * num18;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X);
						if (num31 != 0)
						{
							direction = num31;
							if (spriteDirection == 1)
							{
								rotation += MathF.PI;
							}
							spriteDirection = -direction;
						}
						ai[0] = 7f;
						ai[1] = 0f;
						ai[2] = 0f;
						break;
					case 3:
						ai[0] = 8f;
						ai[1] = 0f;
						ai[2] = 0f;
						break;
					case 4:
						ai[0] = 9f;
						ai[1] = 0f;
						ai[2] = 0f;
						break;
					}
					netUpdate = true;
				}
			}
			else if (ai[0] == 6f)
			{
				int num33 = 7;
				for (int k = 0; k < num33; k++)
				{
					Vector2 vector10 = (Vector2.Normalize(velocity) * new Vector2((float)(width + 50) / 2f, height) * 0.75f).RotatedBy((double)(k - (num33 / 2 - 1)) * Math.PI / (double)(float)num33) + center;
					Vector2 vector11 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - MathF.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
					int num34 = Dust.NewDust(vector10 + vector11, 0, 0, 172, vector11.X * 2f, vector11.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num34].noGravity = true;
					Main.dust[num34].noLight = true;
					Main.dust[num34].velocity /= 4f;
					Main.dust[num34].velocity -= velocity;
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num5)
				{
					ai[0] = 5f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] += 2f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 7f)
			{
				if (ai[2] == 0f)
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				if (ai[2] % (float)num16 == 0f)
				{
					SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
					if (Main.netMode != 1)
					{
						Vector2 vector12 = Vector2.Normalize(velocity) * (width + 20) / 2f + center;
						int num35 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector12.X, (int)vector12.Y + 45, 371);
						Main.npc[num35].target = target;
						Main.npc[num35].velocity = Vector2.Normalize(velocity).RotatedBy(MathF.PI / 2f * (float)direction) * num17;
						Main.npc[num35].netUpdate = true;
						Main.npc[num35].ai[3] = (float)Main.rand.Next(80, 121) / 100f;
					}
				}
				velocity = velocity.RotatedBy((0f - num19) * (float)direction);
				rotation -= num19 * (float)direction;
				ai[2] += 1f;
				if (ai[2] >= (float)num15)
				{
					ai[0] = 5f;
					ai[1] = 0f;
					ai[2] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 8f)
			{
				velocity *= 0.98f;
				velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
				if (ai[2] == (float)(num11 - 30))
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				if (Main.netMode != 1 && ai[2] == (float)(num11 - 30))
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center.X, center.Y, 0f, 0f, 385, 0, 0f, Main.myPlayer, 1f, target + 1, flag6 ? 1 : 0);
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num11)
				{
					ai[0] = 5f;
					ai[1] = 0f;
					ai[2] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 9f)
			{
				flag7 = false;
				if (ai[2] < (float)(num13 - 90))
				{
					if (Collision.SolidCollision(position, width, height))
					{
						alpha += 15;
					}
					else
					{
						alpha -= 15;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (alpha > 150)
					{
						alpha = 150;
					}
				}
				else if (alpha < 255)
				{
					alpha += 4;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				velocity *= 0.98f;
				velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
				if (ai[2] == (float)(num13 - 60))
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num13)
				{
					ai[0] = 10f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 10f && !player.dead)
			{
				chaseable = false;
				if (alpha < 255)
				{
					alpha += 25;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				if (ai[1] == 0f)
				{
					ai[1] = 360 * Math.Sign((center - player.Center).X);
				}
				Vector2 desiredVelocity = Vector2.Normalize(player.Center + new Vector2(ai[1], -200f) - center - velocity) * num4;
				SimpleFlyMovement(desiredVelocity, num3);
				int num36 = Math.Sign(player.Center.X - center.X);
				if (num36 != 0)
				{
					if (ai[2] == 0f && num36 != direction)
					{
						rotation += MathF.PI;
						for (int l = 0; l < oldPos.Length; l++)
						{
							oldPos[l] = Vector2.Zero;
						}
					}
					direction = num36;
					if (spriteDirection != -direction)
					{
						rotation += MathF.PI;
					}
					spriteDirection = -direction;
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num2)
				{
					int num37 = 0;
					switch ((int)ai[3])
					{
					case 0:
					case 2:
					case 3:
					case 5:
					case 6:
					case 7:
						num37 = 1;
						break;
					case 1:
					case 4:
					case 8:
						num37 = 2;
						break;
					}
					switch (num37)
					{
					case 1:
						ai[0] = 11f;
						ai[1] = 0f;
						ai[2] = 0f;
						velocity = Vector2.Normalize(player.Center - center) * num6;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X);
						if (num36 != 0)
						{
							direction = num36;
							if (spriteDirection == 1)
							{
								rotation += MathF.PI;
							}
							spriteDirection = -direction;
						}
						break;
					case 2:
						ai[0] = 12f;
						ai[1] = 0f;
						ai[2] = 0f;
						break;
					case 3:
						ai[0] = 13f;
						ai[1] = 0f;
						ai[2] = 0f;
						break;
					}
					netUpdate = true;
				}
			}
			else if (ai[0] == 11f)
			{
				chaseable = true;
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
				int num38 = 7;
				for (int m = 0; m < num38; m++)
				{
					Vector2 vector13 = (Vector2.Normalize(velocity) * new Vector2((float)(width + 50) / 2f, height) * 0.75f).RotatedBy((double)(m - (num38 / 2 - 1)) * Math.PI / (double)(float)num38) + center;
					Vector2 vector14 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - MathF.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
					int num39 = Dust.NewDust(vector13 + vector14, 0, 0, 172, vector14.X * 2f, vector14.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num39].noGravity = true;
					Main.dust[num39].noLight = true;
					Main.dust[num39].velocity /= 4f;
					Main.dust[num39].velocity -= velocity;
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num5)
				{
					ai[0] = 10f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] += 1f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 12f)
			{
				flag7 = false;
				chaseable = false;
				if (alpha < 255)
				{
					alpha += 17;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				velocity *= 0.98f;
				velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
				if (ai[2] == (float)(num14 / 2))
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				if (Main.netMode != 1 && ai[2] == (float)(num14 / 2))
				{
					if (ai[1] == 0f)
					{
						ai[1] = 300 * Math.Sign((center - player.Center).X);
					}
					Vector2 vector15 = player.Center + new Vector2(0f - ai[1], -200f);
					Vector2 vector17 = (base.Center = vector15);
					center = vector17;
					int num40 = Math.Sign(player.Center.X - center.X);
					if (num40 != 0)
					{
						if (ai[2] == 0f && num40 != direction)
						{
							rotation += MathF.PI;
							for (int n = 0; n < oldPos.Length; n++)
							{
								oldPos[n] = Vector2.Zero;
							}
						}
						direction = num40;
						if (spriteDirection != -direction)
						{
							rotation += MathF.PI;
						}
						spriteDirection = -direction;
					}
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num14)
				{
					ai[0] = 10f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] += 1f;
					if (ai[3] >= 9f)
					{
						ai[3] = 0f;
					}
					netUpdate = true;
				}
			}
			else if (ai[0] == 13f)
			{
				if (ai[2] == 0f)
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				velocity = velocity.RotatedBy((0f - num19) * (float)direction);
				rotation -= num19 * (float)direction;
				ai[2] += 1f;
				if (ai[2] >= (float)num15)
				{
					ai[0] = 10f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] += 1f;
					netUpdate = true;
				}
			}
			dontTakeDamage = !flag7;
		}

		private void AI_037_Destroyer()
		{
			int num = 0;
			int num2 = 10;
			if (IsMechQueenUp && type != 134)
			{
				int num3 = (int)ai[1];
				while (num3 > 0 && num3 < 200)
				{
					if (Main.npc[num3].active && Main.npc[num3].type >= 134 && Main.npc[num3].type <= 136)
					{
						num++;
						if (Main.npc[num3].type == 134)
						{
							break;
						}
						if (num >= num2)
						{
							num = 0;
							break;
						}
						num3 = (int)Main.npc[num3].ai[1];
						continue;
					}
					num = 0;
					break;
				}
			}
			if (ai[3] > 0f)
			{
				realLife = (int)ai[3];
			}
			if (target < 0 || target == 255 || Main.player[target].dead)
			{
				TargetClosest();
			}
			if (type >= 134 && type <= 136)
			{
				velocity.Length();
				if (type == 134 || (type != 134 && Main.npc[(int)ai[1]].alpha < 128))
				{
					if (alpha != 0)
					{
						for (int i = 0; i < 2; i++)
						{
							int num4 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 182, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num4].noGravity = true;
							Main.dust[num4].noLight = true;
						}
					}
					alpha -= 42;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
			}
			if (type > 134)
			{
				bool flag = false;
				if (ai[1] <= 0f)
				{
					flag = true;
				}
				else if (Main.npc[(int)ai[1]].life <= 0)
				{
					flag = true;
				}
				if (flag)
				{
					life = 0;
					HitEffect();
					checkDead();
				}
			}
			if (Main.netMode != 1)
			{
				if (ai[0] == 0f && type == 134)
				{
					ai[3] = whoAmI;
					realLife = whoAmI;
					int num5 = 0;
					int num6 = whoAmI;
					int destroyerSegmentsCount = GetDestroyerSegmentsCount();
					for (int j = 0; j <= destroyerSegmentsCount; j++)
					{
						int num7 = 135;
						if (j == destroyerSegmentsCount)
						{
							num7 = 136;
						}
						num5 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num7, whoAmI);
						Main.npc[num5].ai[3] = whoAmI;
						Main.npc[num5].realLife = whoAmI;
						Main.npc[num5].ai[1] = num6;
						Main.npc[num6].ai[0] = num5;
						NetMessage.SendData(23, -1, -1, null, num5);
						num6 = num5;
					}
				}
				if (type == 135)
				{
					localAI[0] += Main.rand.Next(4);
					if (localAI[0] >= (float)Main.rand.Next(1400, 26000))
					{
						localAI[0] = 0f;
						TargetClosest();
						if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)(height / 2));
							float num8 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector.X + (float)Main.rand.Next(-20, 21);
							float num9 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector.Y + (float)Main.rand.Next(-20, 21);
							float num10 = (float)Math.Sqrt(num8 * num8 + num9 * num9);
							num10 = 8f / num10;
							num8 *= num10;
							num9 *= num10;
							num8 += (float)Main.rand.Next(-20, 21) * 0.05f;
							num9 += (float)Main.rand.Next(-20, 21) * 0.05f;
							int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(22f, 18f);
							int num11 = 100;
							vector.X += num8 * 5f;
							vector.Y += num9 * 5f;
							int num12 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector.X, vector.Y, num8, num9, num11, attackDamage_ForProjectiles, 0f, Main.myPlayer);
							Main.projectile[num12].timeLeft = 300;
							netUpdate = true;
						}
					}
				}
			}
			int num13 = (int)(position.X / 16f) - 1;
			int num14 = (int)((position.X + (float)width) / 16f) + 2;
			int num15 = (int)(position.Y / 16f) - 1;
			int num16 = (int)((position.Y + (float)height) / 16f) + 2;
			if (num13 < 0)
			{
				num13 = 0;
			}
			if (num14 > Main.maxTilesX)
			{
				num14 = Main.maxTilesX;
			}
			if (num15 < 0)
			{
				num15 = 0;
			}
			if (num16 > Main.maxTilesY)
			{
				num16 = Main.maxTilesY;
			}
			bool flag2 = false;
			if (!flag2)
			{
				Vector2 vector2 = default(Vector2);
				for (int k = num13; k < num14; k++)
				{
					for (int l = num15; l < num16; l++)
					{
						if (Main.tile[k, l] != null && ((Main.tile[k, l].nactive() && (Main.tileSolid[Main.tile[k, l].type] || (Main.tileSolidTop[Main.tile[k, l].type] && Main.tile[k, l].frameY == 0))) || Main.tile[k, l].liquid > 64))
						{
							vector2.X = k * 16;
							vector2.Y = l * 16;
							if (position.X + (float)width > vector2.X && position.X < vector2.X + 16f && position.Y + (float)height > vector2.Y && position.Y < vector2.Y + 16f)
							{
								flag2 = true;
								break;
							}
						}
					}
				}
			}
			if (!flag2)
			{
				if (type != 135 || ai[2] != 1f)
				{
					Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.3f, 0.1f, 0.05f);
				}
				localAI[1] = 1f;
				if (type == 134)
				{
					Rectangle rectangle = new Rectangle((int)position.X, (int)position.Y, width, height);
					int num17 = 1000;
					bool flag3 = true;
					if (position.Y > Main.player[target].position.Y)
					{
						for (int m = 0; m < 255; m++)
						{
							if (Main.player[m].active)
							{
								Rectangle rectangle2 = new Rectangle((int)Main.player[m].position.X - num17, (int)Main.player[m].position.Y - num17, num17 * 2, num17 * 2);
								if (rectangle.Intersects(rectangle2))
								{
									flag3 = false;
									break;
								}
							}
						}
						if (flag3)
						{
							flag2 = true;
						}
					}
				}
			}
			else
			{
				localAI[1] = 0f;
			}
			float num18 = 16f;
			if (Main.IsItDay() || Main.player[target].dead)
			{
				flag2 = false;
				velocity.Y += 1f;
				if ((double)position.Y > Main.worldSurface * 16.0)
				{
					velocity.Y += 1f;
					num18 = 32f;
				}
				if ((double)position.Y > Main.rockLayer * 16.0)
				{
					for (int n = 0; n < 200; n++)
					{
						if (Main.npc[n].aiStyle == aiStyle)
						{
							Main.npc[n].active = false;
						}
					}
				}
			}
			float num19 = 0.1f;
			float num20 = 0.15f;
			if (Main.getGoodWorld)
			{
				num19 *= 1.2f;
				num20 *= 1.2f;
			}
			Vector2 vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num21 = Main.player[target].position.X + (float)(Main.player[target].width / 2);
			float num22 = Main.player[target].position.Y + (float)(Main.player[target].height / 2);
			num21 = (int)(num21 / 16f) * 16;
			num22 = (int)(num22 / 16f) * 16;
			vector3.X = (int)(vector3.X / 16f) * 16;
			vector3.Y = (int)(vector3.Y / 16f) * 16;
			num21 -= vector3.X;
			num22 -= vector3.Y;
			float num23 = (float)Math.Sqrt(num21 * num21 + num22 * num22);
			if (ai[1] > 0f && ai[1] < (float)Main.npc.Length)
			{
				int num24 = (int)(44f * scale);
				try
				{
					vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num21 = Main.npc[(int)ai[1]].position.X + (float)(Main.npc[(int)ai[1]].width / 2) - vector3.X;
					num22 = Main.npc[(int)ai[1]].position.Y + (float)(Main.npc[(int)ai[1]].height / 2) - vector3.Y;
				}
				catch
				{
				}
				if (num > 0)
				{
					float num25 = (float)num24 - (float)num24 * (((float)num - 1f) * 0.1f);
					if (num25 < 0f)
					{
						num25 = 0f;
					}
					if (num25 > (float)num24)
					{
						num25 = num24;
					}
					num22 = Main.npc[(int)ai[1]].position.Y + (float)(Main.npc[(int)ai[1]].height / 2) + num25 - vector3.Y;
				}
				rotation = (float)Math.Atan2(num22, num21) + 1.57f;
				num23 = (float)Math.Sqrt(num21 * num21 + num22 * num22);
				if (num > 0)
				{
					num24 = num24 / num2 * num;
				}
				num23 = (num23 - (float)num24) / num23;
				num21 *= num23;
				num22 *= num23;
				velocity = Vector2.Zero;
				position.X += num21;
				position.Y += num22;
				num21 = Main.npc[(int)ai[1]].position.X + (float)(Main.npc[(int)ai[1]].width / 2) - vector3.X;
				num22 = Main.npc[(int)ai[1]].position.Y + (float)(Main.npc[(int)ai[1]].height / 2) - vector3.Y;
				rotation = (float)Math.Atan2(num22, num21) + 1.57f;
			}
			else
			{
				if (!flag2)
				{
					TargetClosest();
					velocity.Y += 0.15f;
					if (velocity.Y > num18)
					{
						velocity.Y = num18;
					}
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num18 * 0.4)
					{
						if (velocity.X < 0f)
						{
							velocity.X -= num19 * 1.1f;
						}
						else
						{
							velocity.X += num19 * 1.1f;
						}
					}
					else if (velocity.Y == num18)
					{
						if (velocity.X < num21)
						{
							velocity.X += num19;
						}
						else if (velocity.X > num21)
						{
							velocity.X -= num19;
						}
					}
					else if (velocity.Y > 4f)
					{
						if (velocity.X < 0f)
						{
							velocity.X += num19 * 0.9f;
						}
						else
						{
							velocity.X -= num19 * 0.9f;
						}
					}
				}
				else
				{
					if (soundDelay == 0)
					{
						float num26 = num23 / 40f;
						if (num26 < 10f)
						{
							num26 = 10f;
						}
						if (num26 > 20f)
						{
							num26 = 20f;
						}
						soundDelay = (int)num26;
						SoundEngine.PlaySound(15, (int)position.X, (int)position.Y);
					}
					num23 = (float)Math.Sqrt(num21 * num21 + num22 * num22);
					float num27 = Math.Abs(num21);
					float num28 = Math.Abs(num22);
					float num29 = num18 / num23;
					num21 *= num29;
					num22 *= num29;
					if (((velocity.X > 0f && num21 > 0f) || (velocity.X < 0f && num21 < 0f)) && ((velocity.Y > 0f && num22 > 0f) || (velocity.Y < 0f && num22 < 0f)))
					{
						if (velocity.X < num21)
						{
							velocity.X += num20;
						}
						else if (velocity.X > num21)
						{
							velocity.X -= num20;
						}
						if (velocity.Y < num22)
						{
							velocity.Y += num20;
						}
						else if (velocity.Y > num22)
						{
							velocity.Y -= num20;
						}
					}
					if ((velocity.X > 0f && num21 > 0f) || (velocity.X < 0f && num21 < 0f) || (velocity.Y > 0f && num22 > 0f) || (velocity.Y < 0f && num22 < 0f))
					{
						if (velocity.X < num21)
						{
							velocity.X += num19;
						}
						else if (velocity.X > num21)
						{
							velocity.X -= num19;
						}
						if (velocity.Y < num22)
						{
							velocity.Y += num19;
						}
						else if (velocity.Y > num22)
						{
							velocity.Y -= num19;
						}
						if ((double)Math.Abs(num22) < (double)num18 * 0.2 && ((velocity.X > 0f && num21 < 0f) || (velocity.X < 0f && num21 > 0f)))
						{
							if (velocity.Y > 0f)
							{
								velocity.Y += num19 * 2f;
							}
							else
							{
								velocity.Y -= num19 * 2f;
							}
						}
						if ((double)Math.Abs(num21) < (double)num18 * 0.2 && ((velocity.Y > 0f && num22 < 0f) || (velocity.Y < 0f && num22 > 0f)))
						{
							if (velocity.X > 0f)
							{
								velocity.X += num19 * 2f;
							}
							else
							{
								velocity.X -= num19 * 2f;
							}
						}
					}
					else if (num27 > num28)
					{
						if (velocity.X < num21)
						{
							velocity.X += num19 * 1.1f;
						}
						else if (velocity.X > num21)
						{
							velocity.X -= num19 * 1.1f;
						}
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num18 * 0.5)
						{
							if (velocity.Y > 0f)
							{
								velocity.Y += num19;
							}
							else
							{
								velocity.Y -= num19;
							}
						}
					}
					else
					{
						if (velocity.Y < num22)
						{
							velocity.Y += num19 * 1.1f;
						}
						else if (velocity.Y > num22)
						{
							velocity.Y -= num19 * 1.1f;
						}
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num18 * 0.5)
						{
							if (velocity.X > 0f)
							{
								velocity.X += num19;
							}
							else
							{
								velocity.X -= num19;
							}
						}
					}
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				if (type == 134)
				{
					if (flag2)
					{
						if (localAI[0] != 1f)
						{
							netUpdate = true;
						}
						localAI[0] = 1f;
					}
					else
					{
						if (localAI[0] != 0f)
						{
							netUpdate = true;
						}
						localAI[0] = 0f;
					}
					if (((velocity.X > 0f && oldVelocity.X < 0f) || (velocity.X < 0f && oldVelocity.X > 0f) || (velocity.Y > 0f && oldVelocity.Y < 0f) || (velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
					{
						netUpdate = true;
					}
				}
			}
			if (IsMechQueenUp && type == 134)
			{
				NPC nPC = Main.npc[mechQueen];
				Vector2 mechQueenCenter = nPC.GetMechQueenCenter();
				Vector2 vector4 = new Vector2(0f, 100f);
				Vector2 spinningpoint = mechQueenCenter + vector4;
				float num30 = nPC.velocity.X * 0.025f;
				spinningpoint = spinningpoint.RotatedBy(num30, mechQueenCenter);
				position = spinningpoint - base.Size / 2f + nPC.velocity;
				velocity.X = 0f;
				velocity.Y = 0f;
				rotation = num30 * 0.75f + MathF.PI;
			}
		}

		private void AI_005_EaterOfSouls()
		{
			if (type == 210 || type == 211)
			{
				NPCUtils.TargetClosestNonBees(this);
			}
			else if (target < 0 || target <= 255 || Main.player[target].dead)
			{
				TargetClosest();
			}
			if (type == 619)
			{
				if (Main.dayTime)
				{
					velocity.Y -= 0.3f;
					EncourageDespawn(60);
				}
				position += netOffset;
				if (alpha == 255)
				{
					spriteDirection = direction;
					velocity.Y = -6f;
					for (int i = 0; i < 35; i++)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 5);
						dust.velocity *= 1f;
						dust.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust.velocity += velocity * 0.5f;
					}
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha != 0)
				{
					for (int j = 0; j < 2; j++)
					{
						Dust dust2 = Dust.NewDustDirect(position, width, height, 5);
						dust2.velocity *= 1f;
						dust2.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust2.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust2.velocity += velocity * 0.3f;
					}
				}
				position -= netOffset;
			}
			NPCAimedTarget targetData = GetTargetData();
			bool flag = false;
			if (targetData.Type == NPCTargetType.Player)
			{
				flag = Main.player[target].dead;
			}
			float num = 6f;
			float num2 = 0.05f;
			if (type == 6 || type == 173)
			{
				num = 4f;
				num2 = 0.02f;
				if (type == 6 && Main.expertMode)
				{
					num2 = 0.035f;
				}
				if (Main.remixWorld)
				{
					num2 = 0.06f;
					num = 5f;
				}
			}
			else if (type == 94)
			{
				num = 4.2f;
				num2 = 0.022f;
			}
			else if (type == 619)
			{
				num = 6f;
				num2 = 0.1f;
			}
			else if (type == 252)
			{
				if (targetData.Type != 0 && Collision.CanHit(this, targetData))
				{
					num = 6f;
					num2 = 0.1f;
				}
				else
				{
					num2 = 0.01f;
					num = 2f;
				}
			}
			else if (type == 42 || (type >= 231 && type <= 235))
			{
				num = 3.5f;
				num2 = 0.021f;
				if (type == 231)
				{
					num = 3f;
					num2 = 0.017f;
				}
				num *= 1f - scale;
				num2 *= 1f - scale;
				if ((double)(position.Y / 16f) < Main.worldSurface)
				{
					if (Main.player[target].position.Y - position.Y > 300f && velocity.Y < 0f)
					{
						velocity.Y *= 0.97f;
					}
					if (Main.player[target].position.Y - position.Y < 80f && velocity.Y > 0f)
					{
						velocity.Y *= 0.97f;
					}
				}
			}
			else if (type == 205)
			{
				num = 3.25f;
				num2 = 0.018f;
			}
			else if (type == 176)
			{
				num = 4f;
				num2 = 0.017f;
			}
			else if (type == 23)
			{
				num = 1f;
				num2 = 0.03f;
			}
			else if (type == 5)
			{
				num = 5f;
				num2 = 0.03f;
			}
			else if (type == 210 || type == 211)
			{
				ai[1] += 1f;
				float num3 = (ai[1] - 60f) / 60f;
				if (num3 > 1f)
				{
					num3 = 1f;
				}
				else
				{
					if (velocity.X > 6f)
					{
						velocity.X = 6f;
					}
					if (velocity.X < -6f)
					{
						velocity.X = -6f;
					}
					if (velocity.Y > 6f)
					{
						velocity.Y = 6f;
					}
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				num = 5f;
				num2 = 0.1f;
				num2 *= num3;
			}
			Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num4 = targetData.Position.X + (float)(targetData.Width / 2);
			float num5 = targetData.Position.Y + (float)(targetData.Height / 2);
			num4 = (int)(num4 / 8f) * 8;
			num5 = (int)(num5 / 8f) * 8;
			vector.X = (int)(vector.X / 8f) * 8;
			vector.Y = (int)(vector.Y / 8f) * 8;
			num4 -= vector.X;
			num5 -= vector.Y;
			float num6 = (float)Math.Sqrt(num4 * num4 + num5 * num5);
			float num7 = num6;
			bool flag2 = false;
			if (num6 > 600f)
			{
				flag2 = true;
			}
			if (num6 == 0f)
			{
				num4 = velocity.X;
				num5 = velocity.Y;
			}
			else
			{
				num6 = num / num6;
				num4 *= num6;
				num5 *= num6;
			}
			bool num8 = type == 6 || type == 139 || type == 173 || type == 205;
			bool flag3 = type == 42 || type == 94 || type == 619 || type == 176 || type == 210 || type == 211 || (type >= 231 && type <= 235);
			bool flag4 = type != 173 && type != 6 && type != 42 && (type < 231 || type > 235) && type != 94 && type != 139 && type != 619;
			if (num8 || flag3)
			{
				if (num7 > 100f || flag3)
				{
					ai[0] += 1f;
					if (ai[0] > 0f)
					{
						velocity.Y += 0.023f;
					}
					else
					{
						velocity.Y -= 0.023f;
					}
					if (ai[0] < -100f || ai[0] > 100f)
					{
						velocity.X += 0.023f;
					}
					else
					{
						velocity.X -= 0.023f;
					}
					if (ai[0] > 200f)
					{
						ai[0] = -200f;
					}
				}
				if (num7 < 150f && (type == 6 || type == 94 || type == 173 || type == 619))
				{
					velocity.X += num4 * 0.007f;
					velocity.Y += num5 * 0.007f;
				}
			}
			if (flag)
			{
				num4 = (float)direction * num / 2f;
				num5 = (0f - num) / 2f;
			}
			else if (type == 619 && base.Center.Y > targetData.Center.Y - 200f)
			{
				velocity.Y -= 0.3f;
			}
			if (type == 139 && ai[3] != 0f)
			{
				if (IsMechQueenUp)
				{
					NPC nPC = Main.npc[mechQueen];
					Vector2 vector2 = new Vector2(26f * ai[3], 0f);
					int num9 = (int)ai[2];
					if (num9 < 0 || num9 >= 200)
					{
						num9 = FindFirstNPC(134);
						ai[2] = num9;
						netUpdate = true;
					}
					if (num9 > -1)
					{
						NPC nPC2 = Main.npc[num9];
						if (!nPC2.active || nPC2.type != 134)
						{
							dontTakeDamage = false;
							if (ai[3] > 0f)
							{
								netUpdate = true;
							}
							ai[3] = 0f;
						}
						else
						{
							Vector2 spinningpoint = nPC2.Center + vector2;
							spinningpoint = (base.Center = spinningpoint.RotatedBy(nPC2.rotation, nPC2.Center));
							velocity = nPC.velocity;
							dontTakeDamage = true;
						}
					}
					else
					{
						dontTakeDamage = false;
						if (ai[3] > 0f)
						{
							netUpdate = true;
						}
						ai[3] = 0f;
					}
				}
				else
				{
					dontTakeDamage = false;
					if (ai[3] > 0f)
					{
						netUpdate = true;
					}
					ai[3] = 0f;
				}
			}
			else
			{
				if (type == 139)
				{
					dontTakeDamage = false;
				}
				if (velocity.X < num4)
				{
					velocity.X += num2;
					if (flag4 && velocity.X < 0f && num4 > 0f)
					{
						velocity.X += num2;
					}
				}
				else if (velocity.X > num4)
				{
					velocity.X -= num2;
					if (flag4 && velocity.X > 0f && num4 < 0f)
					{
						velocity.X -= num2;
					}
				}
				if (velocity.Y < num5)
				{
					velocity.Y += num2;
					if (flag4 && velocity.Y < 0f && num5 > 0f)
					{
						velocity.Y += num2;
					}
				}
				else if (velocity.Y > num5)
				{
					velocity.Y -= num2;
					if (flag4 && velocity.Y > 0f && num5 < 0f)
					{
						velocity.Y -= num2;
					}
				}
			}
			if (type == 23)
			{
				if (num4 > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num5, num4);
				}
				else if (num4 < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num5, num4) + 3.14f;
				}
			}
			else if (type == 139)
			{
				localAI[0] += 1f;
				if (ai[3] != 0f)
				{
					localAI[0] += 2f;
				}
				if (justHit)
				{
					localAI[0] = 0f;
				}
				if (Main.netMode != 1 && localAI[0] >= 120f)
				{
					localAI[0] = 0f;
					if (targetData.Type != 0 && Collision.CanHit(this, targetData))
					{
						int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(25f, 22f);
						int num10 = 84;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector.X, vector.Y, num4, num5, num10, attackDamage_ForProjectiles, 0f, Main.myPlayer);
					}
				}
				int num11 = (int)position.X + width / 2;
				int num12 = (int)position.Y + height / 2;
				num11 /= 16;
				num12 /= 16;
				if (WorldGen.InWorld(num11, num12) && !WorldGen.SolidTile(num11, num12))
				{
					Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.3f, 0.1f, 0.05f);
				}
				if (num4 > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num5, num4);
				}
				if (num4 < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num5, num4) + 3.14f;
				}
			}
			else if (type == 6 || type == 94 || type == 173 || type == 619)
			{
				rotation = (float)Math.Atan2(num5, num4) - 1.57f;
			}
			else if (type == 42 || type == 176 || type == 205 || (type >= 231 && type <= 235))
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
			}
			else
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
			}
			if (type == 6 || type == 619 || type == 23 || type == 42 || type == 94 || type == 139 || type == 173 || type == 176 || type == 205 || type == 210 || type == 211 || (type >= 231 && type <= 235))
			{
				float num13 = 0.7f;
				if (type == 6 || type == 173)
				{
					num13 = 0.4f;
				}
				if (collideX)
				{
					netUpdate = true;
					velocity.X = oldVelocity.X * (0f - num13);
					if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
					{
						velocity.X = 2f;
					}
					if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
					{
						velocity.X = -2f;
					}
				}
				if (collideY)
				{
					netUpdate = true;
					velocity.Y = oldVelocity.Y * (0f - num13);
					if (velocity.Y > 0f && (double)velocity.Y < 1.5)
					{
						velocity.Y = 2f;
					}
					if (velocity.Y < 0f && (double)velocity.Y > -1.5)
					{
						velocity.Y = -2f;
					}
				}
				position += netOffset;
				if (type == 619)
				{
					int num14 = Dust.NewDust(position, width, height, 5, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
					Main.dust[num14].velocity *= 0.5f;
				}
				else if (type != 42 && type != 139 && type != 176 && type != 205 && type != 210 && type != 211 && type != 252 && (type < 231 || type > 235) && Main.rand.Next(20) == 0)
				{
					int num15 = 18;
					if (type == 173)
					{
						num15 = 5;
					}
					int num16 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), num15, velocity.X, 2f, 75, color, scale);
					Main.dust[num16].velocity.X *= 0.5f;
					Main.dust[num16].velocity.Y *= 0.1f;
				}
				position -= netOffset;
			}
			else if (type != 252 && Main.rand.Next(40) == 0)
			{
				int num17 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, velocity.X, 2f);
				Main.dust[num17].velocity.X *= 0.5f;
				Main.dust[num17].velocity.Y *= 0.1f;
			}
			if ((type == 6 || type == 94 || type == 173 || type == 619) && wet)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.3f;
				if (velocity.Y < -2f)
				{
					velocity.Y = -2f;
				}
			}
			if (type == 205 && wet)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.5f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
				TargetClosest();
			}
			if (type == 42 || type == 176 || (type >= 231 && type <= 235))
			{
				if (wet)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.95f;
					}
					velocity.Y -= 0.5f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
					TargetClosest();
				}
				if (ai[1] == 101f)
				{
					SoundEngine.PlaySound(SoundID.Item17, position);
					ai[1] = 0f;
				}
				if (Main.netMode != 1)
				{
					ai[1] += (float)Main.rand.Next(5, 20) * 0.1f * scale;
					if (type == 176)
					{
						ai[1] += (float)Main.rand.Next(5, 20) * 0.1f * scale;
					}
					if (Main.getGoodWorld)
					{
						ai[1] += (float)Main.rand.Next(5, 20) * 0.1f * scale;
					}
					if (targetData.Type == NPCTargetType.Player)
					{
						Player player = Main.player[target];
						if (player != null && player.stealth == 0f && player.itemAnimation == 0)
						{
							ai[1] = 0f;
						}
					}
					if (ai[1] >= 130f)
					{
						if (targetData.Type != 0 && Collision.CanHit(this, targetData))
						{
							float num18 = 8f;
							Vector2 vector4 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)(height / 2));
							float num19 = targetData.Center.X - vector4.X + (float)Main.rand.Next(-20, 21);
							float num20 = targetData.Center.Y - vector4.Y + (float)Main.rand.Next(-20, 21);
							if ((num19 < 0f && velocity.X < 0f) || (num19 > 0f && velocity.X > 0f))
							{
								float num21 = (float)Math.Sqrt(num19 * num19 + num20 * num20);
								num21 = num18 / num21;
								num19 *= num21;
								num20 *= num21;
								int num22 = (int)(10f * scale);
								if (type == 176)
								{
									num22 = (int)(30f * scale);
								}
								int num23 = 55;
								int num24 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector4.X, vector4.Y, num19, num20, num23, num22, 0f, Main.myPlayer);
								Main.projectile[num24].timeLeft = 300;
								ai[1] = 101f;
								netUpdate = true;
							}
							else
							{
								ai[1] = 0f;
							}
						}
						else
						{
							ai[1] = 0f;
						}
					}
				}
			}
			if (type == 139 && flag2)
			{
				if ((velocity.X > 0f && num4 > 0f) || (velocity.X < 0f && num4 < 0f))
				{
					if (Math.Abs(velocity.X) < 12f)
					{
						velocity.X *= 1.05f;
					}
				}
				else
				{
					velocity.X *= 0.9f;
				}
			}
			if (Main.netMode != 1)
			{
				if (Main.getGoodWorld && type == 6 && AnyNPCs(13))
				{
					if (justHit)
					{
						localAI[0] = 0f;
					}
					localAI[0] += 1f;
					if (localAI[0] == 60f)
					{
						if (targetData.Type != 0 && Collision.CanHit(this, targetData))
						{
							NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2) + velocity.X), (int)(position.Y + (float)(height / 2) + velocity.Y), 666);
						}
						localAI[0] = 0f;
					}
				}
				if (type == 94 && !flag)
				{
					if (justHit)
					{
						localAI[0] = 0f;
					}
					localAI[0] += 1f;
					if (localAI[0] == 180f)
					{
						if (targetData.Type != 0 && Collision.CanHit(this, targetData))
						{
							NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2) + velocity.X), (int)(position.Y + (float)(height / 2) + velocity.Y), 112);
						}
						localAI[0] = 0f;
					}
				}
				if (type == 619 && !flag)
				{
					if (justHit)
					{
						localAI[0] += 10f;
					}
					localAI[0] += 1f;
					if (localAI[0] >= 120f)
					{
						if (targetData.Type != 0 && Collision.CanHit(this, targetData))
						{
							if ((base.Center - targetData.Center).Length() < 400f)
							{
								Vector2 vector5 = DirectionTo(new Vector2(targetData.Center.X, targetData.Position.Y));
								velocity = -vector5 * 5f;
								netUpdate = true;
								localAI[0] = 0f;
								vector5 = DirectionTo(new Vector2(targetData.Center.X + (float)Main.rand.Next(-100, 101), targetData.Position.Y + (float)Main.rand.Next(-100, 101)));
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center, vector5 * 15f, 811, 35, 1f, Main.myPlayer);
							}
							else
							{
								localAI[0] = 50f;
							}
						}
						else
						{
							localAI[0] = 50f;
						}
					}
				}
			}
			if ((Main.IsItDay() && type != 173 && type != 619 && type != 6 && type != 23 && type != 42 && type != 94 && type != 176 && type != 205 && type != 210 && type != 211 && type != 252 && (type < 231 || type > 235)) || flag)
			{
				velocity.Y -= num2 * 2f;
				EncourageDespawn(10);
			}
			if (((velocity.X > 0f && oldVelocity.X < 0f) || (velocity.X < 0f && oldVelocity.X > 0f) || (velocity.Y > 0f && oldVelocity.Y < 0f) || (velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
			{
				netUpdate = true;
			}
		}

		public void CopyInteractions(NPC npc)
		{
			for (int i = 0; i < playerInteraction.Length; i++)
			{
				playerInteraction[i] = npc.playerInteraction[i];
			}
			lastInteraction = npc.lastInteraction;
		}

		public static int GetEaterOfWorldsSegmentsCount()
		{
			if (!Main.expertMode)
			{
				return 65;
			}
			return 70;
		}

		public static int GetEaterOfWorldsSegmentsCountByGamemode(int gamemode)
		{
			if (!Main.RegisteredGameModes.TryGetValue(gamemode, out var gameModeData))
			{
				return 65;
			}
			if (!gameModeData.IsExpertMode)
			{
				return 65;
			}
			return 70;
		}

		public static int GetBrainOfCthuluCreepersCount()
		{
			if (Main.getGoodWorld)
			{
				return 40;
			}
			return 20;
		}

		public static int GetDestroyerSegmentsCount()
		{
			if (Main.getGoodWorld)
			{
				return 100;
			}
			return 80;
		}

		public Vector2 GetMechQueenCenter()
		{
			if (IsMechQueenUp && type == 127)
			{
				return base.Center + new Vector2(0f, -14f);
			}
			return base.Center;
		}

		private void AI_006_Worms()
		{
			if (type == 117 && localAI[1] == 0f)
			{
				localAI[1] = 1f;
				SoundEngine.PlaySound(SoundID.NPCDeath13, position);
				int num = 1;
				if (velocity.X < 0f)
				{
					num = -1;
				}
				for (int i = 0; i < 20; i++)
				{
					Dust.NewDust(new Vector2(position.X - 20f, position.Y - 20f), width + 40, height + 40, 5, num * 8, -1f);
				}
			}
			if (type == 454 && localAI[3] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item119, position);
				localAI[3] = 1f;
			}
			if (type >= 454 && type <= 459)
			{
				dontTakeDamage = alpha > 0;
				if (type == 454 || (type != 454 && Main.npc[(int)ai[1]].alpha < 85))
				{
					if (dontTakeDamage)
					{
						for (int j = 0; j < 2; j++)
						{
							int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num2].noGravity = true;
							Main.dust[num2].noLight = true;
						}
					}
					alpha -= 42;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
			}
			if (type >= 621 && type <= 623)
			{
				position += netOffset;
				dontTakeDamage = alpha > 0;
				if (type == 621 || (type != 621 && Main.npc[(int)ai[1]].alpha < 85))
				{
					if (dontTakeDamage)
					{
						for (int k = 0; k < 2; k++)
						{
							Dust.NewDust(position, width, height, 5, 0f, 0f, 100);
						}
					}
					alpha -= 42;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (alpha == 0 && Main.rand.Next(5) == 0)
				{
					Dust.NewDust(position, width, height, 5, 0f, 0f, 100);
				}
				position -= netOffset;
			}
			else if (type == 402)
			{
				ai[2] += 1f;
				float num3 = 600f;
				float num4 = num3 - 30f;
				if (velocity.Length() >= 1f && ai[2] <= num4)
				{
					velocity *= Utils.Remap(ai[2], num4 * 0.5f, num4, 1f, 0.5f);
				}
				if (ai[2] == num4)
				{
					for (int l = 0; l < 50; l++)
					{
						Vector2 vector = Main.rand.NextVector2Circular(8f, 8f);
						if (Main.rand.Next(2) == 0)
						{
							int num5 = Dust.NewDust(position, width, height, 180, 0f, 0f, 100);
							Main.dust[num5].scale += (float)Main.rand.Next(50) * 0.04f;
							Main.dust[num5].noGravity = true;
							Main.dust[num5].velocity = vector;
							Main.dust[num5].fadeIn = Main.rand.NextFloat() * 1.5f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num6 = Dust.NewDust(position, width, height, 176, 0f, 0f, 100);
							Main.dust[num6].scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
							Main.dust[num6].noGravity = true;
							Main.dust[num6].velocity = vector;
							Main.dust[num6].fadeIn = Main.rand.NextFloat() * 1.5f;
						}
					}
					if (Main.netMode != 1)
					{
						SpawnStardustMark_StardustWorm();
						velocity = velocity.SafeNormalize(Vector2.Zero) * 6f;
						netUpdate = true;
					}
				}
				if (ai[2] >= num3 && Main.netMode != 1)
				{
					ai[2] = 0f;
					netUpdate = true;
				}
			}
			if (Main.netMode != 1 && Main.expertMode)
			{
				if (type == 14 && ((double)(position.Y / 16f) < Main.worldSurface || Main.getGoodWorld))
				{
					int num7 = (int)(base.Center.X / 16f);
					int num8 = (int)(base.Center.Y / 16f);
					if (WorldGen.InWorld(num7, num8) && Main.tile[num7, num8].wall == 0)
					{
						int num9 = 900;
						if (Main.getGoodWorld)
						{
							num9 /= 2;
						}
						if (Main.rand.Next(num9) == 0)
						{
							TargetClosest();
							if (Collision.CanHitLine(base.Center, 1, 1, Main.player[target].Center, 1, 1))
							{
								NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2) + velocity.X), (int)(position.Y + (float)(height / 2) + velocity.Y), 666, 0, 0f, 1f);
							}
						}
					}
				}
				else if (type == 13)
				{
					int num10 = 90;
					num10 += (int)((float)life / (float)lifeMax * 60f * 5f);
					if (Main.rand.Next(num10) == 0)
					{
						TargetClosest();
						if (Collision.CanHitLine(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2) + velocity.X), (int)(position.Y + (float)(height / 2) + velocity.Y), 666, 0, 0f, 1f);
						}
					}
				}
			}
			bool flag = false;
			float num11 = 0.2f;
			switch (type)
			{
			case 513:
				flag = !Main.player[target].ZoneUndergroundDesert;
				num11 = 0.1f;
				break;
			case 10:
			case 39:
			case 95:
			case 117:
			case 510:
				flag = true;
				break;
			case 621:
				flag = false;
				break;
			}
			if (type >= 13 && type <= 15)
			{
				realLife = -1;
			}
			else if (ai[3] > 0f)
			{
				realLife = (int)ai[3];
			}
			if (target < 0 || target == 255 || Main.player[target].dead || (flag && (double)Main.player[target].position.Y < Main.worldSurface * 16.0))
			{
				TargetClosest();
			}
			if (Main.player[target].dead || (flag && (double)Main.player[target].position.Y < Main.worldSurface * 16.0))
			{
				EncourageDespawn(300);
				if (flag)
				{
					velocity.Y += num11;
				}
			}
			if (type == 621 && Main.dayTime)
			{
				EncourageDespawn(60);
				velocity.Y += 1f;
			}
			if (Main.netMode != 1)
			{
				if (type == 87 && ai[0] == 0f)
				{
					ai[3] = whoAmI;
					realLife = whoAmI;
					int num12 = 0;
					int num13 = whoAmI;
					for (int m = 0; m < 14; m++)
					{
						int num14 = 89;
						switch (m)
						{
						case 1:
						case 8:
							num14 = 88;
							break;
						case 11:
							num14 = 90;
							break;
						case 12:
							num14 = 91;
							break;
						case 13:
							num14 = 92;
							break;
						}
						num12 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num14, whoAmI);
						Main.npc[num12].ai[3] = whoAmI;
						Main.npc[num12].realLife = whoAmI;
						Main.npc[num12].ai[1] = num13;
						Main.npc[num12].CopyInteractions(this);
						Main.npc[num13].ai[0] = num12;
						NetMessage.SendData(23, -1, -1, null, num12);
						num13 = num12;
					}
				}
				if (type == 454 && ai[0] == 0f)
				{
					ai[3] = whoAmI;
					realLife = whoAmI;
					int num15 = 0;
					int num16 = whoAmI;
					for (int n = 0; n < 30; n++)
					{
						int num17 = 456;
						if ((n - 2) % 4 == 0 && n < 26)
						{
							num17 = 455;
						}
						else
						{
							switch (n)
							{
							case 27:
								num17 = 457;
								break;
							case 28:
								num17 = 458;
								break;
							case 29:
								num17 = 459;
								break;
							}
						}
						num15 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num17, whoAmI);
						Main.npc[num15].ai[3] = whoAmI;
						Main.npc[num15].realLife = whoAmI;
						Main.npc[num15].ai[1] = num16;
						Main.npc[num15].CopyInteractions(this);
						Main.npc[num16].ai[0] = num15;
						NetMessage.SendData(23, -1, -1, null, num15);
						num16 = num15;
					}
				}
				if (type == 513 && ai[0] == 0f)
				{
					ai[3] = whoAmI;
					realLife = whoAmI;
					int num18 = 0;
					int num19 = whoAmI;
					int num20 = Main.rand.Next(6, 10);
					for (int num21 = 0; num21 < num20; num21++)
					{
						int num22 = 514;
						if (num21 == num20 - 1)
						{
							num22 = 515;
						}
						num18 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num22, whoAmI);
						Main.npc[num18].ai[3] = whoAmI;
						Main.npc[num18].realLife = whoAmI;
						Main.npc[num18].ai[1] = num19;
						Main.npc[num18].CopyInteractions(this);
						Main.npc[num19].ai[0] = num18;
						NetMessage.SendData(23, -1, -1, null, num18);
						num19 = num18;
					}
				}
				if (type == 510 && ai[0] == 0f)
				{
					ai[3] = whoAmI;
					realLife = whoAmI;
					int num23 = 0;
					int num24 = whoAmI;
					int num25 = Main.rand.Next(12, 21);
					for (int num26 = 0; num26 < num25; num26++)
					{
						int num27 = 511;
						if (num26 == num25 - 1)
						{
							num27 = 512;
						}
						num23 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num27, whoAmI);
						Main.npc[num23].ai[3] = whoAmI;
						Main.npc[num23].realLife = whoAmI;
						Main.npc[num23].ai[1] = num24;
						Main.npc[num23].CopyInteractions(this);
						Main.npc[num24].ai[0] = num23;
						NetMessage.SendData(23, -1, -1, null, num23);
						num24 = num23;
					}
				}
				if (type == 621 && ai[0] == 0f)
				{
					ai[3] = whoAmI;
					realLife = whoAmI;
					int num28 = 0;
					int num29 = whoAmI;
					int num30 = 16;
					for (int num31 = 0; num31 < num30; num31++)
					{
						int num32 = 622;
						if (num31 == num30 - 1)
						{
							num32 = 623;
						}
						num28 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num32, whoAmI);
						Main.npc[num28].ai[3] = whoAmI;
						Main.npc[num28].realLife = whoAmI;
						Main.npc[num28].ai[1] = num29;
						Main.npc[num28].CopyInteractions(this);
						Main.npc[num29].ai[0] = num28;
						NetMessage.SendData(23, -1, -1, null, num28);
						num29 = num28;
					}
				}
				else if ((type == 7 || type == 8 || type == 10 || type == 11 || type == 13 || type == 14 || type == 39 || type == 40 || type == 95 || type == 96 || type == 98 || type == 99 || type == 117 || type == 118) && ai[0] == 0f)
				{
					if (type == 7 || type == 10 || type == 13 || type == 39 || type == 95 || type == 98 || type == 117)
					{
						if (type < 13 || type > 15)
						{
							ai[3] = whoAmI;
							realLife = whoAmI;
						}
						ai[2] = Main.rand.Next(8, 13);
						if (type == 10)
						{
							ai[2] = Main.rand.Next(4, 7);
						}
						if (type == 13)
						{
							ai[2] = GetEaterOfWorldsSegmentsCount();
						}
						if (type == 39)
						{
							ai[2] = Main.rand.Next(14, 23);
							if (Main.getGoodWorld)
							{
								ai[2] += 3f;
								if (Main.remixWorld)
								{
									ai[2] += 4f;
								}
							}
						}
						if (type == 95)
						{
							ai[2] = Main.rand.Next(6, 12);
						}
						if (type == 98)
						{
							ai[2] = Main.rand.Next(20, 26);
						}
						if (type == 117)
						{
							ai[2] = Main.rand.Next(3, 6);
						}
						if (type == 7 && Main.remixWorld)
						{
							ai[2] *= 2f;
						}
						ai[0] = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), type + 1, whoAmI);
						Main.npc[(int)ai[0]].CopyInteractions(this);
					}
					else if ((type == 8 || type == 11 || type == 14 || type == 40 || type == 96 || type == 99 || type == 118) && ai[2] > 0f)
					{
						ai[0] = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), type, whoAmI);
						Main.npc[(int)ai[0]].CopyInteractions(this);
					}
					else
					{
						ai[0] = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), type + 1, whoAmI);
						Main.npc[(int)ai[0]].CopyInteractions(this);
					}
					if (type < 13 || type > 15)
					{
						Main.npc[(int)ai[0]].ai[3] = ai[3];
						Main.npc[(int)ai[0]].realLife = realLife;
					}
					Main.npc[(int)ai[0]].ai[1] = whoAmI;
					Main.npc[(int)ai[0]].ai[2] = ai[2] - 1f;
					netUpdate = true;
				}
				if (type == 412 && ai[0] == 0f)
				{
					ai[3] = whoAmI;
					realLife = whoAmI;
					int num33 = 0;
					int num34 = whoAmI;
					int num35 = 30;
					for (int num36 = 0; num36 < num35; num36++)
					{
						int num37 = 413;
						if (num36 == num35 - 1)
						{
							num37 = 414;
						}
						num33 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num37, whoAmI);
						Main.npc[num33].ai[3] = whoAmI;
						Main.npc[num33].realLife = whoAmI;
						Main.npc[num33].ai[1] = num34;
						Main.npc[num33].CopyInteractions(this);
						Main.npc[num34].ai[0] = num33;
						NetMessage.SendData(23, -1, -1, null, num33);
						num34 = num33;
					}
				}
				switch (type)
				{
				case 8:
				case 9:
				case 11:
				case 12:
				case 40:
				case 41:
				case 88:
				case 89:
				case 90:
				case 91:
				case 92:
				case 96:
				case 97:
				case 99:
				case 100:
				case 118:
				case 119:
				case 413:
				case 414:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 511:
				case 512:
				case 514:
				case 515:
				case 622:
				case 623:
					if (!Main.npc[(int)ai[1]].active || Main.npc[(int)ai[1]].aiStyle != aiStyle)
					{
						life = 0;
						HitEffect();
						checkDead();
						active = false;
						NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
						return;
					}
					break;
				}
				switch (type)
				{
				case 7:
				case 8:
				case 10:
				case 11:
				case 39:
				case 40:
				case 87:
				case 88:
				case 89:
				case 90:
				case 91:
				case 95:
				case 96:
				case 98:
				case 99:
				case 117:
				case 118:
				case 412:
				case 413:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 510:
				case 511:
				case 513:
				case 514:
				case 621:
				case 622:
					if (!Main.npc[(int)ai[0]].active || Main.npc[(int)ai[0]].aiStyle != aiStyle)
					{
						life = 0;
						HitEffect();
						checkDead();
						active = false;
						NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
						return;
					}
					break;
				}
				if (type == 13 || type == 14 || type == 15)
				{
					if (!Main.npc[(int)ai[1]].active && !Main.npc[(int)ai[0]].active)
					{
						life = 0;
						HitEffect();
						checkDead();
						active = false;
						NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
						return;
					}
					if (type == 13 && !Main.npc[(int)ai[0]].active)
					{
						life = 0;
						HitEffect();
						checkDead();
						active = false;
						NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
						return;
					}
					if (type == 15 && !Main.npc[(int)ai[1]].active)
					{
						life = 0;
						HitEffect();
						checkDead();
						active = false;
						NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
						return;
					}
					if (type == 14 && (!Main.npc[(int)ai[1]].active || Main.npc[(int)ai[1]].aiStyle != aiStyle))
					{
						type = 13;
						int num38 = whoAmI;
						float num39 = (float)life / (float)lifeMax;
						float num40 = ai[0];
						SetDefaultsKeepPlayerInteraction(type);
						life = (int)((float)lifeMax * num39);
						ai[0] = num40;
						TargetClosest();
						netUpdate = true;
						whoAmI = num38;
						alpha = 0;
					}
					if (type == 14 && (!Main.npc[(int)ai[0]].active || Main.npc[(int)ai[0]].aiStyle != aiStyle))
					{
						type = 15;
						int num41 = whoAmI;
						float num42 = (float)life / (float)lifeMax;
						float num43 = ai[1];
						SetDefaultsKeepPlayerInteraction(type);
						life = (int)((float)lifeMax * num42);
						ai[1] = num43;
						TargetClosest();
						netUpdate = true;
						whoAmI = num41;
						alpha = 0;
					}
				}
				if (!active && Main.netMode == 2)
				{
					NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
				}
			}
			int num44 = (int)(position.X / 16f) - 1;
			int num45 = (int)((position.X + (float)width) / 16f) + 2;
			int num46 = (int)(position.Y / 16f) - 1;
			int num47 = (int)((position.Y + (float)height) / 16f) + 2;
			if (num44 < 0)
			{
				num44 = 0;
			}
			if (num45 > Main.maxTilesX)
			{
				num45 = Main.maxTilesX;
			}
			if (num46 < 0)
			{
				num46 = 0;
			}
			if (num47 > Main.maxTilesY)
			{
				num47 = Main.maxTilesY;
			}
			bool flag2 = false;
			if (type >= 87 && type <= 92)
			{
				flag2 = true;
			}
			if (type >= 454 && type <= 459)
			{
				flag2 = true;
			}
			if (type >= 621 && type <= 623)
			{
				flag2 = true;
			}
			if (type >= 412 && type <= 414)
			{
				flag2 = true;
			}
			if (type == 402)
			{
				flag2 = true;
			}
			if (!flag2)
			{
				Vector2 vector2 = default(Vector2);
				for (int num48 = num44; num48 < num45; num48++)
				{
					for (int num49 = num46; num49 < num47; num49++)
					{
						if (Main.tile[num48, num49] == null || ((!Main.tile[num48, num49].nactive() || (!Main.tileSolid[Main.tile[num48, num49].type] && (!Main.tileSolidTop[Main.tile[num48, num49].type] || Main.tile[num48, num49].frameY != 0))) && Main.tile[num48, num49].liquid <= 64))
						{
							continue;
						}
						vector2.X = num48 * 16;
						vector2.Y = num49 * 16;
						if (position.X + (float)width > vector2.X && position.X < vector2.X + 16f && position.Y + (float)height > vector2.Y && position.Y < vector2.Y + 16f)
						{
							flag2 = true;
							if (Main.rand.Next(100) == 0 && type != 117 && Main.tile[num48, num49].nactive() && Main.tileSolid[Main.tile[num48, num49].type])
							{
								WorldGen.KillTile(num48, num49, fail: true, effectOnly: true);
							}
						}
					}
				}
			}
			if (!flag2 && (type == 7 || type == 10 || type == 13 || type == 39 || type == 95 || type == 98 || type == 117 || type == 375 || type == 454 || type == 510 || type == 513 || type == 621))
			{
				Rectangle rectangle = new Rectangle((int)position.X, (int)position.Y, width, height);
				int num50 = 1000;
				bool flag3 = true;
				for (int num51 = 0; num51 < 255; num51++)
				{
					if (Main.player[num51].active)
					{
						Rectangle rectangle2 = new Rectangle((int)Main.player[num51].position.X - num50, (int)Main.player[num51].position.Y - num50, num50 * 2, num50 * 2);
						if (rectangle.Intersects(rectangle2))
						{
							flag3 = false;
							break;
						}
					}
				}
				if (flag3)
				{
					flag2 = true;
				}
			}
			if ((type >= 87 && type <= 92) || (type >= 454 && type <= 459) || (type >= 621 && type <= 623))
			{
				if (velocity.X < 0f)
				{
					spriteDirection = 1;
				}
				else if (velocity.X > 0f)
				{
					spriteDirection = -1;
				}
			}
			if (type == 414)
			{
				if (justHit)
				{
					localAI[3] = 3f;
				}
				if (localAI[2] > 0f)
				{
					localAI[2] -= 16f;
					if (localAI[2] == 0f)
					{
						localAI[2] = -128f;
					}
				}
				else if (localAI[2] < 0f)
				{
					localAI[2] += 16f;
				}
				else if (localAI[3] > 0f)
				{
					localAI[2] = 128f;
					localAI[3] -= 1f;
				}
			}
			if (type == 412)
			{
				position += netOffset;
				Vector2 vector3 = base.Center + (rotation - MathF.PI / 2f).ToRotationVector2() * 8f;
				Vector2 vector4 = rotation.ToRotationVector2() * 16f;
				Dust obj = Main.dust[Dust.NewDust(vector3 + vector4, 0, 0, 6, velocity.X, velocity.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 3f)];
				obj.noGravity = true;
				obj.noLight = true;
				obj.position -= new Vector2(4f);
				obj.fadeIn = 1f;
				obj.velocity = Vector2.Zero;
				Dust obj2 = Main.dust[Dust.NewDust(vector3 - vector4, 0, 0, 6, velocity.X, velocity.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 3f)];
				obj2.noGravity = true;
				obj2.noLight = true;
				obj2.position -= new Vector2(4f);
				obj2.fadeIn = 1f;
				obj2.velocity = Vector2.Zero;
				position -= netOffset;
			}
			float num52 = 8f;
			float num53 = 0.07f;
			if (type == 95)
			{
				num52 = 5.5f;
				num53 = 0.045f;
			}
			if (type == 10)
			{
				num52 = 6f;
				num53 = 0.05f;
			}
			if (type == 513)
			{
				num52 = 7f;
				num53 = 0.1f;
			}
			if (type == 7)
			{
				num52 = 9f;
				num53 = 0.1f;
			}
			if (type == 13)
			{
				num52 = 10f;
				num53 = 0.07f;
				if (Main.expertMode)
				{
					num52 = 12f;
					num53 = 0.15f;
				}
				if (Main.getGoodWorld)
				{
					num52 += 4f;
					num53 += 0.05f;
				}
			}
			if (type == 510)
			{
				if (!Main.player[target].dead && Main.player[target].ZoneSandstorm)
				{
					num52 = 16f;
					num53 = 0.35f;
				}
				else
				{
					num52 = 10f;
					num53 = 0.25f;
				}
			}
			if (type == 87)
			{
				num52 = 11f;
				num53 = 0.25f;
			}
			if (type == 621)
			{
				num52 = 15f;
				num53 = 0.45f;
			}
			if (type == 375)
			{
				num52 = 6f;
				num53 = 0.15f;
			}
			if (type == 454)
			{
				num52 = 20f;
				num53 = 0.55f;
			}
			if (type == 402)
			{
				num52 = 9f;
				num53 = 0.3f;
			}
			if (type == 117 && Main.wofNPCIndex >= 0)
			{
				float num54 = (float)Main.npc[Main.wofNPCIndex].life / (float)Main.npc[Main.wofNPCIndex].lifeMax;
				if ((double)num54 < 0.5)
				{
					num52 += 1f;
					num53 += 0.1f;
				}
				if ((double)num54 < 0.25)
				{
					num52 += 1f;
					num53 += 0.1f;
				}
				if ((double)num54 < 0.1)
				{
					num52 += 2f;
					num53 += 0.1f;
				}
			}
			if (type == 39)
			{
				num52 = 9f;
				num53 = 0.1f;
				if (Main.getGoodWorld)
				{
					num52 = 10f;
					num53 = 0.12f;
				}
			}
			Vector2 vector5 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num55 = Main.player[target].position.X + (float)(Main.player[target].width / 2);
			float num56 = Main.player[target].position.Y + (float)(Main.player[target].height / 2);
			if (type == 412)
			{
				num52 = 10f;
				num53 = 0.3f;
				int num57 = -1;
				int num58 = (int)(Main.player[target].Center.X / 16f);
				int num59 = (int)(Main.player[target].Center.Y / 16f);
				for (int num60 = num58 - 2; num60 <= num58 + 2; num60++)
				{
					for (int num61 = num59; num61 <= num59 + 15; num61++)
					{
						if (WorldGen.SolidTile2(num60, num61))
						{
							num57 = num61;
							break;
						}
					}
					if (num57 > 0)
					{
						break;
					}
				}
				if (num57 > 0)
				{
					num57 *= 16;
					float num62 = num57 - 800;
					if (Main.player[target].position.Y > num62)
					{
						num56 = num62;
						if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 500f)
						{
							num55 = ((!(velocity.X > 0f)) ? (Main.player[target].Center.X - 600f) : (Main.player[target].Center.X + 600f));
						}
					}
				}
				else
				{
					num52 = 14f;
					num53 = 0.5f;
				}
				float num63 = num52 * 1.3f;
				float num64 = num52 * 0.7f;
				float num65 = velocity.Length();
				if (num65 > 0f)
				{
					if (num65 > num63)
					{
						velocity.Normalize();
						velocity *= num63;
					}
					else if (num65 < num64)
					{
						velocity.Normalize();
						velocity *= num64;
					}
				}
				if (num57 > 0)
				{
					for (int num66 = 0; num66 < 200; num66++)
					{
						if (Main.npc[num66].active && Main.npc[num66].type == type && num66 != whoAmI)
						{
							Vector2 vector6 = Main.npc[num66].Center - base.Center;
							if (vector6.Length() < 400f)
							{
								vector6.Normalize();
								vector6 *= 1000f;
								num55 -= vector6.X;
								num56 -= vector6.Y;
							}
						}
					}
				}
				else
				{
					for (int num67 = 0; num67 < 200; num67++)
					{
						if (Main.npc[num67].active && Main.npc[num67].type == type && num67 != whoAmI)
						{
							Vector2 vector7 = Main.npc[num67].Center - base.Center;
							if (vector7.Length() < 60f)
							{
								vector7.Normalize();
								vector7 *= 200f;
								num55 -= vector7.X;
								num56 -= vector7.Y;
							}
						}
					}
				}
			}
			num55 = (int)(num55 / 16f) * 16;
			num56 = (int)(num56 / 16f) * 16;
			vector5.X = (int)(vector5.X / 16f) * 16;
			vector5.Y = (int)(vector5.Y / 16f) * 16;
			num55 -= vector5.X;
			num56 -= vector5.Y;
			if (type == 375)
			{
				num55 *= -1f;
				num56 *= -1f;
			}
			float num68 = (float)Math.Sqrt(num55 * num55 + num56 * num56);
			if (ai[1] > 0f && ai[1] < (float)Main.npc.Length)
			{
				try
				{
					vector5 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num55 = Main.npc[(int)ai[1]].position.X + (float)(Main.npc[(int)ai[1]].width / 2) - vector5.X;
					num56 = Main.npc[(int)ai[1]].position.Y + (float)(Main.npc[(int)ai[1]].height / 2) - vector5.Y;
				}
				catch
				{
				}
				rotation = (float)Math.Atan2(num56, num55) + 1.57f;
				num68 = (float)Math.Sqrt(num55 * num55 + num56 * num56);
				int num69 = width;
				if (type >= 87 && type <= 92)
				{
					num69 = 42;
				}
				if (type >= 454 && type <= 459)
				{
					num69 = 36;
				}
				if (type >= 13 && type <= 15)
				{
					num69 = (int)((float)num69 * scale);
				}
				if (type >= 513 && type <= 515)
				{
					num69 -= 6;
				}
				if (type >= 412 && type <= 414)
				{
					num69 += 6;
				}
				if (type >= 621 && type <= 623)
				{
					num69 = 24;
				}
				if (Main.getGoodWorld && type >= 13 && type <= 15)
				{
					num69 = 62;
				}
				num68 = (num68 - (float)num69) / num68;
				num55 *= num68;
				num56 *= num68;
				velocity = Vector2.Zero;
				position.X += num55;
				position.Y += num56;
				if (type >= 87 && type <= 92)
				{
					if (num55 < 0f)
					{
						spriteDirection = 1;
					}
					else if (num55 > 0f)
					{
						spriteDirection = -1;
					}
				}
				if (type >= 454 && type <= 459)
				{
					if (num55 < 0f)
					{
						spriteDirection = 1;
					}
					else if (num55 > 0f)
					{
						spriteDirection = -1;
					}
				}
				if (type >= 621 && type <= 623)
				{
					if (num55 < 0f)
					{
						spriteDirection = 1;
					}
					else if (num55 > 0f)
					{
						spriteDirection = -1;
					}
				}
			}
			else
			{
				if (!flag2)
				{
					TargetClosest();
					if (type == 39 && velocity.Y < 0f)
					{
						velocity.Y += 0.08f;
					}
					else
					{
						velocity.Y += 0.11f;
					}
					if (velocity.Y > num52)
					{
						velocity.Y = num52;
					}
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num52 * 0.4)
					{
						if (velocity.X < 0f)
						{
							velocity.X -= num53 * 1.1f;
						}
						else
						{
							velocity.X += num53 * 1.1f;
						}
					}
					else if (velocity.Y == num52)
					{
						if (velocity.X < num55)
						{
							velocity.X += num53;
						}
						else if (velocity.X > num55)
						{
							velocity.X -= num53;
						}
					}
					else if (velocity.Y > 4f)
					{
						if (velocity.X < 0f)
						{
							velocity.X += num53 * 0.9f;
						}
						else
						{
							velocity.X -= num53 * 0.9f;
						}
					}
				}
				else
				{
					if (type != 621 && type != 87 && type != 117 && type != 454 && type != 412 && soundDelay == 0)
					{
						float num70 = num68 / 40f;
						if (num70 < 10f)
						{
							num70 = 10f;
						}
						if (num70 > 20f)
						{
							num70 = 20f;
						}
						soundDelay = (int)num70;
						SoundEngine.PlaySound(15, (int)position.X, (int)position.Y);
					}
					num68 = (float)Math.Sqrt(num55 * num55 + num56 * num56);
					float num71 = Math.Abs(num55);
					float num72 = Math.Abs(num56);
					float num73 = num52 / num68;
					num55 *= num73;
					num56 *= num73;
					bool flag4 = false;
					if ((type == 7 || type == 13) && ((!Main.player[target].ZoneCorrupt && !Main.player[target].ZoneCrimson) || Main.player[target].dead))
					{
						flag4 = true;
					}
					if ((type == 513 && (double)Main.player[target].position.Y < Main.worldSurface * 16.0 && !Main.player[target].ZoneSandstorm && !Main.player[target].ZoneUndergroundDesert) || Main.player[target].dead)
					{
						flag4 = true;
					}
					if ((type == 510 && (double)Main.player[target].position.Y < Main.worldSurface * 16.0 && !Main.player[target].ZoneSandstorm && !Main.player[target].ZoneUndergroundDesert) || Main.player[target].dead)
					{
						flag4 = true;
					}
					if (flag4)
					{
						bool flag5 = true;
						for (int num74 = 0; num74 < 255; num74++)
						{
							if (Main.player[num74].active && !Main.player[num74].dead && Main.player[num74].ZoneCorrupt)
							{
								flag5 = false;
							}
						}
						if (flag5)
						{
							if (Main.netMode != 1 && (double)(position.Y / 16f) > (Main.rockLayer + (double)Main.maxTilesY) / 2.0)
							{
								active = false;
								int num75 = (int)ai[0];
								while (num75 > 0 && num75 < 200 && Main.npc[num75].active && Main.npc[num75].aiStyle == aiStyle)
								{
									int num76 = (int)Main.npc[num75].ai[0];
									Main.npc[num75].active = false;
									life = 0;
									if (Main.netMode == 2)
									{
										NetMessage.SendData(23, -1, -1, null, num75);
									}
									num75 = num76;
								}
								if (Main.netMode == 2)
								{
									NetMessage.SendData(23, -1, -1, null, whoAmI);
								}
							}
							num55 = 0f;
							num56 = num52;
						}
					}
					bool flag6 = false;
					if (type == 87)
					{
						if (((velocity.X > 0f && num55 < 0f) || (velocity.X < 0f && num55 > 0f) || (velocity.Y > 0f && num56 < 0f) || (velocity.Y < 0f && num56 > 0f)) && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > num53 / 2f && num68 < 300f)
						{
							flag6 = true;
							if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num52)
							{
								velocity *= 1.1f;
							}
						}
						if (position.Y > Main.player[target].position.Y || (double)(Main.player[target].position.Y / 16f) > Main.worldSurface || Main.player[target].dead)
						{
							flag6 = true;
							if (Math.Abs(velocity.X) < num52 / 2f)
							{
								if (velocity.X == 0f)
								{
									velocity.X -= direction;
								}
								velocity.X *= 1.1f;
							}
							else if (velocity.Y > 0f - num52)
							{
								velocity.Y -= num53;
							}
						}
					}
					if (type == 454 || type == 621)
					{
						float num77 = 300f;
						if (type == 621)
						{
							num77 = 120f;
						}
						if (((velocity.X > 0f && num55 < 0f) || (velocity.X < 0f && num55 > 0f) || (velocity.Y > 0f && num56 < 0f) || (velocity.Y < 0f && num56 > 0f)) && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > num53 / 2f && num68 < num77)
						{
							flag6 = true;
							if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num52)
							{
								velocity *= 1.1f;
							}
						}
						if (position.Y > Main.player[target].position.Y || Main.player[target].dead)
						{
							flag6 = true;
							if (Math.Abs(velocity.X) < num52 / 2f)
							{
								if (velocity.X == 0f)
								{
									velocity.X -= direction;
								}
								velocity.X *= 1.1f;
							}
							else if (velocity.Y > 0f - num52)
							{
								velocity.Y -= num53;
							}
						}
					}
					if (!flag6)
					{
						if ((velocity.X > 0f && num55 > 0f) || (velocity.X < 0f && num55 < 0f) || (velocity.Y > 0f && num56 > 0f) || (velocity.Y < 0f && num56 < 0f))
						{
							if (velocity.X < num55)
							{
								velocity.X += num53;
							}
							else if (velocity.X > num55)
							{
								velocity.X -= num53;
							}
							if (velocity.Y < num56)
							{
								velocity.Y += num53;
							}
							else if (velocity.Y > num56)
							{
								velocity.Y -= num53;
							}
							if ((double)Math.Abs(num56) < (double)num52 * 0.2 && ((velocity.X > 0f && num55 < 0f) || (velocity.X < 0f && num55 > 0f)))
							{
								if (velocity.Y > 0f)
								{
									velocity.Y += num53 * 2f;
								}
								else
								{
									velocity.Y -= num53 * 2f;
								}
							}
							if ((double)Math.Abs(num55) < (double)num52 * 0.2 && ((velocity.Y > 0f && num56 < 0f) || (velocity.Y < 0f && num56 > 0f)))
							{
								if (velocity.X > 0f)
								{
									velocity.X += num53 * 2f;
								}
								else
								{
									velocity.X -= num53 * 2f;
								}
							}
						}
						else if (num71 > num72)
						{
							if (velocity.X < num55)
							{
								velocity.X += num53 * 1.1f;
							}
							else if (velocity.X > num55)
							{
								velocity.X -= num53 * 1.1f;
							}
							if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num52 * 0.5)
							{
								if (velocity.Y > 0f)
								{
									velocity.Y += num53;
								}
								else
								{
									velocity.Y -= num53;
								}
							}
						}
						else
						{
							if (velocity.Y < num56)
							{
								velocity.Y += num53 * 1.1f;
							}
							else if (velocity.Y > num56)
							{
								velocity.Y -= num53 * 1.1f;
							}
							if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num52 * 0.5)
							{
								if (velocity.X > 0f)
								{
									velocity.X += num53;
								}
								else
								{
									velocity.X -= num53;
								}
							}
						}
					}
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				if (type == 7 || type == 10 || type == 13 || type == 39 || type == 95 || type == 98 || type == 117 || type == 510 || type == 513 || type == 621)
				{
					if (flag2)
					{
						if (localAI[0] != 1f)
						{
							netUpdate = true;
						}
						localAI[0] = 1f;
					}
					else
					{
						if (localAI[0] != 0f)
						{
							netUpdate = true;
						}
						localAI[0] = 0f;
					}
					if (((velocity.X > 0f && oldVelocity.X < 0f) || (velocity.X < 0f && oldVelocity.X > 0f) || (velocity.Y > 0f && oldVelocity.Y < 0f) || (velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
					{
						netUpdate = true;
					}
				}
				if (type == 454)
				{
					float num78 = Vector2.Distance(Main.player[target].Center, base.Center);
					int num79 = 0;
					if (Vector2.Normalize(Main.player[target].Center - base.Center).ToRotation().AngleTowards(velocity.ToRotation(), MathF.PI / 2f) == velocity.ToRotation() && num78 < 350f)
					{
						num79 = 4;
					}
					if ((double)num79 > frameCounter)
					{
						frameCounter += 1.0;
					}
					if ((double)num79 < frameCounter)
					{
						frameCounter -= 1.0;
					}
					if (frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					if (frameCounter > 4.0)
					{
						frameCounter = 4.0;
					}
				}
			}
			if (type < 13 || type > 15 || (type != 13 && (type == 13 || Main.npc[(int)ai[1]].alpha >= 85)))
			{
				return;
			}
			if (alpha > 0 && life > 0)
			{
				for (int num80 = 0; num80 < 2; num80++)
				{
					int num81 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num81].noGravity = true;
					Main.dust[num81].noLight = true;
				}
			}
			if ((position - oldPosition).Length() > 2f)
			{
				alpha -= 42;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
		}

		private void AI_002_FloatingEye()
		{
			if ((type == 170 || type == 171 || type == 180) && Main.rand.Next(1000) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 9);
			}
			noGravity = true;
			if (!noTileCollide)
			{
				if (collideX)
				{
					velocity.X = oldVelocity.X * -0.5f;
					if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
					{
						velocity.X = 2f;
					}
					if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
					{
						velocity.X = -2f;
					}
				}
				if (collideY)
				{
					velocity.Y = oldVelocity.Y * -0.5f;
					if (velocity.Y > 0f && velocity.Y < 1f)
					{
						velocity.Y = 1f;
					}
					if (velocity.Y < 0f && velocity.Y > -1f)
					{
						velocity.Y = -1f;
					}
				}
			}
			if (DespawnEncouragement_AIStyle2_FloatingEye_IsDiscouraged(type, position, target))
			{
				EncourageDespawn(10);
				directionY = -1;
				if (velocity.Y > 0f)
				{
					direction = 1;
				}
				direction = -1;
				if (velocity.X > 0f)
				{
					direction = 1;
				}
			}
			else
			{
				TargetClosest();
			}
			if (type == 170 || type == 171 || type == 180)
			{
				if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					if (ai[1] > 0f && !Collision.SolidCollision(position, width, height))
					{
						ai[1] = 0f;
						ai[0] = 0f;
						netUpdate = true;
					}
				}
				else if (ai[1] == 0f)
				{
					ai[0] += 1f;
				}
				if (ai[0] >= 300f)
				{
					ai[1] = 1f;
					ai[0] = 0f;
					netUpdate = true;
				}
				if (ai[1] == 0f)
				{
					alpha = 0;
					noTileCollide = false;
				}
				else
				{
					wet = false;
					alpha = 200;
					noTileCollide = true;
				}
				rotation = velocity.Y * 0.1f * (float)direction;
				TargetClosest();
				if (direction == -1 && velocity.X > -4f && position.X > Main.player[target].position.X + (float)Main.player[target].width)
				{
					velocity.X -= 0.08f;
					if (velocity.X > 4f)
					{
						velocity.X -= 0.04f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X -= 0.2f;
					}
					if (velocity.X < -4f)
					{
						velocity.X = -4f;
					}
				}
				else if (direction == 1 && velocity.X < 4f && position.X + (float)width < Main.player[target].position.X)
				{
					velocity.X += 0.08f;
					if (velocity.X < -4f)
					{
						velocity.X += 0.04f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X += 0.2f;
					}
					if (velocity.X > 4f)
					{
						velocity.X = 4f;
					}
				}
				if (directionY == -1 && (double)velocity.Y > -2.5 && position.Y > Main.player[target].position.Y + (float)Main.player[target].height)
				{
					velocity.Y -= 0.1f;
					if ((double)velocity.Y > 2.5)
					{
						velocity.Y -= 0.05f;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y -= 0.15f;
					}
					if ((double)velocity.Y < -2.5)
					{
						velocity.Y = -2.5f;
					}
				}
				else if (directionY == 1 && (double)velocity.Y < 2.5 && position.Y + (float)height < Main.player[target].position.Y)
				{
					velocity.Y += 0.1f;
					if ((double)velocity.Y < -2.5)
					{
						velocity.Y += 0.05f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y += 0.15f;
					}
					if ((double)velocity.Y > 2.5)
					{
						velocity.Y = 2.5f;
					}
				}
			}
			else if (type == 116)
			{
				TargetClosest();
				Lighting.AddLight((int)(position.X + (float)(width / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.3f, 0.2f, 0.1f);
				if (direction == -1 && velocity.X > -6f)
				{
					velocity.X -= 0.1f;
					if (velocity.X > 6f)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X -= 0.2f;
					}
					if (velocity.X < -6f)
					{
						velocity.X = -6f;
					}
				}
				else if (direction == 1 && velocity.X < 6f)
				{
					velocity.X += 0.1f;
					if (velocity.X < -6f)
					{
						velocity.X += 0.1f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X += 0.2f;
					}
					if (velocity.X > 6f)
					{
						velocity.X = 6f;
					}
				}
				if (directionY == -1 && (double)velocity.Y > -2.5)
				{
					velocity.Y -= 0.04f;
					if ((double)velocity.Y > 2.5)
					{
						velocity.Y -= 0.05f;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y -= 0.15f;
					}
					if ((double)velocity.Y < -2.5)
					{
						velocity.Y = -2.5f;
					}
				}
				else if (directionY == 1 && (double)velocity.Y < 1.5)
				{
					velocity.Y += 0.04f;
					if ((double)velocity.Y < -2.5)
					{
						velocity.Y += 0.05f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y += 0.15f;
					}
					if ((double)velocity.Y > 2.5)
					{
						velocity.Y = 2.5f;
					}
				}
				if (Main.rand.Next(40) == 0)
				{
					position += netOffset;
					int num = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, velocity.X, 2f);
					Main.dust[num].velocity.X *= 0.5f;
					Main.dust[num].velocity.Y *= 0.1f;
					position -= netOffset;
				}
			}
			else if (type == 133)
			{
				if ((double)life < (double)lifeMax * 0.5)
				{
					if (direction == -1 && velocity.X > -6f)
					{
						velocity.X -= 0.1f;
						if (velocity.X > 6f)
						{
							velocity.X -= 0.1f;
						}
						else if (velocity.X > 0f)
						{
							velocity.X += 0.05f;
						}
						if (velocity.X < -6f)
						{
							velocity.X = -6f;
						}
					}
					else if (direction == 1 && velocity.X < 6f)
					{
						velocity.X += 0.1f;
						if (velocity.X < -6f)
						{
							velocity.X += 0.1f;
						}
						else if (velocity.X < 0f)
						{
							velocity.X -= 0.05f;
						}
						if (velocity.X > 6f)
						{
							velocity.X = 6f;
						}
					}
					if (directionY == -1 && velocity.Y > -4f)
					{
						velocity.Y -= 0.1f;
						if (velocity.Y > 4f)
						{
							velocity.Y -= 0.1f;
						}
						else if (velocity.Y > 0f)
						{
							velocity.Y += 0.05f;
						}
						if (velocity.Y < -4f)
						{
							velocity.Y = -4f;
						}
					}
					else if (directionY == 1 && velocity.Y < 4f)
					{
						velocity.Y += 0.1f;
						if (velocity.Y < -4f)
						{
							velocity.Y += 0.1f;
						}
						else if (velocity.Y < 0f)
						{
							velocity.Y -= 0.05f;
						}
						if (velocity.Y > 4f)
						{
							velocity.Y = 4f;
						}
					}
				}
				else
				{
					if (direction == -1 && velocity.X > -4f)
					{
						velocity.X -= 0.1f;
						if (velocity.X > 4f)
						{
							velocity.X -= 0.1f;
						}
						else if (velocity.X > 0f)
						{
							velocity.X += 0.05f;
						}
						if (velocity.X < -4f)
						{
							velocity.X = -4f;
						}
					}
					else if (direction == 1 && velocity.X < 4f)
					{
						velocity.X += 0.1f;
						if (velocity.X < -4f)
						{
							velocity.X += 0.1f;
						}
						else if (velocity.X < 0f)
						{
							velocity.X -= 0.05f;
						}
						if (velocity.X > 4f)
						{
							velocity.X = 4f;
						}
					}
					if (directionY == -1 && (double)velocity.Y > -1.5)
					{
						velocity.Y -= 0.04f;
						if ((double)velocity.Y > 1.5)
						{
							velocity.Y -= 0.05f;
						}
						else if (velocity.Y > 0f)
						{
							velocity.Y += 0.03f;
						}
						if ((double)velocity.Y < -1.5)
						{
							velocity.Y = -1.5f;
						}
					}
					else if (directionY == 1 && (double)velocity.Y < 1.5)
					{
						velocity.Y += 0.04f;
						if ((double)velocity.Y < -1.5)
						{
							velocity.Y += 0.05f;
						}
						else if (velocity.Y < 0f)
						{
							velocity.Y -= 0.03f;
						}
						if ((double)velocity.Y > 1.5)
						{
							velocity.Y = 1.5f;
						}
					}
				}
			}
			else
			{
				float num2 = 4f;
				float num3 = 1.5f;
				num2 *= 1f + (1f - scale);
				num3 *= 1f + (1f - scale);
				if (direction == -1 && velocity.X > 0f - num2)
				{
					velocity.X -= 0.1f;
					if (velocity.X > num2)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X += 0.05f;
					}
					if (velocity.X < 0f - num2)
					{
						velocity.X = 0f - num2;
					}
				}
				else if (direction == 1 && velocity.X < num2)
				{
					velocity.X += 0.1f;
					if (velocity.X < 0f - num2)
					{
						velocity.X += 0.1f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X -= 0.05f;
					}
					if (velocity.X > num2)
					{
						velocity.X = num2;
					}
				}
				if (directionY == -1 && velocity.Y > 0f - num3)
				{
					velocity.Y -= 0.04f;
					if (velocity.Y > num3)
					{
						velocity.Y -= 0.05f;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y += 0.03f;
					}
					if (velocity.Y < 0f - num3)
					{
						velocity.Y = 0f - num3;
					}
				}
				else if (directionY == 1 && velocity.Y < num3)
				{
					velocity.Y += 0.04f;
					if (velocity.Y < 0f - num3)
					{
						velocity.Y += 0.05f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y -= 0.03f;
					}
					if (velocity.Y > num3)
					{
						velocity.Y = num3;
					}
				}
			}
			if ((type == 2 || type == 133 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194) && Main.rand.Next(40) == 0)
			{
				position += netOffset;
				int num4 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, velocity.X, 2f);
				Main.dust[num4].velocity.X *= 0.5f;
				Main.dust[num4].velocity.Y *= 0.1f;
				position -= netOffset;
			}
			if (wet && type != 170 && type != 171 && type != 172)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.5f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
				TargetClosest();
			}
		}

		private void StingerExplosion()
		{
			int num = Main.rand.Next(4, 9);
			for (int i = 0; i < num; i++)
			{
				float num2 = 8f;
				Vector2 vector = new Vector2(Main.rand.NextFloat() - 0.5f, Main.rand.NextFloat() - 0.5f);
				vector.Normalize();
				vector *= num2;
				int num3 = (int)(10f * scale);
				if (type == 176)
				{
					num3 = (int)(30f * scale);
				}
				int num4 = 55;
				int num5 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector.X, vector.Y, num4, num3, 0f, Main.myPlayer);
				Main.projectile[num5].timeLeft = 300;
			}
		}

		public static bool DespawnEncouragement_AIStyle2_FloatingEye_IsDiscouraged(int npcID, Vector2 npcPosition, int target = 255)
		{
			if (!Main.player[target].ZoneGraveyard && Main.IsItDay() && (double)npcPosition.Y <= Main.worldSurface * 16.0)
			{
				if (npcID != 2 && npcID != 133 && npcID != 190 && npcID != 191 && npcID != 192 && npcID != 193 && npcID != 194 && npcID != 317)
				{
					return npcID == 318;
				}
				return true;
			}
			return false;
		}

		private bool AI_007_TownEntities_IsInAGoodRestingSpot(int tileX, int tileY, int idealRestX, int idealRestY)
		{
			if (!Main.dayTime && ai[0] == 5f)
			{
				if (Math.Abs(tileX - idealRestX) < 7)
				{
					return Math.Abs(tileY - idealRestY) < 7;
				}
				return false;
			}
			if ((type == 361 || type == 445 || type == 687) && wet)
			{
				return false;
			}
			if (tileX == idealRestX)
			{
				return tileY == idealRestY;
			}
			return false;
		}

		private void AI_007_FindGoodRestingSpot(int myTileX, int myTileY, out int floorX, out int floorY)
		{
			floorX = homeTileX;
			floorY = homeTileY;
			if (floorX == -1 || floorY == -1)
			{
				return;
			}
			while (!WorldGen.SolidOrSlopedTile(floorX, floorY) && floorY < Main.maxTilesY - 20)
			{
				floorY++;
			}
			if (Main.dayTime || (ai[0] == 5f && Math.Abs(myTileX - floorX) < 7 && Math.Abs(myTileY - floorY) < 7))
			{
				return;
			}
			Point point = new Point(floorX, floorY);
			Point point2 = new Point(-1, -1);
			int num = -1;
			if (type == 638 || type == 656 || NPCID.Sets.IsTownSlime[type] || ai[0] == 5f)
			{
				return;
			}
			int num2 = 7;
			int num3 = 6;
			int num4 = 2;
			int num5 = 1;
			int num6 = 2;
			for (int i = point.X - num2; i <= point.X + num2; i += num5)
			{
				for (int num7 = point.Y + num4; num7 >= point.Y - num3; num7 -= num6)
				{
					Tile tile = Main.tile[i, num7];
					if (tile != null && tile.active() && TileID.Sets.CanBeSatOnForNPCs[tile.type] && (tile.frameY % 40 != 0 || num7 + 1 <= point.Y + num4))
					{
						int num8 = Math.Abs(i - point.X) + Math.Abs(num7 - point.Y);
						if (num == -1 || num8 < num)
						{
							num = num8;
							point2.X = i;
							point2.Y = num7;
						}
					}
				}
			}
			if (num == -1)
			{
				return;
			}
			Tile tile2 = Main.tile[point2.X, point2.Y];
			if (tile2.type == 497 || tile2.type == 15)
			{
				if (tile2.frameY % 40 != 0)
				{
					point2.Y--;
				}
				point2.Y += 2;
			}
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active && Main.npc[j].aiStyle == 7 && Main.npc[j].townNPC && Main.npc[j].ai[0] == 5f && (Main.npc[j].Bottom + Vector2.UnitY * -2f).ToTileCoordinates() == point2)
				{
					return;
				}
			}
			floorX = point2.X;
			floorY = point2.Y;
		}

		private void AI_007_TryForcingSitting(int homeFloorX, int homeFloorY)
		{
			Tile tile = Main.tile[homeFloorX, homeFloorY - 1];
			bool flag = type != 638 && type != 656 && !NPCID.Sets.IsTownSlime[type] && ai[0] != 5f;
			if (flag)
			{
				flag &= tile != null && tile.active() && (tile.type == 15 || tile.type == 497);
			}
			if (flag)
			{
				flag &= tile.type != 15 || tile.frameY < 1080 || tile.frameY > 1098;
			}
			if (flag)
			{
				Point point = (base.Bottom + Vector2.UnitY * -2f).ToTileCoordinates();
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && Main.npc[i].aiStyle == 7 && Main.npc[i].townNPC && Main.npc[i].ai[0] == 5f && (Main.npc[i].Bottom + Vector2.UnitY * -2f).ToTileCoordinates() == point)
					{
						flag = false;
						break;
					}
				}
			}
			if (flag)
			{
				ai[0] = 5f;
				ai[1] = 900 + Main.rand.Next(10800);
				direction = ((tile.frameX != 0) ? 1 : (-1));
				base.Bottom = new Vector2(homeFloorX * 16 + 8 + 2 * direction, homeFloorY * 16);
				velocity = Vector2.Zero;
				localAI[3] = 0f;
				netUpdate = true;
			}
		}

		public void UpdateHomeTileState(bool homeless, int x, int y)
		{
			bool num = x != homeTileX || y != homeTileY || this.homeless != homeless;
			this.homeless = homeless;
			homeTileX = x;
			homeTileY = y;
			if (num && Main.netMode != 1)
			{
				byte householdStatus = WorldGen.TownManager.GetHouseholdStatus(this);
				NetMessage.SendData(60, -1, -1, null, whoAmI, homeTileX, homeTileY, (int)householdStatus);
			}
		}

		public Color GetMagicAuraColor()
		{
			Color result = NPCID.Sets.MagicAuraColor[type];
			if (type == 160 && townNpcVariationIndex == 1)
			{
				result = new Color(result.B, result.G, result.R, result.A);
			}
			if (type == 20 && townNpcVariationIndex == 1)
			{
				result = new Color(90, 20, 210, result.A);
			}
			if (type == 663 && townNpcVariationIndex == 1)
			{
				result = new Color(255, 0, 77, result.A);
			}
			return result;
		}

		private void AI_007_TownEntities()
		{
			if (NPCID.Sets.ShimmerTownTransform[type])
			{
				if (townNpcVariationIndex == 0)
				{
					ShimmeredTownNPCs.Remove(type);
				}
				else
				{
					ShimmeredTownNPCs.Add(type);
				}
			}
			if (type == 441 && GivenName == "Andrew")
			{
				defense = 200;
			}
			int num = 300;
			if (type == 638 || type == 656 || NPCID.Sets.IsTownSlime[type])
			{
				num = 0;
			}
			bool flag = Main.raining;
			if (!Main.dayTime)
			{
				flag = true;
			}
			if (Main.eclipse)
			{
				flag = true;
			}
			if (Main.slimeRain)
			{
				flag = true;
			}
			float num2 = 1f;
			if (Main.masterMode)
			{
				defense = (dryadWard ? (defDefense + 14) : defDefense);
			}
			else if (Main.expertMode)
			{
				defense = (dryadWard ? (defDefense + 10) : defDefense);
			}
			else
			{
				defense = (dryadWard ? (defDefense + 6) : defDefense);
			}
			if (isLikeATownNPC)
			{
				if (combatBookWasUsed)
				{
					num2 += 0.2f;
					defense += 6;
				}
				if (combatBookVolumeTwoWasUsed)
				{
					num2 += 0.2f;
					defense += 6;
				}
				if (downedBoss1)
				{
					num2 += 0.1f;
					defense += 3;
				}
				if (downedBoss2)
				{
					num2 += 0.1f;
					defense += 3;
				}
				if (downedBoss3)
				{
					num2 += 0.1f;
					defense += 3;
				}
				if (downedQueenBee)
				{
					num2 += 0.1f;
					defense += 3;
				}
				if (Main.hardMode)
				{
					num2 += 0.4f;
					defense += 12;
				}
				if (downedQueenSlime)
				{
					num2 += 0.15f;
					defense += 6;
				}
				if (downedMechBoss1)
				{
					num2 += 0.15f;
					defense += 6;
				}
				if (downedMechBoss2)
				{
					num2 += 0.15f;
					defense += 6;
				}
				if (downedMechBoss3)
				{
					num2 += 0.15f;
					defense += 6;
				}
				if (downedPlantBoss)
				{
					num2 += 0.15f;
					defense += 8;
				}
				if (downedEmpressOfLight)
				{
					num2 += 0.15f;
					defense += 8;
				}
				if (downedGolemBoss)
				{
					num2 += 0.15f;
					defense += 8;
				}
				if (downedAncientCultist)
				{
					num2 += 0.15f;
					defense += 8;
				}
			}
			if (type == 142 && Main.netMode != 1 && !Main.xMas)
			{
				StrikeNPCNoInteraction(9999, 0f, 0);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(28, -1, -1, null, whoAmI, 9999f);
				}
			}
			if ((type == 148 || type == 149) && localAI[0] == 0f)
			{
				localAI[0] = Main.rand.Next(1, 5);
			}
			if (type == 124)
			{
				int num3 = lazyNPCOwnedProjectileSearchArray[whoAmI];
				bool flag2 = false;
				if (Main.projectile.IndexInRange(num3))
				{
					Projectile projectile = Main.projectile[num3];
					if (projectile.active && projectile.type == 582 && projectile.ai[1] == (float)whoAmI)
					{
						flag2 = true;
					}
				}
				localAI[0] = flag2.ToInt();
			}
			if ((type == 362 || type == 364 || type == 602 || type == 608) && Main.netMode != 1 && (velocity.Y > 4f || velocity.Y < -4f || wet))
			{
				int num4 = direction;
				Transform(type + 1);
				TargetClosest();
				direction = num4;
				netUpdate = true;
				return;
			}
			switch (type)
			{
			case 588:
				savedGolfer = true;
				break;
			case 441:
				savedTaxCollector = true;
				break;
			case 107:
				savedGoblin = true;
				break;
			case 108:
				savedWizard = true;
				break;
			case 124:
				savedMech = true;
				break;
			case 353:
				savedStylist = true;
				break;
			case 369:
				savedAngler = true;
				break;
			case 550:
				savedBartender = true;
				break;
			}
			dontTakeDamage = false;
			if (ai[0] == 25f)
			{
				dontTakeDamage = true;
				if (ai[1] == 0f)
				{
					velocity.X = 0f;
				}
				shimmerWet = false;
				wet = false;
				lavaWet = false;
				honeyWet = false;
				if (ai[1] == 0f && Main.netMode == 1)
				{
					return;
				}
				if (ai[1] == 0f && ai[2] < 1f)
				{
					AI_007_TownEntities_Shimmer_TeleportToLandingSpot();
				}
				if (ai[2] > 0f)
				{
					ai[2] -= 1f;
					if (ai[2] <= 0f)
					{
						ai[1] = 1f;
					}
					return;
				}
				ai[1] += 1f;
				if (ai[1] >= 30f)
				{
					if (!Collision.WetCollision(position, width, height))
					{
						shimmerTransparency = MathHelper.Clamp(shimmerTransparency - 1f / 60f, 0f, 1f);
					}
					else
					{
						ai[1] = 30f;
					}
					velocity = new Vector2(0f, -4f * shimmerTransparency);
				}
				Rectangle hitbox = base.Hitbox;
				hitbox.Y += 20;
				hitbox.Height -= 20;
				float num5 = Main.rand.NextFloatDirection();
				Lighting.AddLight(base.Center, Main.hslToRgb((float)Main.timeForVisualEffects / 360f % 1f, 0.6f, 0.65f).ToVector3() * Utils.Remap(ai[1], 30f, 90f, 0f, 0.7f));
				if (Main.rand.NextFloat() > Utils.Remap(ai[1], 30f, 60f, 1f, 0.5f))
				{
					Dust.NewDustPerfect(Main.rand.NextVector2FromRectangle(hitbox) + Main.rand.NextVector2Circular(8f, 0f) + new Vector2(0f, 4f), 309, new Vector2(0f, -2f).RotatedBy(num5 * (MathF.PI * 2f) * 0.11f), 0, default(Color), 1.7f - Math.Abs(num5) * 1.3f);
				}
				if (ai[1] > 60f && Main.rand.Next(15) == 0)
				{
					for (int i = 0; i < 3; i++)
					{
						Vector2 vector = Main.rand.NextVector2FromRectangle(base.Hitbox);
						ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.ShimmerBlock, new ParticleOrchestraSettings
						{
							PositionInWorld = vector,
							MovementVector = DirectionTo(vector).RotatedBy(MathF.PI * 9f / 20f * (float)(Main.rand.Next(2) * 2 - 1)) * Main.rand.NextFloat()
						});
					}
				}
				TargetClosest();
				NPCAimedTarget targetData = GetTargetData();
				if (ai[1] >= 75f && shimmerTransparency <= 0f && Main.netMode != 1)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] = 0f;
					Math.Sign(targetData.Center.X - base.Center.X);
					velocity = new Vector2(0f, -4f);
					localAI[0] = 0f;
					localAI[1] = 0f;
					localAI[2] = 0f;
					localAI[3] = 0f;
					netUpdate = true;
					townNpcVariationIndex = ((townNpcVariationIndex != 1) ? 1 : 0);
					NetMessage.SendData(56, -1, -1, null, whoAmI);
					Teleport(position, 12);
					ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.ShimmerTownNPC, new ParticleOrchestraSettings
					{
						PositionInWorld = base.Center
					});
				}
				return;
			}
			if (type >= 0 && type < 688 && NPCID.Sets.TownCritter[type] && target == 255)
			{
				TargetClosest();
				if (position.X < Main.player[target].position.X)
				{
					direction = 1;
					spriteDirection = direction;
				}
				if (position.X > Main.player[target].position.X)
				{
					direction = -1;
					spriteDirection = direction;
				}
				if (homeTileX == -1)
				{
					UpdateHomeTileState(homeless, (int)((position.X + (float)(width / 2)) / 16f), homeTileY);
				}
			}
			else if (homeTileX == -1 && homeTileY == -1 && velocity.Y == 0f && !shimmering)
			{
				UpdateHomeTileState(homeless, (int)base.Center.X / 16, (int)(position.Y + (float)height + 4f) / 16);
			}
			bool flag3 = false;
			int num6 = (int)(position.X + (float)(width / 2)) / 16;
			int num7 = (int)(position.Y + (float)height + 1f) / 16;
			AI_007_FindGoodRestingSpot(num6, num7, out var floorX, out var floorY);
			if (type == 441)
			{
				taxCollector = true;
			}
			directionY = -1;
			if (direction == 0)
			{
				direction = 1;
			}
			if (ai[0] != 24f)
			{
				for (int j = 0; j < 255; j++)
				{
					if (Main.player[j].active && Main.player[j].talkNPC == whoAmI)
					{
						flag3 = true;
						if (ai[0] != 0f)
						{
							netUpdate = true;
						}
						ai[0] = 0f;
						ai[1] = 300f;
						localAI[3] = 100f;
						if (Main.player[j].position.X + (float)(Main.player[j].width / 2) < position.X + (float)(width / 2))
						{
							direction = -1;
						}
						else
						{
							direction = 1;
						}
					}
				}
			}
			if (ai[3] == 1f)
			{
				life = -1;
				HitEffect();
				active = false;
				netUpdate = true;
				if (type == 37)
				{
					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				}
				return;
			}
			if (type == 37 && Main.netMode != 1)
			{
				UpdateHomeTileState(homeless: false, Main.dungeonX, Main.dungeonY);
				if (downedBoss3)
				{
					ai[3] = 1f;
					netUpdate = true;
				}
			}
			if (type == 368)
			{
				homeless = true;
				if (!Main.dayTime)
				{
					if (!shimmering)
					{
						UpdateHomeTileState(homeless, (int)(base.Center.X / 16f), (int)(position.Y + (float)height + 2f) / 16);
					}
					if (!flag3 && ai[0] == 0f)
					{
						ai[0] = 1f;
						ai[1] = 200f;
					}
					flag = false;
				}
			}
			if (type == 369 && homeless && wet)
			{
				if (base.Center.X / 16f < 380f || base.Center.X / 16f > (float)(Main.maxTilesX - 380))
				{
					UpdateHomeTileState(homeless, Main.spawnTileX, Main.spawnTileY);
					ai[0] = 1f;
					ai[1] = 200f;
				}
				if (position.X / 16f < 300f)
				{
					direction = 1;
				}
				else if (position.X / 16f > (float)(Main.maxTilesX - 300))
				{
					direction = -1;
				}
			}
			if (!WorldGen.InWorld(num6, num7) || Main.tile[num6, num7] == null)
			{
				return;
			}
			if (!homeless && Main.netMode != 1 && townNPC && (flag || (type == 37 && Main.tileDungeon[Main.tile[num6, num7].type])) && !AI_007_TownEntities_IsInAGoodRestingSpot(num6, num7, floorX, floorY))
			{
				bool flag4 = true;
				for (int k = 0; k < 2; k++)
				{
					if (!flag4)
					{
						break;
					}
					Rectangle rectangle = new Rectangle((int)(position.X + (float)(width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(position.Y + (float)(height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
					if (k == 1)
					{
						rectangle = new Rectangle(floorX * 16 + 8 - sWidth / 2 - safeRangeX, floorY * 16 + 8 - sHeight / 2 - safeRangeY, sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
					}
					for (int l = 0; l < 255; l++)
					{
						if (Main.player[l].active && new Rectangle((int)Main.player[l].position.X, (int)Main.player[l].position.Y, Main.player[l].width, Main.player[l].height).Intersects(rectangle))
						{
							flag4 = false;
							break;
						}
					}
				}
				if (flag4)
				{
					AI_007_TownEntities_TeleportToHome(floorX, floorY);
				}
			}
			bool flag5 = type == 300 || type == 447 || type == 610;
			bool flag6 = type == 616 || type == 617 || type == 625;
			bool flag7 = type == 361 || type == 445 || type == 687;
			bool flag8 = NPCID.Sets.IsTownSlime[type];
			_ = NPCID.Sets.IsTownPet[type];
			bool flag9 = flag6 || flag7;
			bool flag10 = flag6 || flag7;
			bool flag11 = flag8;
			bool flag12 = flag8;
			float num8 = 200f;
			if (NPCID.Sets.DangerDetectRange[type] != -1)
			{
				num8 = NPCID.Sets.DangerDetectRange[type];
			}
			bool flag13 = false;
			bool flag14 = false;
			float num9 = -1f;
			float num10 = -1f;
			int num11 = 0;
			int num12 = -1;
			int num13 = -1;
			if (!flag6 && Main.netMode != 1 && !flag3)
			{
				for (int m = 0; m < 200; m++)
				{
					if (!Main.npc[m].active || Main.npc[m].friendly || Main.npc[m].damage <= 0 || !(Main.npc[m].Distance(base.Center) < num8) || (type == 453 && NPCID.Sets.Skeletons[Main.npc[m].type]) || (!Main.npc[m].noTileCollide && !Collision.CanHit(base.Center, 0, 0, Main.npc[m].Center, 0, 0)))
					{
						continue;
					}
					bool flag15 = Main.npc[m].CanBeChasedBy(this);
					flag13 = true;
					float num14 = Main.npc[m].Center.X - base.Center.X;
					if (type == 614)
					{
						if (num14 < 0f && (num9 == -1f || num14 > num9))
						{
							num10 = num14;
							num13 = m;
						}
						if (num14 > 0f && (num10 == -1f || num14 < num10))
						{
							num9 = num14;
							num12 = m;
						}
						continue;
					}
					if (num14 < 0f && (num9 == -1f || num14 > num9))
					{
						num9 = num14;
						if (flag15)
						{
							num12 = m;
						}
					}
					if (num14 > 0f && (num10 == -1f || num14 < num10))
					{
						num10 = num14;
						if (flag15)
						{
							num13 = m;
						}
					}
				}
				if (flag13)
				{
					num11 = ((num9 == -1f) ? 1 : ((num10 != -1f) ? (num10 < 0f - num9).ToDirectionInt() : (-1)));
					float num15 = 0f;
					if (num9 != -1f)
					{
						num15 = 0f - num9;
					}
					if (num15 == 0f || (num10 < num15 && num10 > 0f))
					{
						num15 = num10;
					}
					if (ai[0] == 8f)
					{
						if (direction == -num11)
						{
							ai[0] = 1f;
							ai[1] = 300 + Main.rand.Next(300);
							ai[2] = 0f;
							localAI[3] = 0f;
							netUpdate = true;
						}
					}
					else if (ai[0] != 10f && ai[0] != 12f && ai[0] != 13f && ai[0] != 14f && ai[0] != 15f)
					{
						if (NPCID.Sets.PrettySafe[type] != -1 && (float)NPCID.Sets.PrettySafe[type] < num15)
						{
							flag13 = false;
							flag14 = NPCID.Sets.AttackType[type] > -1;
						}
						else if (ai[0] != 1f)
						{
							int tileX = (int)((position.X + (float)(width / 2) + (float)(15 * direction)) / 16f);
							int tileY = (int)((position.Y + (float)height - 16f) / 16f);
							bool currentlyDrowning = wet && !flag9;
							AI_007_TownEntities_GetWalkPrediction(num6, floorX, flag9, currentlyDrowning, tileX, tileY, out var _, out var avoidFalling);
							if (!avoidFalling)
							{
								if (ai[0] == 3f || ai[0] == 4f || ai[0] == 16f || ai[0] == 17f)
								{
									NPC nPC = Main.npc[(int)ai[2]];
									if (nPC.active)
									{
										nPC.ai[0] = 1f;
										nPC.ai[1] = 120 + Main.rand.Next(120);
										nPC.ai[2] = 0f;
										nPC.localAI[3] = 0f;
										nPC.direction = -num11;
										nPC.netUpdate = true;
									}
								}
								ai[0] = 1f;
								ai[1] = 120 + Main.rand.Next(120);
								ai[2] = 0f;
								localAI[3] = 0f;
								direction = -num11;
								netUpdate = true;
							}
						}
						else if (ai[0] == 1f && direction != -num11)
						{
							direction = -num11;
							netUpdate = true;
						}
					}
				}
			}
			if (ai[0] == 0f)
			{
				if (localAI[3] > 0f)
				{
					localAI[3] -= 1f;
				}
				int num16 = 120;
				if (type == 638)
				{
					num16 = 60;
				}
				if ((flag7 || flag8) && wet)
				{
					ai[0] = 1f;
					ai[1] = 200 + Main.rand.Next(500, 700);
					ai[2] = 0f;
					localAI[3] = 0f;
					netUpdate = true;
				}
				else if (flag && !flag3 && !NPCID.Sets.TownCritter[type])
				{
					if (Main.netMode != 1)
					{
						if (num6 == floorX && num7 == floorY)
						{
							if (velocity.X != 0f)
							{
								netUpdate = true;
							}
							if (velocity.X > 0.1f)
							{
								velocity.X -= 0.1f;
							}
							else if (velocity.X < -0.1f)
							{
								velocity.X += 0.1f;
							}
							else
							{
								velocity.X = 0f;
								AI_007_TryForcingSitting(floorX, floorY);
							}
							if (NPCID.Sets.IsTownPet[type])
							{
								AI_007_AttemptToPlayIdleAnimationsForPets(num16 * 4);
							}
						}
						else
						{
							if (num6 > floorX)
							{
								direction = -1;
							}
							else
							{
								direction = 1;
							}
							ai[0] = 1f;
							ai[1] = 200 + Main.rand.Next(200);
							ai[2] = 0f;
							localAI[3] = 0f;
							netUpdate = true;
						}
					}
				}
				else
				{
					if (flag5)
					{
						velocity.X *= 0.5f;
					}
					if (velocity.X > 0.1f)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X < -0.1f)
					{
						velocity.X += 0.1f;
					}
					else
					{
						velocity.X = 0f;
					}
					if (Main.netMode != 1)
					{
						if (!flag3 && NPCID.Sets.IsTownPet[type] && ai[1] >= 100f && ai[1] <= 150f)
						{
							AI_007_AttemptToPlayIdleAnimationsForPets(num16);
						}
						if (ai[1] > 0f)
						{
							ai[1] -= 1f;
						}
						bool flag16 = true;
						int tileX2 = (int)((position.X + (float)(width / 2) + (float)(15 * direction)) / 16f);
						int tileY2 = (int)((position.Y + (float)height - 16f) / 16f);
						bool currentlyDrowning2 = wet && !flag9;
						AI_007_TownEntities_GetWalkPrediction(num6, floorX, flag9, currentlyDrowning2, tileX2, tileY2, out var _, out var avoidFalling2);
						if (wet && !flag9)
						{
							bool currentlyDrowning3 = Collision.DrownCollision(position, width, height, 1f, includeSlopes: true);
							if (AI_007_TownEntities_CheckIfWillDrown(currentlyDrowning3))
							{
								ai[0] = 1f;
								ai[1] = 200 + Main.rand.Next(300);
								ai[2] = 0f;
								if (NPCID.Sets.TownCritter[type])
								{
									ai[1] += Main.rand.Next(200, 400);
								}
								localAI[3] = 0f;
								netUpdate = true;
							}
						}
						if (avoidFalling2)
						{
							flag16 = false;
						}
						if (ai[1] <= 0f)
						{
							if (flag16 && !avoidFalling2)
							{
								ai[0] = 1f;
								ai[1] = 200 + Main.rand.Next(300);
								ai[2] = 0f;
								if (NPCID.Sets.TownCritter[type])
								{
									ai[1] += Main.rand.Next(200, 400);
								}
								localAI[3] = 0f;
								netUpdate = true;
							}
							else
							{
								direction *= -1;
								ai[1] = 60 + Main.rand.Next(120);
								netUpdate = true;
							}
						}
					}
				}
				if (Main.netMode != 1 && (!flag || AI_007_TownEntities_IsInAGoodRestingSpot(num6, num7, floorX, floorY)))
				{
					if (num6 < floorX - 25 || num6 > floorX + 25)
					{
						if (localAI[3] == 0f)
						{
							if (num6 < floorX - 50 && direction == -1)
							{
								direction = 1;
								netUpdate = true;
							}
							else if (num6 > floorX + 50 && direction == 1)
							{
								direction = -1;
								netUpdate = true;
							}
						}
					}
					else if (Main.rand.Next(80) == 0 && localAI[3] == 0f)
					{
						localAI[3] = 200f;
						direction *= -1;
						netUpdate = true;
					}
				}
			}
			else if (ai[0] == 1f)
			{
				if (Main.netMode != 1 && flag && AI_007_TownEntities_IsInAGoodRestingSpot(num6, num7, floorX, floorY) && !NPCID.Sets.TownCritter[type])
				{
					ai[0] = 0f;
					ai[1] = 200 + Main.rand.Next(200);
					localAI[3] = 60f;
					netUpdate = true;
				}
				else
				{
					bool flag17 = !flag9 && Collision.DrownCollision(position, width, height, 1f, includeSlopes: true);
					if (!flag17)
					{
						if (Main.netMode != 1 && !homeless && !Main.tileDungeon[Main.tile[num6, num7].type] && (num6 < floorX - 35 || num6 > floorX + 35))
						{
							if (position.X < (float)(floorX * 16) && direction == -1)
							{
								ai[1] -= 5f;
							}
							else if (position.X > (float)(floorX * 16) && direction == 1)
							{
								ai[1] -= 5f;
							}
						}
						ai[1] -= 1f;
					}
					if (ai[1] <= 0f)
					{
						ai[0] = 0f;
						ai[1] = 300 + Main.rand.Next(300);
						ai[2] = 0f;
						if (NPCID.Sets.TownCritter[type])
						{
							ai[1] -= Main.rand.Next(100);
						}
						else
						{
							ai[1] += Main.rand.Next(900);
						}
						localAI[3] = 60f;
						netUpdate = true;
					}
					if (closeDoor && ((position.X + (float)(width / 2)) / 16f > (float)(doorX + 2) || (position.X + (float)(width / 2)) / 16f < (float)(doorX - 2)))
					{
						Tile tileSafely = Framing.GetTileSafely(doorX, doorY);
						if (tileSafely.type == 11)
						{
							if (WorldGen.CloseDoor(doorX, doorY))
							{
								closeDoor = false;
								NetMessage.SendData(19, -1, -1, null, 1, doorX, doorY, direction);
							}
							if ((position.X + (float)(width / 2)) / 16f > (float)(doorX + 4) || (position.X + (float)(width / 2)) / 16f < (float)(doorX - 4) || (position.Y + (float)(height / 2)) / 16f > (float)(doorY + 4) || (position.Y + (float)(height / 2)) / 16f < (float)(doorY - 4))
							{
								closeDoor = false;
							}
						}
						else if (tileSafely.type == 389)
						{
							if (WorldGen.ShiftTallGate(doorX, doorY, closing: true))
							{
								closeDoor = false;
								NetMessage.SendData(19, -1, -1, null, 5, doorX, doorY);
							}
							if ((position.X + (float)(width / 2)) / 16f > (float)(doorX + 4) || (position.X + (float)(width / 2)) / 16f < (float)(doorX - 4) || (position.Y + (float)(height / 2)) / 16f > (float)(doorY + 4) || (position.Y + (float)(height / 2)) / 16f < (float)(doorY - 4))
							{
								closeDoor = false;
							}
						}
						else
						{
							closeDoor = false;
						}
					}
					float num17 = 1f;
					float num18 = 0.07f;
					if (type == 614 && flag13)
					{
						num17 = 1.5f;
						num18 = 0.1f;
					}
					else if (type == 299 || type == 539 || type == 538 || (type >= 639 && type <= 645))
					{
						num17 = 1.5f;
					}
					else if (flag6)
					{
						if (wet)
						{
							num18 = 1f;
							num17 = 2f;
						}
						else
						{
							num18 = 0.07f;
							num17 = 0.5f;
						}
					}
					if (type == 625)
					{
						if (wet)
						{
							num18 = 1f;
							num17 = 2.5f;
						}
						else
						{
							num18 = 0.07f;
							num17 = 0.2f;
						}
					}
					if (flag5)
					{
						num17 = 2f;
						num18 = 1f;
					}
					if (friendly && (flag13 || flag17))
					{
						num17 = 1.5f;
						float num19 = 1f - (float)life / (float)lifeMax;
						num17 += num19 * 0.9f;
						num18 = 0.1f;
					}
					if (flag11 && wet)
					{
						num17 = 2f;
						num18 = 0.2f;
					}
					if (flag7 && wet)
					{
						if (Math.Abs(velocity.X) < 0.05f && Math.Abs(velocity.Y) < 0.05f)
						{
							velocity.X += num17 * 10f * (float)direction;
						}
						else
						{
							velocity.X *= 0.9f;
						}
					}
					else if (velocity.X < 0f - num17 || velocity.X > num17)
					{
						if (velocity.Y == 0f)
						{
							velocity *= 0.8f;
						}
					}
					else if (velocity.X < num17 && direction == 1)
					{
						velocity.X += num18;
						if (velocity.X > num17)
						{
							velocity.X = num17;
						}
					}
					else if (velocity.X > 0f - num17 && direction == -1)
					{
						velocity.X -= num18;
						if (velocity.X > num17)
						{
							velocity.X = num17;
						}
					}
					bool flag18 = true;
					if ((float)(homeTileY * 16 - 32) > position.Y)
					{
						flag18 = false;
					}
					if (!flag18 && velocity.Y == 0f)
					{
						Collision.StepDown(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY);
					}
					if (velocity.Y >= 0f)
					{
						Collision.StepUp(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY, 1, flag18, 1);
					}
					if (velocity.Y == 0f)
					{
						int num20 = (int)((position.X + (float)(width / 2) + (float)(15 * direction)) / 16f);
						int num21 = (int)((position.Y + (float)height - 16f) / 16f);
						int num22 = 180;
						AI_007_TownEntities_GetWalkPrediction(num6, floorX, flag9, flag17, num20, num21, out var keepwalking3, out var avoidFalling3);
						bool flag19 = false;
						bool flag20 = false;
						if (wet && !flag9 && townNPC && (flag20 = AI_007_TownEntities_CheckIfWillDrown(flag17)) && localAI[3] <= 0f)
						{
							avoidFalling3 = true;
							localAI[3] = num22;
							int num23 = 0;
							for (int n = 0; n <= 10 && Framing.GetTileSafely(num20 - direction, num21 - n).liquid != 0; n++)
							{
								num23++;
							}
							float num24 = 0.3f;
							float num25 = (float)Math.Sqrt((float)(num23 * 16 + 16) * 2f * num24);
							if (num25 > 26f)
							{
								num25 = 26f;
							}
							velocity.Y = 0f - num25;
							localAI[3] = position.X;
							flag19 = true;
						}
						if (avoidFalling3 && !flag19)
						{
							int num26 = (int)((position.X + (float)(width / 2)) / 16f);
							int num27 = 0;
							for (int num28 = -1; num28 <= 1; num28++)
							{
								Tile tileSafely2 = Framing.GetTileSafely(num26 + num28, num21 + 1);
								if (tileSafely2.nactive() && Main.tileSolid[tileSafely2.type])
								{
									num27++;
								}
							}
							if (num27 <= 2)
							{
								if (velocity.X != 0f)
								{
									netUpdate = true;
								}
								keepwalking3 = (avoidFalling3 = false);
								ai[0] = 0f;
								ai[1] = 50 + Main.rand.Next(50);
								ai[2] = 0f;
								localAI[3] = 40f;
							}
						}
						if (position.X == localAI[3] && !flag19)
						{
							direction *= -1;
							netUpdate = true;
							localAI[3] = num22;
						}
						if (flag17 && !flag19)
						{
							if (localAI[3] > (float)num22)
							{
								localAI[3] = num22;
							}
							if (localAI[3] > 0f)
							{
								localAI[3] -= 1f;
							}
						}
						else
						{
							localAI[3] = -1f;
						}
						Tile tileSafely3 = Framing.GetTileSafely(num20, num21);
						Tile tileSafely4 = Framing.GetTileSafely(num20, num21 - 1);
						Tile tileSafely5 = Framing.GetTileSafely(num20, num21 - 2);
						bool flag21 = height / 16 < 3;
						if (townNPC && tileSafely5.nactive() && (tileSafely5.type == 10 || tileSafely5.type == 388) && (Main.rand.Next(10) == 0 || flag))
						{
							if (Main.netMode != 1)
							{
								if (WorldGen.OpenDoor(num20, num21 - 2, direction))
								{
									closeDoor = true;
									doorX = num20;
									doorY = num21 - 2;
									NetMessage.SendData(19, -1, -1, null, 0, num20, num21 - 2, direction);
									netUpdate = true;
									ai[1] += 80f;
								}
								else if (WorldGen.OpenDoor(num20, num21 - 2, -direction))
								{
									closeDoor = true;
									doorX = num20;
									doorY = num21 - 2;
									NetMessage.SendData(19, -1, -1, null, 0, num20, num21 - 2, -direction);
									netUpdate = true;
									ai[1] += 80f;
								}
								else if (WorldGen.ShiftTallGate(num20, num21 - 2, closing: false))
								{
									closeDoor = true;
									doorX = num20;
									doorY = num21 - 2;
									NetMessage.SendData(19, -1, -1, null, 4, num20, num21 - 2);
									netUpdate = true;
									ai[1] += 80f;
								}
								else
								{
									direction *= -1;
									netUpdate = true;
								}
							}
						}
						else
						{
							if ((velocity.X < 0f && direction == -1) || (velocity.X > 0f && direction == 1))
							{
								bool flag22 = false;
								bool flag23 = false;
								if (tileSafely5.nactive() && Main.tileSolid[tileSafely5.type] && !Main.tileSolidTop[tileSafely5.type] && (!flag21 || (tileSafely4.nactive() && Main.tileSolid[tileSafely4.type] && !Main.tileSolidTop[tileSafely4.type])))
								{
									if (!Collision.SolidTilesVersatile(num20 - direction * 2, num20 - direction, num21 - 5, num21 - 1) && !Collision.SolidTiles(num20, num20, num21 - 5, num21 - 3))
									{
										velocity.Y = -6f;
										netUpdate = true;
									}
									else if (flag5)
									{
										if (WorldGen.SolidTile((int)(base.Center.X / 16f) + direction, (int)(base.Center.Y / 16f)))
										{
											direction *= -1;
											velocity.X *= 0f;
											netUpdate = true;
										}
									}
									else if (flag13)
									{
										flag23 = true;
										flag22 = true;
									}
									else if (!flag20)
									{
										flag22 = true;
									}
								}
								else if (tileSafely4.nactive() && Main.tileSolid[tileSafely4.type] && !Main.tileSolidTop[tileSafely4.type])
								{
									if (!Collision.SolidTilesVersatile(num20 - direction * 2, num20 - direction, num21 - 4, num21 - 1) && !Collision.SolidTiles(num20, num20, num21 - 4, num21 - 2))
									{
										velocity.Y = -5f;
										netUpdate = true;
									}
									else if (flag13)
									{
										flag23 = true;
										flag22 = true;
									}
									else
									{
										flag22 = true;
									}
								}
								else if (position.Y + (float)height - (float)(num21 * 16) > 20f && tileSafely3.nactive() && Main.tileSolid[tileSafely3.type] && !tileSafely3.topSlope())
								{
									if (!Collision.SolidTilesVersatile(num20 - direction * 2, num20, num21 - 3, num21 - 1))
									{
										velocity.Y = -4.4f;
										netUpdate = true;
									}
									else if (flag13)
									{
										flag23 = true;
										flag22 = true;
									}
									else
									{
										flag22 = true;
									}
								}
								else if (avoidFalling3)
								{
									if (!flag20)
									{
										flag22 = true;
									}
									if (flag13)
									{
										flag23 = true;
									}
								}
								else if (flag12 && !Collision.SolidTilesVersatile(num20 - direction * 2, num20 - direction, num21 - 2, num21 - 1))
								{
									velocity.Y = -5f;
									netUpdate = true;
								}
								if (flag23)
								{
									keepwalking3 = false;
									velocity.X = 0f;
									ai[0] = 8f;
									ai[1] = 240f;
									netUpdate = true;
								}
								if (flag22)
								{
									direction *= -1;
									velocity.X *= -1f;
									netUpdate = true;
								}
								if (keepwalking3)
								{
									ai[1] = 90f;
									netUpdate = true;
								}
								if (velocity.Y < 0f)
								{
									localAI[3] = position.X;
								}
							}
							if (velocity.Y < 0f && wet)
							{
								velocity.Y *= 1.2f;
							}
							if (velocity.Y < 0f && NPCID.Sets.TownCritter[type] && !flag5)
							{
								velocity.Y *= 1.2f;
							}
						}
					}
					else if (flag12 && !wet)
					{
						int num29 = (int)(base.Center.X / 16f);
						int num30 = (int)((position.Y + (float)height - 16f) / 16f);
						int num31 = 0;
						for (int num32 = -1; num32 <= 1; num32++)
						{
							for (int num33 = 1; num33 <= 6; num33++)
							{
								Tile tileSafely6 = Framing.GetTileSafely(num29 + num32, num30 + num33);
								if (tileSafely6.liquid > 0 || (tileSafely6.nactive() && Main.tileSolid[tileSafely6.type]))
								{
									num31++;
								}
							}
						}
						if (num31 <= 2)
						{
							if (velocity.X != 0f)
							{
								netUpdate = true;
							}
							velocity.X *= 0.2f;
							ai[0] = 0f;
							ai[1] = 50 + Main.rand.Next(50);
							ai[2] = 0f;
							localAI[3] = 40f;
						}
					}
				}
			}
			else if (ai[0] == 2f || ai[0] == 11f)
			{
				if (Main.netMode != 1)
				{
					localAI[3] -= 1f;
					if (Main.rand.Next(60) == 0 && localAI[3] == 0f)
					{
						localAI[3] = 60f;
						direction *= -1;
						netUpdate = true;
					}
				}
				ai[1] -= 1f;
				velocity.X *= 0.8f;
				if (ai[1] <= 0f)
				{
					localAI[3] = 40f;
					ai[0] = 0f;
					ai[1] = 60 + Main.rand.Next(60);
					netUpdate = true;
				}
			}
			else if (ai[0] == 3f || ai[0] == 4f || ai[0] == 5f || ai[0] == 8f || ai[0] == 9f || ai[0] == 16f || ai[0] == 17f || ai[0] == 20f || ai[0] == 21f || ai[0] == 22f || ai[0] == 23f)
			{
				velocity.X *= 0.8f;
				ai[1] -= 1f;
				if (ai[0] == 8f && ai[1] < 60f && flag13)
				{
					ai[1] = 180f;
					netUpdate = true;
				}
				if (ai[0] == 5f)
				{
					Point coords = (base.Bottom + Vector2.UnitY * -2f).ToTileCoordinates();
					Tile tile = Main.tile[coords.X, coords.Y];
					if (tile.type != 15 && tile.type != 497)
					{
						ai[1] = 0f;
					}
					else
					{
						Main.sittingManager.AddNPC(whoAmI, coords);
					}
				}
				if (ai[1] <= 0f)
				{
					ai[0] = 0f;
					ai[1] = 60 + Main.rand.Next(60);
					ai[2] = 0f;
					localAI[3] = 30 + Main.rand.Next(60);
					netUpdate = true;
				}
			}
			else if (ai[0] == 6f || ai[0] == 7f || ai[0] == 18f || ai[0] == 19f)
			{
				if (ai[0] == 18f && (localAI[3] < 1f || localAI[3] > 2f))
				{
					localAI[3] = 2f;
				}
				velocity.X *= 0.8f;
				ai[1] -= 1f;
				int num34 = (int)ai[2];
				if (num34 < 0 || num34 > 255 || !Main.player[num34].CanBeTalkedTo || Main.player[num34].Distance(base.Center) > 200f || !Collision.CanHitLine(base.Top, 0, 0, Main.player[num34].Top, 0, 0))
				{
					ai[1] = 0f;
				}
				if (ai[1] > 0f)
				{
					int num35 = ((base.Center.X < Main.player[num34].Center.X) ? 1 : (-1));
					if (num35 != direction)
					{
						netUpdate = true;
					}
					direction = num35;
				}
				else
				{
					ai[0] = 0f;
					ai[1] = 60 + Main.rand.Next(60);
					ai[2] = 0f;
					localAI[3] = 30 + Main.rand.Next(60);
					netUpdate = true;
				}
			}
			else if (ai[0] == 10f)
			{
				int num36 = 0;
				int num37 = 0;
				float knockBack = 0f;
				float num38 = 0f;
				int num39 = 0;
				int num40 = 0;
				int maxValue = 0;
				float num41 = 0f;
				float num42 = NPCID.Sets.DangerDetectRange[type];
				float num43 = 0f;
				if ((float)NPCID.Sets.AttackTime[type] == ai[1])
				{
					frameCounter = 0.0;
					localAI[3] = 0f;
				}
				if (type == 38)
				{
					num36 = 30;
					num38 = 6f;
					num37 = 20;
					num39 = 10;
					num40 = 180;
					maxValue = 120;
					num41 = 16f;
					knockBack = 7f;
				}
				else if (type == 633)
				{
					num36 = 880;
					num38 = 24f;
					num37 = 15;
					num39 = 1;
					num41 = 0f;
					knockBack = 7f;
					num40 = 15;
					maxValue = 10;
					if (ShouldBestiaryGirlBeLycantrope())
					{
						num36 = 929;
						num37 = (int)((float)num37 * 1.5f);
					}
				}
				else if (type == 550)
				{
					num36 = 669;
					num38 = 6f;
					num37 = 24;
					num39 = 10;
					num40 = 120;
					maxValue = 60;
					num41 = 16f;
					knockBack = 9f;
				}
				else if (type == 588)
				{
					num36 = 721;
					num38 = 8f;
					num37 = 15;
					num39 = 5;
					num40 = 20;
					maxValue = 10;
					num41 = 16f;
					knockBack = 9f;
				}
				else if (type == 208)
				{
					num36 = 588;
					num38 = 6f;
					num37 = 30;
					num39 = 10;
					num40 = 60;
					maxValue = 120;
					num41 = 16f;
					knockBack = 6f;
				}
				else if (type == 17)
				{
					num36 = 48;
					num38 = 9f;
					num37 = 12;
					num39 = 10;
					num40 = 60;
					maxValue = 60;
					num41 = 16f;
					knockBack = 1.5f;
				}
				else if (type == 369)
				{
					num36 = 520;
					num38 = 12f;
					num37 = 10;
					num39 = 10;
					num40 = 0;
					maxValue = 1;
					num41 = 16f;
					knockBack = 3f;
				}
				else if (type == 453)
				{
					num36 = 21;
					num38 = 14f;
					num37 = 14;
					num39 = 10;
					num40 = 0;
					maxValue = 1;
					num41 = 16f;
					knockBack = 3f;
				}
				else if (type == 107)
				{
					num36 = 24;
					num38 = 5f;
					num37 = 15;
					num39 = 10;
					num40 = 60;
					maxValue = 60;
					num41 = 16f;
					knockBack = 1f;
				}
				else if (type == 124)
				{
					num36 = 582;
					num38 = 10f;
					num37 = 11;
					num39 = 1;
					num40 = 30;
					maxValue = 30;
					knockBack = 3.5f;
				}
				else if (type == 18)
				{
					num36 = 583;
					num38 = 8f;
					num37 = 8;
					num39 = 1;
					num40 = 15;
					maxValue = 10;
					knockBack = 2f;
					num41 = 10f;
				}
				else if (type == 142)
				{
					num36 = 589;
					num38 = 7f;
					num37 = 22;
					num39 = 1;
					num40 = 10;
					maxValue = 1;
					knockBack = 2f;
					num41 = 10f;
				}
				if (Main.expertMode)
				{
					num37 = (int)((float)num37 * Main.GameModeInfo.TownNPCDamageMultiplier);
				}
				num37 = (int)((float)num37 * num2);
				velocity.X *= 0.8f;
				ai[1] -= 1f;
				localAI[3] += 1f;
				if (localAI[3] == (float)num39 && Main.netMode != 1)
				{
					Vector2 vec = -Vector2.UnitY;
					if (num11 == 1 && spriteDirection == 1 && num13 != -1)
					{
						vec = DirectionTo(Main.npc[num13].Center + new Vector2(0f, (0f - num41) * MathHelper.Clamp(Distance(Main.npc[num13].Center) / num42, 0f, 1f)));
					}
					if (num11 == -1 && spriteDirection == -1 && num12 != -1)
					{
						vec = DirectionTo(Main.npc[num12].Center + new Vector2(0f, (0f - num41) * MathHelper.Clamp(Distance(Main.npc[num12].Center) / num42, 0f, 1f)));
					}
					if (vec.HasNaNs() || Math.Sign(vec.X) != spriteDirection)
					{
						vec = new Vector2(spriteDirection, -1f);
					}
					vec *= num38;
					vec += Utils.RandomVector2(Main.rand, 0f - num43, num43);
					int num44 = 1000;
					num44 = ((type == 124) ? Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec.X, vec.Y, num36, num37, knockBack, Main.myPlayer, 0f, whoAmI, townNpcVariationIndex) : ((type != 142) ? Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec.X, vec.Y, num36, num37, knockBack, Main.myPlayer) : Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec.X, vec.Y, num36, num37, knockBack, Main.myPlayer, 0f, Main.rand.Next(5))));
					Main.projectile[num44].npcProj = true;
					Main.projectile[num44].noDropItem = true;
					if (type == 588)
					{
						Main.projectile[num44].timeLeft = 480;
					}
				}
				if (ai[1] <= 0f && 0 == 0)
				{
					ai[0] = ((localAI[2] == 8f && flag13) ? 8 : 0);
					ai[1] = num40 + Main.rand.Next(maxValue);
					ai[2] = 0f;
					localAI[1] = (localAI[3] = num40 / 2 + Main.rand.Next(maxValue));
					netUpdate = true;
				}
			}
			else if (ai[0] == 12f)
			{
				int num45 = 0;
				int num46 = 0;
				float num47 = 0f;
				int num48 = 0;
				int num49 = 0;
				int maxValue2 = 0;
				float knockBack2 = 0f;
				int num50 = 0;
				bool flag24 = false;
				float num51 = 0f;
				if ((float)NPCID.Sets.AttackTime[type] == ai[1])
				{
					frameCounter = 0.0;
					localAI[3] = 0f;
				}
				int num52 = -1;
				if (num11 == 1 && spriteDirection == 1)
				{
					num52 = num13;
				}
				if (num11 == -1 && spriteDirection == -1)
				{
					num52 = num12;
				}
				if (type == 19)
				{
					num45 = 14;
					num47 = 13f;
					num46 = 24;
					num49 = 14;
					maxValue2 = 4;
					knockBack2 = 3f;
					num48 = 1;
					num51 = 0.5f;
					if ((float)NPCID.Sets.AttackTime[type] == ai[1])
					{
						frameCounter = 0.0;
						localAI[3] = 0f;
					}
					if (Main.hardMode)
					{
						num46 = 15;
						if (localAI[3] > (float)num48)
						{
							num48 = 10;
							flag24 = true;
						}
						if (localAI[3] > (float)num48)
						{
							num48 = 20;
							flag24 = true;
						}
						if (localAI[3] > (float)num48)
						{
							num48 = 30;
							flag24 = true;
						}
					}
				}
				else if (type == 227)
				{
					num45 = 587;
					num47 = 10f;
					num46 = 8;
					num49 = 10;
					maxValue2 = 1;
					knockBack2 = 1.75f;
					num48 = 1;
					num51 = 0.5f;
					if (localAI[3] > (float)num48)
					{
						num48 = 12;
						flag24 = true;
					}
					if (localAI[3] > (float)num48)
					{
						num48 = 24;
						flag24 = true;
					}
					if (Main.hardMode)
					{
						num46 += 2;
					}
				}
				else if (type == 368)
				{
					num45 = 14;
					num47 = 13f;
					num46 = 24;
					num49 = 12;
					maxValue2 = 5;
					knockBack2 = 2f;
					num48 = 1;
					num51 = 0.2f;
					if (Main.hardMode)
					{
						num46 = 30;
						num45 = 357;
					}
				}
				else if (type == 22)
				{
					num47 = 10f;
					num46 = 8;
					num48 = 1;
					if (Main.hardMode)
					{
						num45 = 2;
						num49 = 15;
						maxValue2 = 10;
						num46 += 6;
					}
					else
					{
						num45 = 1;
						num49 = 30;
						maxValue2 = 20;
					}
					knockBack2 = 2.75f;
					num50 = 4;
					num51 = 0.7f;
				}
				else if (type == 228)
				{
					num45 = 267;
					num47 = 14f;
					num46 = 20;
					num48 = 1;
					num49 = 10;
					maxValue2 = 1;
					knockBack2 = 3f;
					num50 = 6;
					num51 = 0.4f;
				}
				else if (type == 178)
				{
					num45 = 242;
					num47 = 13f;
					num46 = ((!Main.hardMode) ? 11 : 15);
					num49 = 10;
					maxValue2 = 1;
					knockBack2 = 2f;
					num48 = 1;
					if (localAI[3] > (float)num48)
					{
						num48 = 8;
						flag24 = true;
					}
					if (localAI[3] > (float)num48)
					{
						num48 = 16;
						flag24 = true;
					}
					num51 = 0.3f;
				}
				else if (type == 229)
				{
					num45 = 14;
					num47 = 14f;
					num46 = 24;
					num49 = 10;
					maxValue2 = 1;
					knockBack2 = 2f;
					num48 = 1;
					num51 = 0.7f;
					if (localAI[3] > (float)num48)
					{
						num48 = 16;
						flag24 = true;
					}
					if (localAI[3] > (float)num48)
					{
						num48 = 24;
						flag24 = true;
					}
					if (localAI[3] > (float)num48)
					{
						num48 = 32;
						flag24 = true;
					}
					if (localAI[3] > (float)num48)
					{
						num48 = 40;
						flag24 = true;
					}
					if (localAI[3] > (float)num48)
					{
						num48 = 48;
						flag24 = true;
					}
					if (localAI[3] == 0f && num52 != -1 && Distance(Main.npc[num52].Center) < (float)NPCID.Sets.PrettySafe[type])
					{
						num51 = 0.1f;
						num45 = 162;
						num46 = 50;
						knockBack2 = 10f;
						num47 = 24f;
					}
				}
				else if (type == 209)
				{
					num45 = Utils.SelectRandom<int>(Main.rand, 134, 133, 135);
					num48 = 1;
					switch (num45)
					{
					case 135:
						num47 = 12f;
						num46 = 30;
						num49 = 30;
						maxValue2 = 10;
						knockBack2 = 7f;
						num51 = 0.2f;
						break;
					case 133:
						num47 = 10f;
						num46 = 25;
						num49 = 10;
						maxValue2 = 1;
						knockBack2 = 6f;
						num51 = 0.2f;
						break;
					case 134:
						num47 = 13f;
						num46 = 20;
						num49 = 20;
						maxValue2 = 10;
						knockBack2 = 4f;
						num51 = 0.1f;
						break;
					}
				}
				if (Main.expertMode)
				{
					num46 = (int)((float)num46 * Main.GameModeInfo.TownNPCDamageMultiplier);
				}
				num46 = (int)((float)num46 * num2);
				velocity.X *= 0.8f;
				ai[1] -= 1f;
				localAI[3] += 1f;
				if (localAI[3] == (float)num48 && Main.netMode != 1)
				{
					Vector2 vec2 = Vector2.Zero;
					if (num52 != -1)
					{
						vec2 = DirectionTo(Main.npc[num52].Center + new Vector2(0f, -num50));
					}
					if (vec2.HasNaNs() || Math.Sign(vec2.X) != spriteDirection)
					{
						vec2 = new Vector2(spriteDirection, 0f);
					}
					vec2 *= num47;
					vec2 += Utils.RandomVector2(Main.rand, 0f - num51, num51);
					int num53 = 1000;
					num53 = ((type != 227) ? Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec2.X, vec2.Y, num45, num46, knockBack2, Main.myPlayer) : Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec2.X, vec2.Y, num45, num46, knockBack2, Main.myPlayer, 0f, (float)Main.rand.Next(12) / 6f));
					Main.projectile[num53].npcProj = true;
					Main.projectile[num53].noDropItem = true;
				}
				if (localAI[3] == (float)num48 && flag24 && num52 != -1)
				{
					Vector2 vector2 = DirectionTo(Main.npc[num52].Center);
					if (vector2.Y <= 0.5f && vector2.Y >= -0.5f)
					{
						ai[2] = vector2.Y;
					}
				}
				if (ai[1] <= 0f && 0 == 0)
				{
					ai[0] = ((localAI[2] == 8f && flag13) ? 8 : 0);
					ai[1] = num49 + Main.rand.Next(maxValue2);
					ai[2] = 0f;
					localAI[1] = (localAI[3] = num49 / 2 + Main.rand.Next(maxValue2));
					netUpdate = true;
				}
			}
			else if (ai[0] == 13f)
			{
				velocity.X *= 0.8f;
				if ((float)NPCID.Sets.AttackTime[type] == ai[1])
				{
					frameCounter = 0.0;
				}
				ai[1] -= 1f;
				localAI[3] += 1f;
				if (localAI[3] == 1f && Main.netMode != 1)
				{
					Vector2 vec3 = DirectionTo(Main.npc[(int)ai[2]].Center + new Vector2(0f, -20f));
					if (vec3.HasNaNs() || Math.Sign(vec3.X) == -spriteDirection)
					{
						vec3 = new Vector2(spriteDirection, -1f);
					}
					vec3 *= 8f;
					int num54 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec3.X, vec3.Y, 584, 0, 0f, Main.myPlayer, ai[2]);
					Main.projectile[num54].npcProj = true;
					Main.projectile[num54].noDropItem = true;
				}
				if (ai[1] <= 0f)
				{
					ai[0] = 0f;
					ai[1] = 10 + Main.rand.Next(10);
					ai[2] = 0f;
					localAI[3] = 5 + Main.rand.Next(10);
					netUpdate = true;
				}
			}
			else if (ai[0] == 14f)
			{
				int num55 = 0;
				int num56 = 0;
				float num57 = 0f;
				int num58 = 0;
				int num59 = 0;
				int maxValue3 = 0;
				float knockBack3 = 0f;
				float num60 = 0f;
				float num61 = NPCID.Sets.DangerDetectRange[type];
				float num62 = 1f;
				float num63 = 0f;
				if ((float)NPCID.Sets.AttackTime[type] == ai[1])
				{
					frameCounter = 0.0;
					localAI[3] = 0f;
				}
				int num64 = -1;
				if (num11 == 1 && spriteDirection == 1)
				{
					num64 = num13;
				}
				if (num11 == -1 && spriteDirection == -1)
				{
					num64 = num12;
				}
				if (type == 54)
				{
					num55 = 585;
					num57 = 10f;
					num56 = 16;
					num58 = 30;
					num59 = 20;
					maxValue3 = 15;
					knockBack3 = 2f;
					num63 = 1f;
				}
				else if (type == 108)
				{
					num55 = 15;
					num57 = 6f;
					num56 = 18;
					num58 = 15;
					num59 = 15;
					maxValue3 = 5;
					knockBack3 = 3f;
					num60 = 20f;
				}
				else if (type == 160)
				{
					num55 = 590;
					num56 = 40;
					num58 = 15;
					num59 = 10;
					maxValue3 = 1;
					knockBack3 = 3f;
					for (; localAI[3] > (float)num58; num58 += 15)
					{
					}
				}
				else if (type == 663)
				{
					num55 = 950;
					num56 = ((!Main.hardMode) ? 15 : 20);
					num58 = 15;
					num59 = 0;
					maxValue3 = 0;
					knockBack3 = 3f;
					for (; localAI[3] > (float)num58; num58 += 10)
					{
					}
				}
				else if (type == 20)
				{
					num55 = 586;
					num58 = 24;
					num59 = 10;
					maxValue3 = 1;
					knockBack3 = 3f;
				}
				if (Main.expertMode)
				{
					num56 = (int)((float)num56 * Main.GameModeInfo.TownNPCDamageMultiplier);
				}
				num56 = (int)((float)num56 * num2);
				velocity.X *= 0.8f;
				ai[1] -= 1f;
				localAI[3] += 1f;
				if (localAI[3] == (float)num58 && Main.netMode != 1)
				{
					Vector2 vec4 = Vector2.Zero;
					if (num64 != -1)
					{
						vec4 = DirectionTo(Main.npc[num64].Center + new Vector2(0f, (0f - num60) * MathHelper.Clamp(Distance(Main.npc[num64].Center) / num61, 0f, 1f)));
					}
					if (vec4.HasNaNs() || Math.Sign(vec4.X) != spriteDirection)
					{
						vec4 = new Vector2(spriteDirection, 0f);
					}
					vec4 *= num57;
					vec4 += Utils.RandomVector2(Main.rand, 0f - num63, num63);
					if (type == 108)
					{
						int num65 = Utils.SelectRandom<int>(Main.rand, 1, 1, 1, 1, 2, 2, 3);
						for (int num66 = 0; num66 < num65; num66++)
						{
							Vector2 vector3 = Utils.RandomVector2(Main.rand, -3.4f, 3.4f);
							int num67 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec4.X + vector3.X, vec4.Y + vector3.Y, num55, num56, knockBack3, Main.myPlayer, 0f, 0f, townNpcVariationIndex);
							Main.projectile[num67].npcProj = true;
							Main.projectile[num67].noDropItem = true;
						}
					}
					else if (type == 160)
					{
						if (num64 != -1)
						{
							Vector2 vector4 = Main.npc[num64].position - Main.npc[num64].Size * 2f + Main.npc[num64].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 5f;
							int num68 = 10;
							while (num68 > 0 && WorldGen.SolidTile(Framing.GetTileSafely((int)vector4.X / 16, (int)vector4.Y / 16)))
							{
								num68--;
								vector4 = Main.npc[num64].position - Main.npc[num64].Size * 2f + Main.npc[num64].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 5f;
							}
							int num69 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector4.X, vector4.Y, 0f, 0f, num55, num56, knockBack3, Main.myPlayer, 0f, 0f, townNpcVariationIndex);
							Main.projectile[num69].npcProj = true;
							Main.projectile[num69].noDropItem = true;
						}
					}
					else if (type == 663)
					{
						if (num64 != -1)
						{
							Vector2 vector5 = Main.npc[num64].position + Main.npc[num64].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 1f;
							int num70 = 5;
							while (num70 > 0 && WorldGen.SolidTile(Framing.GetTileSafely((int)vector5.X / 16, (int)vector5.Y / 16)))
							{
								num70--;
								vector5 = Main.npc[num64].position + Main.npc[num64].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 1f;
							}
							int num71 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector5.X, vector5.Y, 0f, 0f, num55, num56, knockBack3, Main.myPlayer, 0f, 0f, townNpcVariationIndex);
							Main.projectile[num71].npcProj = true;
							Main.projectile[num71].noDropItem = true;
						}
					}
					else if (type == 20)
					{
						int num72 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec4.X, vec4.Y, num55, num56, knockBack3, Main.myPlayer, 0f, whoAmI, townNpcVariationIndex);
						Main.projectile[num72].npcProj = true;
						Main.projectile[num72].noDropItem = true;
					}
					else
					{
						int num73 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec4.X, vec4.Y, num55, num56, knockBack3, Main.myPlayer);
						Main.projectile[num73].npcProj = true;
						Main.projectile[num73].noDropItem = true;
					}
				}
				if (num62 > 0f)
				{
					Vector3 vector6 = GetMagicAuraColor().ToVector3() * num62;
					Lighting.AddLight(base.Center, vector6.X, vector6.Y, vector6.Z);
				}
				if (ai[1] <= 0f && 0 == 0)
				{
					ai[0] = ((localAI[2] == 8f && flag13) ? 8 : 0);
					ai[1] = num59 + Main.rand.Next(maxValue3);
					ai[2] = 0f;
					localAI[1] = (localAI[3] = num59 / 2 + Main.rand.Next(maxValue3));
					netUpdate = true;
				}
			}
			else if (ai[0] == 15f)
			{
				int num74 = 0;
				int maxValue4 = 0;
				if ((float)NPCID.Sets.AttackTime[type] == ai[1])
				{
					frameCounter = 0.0;
					localAI[3] = 0f;
				}
				int num75 = 0;
				float num76 = 0f;
				int num77 = 0;
				int num78 = 0;
				if (num11 == 1)
				{
					_ = spriteDirection;
					_ = 1;
				}
				if (num11 == -1)
				{
					_ = spriteDirection;
					_ = -1;
				}
				if (type == 207)
				{
					num75 = 11;
					num77 = (num78 = 32);
					num74 = 12;
					maxValue4 = 6;
					num76 = 4.25f;
				}
				else if (type == 441)
				{
					num75 = 9;
					num77 = (num78 = 28);
					num74 = 9;
					maxValue4 = 3;
					num76 = 3.5f;
					if (GivenName == "Andrew")
					{
						num75 *= 2;
						num76 *= 2f;
					}
				}
				else if (type == 353)
				{
					num75 = 10;
					num77 = (num78 = 32);
					num74 = 15;
					maxValue4 = 8;
					num76 = 5f;
				}
				else if (NPCID.Sets.IsTownPet[type])
				{
					num75 = 10;
					num77 = (num78 = 32);
					num74 = 15;
					maxValue4 = 8;
					num76 = 3f;
				}
				if (Main.expertMode)
				{
					num75 = (int)((float)num75 * Main.GameModeInfo.TownNPCDamageMultiplier);
				}
				num75 = (int)((float)num75 * num2);
				velocity.X *= 0.8f;
				ai[1] -= 1f;
				if (Main.netMode != 1)
				{
					Tuple<Vector2, float> swingStats = GetSwingStats(NPCID.Sets.AttackTime[type] * 2, (int)ai[1], spriteDirection, num77, num78);
					Rectangle itemRectangle = new Rectangle((int)swingStats.Item1.X, (int)swingStats.Item1.Y, num77, num78);
					if (spriteDirection == -1)
					{
						itemRectangle.X -= num77;
					}
					itemRectangle.Y -= num78;
					TweakSwingStats(NPCID.Sets.AttackTime[type] * 2, (int)ai[1], spriteDirection, ref itemRectangle);
					int myPlayer = Main.myPlayer;
					for (int num79 = 0; num79 < 200; num79++)
					{
						NPC nPC2 = Main.npc[num79];
						if (nPC2.active && nPC2.immune[myPlayer] == 0 && !nPC2.dontTakeDamage && !nPC2.friendly && nPC2.damage > 0 && itemRectangle.Intersects(nPC2.Hitbox) && (nPC2.noTileCollide || Collision.CanHit(position, width, height, nPC2.position, nPC2.width, nPC2.height)))
						{
							nPC2.StrikeNPCNoInteraction(num75, num76, spriteDirection);
							if (Main.netMode != 0)
							{
								NetMessage.SendData(28, -1, -1, null, num79, num75, num76, spriteDirection);
							}
							nPC2.netUpdate = true;
							nPC2.immune[myPlayer] = (int)ai[1] + 2;
						}
					}
				}
				if (ai[1] <= 0f)
				{
					bool flag25 = false;
					if (flag13)
					{
						int num80 = -num11;
						if (!Collision.CanHit(base.Center, 0, 0, base.Center + Vector2.UnitX * num80 * 32f, 0, 0) || localAI[2] == 8f)
						{
							flag25 = true;
						}
						if (flag25)
						{
							int num81 = NPCID.Sets.AttackTime[type];
							int num82 = ((num11 == 1) ? num13 : num12);
							int num83 = ((num11 == 1) ? num12 : num13);
							if (num82 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num82].Center, 0, 0))
							{
								num82 = ((num83 == -1 || !Collision.CanHit(base.Center, 0, 0, Main.npc[num83].Center, 0, 0)) ? (-1) : num83);
							}
							if (num82 != -1)
							{
								ai[0] = 15f;
								ai[1] = num81;
								ai[2] = 0f;
								localAI[3] = 0f;
								direction = ((position.X < Main.npc[num82].position.X) ? 1 : (-1));
								netUpdate = true;
							}
							else
							{
								flag25 = false;
							}
						}
					}
					if (!flag25)
					{
						ai[0] = ((localAI[2] == 8f && flag13) ? 8 : 0);
						ai[1] = num74 + Main.rand.Next(maxValue4);
						ai[2] = 0f;
						localAI[1] = (localAI[3] = num74 / 2 + Main.rand.Next(maxValue4));
						netUpdate = true;
					}
				}
			}
			else if (ai[0] == 24f)
			{
				velocity.X *= 0.8f;
				ai[1] -= 1f;
				localAI[3] += 1f;
				direction = 1;
				spriteDirection = 1;
				Vector3 vector7 = GetMagicAuraColor().ToVector3();
				Lighting.AddLight(base.Center, vector7.X, vector7.Y, vector7.Z);
				if (ai[1] <= 0f)
				{
					ai[0] = 0f;
					ai[1] = 480f;
					ai[2] = 0f;
					localAI[1] = 480f;
					netUpdate = true;
				}
			}
			if (flag11 && wet)
			{
				int num84 = (int)(base.Center.X / 16f);
				int num85 = 5;
				if (collideX || (num84 < num85 && direction == -1) || (num84 > Main.maxTilesX - num85 && direction == 1))
				{
					direction *= -1;
					velocity.X *= -0.25f;
					netUpdate = true;
				}
				velocity.Y *= 0.9f;
				velocity.Y -= 0.5f;
				if (velocity.Y < -15f)
				{
					velocity.Y = -15f;
				}
			}
			if (flag10 && wet)
			{
				if (flag7)
				{
					ai[1] = 50f;
				}
				int num86 = (int)(base.Center.X / 16f);
				int num87 = 5;
				if (collideX || (num86 < num87 && direction == -1) || (num86 > Main.maxTilesX - num87 && direction == 1))
				{
					direction *= -1;
					velocity.X *= -0.25f;
					netUpdate = true;
				}
				if (Collision.GetWaterLine(base.Center.ToTileCoordinates(), out var waterLineHeight))
				{
					float num88 = base.Center.Y + 1f;
					if (base.Center.Y > waterLineHeight)
					{
						velocity.Y -= 0.8f;
						if (velocity.Y < -4f)
						{
							velocity.Y = -4f;
						}
						if (num88 + velocity.Y < waterLineHeight)
						{
							velocity.Y = waterLineHeight - num88;
						}
					}
					else
					{
						velocity.Y = MathHelper.Min(velocity.Y, waterLineHeight - num88);
					}
				}
				else
				{
					velocity.Y -= 0.2f;
				}
			}
			if (Main.netMode != 1 && isLikeATownNPC && !flag3)
			{
				bool flag26 = ai[0] < 2f && !flag13 && !wet;
				bool flag27 = (ai[0] < 2f || ai[0] == 8f) && (flag13 || flag14);
				if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
				if (localAI[1] > 0f)
				{
					flag27 = false;
				}
				if (flag27 && type == 124 && localAI[0] == 1f)
				{
					flag27 = false;
				}
				if (flag27 && type == 20)
				{
					flag27 = false;
					for (int num89 = 0; num89 < 200; num89++)
					{
						NPC nPC3 = Main.npc[num89];
						if (nPC3.active && nPC3.townNPC && !(Distance(nPC3.Center) > 1200f) && nPC3.FindBuffIndex(165) == -1)
						{
							flag27 = true;
							break;
						}
					}
				}
				if (CanTalk && flag26 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(300) == 0)
				{
					int num90 = 420;
					num90 = ((Main.rand.Next(2) != 0) ? (num90 * Main.rand.Next(1, 3)) : (num90 * Main.rand.Next(1, 4)));
					int num91 = 100;
					int num92 = 20;
					for (int num93 = 0; num93 < 200; num93++)
					{
						NPC nPC4 = Main.npc[num93];
						bool flag28 = (nPC4.ai[0] == 1f && nPC4.closeDoor) || (nPC4.ai[0] == 1f && nPC4.ai[1] > 200f) || nPC4.ai[0] > 1f || nPC4.wet;
						if (nPC4 != this && nPC4.active && nPC4.CanBeTalkedTo && !flag28 && nPC4.Distance(base.Center) < (float)num91 && nPC4.Distance(base.Center) > (float)num92 && Collision.CanHit(base.Center, 0, 0, nPC4.Center, 0, 0))
						{
							int num94 = (position.X < nPC4.position.X).ToDirectionInt();
							ai[0] = 3f;
							ai[1] = num90;
							ai[2] = num93;
							direction = num94;
							netUpdate = true;
							nPC4.ai[0] = 4f;
							nPC4.ai[1] = num90;
							nPC4.ai[2] = whoAmI;
							nPC4.direction = -num94;
							nPC4.netUpdate = true;
							break;
						}
					}
				}
				else if (CanTalk && flag26 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(1800) == 0)
				{
					int num95 = 420;
					num95 = ((Main.rand.Next(2) != 0) ? (num95 * Main.rand.Next(1, 3)) : (num95 * Main.rand.Next(1, 4)));
					int num96 = 100;
					int num97 = 20;
					for (int num98 = 0; num98 < 200; num98++)
					{
						NPC nPC5 = Main.npc[num98];
						bool flag29 = (nPC5.ai[0] == 1f && nPC5.closeDoor) || (nPC5.ai[0] == 1f && nPC5.ai[1] > 200f) || nPC5.ai[0] > 1f || nPC5.wet;
						if (nPC5 != this && nPC5.active && nPC5.CanBeTalkedTo && !NPCID.Sets.IsTownPet[nPC5.type] && !flag29 && nPC5.Distance(base.Center) < (float)num96 && nPC5.Distance(base.Center) > (float)num97 && Collision.CanHit(base.Center, 0, 0, nPC5.Center, 0, 0))
						{
							int num99 = (position.X < nPC5.position.X).ToDirectionInt();
							ai[0] = 16f;
							ai[1] = num95;
							ai[2] = num98;
							localAI[2] = Main.rand.Next(4);
							localAI[3] = Main.rand.Next(3 - (int)localAI[2]);
							direction = num99;
							netUpdate = true;
							nPC5.ai[0] = 17f;
							nPC5.ai[1] = num95;
							nPC5.ai[2] = whoAmI;
							nPC5.localAI[2] = 0f;
							nPC5.localAI[3] = 0f;
							nPC5.direction = -num99;
							nPC5.netUpdate = true;
							break;
						}
					}
				}
				else if (!NPCID.Sets.IsTownPet[type] && flag26 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(1200) == 0 && (type == 208 || (BirthdayParty.PartyIsUp && NPCID.Sets.AttackType[type] == NPCID.Sets.AttackType[208])))
				{
					int num100 = 300;
					int num101 = 150;
					for (int num102 = 0; num102 < 255; num102++)
					{
						Player player = Main.player[num102];
						if (player.active && !player.dead && player.Distance(base.Center) < (float)num101 && Collision.CanHitLine(base.Top, 0, 0, player.Top, 0, 0))
						{
							int num103 = (position.X < player.position.X).ToDirectionInt();
							ai[0] = 6f;
							ai[1] = num100;
							ai[2] = num102;
							direction = num103;
							netUpdate = true;
							break;
						}
					}
				}
				else if (flag26 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(600) == 0 && type == 550)
				{
					int num104 = 300;
					int num105 = 150;
					for (int num106 = 0; num106 < 255; num106++)
					{
						Player player2 = Main.player[num106];
						if (player2.active && !player2.dead && player2.Distance(base.Center) < (float)num105 && Collision.CanHitLine(base.Top, 0, 0, player2.Top, 0, 0))
						{
							int num107 = (position.X < player2.position.X).ToDirectionInt();
							ai[0] = 18f;
							ai[1] = num104;
							ai[2] = num106;
							direction = num107;
							netUpdate = true;
							break;
						}
					}
				}
				else if (!NPCID.Sets.IsTownPet[type] && flag26 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(1800) == 0)
				{
					ai[0] = 2f;
					ai[1] = 45 * Main.rand.Next(1, 2);
					netUpdate = true;
				}
				else if (flag26 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(600) == 0 && type == 229 && !flag14)
				{
					ai[0] = 11f;
					ai[1] = 30 * Main.rand.Next(1, 4);
					netUpdate = true;
				}
				else if (flag26 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(1200) == 0)
				{
					int num108 = 220;
					int num109 = 150;
					for (int num110 = 0; num110 < 255; num110++)
					{
						Player player3 = Main.player[num110];
						if (player3.CanBeTalkedTo && player3.Distance(base.Center) < (float)num109 && Collision.CanHitLine(base.Top, 0, 0, player3.Top, 0, 0))
						{
							int num111 = (position.X < player3.position.X).ToDirectionInt();
							ai[0] = 7f;
							ai[1] = num108;
							ai[2] = num110;
							direction = num111;
							netUpdate = true;
							break;
						}
					}
				}
				else if (flag26 && ai[0] == 1f && velocity.Y == 0f && num > 0 && Main.rand.Next(num) == 0)
				{
					Point point = (base.Bottom + Vector2.UnitY * -2f).ToTileCoordinates();
					bool flag30 = WorldGen.InWorld(point.X, point.Y, 1);
					if (flag30)
					{
						for (int num112 = 0; num112 < 200; num112++)
						{
							if (Main.npc[num112].active && Main.npc[num112].aiStyle == 7 && Main.npc[num112].townNPC && Main.npc[num112].ai[0] == 5f && (Main.npc[num112].Bottom + Vector2.UnitY * -2f).ToTileCoordinates() == point)
							{
								flag30 = false;
								break;
							}
						}
						for (int num113 = 0; num113 < 255; num113++)
						{
							if (Main.player[num113].active && Main.player[num113].sitting.isSitting && Main.player[num113].Center.ToTileCoordinates() == point)
							{
								flag30 = false;
								break;
							}
						}
					}
					if (flag30)
					{
						Tile tile2 = Main.tile[point.X, point.Y];
						flag30 = tile2.type == 15 || tile2.type == 497;
						if (flag30 && tile2.type == 15 && tile2.frameY >= 1080 && tile2.frameY <= 1098)
						{
							flag30 = false;
						}
						if (flag30)
						{
							ai[0] = 5f;
							ai[1] = 900 + Main.rand.Next(10800);
							direction = ((tile2.frameX != 0) ? 1 : (-1));
							base.Bottom = new Vector2(point.X * 16 + 8 + 2 * direction, point.Y * 16 + 16);
							velocity = Vector2.Zero;
							localAI[3] = 0f;
							netUpdate = true;
						}
					}
				}
				else if (flag26 && ai[0] == 1f && velocity.Y == 0f && Main.rand.Next(600) == 0 && Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.SearchAvoidedByNPCs))
				{
					Point point2 = (base.Center + new Vector2(direction * 10, 0f)).ToTileCoordinates();
					bool flag31 = WorldGen.InWorld(point2.X, point2.Y, 1);
					if (flag31)
					{
						Tile tileSafely7 = Framing.GetTileSafely(point2.X, point2.Y);
						if (!tileSafely7.nactive() || !TileID.Sets.InteractibleByNPCs[tileSafely7.type])
						{
							flag31 = false;
						}
					}
					if (flag31)
					{
						ai[0] = 9f;
						ai[1] = 40 + Main.rand.Next(90);
						velocity = Vector2.Zero;
						localAI[3] = 0f;
						netUpdate = true;
					}
				}
				if (Main.netMode != 1 && ai[0] < 2f && velocity.Y == 0f && type == 18 && breath > 0)
				{
					int num114 = -1;
					for (int num115 = 0; num115 < 200; num115++)
					{
						NPC nPC6 = Main.npc[num115];
						if (nPC6.active && nPC6.townNPC && nPC6.life != nPC6.lifeMax && (num114 == -1 || nPC6.lifeMax - nPC6.life > Main.npc[num114].lifeMax - Main.npc[num114].life) && Collision.CanHitLine(position, width, height, nPC6.position, nPC6.width, nPC6.height) && Distance(nPC6.Center) < 500f)
						{
							num114 = num115;
						}
					}
					if (num114 != -1)
					{
						ai[0] = 13f;
						ai[1] = 34f;
						ai[2] = num114;
						localAI[3] = 0f;
						direction = ((position.X < Main.npc[num114].position.X) ? 1 : (-1));
						netUpdate = true;
					}
				}
				if (flag27 && velocity.Y == 0f && NPCID.Sets.AttackType[type] == 0 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
				{
					int num116 = NPCID.Sets.AttackTime[type];
					int num117 = ((num11 == 1) ? num13 : num12);
					int num118 = ((num11 == 1) ? num12 : num13);
					if (num117 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num117].Center, 0, 0))
					{
						num117 = ((num118 == -1 || !Collision.CanHit(base.Center, 0, 0, Main.npc[num118].Center, 0, 0)) ? (-1) : num118);
					}
					bool flag32 = num117 != -1;
					if (flag32 && type == 633)
					{
						flag32 = Vector2.Distance(base.Center, Main.npc[num117].Center) <= 50f;
					}
					if (flag32)
					{
						localAI[2] = ai[0];
						ai[0] = 10f;
						ai[1] = num116;
						ai[2] = 0f;
						localAI[3] = 0f;
						direction = ((position.X < Main.npc[num117].position.X) ? 1 : (-1));
						netUpdate = true;
					}
				}
				else if (flag27 && velocity.Y == 0f && NPCID.Sets.AttackType[type] == 1 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
				{
					int num119 = NPCID.Sets.AttackTime[type];
					int num120 = ((num11 == 1) ? num13 : num12);
					int num121 = ((num11 == 1) ? num12 : num13);
					if (num120 != -1 && !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num120].Center, 0, 0))
					{
						num120 = ((num121 == -1 || !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num121].Center, 0, 0)) ? (-1) : num121);
					}
					if (num120 != -1)
					{
						Vector2 vector8 = DirectionTo(Main.npc[num120].Center);
						if (vector8.Y <= 0.5f && vector8.Y >= -0.5f)
						{
							localAI[2] = ai[0];
							ai[0] = 12f;
							ai[1] = num119;
							ai[2] = vector8.Y;
							localAI[3] = 0f;
							direction = ((position.X < Main.npc[num120].position.X) ? 1 : (-1));
							netUpdate = true;
						}
					}
				}
				if (flag27 && velocity.Y == 0f && NPCID.Sets.AttackType[type] == 2 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
				{
					int num122 = NPCID.Sets.AttackTime[type];
					int num123 = ((num11 == 1) ? num13 : num12);
					int num124 = ((num11 == 1) ? num12 : num13);
					if (num123 != -1 && !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num123].Center, 0, 0))
					{
						num123 = ((num124 == -1 || !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num124].Center, 0, 0)) ? (-1) : num124);
					}
					if (num123 != -1)
					{
						localAI[2] = ai[0];
						ai[0] = 14f;
						ai[1] = num122;
						ai[2] = 0f;
						localAI[3] = 0f;
						direction = ((position.X < Main.npc[num123].position.X) ? 1 : (-1));
						netUpdate = true;
					}
					else if (type == 20)
					{
						localAI[2] = ai[0];
						ai[0] = 14f;
						ai[1] = num122;
						ai[2] = 0f;
						localAI[3] = 0f;
						netUpdate = true;
					}
				}
				if (flag27 && velocity.Y == 0f && NPCID.Sets.AttackType[type] == 3 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
				{
					int num125 = NPCID.Sets.AttackTime[type];
					int num126 = ((num11 == 1) ? num13 : num12);
					int num127 = ((num11 == 1) ? num12 : num13);
					if (num126 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num126].Center, 0, 0))
					{
						num126 = ((num127 == -1 || !Collision.CanHit(base.Center, 0, 0, Main.npc[num127].Center, 0, 0)) ? (-1) : num127);
					}
					if (num126 != -1)
					{
						localAI[2] = ai[0];
						ai[0] = 15f;
						ai[1] = num125;
						ai[2] = 0f;
						localAI[3] = 0f;
						direction = ((position.X < Main.npc[num126].position.X) ? 1 : (-1));
						netUpdate = true;
					}
				}
			}
			if (type == 681)
			{
				float R = 0f;
				float G = 0f;
				float B = 0f;
				TorchID.TorchColor(23, out R, out G, out B);
				float num128 = 0.35f;
				R *= num128;
				G *= num128;
				B *= num128;
				Lighting.AddLight(base.Center, R, G, B);
			}
			if (type == 683 || type == 687)
			{
				float num129 = Utils.WrappedLerp(0.75f, 1f, (float)Main.timeForVisualEffects % 120f / 120f);
				Lighting.AddLight(base.Center, 0.25f * num129, 0.25f * num129, 0.1f * num129);
			}
		}

		private void AI_007_TownEntities_Shimmer_TeleportToLandingSpot()
		{
			Vector2? vector = AI_007_TownEntities_Shimmer_ScanForBestSpotToLandOn();
			if (vector.HasValue)
			{
				Vector2 vector2 = position;
				position = vector.Value;
				Vector2 movementVector = position - vector2;
				int num = 560;
				if (movementVector.Length() >= (float)num)
				{
					ai[2] = 30f;
					ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.ShimmerTownNPCSend, new ParticleOrchestraSettings
					{
						PositionInWorld = vector2 + base.Size / 2f,
						MovementVector = movementVector
					});
				}
				netUpdate = true;
			}
		}

		private Vector2? AI_007_TownEntities_Shimmer_ScanForBestSpotToLandOn()
		{
			Point point = base.Top.ToTileCoordinates();
			int num = 30;
			Vector2? result = null;
			bool flag = homeless && (homeTileX == -1 || homeTileY == -1);
			for (int i = 1; i < num; i += 2)
			{
				Vector2? vector = FindSpotWithoutShimmer(point.X, point.Y, i, flag);
				if (vector.HasValue)
				{
					result = vector.Value;
					break;
				}
			}
			if (!result.HasValue && homeTileX != -1 && homeTileY != -1)
			{
				for (int j = 1; j < num; j += 2)
				{
					Vector2? vector2 = FindSpotWithoutShimmer(homeTileX, homeTileY, j, flag);
					if (vector2.HasValue)
					{
						result = vector2.Value;
						break;
					}
				}
			}
			if (!result.HasValue)
			{
				int num2 = (flag ? 30 : 0);
				num = 60;
				flag = true;
				for (int k = num2; k < num; k += 2)
				{
					Vector2? vector3 = FindSpotWithoutShimmer(point.X, point.Y, k, flag);
					if (vector3.HasValue)
					{
						result = vector3.Value;
						break;
					}
				}
			}
			if (!result.HasValue && homeTileX != -1 && homeTileY != -1)
			{
				num = 60;
				flag = true;
				for (int l = 30; l < num; l += 2)
				{
					Vector2? vector4 = FindSpotWithoutShimmer(homeTileX, homeTileY, l, flag);
					if (vector4.HasValue)
					{
						result = vector4.Value;
						break;
					}
				}
			}
			return result;
		}

		private Vector2? FindSpotWithoutShimmer(int startX, int startY, int expand, bool allowSolidTop)
		{
			Vector2 vector = new Vector2(-width / 2, -height);
			for (int i = 0; i < expand; i++)
			{
				int num = startX - i;
				int num2 = startY - expand;
				Vector2 landingPosition = new Vector2(num * 16, num2 * 16) + vector;
				if (IsSpotShimmerFree(landingPosition, allowSolidTop))
				{
					return landingPosition;
				}
				landingPosition = new Vector2((startX + i) * 16, num2 * 16) + vector;
				if (IsSpotShimmerFree(landingPosition, allowSolidTop))
				{
					return landingPosition;
				}
				int num3 = startX - i;
				num2 = startY + expand;
				landingPosition = new Vector2(num3 * 16, num2 * 16) + vector;
				if (IsSpotShimmerFree(landingPosition, allowSolidTop))
				{
					return landingPosition;
				}
				landingPosition = new Vector2((startX + i) * 16, num2 * 16) + vector;
				if (IsSpotShimmerFree(landingPosition, allowSolidTop))
				{
					return landingPosition;
				}
			}
			for (int j = 0; j < expand; j++)
			{
				int num4 = startX - expand;
				int num5 = startY - j;
				Vector2 landingPosition2 = new Vector2(num4 * 16, num5 * 16) + vector;
				if (IsSpotShimmerFree(landingPosition2, allowSolidTop))
				{
					return landingPosition2;
				}
				landingPosition2 = new Vector2((startX + expand) * 16, num5 * 16) + vector;
				if (IsSpotShimmerFree(landingPosition2, allowSolidTop))
				{
					return landingPosition2;
				}
				int num6 = startX - expand;
				num5 = startY + j;
				landingPosition2 = new Vector2(num6 * 16, num5 * 16) + vector;
				if (IsSpotShimmerFree(landingPosition2, allowSolidTop))
				{
					return landingPosition2;
				}
				landingPosition2 = new Vector2((startX + expand) * 16, num5 * 16) + vector;
				if (IsSpotShimmerFree(landingPosition2, allowSolidTop))
				{
					return landingPosition2;
				}
			}
			return null;
		}

		private bool IsSpotShimmerFree(Vector2 landingPosition, bool allowSolidTop)
		{
			if (Collision.SolidCollision(landingPosition, width, height))
			{
				return false;
			}
			if (!Collision.SolidCollision(landingPosition + new Vector2(0f, height), width, 100, allowSolidTop))
			{
				return false;
			}
			if (Collision.WetCollision(landingPosition, width, height + 100) && Collision.shimmer)
			{
				return false;
			}
			return true;
		}

		private void AI_007_TownEntities_TeleportToHome(int homeFloorX, int homeFloorY)
		{
			bool flag = false;
			for (int i = 0; i < 3; i++)
			{
				int num = homeFloorX + i switch
				{
					1 => -1, 
					0 => 0, 
					_ => 1, 
				};
				if (type == 37 || !Collision.SolidTiles(num - 1, num + 1, homeFloorY - 3, homeFloorY - 1))
				{
					velocity.X = 0f;
					velocity.Y = 0f;
					position.X = num * 16 + 8 - width / 2;
					position.Y = (float)(homeFloorY * 16 - height) - 0.1f;
					netUpdate = true;
					AI_007_TryForcingSitting(homeFloorX, homeFloorY);
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				homeless = true;
				WorldGen.QuickFindHome(whoAmI);
			}
		}

		private void AI_007_TownEntities_GetWalkPrediction(int myTileX, int homeFloorX, bool canBreathUnderWater, bool currentlyDrowning, int tileX, int tileY, out bool keepwalking, out bool avoidFalling)
		{
			keepwalking = false;
			avoidFalling = true;
			bool flag = myTileX >= homeFloorX - 35 && myTileX <= homeFloorX + 35;
			if (townNPC && ai[1] < 30f)
			{
				keepwalking = !Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.SearchAvoidedByNPCs);
				if (!keepwalking)
				{
					Rectangle hitbox = base.Hitbox;
					hitbox.X -= 20;
					hitbox.Width += 40;
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].active && Main.npc[i].friendly && i != whoAmI && Main.npc[i].velocity.X == 0f && hitbox.Intersects(Main.npc[i].Hitbox))
						{
							keepwalking = true;
							break;
						}
					}
				}
			}
			if (!keepwalking && currentlyDrowning)
			{
				keepwalking = true;
			}
			if (avoidFalling && (NPCID.Sets.TownCritter[type] || (!flag && direction == Math.Sign(homeFloorX - myTileX))))
			{
				avoidFalling = false;
			}
			if (!avoidFalling)
			{
				return;
			}
			bool flag2 = false;
			Point p = default(Point);
			int num = 0;
			for (int j = -1; j <= 4; j++)
			{
				Tile tileSafely = Framing.GetTileSafely(tileX, tileY + j);
				if (tileSafely.liquid > 0)
				{
					num++;
					if (tileSafely.lava())
					{
						flag2 = true;
						break;
					}
				}
				if (tileSafely.nactive() && Main.tileSolid[tileSafely.type])
				{
					if (num > 0)
					{
						p.X = tileX;
						p.Y = tileY + j;
					}
					avoidFalling = false;
					break;
				}
			}
			avoidFalling |= flag2;
			double num2 = Math.Ceiling((float)height / 16f);
			if ((double)num >= num2)
			{
				avoidFalling = true;
			}
			if (!avoidFalling && p.X != 0 && p.Y != 0)
			{
				Vector2 vector = p.ToWorldCoordinates(8f, 0f) + new Vector2(-width / 2, -height);
				avoidFalling = Collision.DrownCollision(vector, width, height, 1f);
			}
		}

		private bool AI_007_TownEntities_CheckIfWillDrown(bool currentlyDrowning)
		{
			return currentlyDrowning;
		}

		private void AI_007_AttemptToPlayIdleAnimationsForPets(int petIdleChance)
		{
			if (velocity.X == 0f && Main.netMode != 1 && Main.rand.Next(petIdleChance) == 0)
			{
				int num = 3;
				if (type == 638)
				{
					num = 2;
				}
				if (NPCID.Sets.IsTownSlime[type])
				{
					num = 0;
				}
				ai[0] = ((num == 0) ? 20 : Main.rand.Next(20, 20 + num));
				ai[1] = 200 + Main.rand.Next(300);
				if (ai[0] == 20f && type == 637)
				{
					ai[1] = 500 + Main.rand.Next(200);
				}
				if (ai[0] == 21f && type == 638)
				{
					ai[1] = 100 + Main.rand.Next(100);
				}
				if (ai[0] == 22f && type == 656)
				{
					ai[1] = 200 + Main.rand.Next(200);
				}
				if (ai[0] == 20f && NPCID.Sets.IsTownSlime[type])
				{
					ai[1] = 180 + Main.rand.Next(240);
				}
				ai[2] = 0f;
				localAI[3] = 0f;
				netUpdate = true;
			}
		}

		public bool NPCCanStickToWalls()
		{
			int num = (int)base.Center.X / 16;
			int num2 = (int)base.Center.Y / 16;
			int num3 = 0;
			for (int i = num - 1; i <= num + 1; i++)
			{
				for (int j = num2 - 1; j <= num2 + 1; j++)
				{
					Tile tileSafely = Framing.GetTileSafely(i, j);
					if ((!tileSafely.active() || !Main.tileSolid[tileSafely.type] || TileID.Sets.Platforms[tileSafely.type]) && tileSafely.wall > 0)
					{
						num3++;
						if (num3 > 4)
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		private bool AI_003_Gnomes_ShouldTurnToStone()
		{
			if (Main.remixWorld)
			{
				return position.Y / 16f > (float)(Main.maxTilesY - 350);
			}
			if (Main.dayTime)
			{
				return WorldGen.InAPlaceWithWind(position, width, height);
			}
			return false;
		}

		private void AI_003_Fighters()
		{
			if (Main.player[target].position.Y + (float)Main.player[target].height == position.Y + (float)height)
			{
				directionY = -1;
			}
			bool flag = false;
			if (type == 624 && AI_003_Gnomes_ShouldTurnToStone())
			{
				int num = (int)(base.Center.X / 16f);
				int num2 = (int)(base.Bottom.Y / 16f);
				position += netOffset;
				int num3 = Dust.NewDust(position, width, height, 43, 0f, 0f, 254, Color.White, 0.5f);
				Main.dust[num3].velocity *= 0.2f;
				position -= netOffset;
				if (WorldGen.SolidTileAllowBottomSlope(num, num2))
				{
					for (int i = 0; i < 5; i++)
					{
						position += netOffset;
						int num4 = Dust.NewDust(position, width, height, 43, 0f, 0f, 254, Color.White, 0.5f);
						Main.dust[num4].velocity *= 0.2f;
						position -= netOffset;
					}
					if (Main.netMode != 1 && TileObject.CanPlace(num, num2 - 1, 567, 0, direction, out var _, onlyCheck: true) && WorldGen.PlaceTile(num, num2 - 1, 567, mute: false, forced: false, -1, Main.rand.Next(5)))
					{
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, num, num2 - 2, 1, 2);
						}
						if (Main.netMode != 1)
						{
							if (IsNPCValidForBestiaryKillCredit())
							{
								Main.BestiaryTracker.Kills.RegisterKill(this);
							}
							CountKillForBannersAndDropThem();
						}
						life = 0;
						active = false;
						AchievementsHelper.NotifyProgressionEvent(24);
						return;
					}
				}
			}
			if (type == 466)
			{
				int num5 = 200;
				if (ai[2] == 0f)
				{
					alpha = num5;
					TargetClosest();
					if (!Main.player[target].dead && (Main.player[target].Center - base.Center).Length() < 170f)
					{
						ai[2] = -16f;
					}
					if (velocity.X != 0f || velocity.Y < 0f || velocity.Y > 2f || justHit)
					{
						ai[2] = -16f;
					}
					return;
				}
				if (ai[2] < 0f)
				{
					if (alpha > 0)
					{
						alpha -= num5 / 16;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					ai[2] += 1f;
					if (ai[2] == 0f)
					{
						ai[2] = 1f;
						velocity.X = direction * 2;
					}
					return;
				}
				alpha = 0;
			}
			if (type == 166)
			{
				if (Main.netMode != 1 && Main.rand.Next(240) == 0)
				{
					ai[2] = Main.rand.Next(-480, -60);
					netUpdate = true;
				}
				if (ai[2] < 0f)
				{
					TargetClosest();
					if (justHit)
					{
						ai[2] = 0f;
					}
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						ai[2] = 0f;
					}
				}
				if (ai[2] < 0f)
				{
					velocity.X *= 0.9f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					ai[2] += 1f;
					if (ai[2] == 0f)
					{
						velocity.X = (float)direction * 0.1f;
					}
					return;
				}
			}
			if (type == 461)
			{
				if (wet)
				{
					knockBackResist = 0f;
					ai[3] = -0.10101f;
					noGravity = true;
					Vector2 center = base.Center;
					width = 34;
					height = 24;
					position.X = center.X - (float)(width / 2);
					position.Y = center.Y - (float)(height / 2);
					TargetClosest();
					if (collideX)
					{
						velocity.X = 0f - oldVelocity.X;
					}
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					if (Collision.CanHit(position, width, height, Main.player[target].Center, 1, 1))
					{
						Vector2 vector = Main.player[target].Center - base.Center;
						vector.Normalize();
						vector *= 5f;
						velocity = (velocity * 19f + vector) / 20f;
						return;
					}
					float num6 = 5f;
					if (velocity.Y > 0f)
					{
						num6 = 3f;
					}
					if (velocity.Y < 0f)
					{
						num6 = 8f;
					}
					Vector2 vector2 = new Vector2(direction, -1f);
					vector2.Normalize();
					vector2 *= num6;
					if (num6 < 5f)
					{
						velocity = (velocity * 24f + vector2) / 25f;
					}
					else
					{
						velocity = (velocity * 9f + vector2) / 10f;
					}
					return;
				}
				knockBackResist = 0.4f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				noGravity = false;
				Vector2 center2 = base.Center;
				width = 18;
				height = 40;
				position.X = center2.X - (float)(width / 2);
				position.Y = center2.Y - (float)(height / 2);
				if (ai[3] == -0.10101f)
				{
					ai[3] = 0f;
					float num7 = velocity.Length();
					num7 *= 2f;
					if (num7 > 10f)
					{
						num7 = 10f;
					}
					velocity.Normalize();
					velocity *= num7;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
				}
			}
			if (type == 586)
			{
				if (alpha == 255)
				{
					TargetClosest();
					spriteDirection = direction;
					velocity.Y = -6f;
					netUpdate = true;
					for (int j = 0; j < 35; j++)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 5);
						dust.velocity *= 1f;
						dust.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust.velocity += velocity * 0.5f;
					}
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				position += netOffset;
				if (alpha != 0)
				{
					for (int k = 0; k < 2; k++)
					{
						Dust dust2 = Dust.NewDustDirect(position, width, height, 5);
						dust2.velocity *= 1f;
						dust2.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust2.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust2.velocity += velocity * 0.3f;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					Dust dust3 = Dust.NewDustDirect(position, width, height, 5);
					dust3.velocity *= 0f;
					dust3.alpha = 120;
					dust3.scale = 0.7f + Main.rand.NextFloat() * 0.5f;
					dust3.velocity += velocity * 0.3f;
				}
				position -= netOffset;
				if (wet)
				{
					knockBackResist = 0f;
					ai[3] = -0.10101f;
					noGravity = true;
					Vector2 center3 = base.Center;
					position.X = center3.X - (float)(width / 2);
					position.Y = center3.Y - (float)(height / 2);
					TargetClosest();
					if (collideX)
					{
						velocity.X = 0f - oldVelocity.X;
					}
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					if (Collision.CanHit(position, width, height, Main.player[target].Center, 1, 1))
					{
						Vector2 vector3 = Main.player[target].Center - base.Center;
						vector3.Normalize();
						float num8 = 1f;
						num8 += Math.Abs(base.Center.Y - Main.player[target].Center.Y) / 40f;
						num8 = MathHelper.Clamp(num8, 5f, 20f);
						vector3 *= num8;
						if (velocity.Y > 0f)
						{
							velocity = (velocity * 29f + vector3) / 30f;
						}
						else
						{
							velocity = (velocity * 4f + vector3) / 5f;
						}
						return;
					}
					float num9 = 5f;
					if (velocity.Y > 0f)
					{
						num9 = 3f;
					}
					if (velocity.Y < 0f)
					{
						num9 = 8f;
					}
					Vector2 vector4 = new Vector2(direction, -1f);
					vector4.Normalize();
					vector4 *= num9;
					if (num9 < 5f)
					{
						velocity = (velocity * 24f + vector4) / 25f;
					}
					else
					{
						velocity = (velocity * 9f + vector4) / 10f;
					}
					return;
				}
				noGravity = false;
				Vector2 center4 = base.Center;
				position.X = center4.X - (float)(width / 2);
				position.Y = center4.Y - (float)(height / 2);
				if (ai[3] == -0.10101f)
				{
					ai[3] = 0f;
					float num10 = velocity.Length();
					num10 *= 2f;
					if (num10 > 15f)
					{
						num10 = 15f;
					}
					velocity.Normalize();
					velocity *= num10;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
				}
			}
			if (type == 379 || type == 380)
			{
				if (ai[3] < 0f)
				{
					directionY = -1;
					flag = false;
					damage = 0;
					velocity.X *= 0.93f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					int num11 = (int)(0f - ai[3] - 1f);
					int num12 = Math.Sign(Main.npc[num11].Center.X - base.Center.X);
					if (num12 != direction)
					{
						velocity.X = 0f;
						direction = num12;
						netUpdate = true;
					}
					if (justHit && Main.netMode != 1 && Main.npc[num11].localAI[0] == 0f)
					{
						Main.npc[num11].localAI[0] = 1f;
					}
					if (ai[0] < 1000f)
					{
						ai[0] = 1000f;
					}
					if ((ai[0] += 1f) >= 1300f)
					{
						ai[0] = 1000f;
						netUpdate = true;
					}
					return;
				}
				if (ai[0] >= 1000f)
				{
					ai[0] = 0f;
				}
				damage = defDamage;
			}
			if (type == 383 && ai[2] == 0f && localAI[0] == 0f && Main.netMode != 1)
			{
				int num13 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 384, whoAmI);
				ai[2] = num13 + 1;
				localAI[0] = -1f;
				netUpdate = true;
				Main.npc[num13].ai[0] = whoAmI;
				Main.npc[num13].netUpdate = true;
			}
			if (type == 383)
			{
				int num14 = (int)ai[2] - 1;
				if (num14 != -1 && Main.npc[num14].active && Main.npc[num14].type == 384)
				{
					dontTakeDamage = true;
				}
				else
				{
					dontTakeDamage = false;
					ai[2] = 0f;
					if (localAI[0] == -1f)
					{
						localAI[0] = 180f;
					}
					if (localAI[0] > 0f)
					{
						localAI[0] -= 1f;
					}
				}
			}
			if (type == 482)
			{
				int num15 = 300;
				int num16 = 120;
				dontTakeDamage = false;
				if (ai[2] < 0f)
				{
					dontTakeDamage = true;
					ai[2] += 1f;
					velocity.X *= 0.9f;
					if ((double)Math.Abs(velocity.X) < 0.001)
					{
						velocity.X = 0.001f * (float)direction;
					}
					if (Math.Abs(velocity.Y) > 1f)
					{
						ai[2] += 10f;
					}
					if (ai[2] >= 0f)
					{
						netUpdate = true;
						velocity.X += (float)direction * 0.3f;
					}
					return;
				}
				if (ai[2] < (float)num15)
				{
					if (justHit)
					{
						ai[2] += 15f;
					}
					ai[2] += 1f;
				}
				else if (velocity.Y == 0f)
				{
					ai[2] = -num16;
					netUpdate = true;
				}
			}
			if (type == 631)
			{
				if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest(ai[2] > 0f);
				}
				Player player = Main.player[target];
				bool flag2 = !player.dead && player.active && base.Center.Distance(player.Center) < 320f;
				int num17 = 100;
				int num18 = 32;
				if (ai[2] == 0f)
				{
					ai[3] = 65f;
					if (flag2 && Collision.CanHit(player, this))
					{
						ai[2] = num17;
						ai[3] = 0f;
						velocity.X = (float)direction * 0.01f;
						netUpdate = true;
					}
				}
				else
				{
					if (ai[2] < (float)num17)
					{
						ai[2] += 1f;
						velocity.X *= 0.9f;
						if ((double)Math.Abs(velocity.X) < 0.001)
						{
							velocity.X = 0f;
						}
						if (Math.Abs(velocity.Y) > 1f)
						{
							ai[2] = 0f;
						}
						if (ai[2] == (float)(num17 - num18 / 2) && Main.netMode != 1 && !player.Hitbox.Intersects(base.Hitbox) && Collision.CanHit(player, this))
						{
							float num19 = 8f;
							Vector2 center5 = base.Center;
							Vector2 vector5 = DirectionTo(Main.player[target].Center) * num19;
							if (vector5.HasNaNs())
							{
								vector5 = new Vector2((float)direction * num19, 0f);
							}
							int num20 = 20;
							Vector2 v = vector5 + Utils.RandomVector2(Main.rand, -0.8f, 0.8f);
							v = v.SafeNormalize(Vector2.Zero);
							v *= num19;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center5.X, center5.Y, v.X, v.Y, 909, num20, 1f, Main.myPlayer);
						}
						if (ai[2] >= (float)num17)
						{
							ai[2] = num17;
							ai[3] = 0f;
							velocity.X = (float)direction * 0.01f;
							netUpdate = true;
						}
						return;
					}
					if (velocity.Y == 0f && flag2 && (player.Hitbox.Intersects(base.Hitbox) || Collision.CanHit(player, this)))
					{
						ai[2] = num17 - num18;
						netUpdate = true;
					}
				}
			}
			if (type == 480)
			{
				int num21 = 180;
				int num22 = 300;
				int num23 = 180;
				int num24 = 60;
				int num25 = 20;
				if (life < lifeMax / 3)
				{
					num21 = 120;
					num22 = 240;
					num23 = 240;
					num24 = 90;
				}
				if (ai[2] > 0f)
				{
					ai[2] -= 1f;
				}
				else if (ai[2] == 0f)
				{
					if (((Main.player[target].Center.X < base.Center.X && direction < 0) || (Main.player[target].Center.X > base.Center.X && direction > 0)) && velocity.Y == 0f && Distance(Main.player[target].Center) < 900f && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						ai[2] = -num23 - num25;
						netUpdate = true;
					}
				}
				else
				{
					if (ai[2] < 0f && ai[2] < (float)(-num23))
					{
						position += netOffset;
						velocity.X *= 0.9f;
						if (velocity.Y < -2f || velocity.Y > 4f || justHit)
						{
							ai[2] = num21;
						}
						else
						{
							ai[2] += 1f;
							if (ai[2] == 0f)
							{
								ai[2] = num22;
							}
						}
						float num26 = ai[2] + (float)num23 + (float)num25;
						if (num26 == 1f)
						{
							SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 17);
						}
						if (num26 < (float)num25)
						{
							Vector2 vector6 = base.Top + new Vector2(spriteDirection * 6, 6f);
							float num27 = MathHelper.Lerp(20f, 30f, (num26 * 3f + 50f) / 182f);
							Main.rand.NextFloat();
							for (float num28 = 0f; num28 < 2f; num28 += 1f)
							{
								Vector2 vector7 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (Main.rand.NextFloat() * 0.5f + 0.5f);
								Dust obj = Main.dust[Dust.NewDust(vector6, 0, 0, 228)];
								obj.position = vector6 + vector7 * num27;
								obj.noGravity = true;
								obj.velocity = vector7 * 2f;
								obj.scale = 0.5f + Main.rand.NextFloat() * 0.5f;
							}
						}
						Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
						position -= netOffset;
						return;
					}
					if (ai[2] < 0f && ai[2] >= (float)(-num23))
					{
						position += netOffset;
						Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
						velocity.X *= 0.9f;
						if (velocity.Y < -2f || velocity.Y > 4f || justHit)
						{
							ai[2] = num21;
						}
						else
						{
							ai[2] += 1f;
							if (ai[2] == 0f)
							{
								ai[2] = num22;
							}
						}
						float num29 = ai[2] + (float)num23;
						if (num29 < 180f && (Main.rand.Next(3) == 0 || ai[2] % 3f == 0f))
						{
							Vector2 vector8 = base.Top + new Vector2(spriteDirection * 10, 10f);
							float num30 = MathHelper.Lerp(20f, 30f, (num29 * 3f + 50f) / 182f);
							Main.rand.NextFloat();
							for (float num31 = 0f; num31 < 1f; num31 += 1f)
							{
								Vector2 vector9 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (Main.rand.NextFloat() * 0.5f + 0.5f);
								Dust obj2 = Main.dust[Dust.NewDust(vector8, 0, 0, 228)];
								obj2.position = vector8 + vector9 * num30;
								obj2.noGravity = true;
								obj2.velocity = vector9 * 4f;
								obj2.scale = 0.5f + Main.rand.NextFloat();
							}
						}
						position -= netOffset;
						if (Main.netMode == 2)
						{
							return;
						}
						Player player2 = Main.player[Main.myPlayer];
						_ = Main.myPlayer;
						if (player2.dead || !player2.active || player2.FindBuffIndex(156) != -1)
						{
							return;
						}
						Vector2 vector10 = player2.Center - base.Center;
						if (!(vector10.Length() < 700f))
						{
							return;
						}
						bool flag3 = vector10.Length() < 30f;
						if (!flag3)
						{
							float x = (MathF.PI / 4f).ToRotationVector2().X;
							Vector2 vector11 = Vector2.Normalize(vector10);
							if (vector11.X > x || vector11.X < 0f - x)
							{
								flag3 = true;
							}
						}
						if (((player2.Center.X < base.Center.X && direction < 0 && player2.direction > 0) || (player2.Center.X > base.Center.X && direction > 0 && player2.direction < 0)) && flag3 && (Collision.CanHitLine(base.Center, 1, 1, player2.Center, 1, 1) || Collision.CanHitLine(base.Center - Vector2.UnitY * 16f, 1, 1, player2.Center, 1, 1) || Collision.CanHitLine(base.Center + Vector2.UnitY * 8f, 1, 1, player2.Center, 1, 1)) && !player2.creativeGodMode)
						{
							player2.AddBuff(156, num24 + (int)ai[2] * -1);
						}
						return;
					}
				}
			}
			if (type == 471)
			{
				if (ai[3] < 0f)
				{
					knockBackResist = 0f;
					defense = (int)((double)defDefense * 1.1);
					noGravity = true;
					noTileCollide = true;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else if (velocity.X > 0f)
					{
						direction = 1;
					}
					rotation = velocity.X * 0.1f;
					if (Main.netMode != 1)
					{
						localAI[3] += 1f;
						if (localAI[3] > (float)Main.rand.Next(20, 180))
						{
							localAI[3] = 0f;
							Vector2 center6 = base.Center;
							center6 += velocity;
							NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)center6.X, (int)center6.Y, 30);
						}
					}
				}
				else
				{
					localAI[3] = 0f;
					knockBackResist = 0.35f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
					rotation *= 0.9f;
					defense = defDefense;
					noGravity = false;
					noTileCollide = false;
				}
				if (ai[3] == 1f)
				{
					knockBackResist = 0f;
					defense += 10;
				}
				if (ai[3] == -1f)
				{
					TargetClosest();
					float num32 = 8f;
					float num33 = 40f;
					Vector2 vector12 = Main.player[target].Center - base.Center;
					float num34 = vector12.Length();
					num32 += num34 / 200f;
					vector12.Normalize();
					vector12 *= num32;
					velocity = (velocity * (num33 - 1f) + vector12) / num33;
					if (num34 < 500f && !Collision.SolidCollision(position, width, height))
					{
						ai[3] = 0f;
						ai[2] = 0f;
					}
					return;
				}
				if (ai[3] == -2f)
				{
					velocity.Y -= 0.2f;
					if (velocity.Y < -10f)
					{
						velocity.Y = -10f;
					}
					if (Main.player[target].Center.Y - base.Center.Y > 200f)
					{
						TargetClosest();
						ai[3] = -3f;
						if (Main.player[target].Center.X > base.Center.X)
						{
							ai[2] = 1f;
						}
						else
						{
							ai[2] = -1f;
						}
					}
					velocity.X *= 0.99f;
					return;
				}
				if (ai[3] == -3f)
				{
					if (direction == 0)
					{
						TargetClosest();
					}
					if (ai[2] == 0f)
					{
						ai[2] = direction;
					}
					velocity.Y *= 0.9f;
					velocity.X += ai[2] * 0.3f;
					if (velocity.X > 10f)
					{
						velocity.X = 10f;
					}
					if (velocity.X < -10f)
					{
						velocity.X = -10f;
					}
					float num35 = Main.player[target].Center.X - base.Center.X;
					if ((ai[2] < 0f && num35 > 300f) || (ai[2] > 0f && num35 < -300f))
					{
						ai[3] = -4f;
						ai[2] = 0f;
					}
					else if (Math.Abs(num35) > 800f)
					{
						ai[3] = -1f;
						ai[2] = 0f;
					}
					return;
				}
				if (ai[3] == -4f)
				{
					ai[2] += 1f;
					velocity.Y += 0.1f;
					if (velocity.Length() > 4f)
					{
						velocity *= 0.9f;
					}
					int num36 = (int)base.Center.X / 16;
					int num37 = (int)(position.Y + (float)height + 12f) / 16;
					bool flag4 = false;
					for (int l = num36 - 1; l <= num36 + 1; l++)
					{
						if (Main.tile[l, num37] == null)
						{
							Main.tile[num36, num37] = new Tile();
						}
						if (Main.tile[l, num37].active() && Main.tileSolid[Main.tile[l, num37].type])
						{
							flag4 = true;
						}
					}
					if (flag4 && !Collision.SolidCollision(position, width, height))
					{
						ai[3] = 0f;
						ai[2] = 0f;
					}
					else if (ai[2] > 300f || base.Center.Y > Main.player[target].Center.Y + 200f)
					{
						ai[3] = -1f;
						ai[2] = 0f;
					}
				}
				else
				{
					if (ai[3] == 1f)
					{
						Vector2 center7 = base.Center;
						center7.Y -= 70f;
						velocity.X *= 0.8f;
						ai[2] += 1f;
						if (ai[2] == 60f)
						{
							if (Main.netMode != 1)
							{
								NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)center7.X, (int)center7.Y + 18, 472);
							}
						}
						else if (ai[2] >= 90f)
						{
							ai[3] = -2f;
							ai[2] = 0f;
						}
						for (int m = 0; m < 2; m++)
						{
							Vector2 vector13 = center7;
							Vector2 vector14 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
							vector14.Normalize();
							vector14 *= (float)Main.rand.Next(0, 100) * 0.1f;
							Vector2 vector15 = vector13 + vector14;
							vector14.Normalize();
							vector14 *= (float)Main.rand.Next(50, 90) * 0.1f;
							int num38 = Dust.NewDust(vector15, 1, 1, 27);
							Main.dust[num38].velocity = -vector14 * 0.3f;
							Main.dust[num38].alpha = 100;
							if (Main.rand.Next(2) == 0)
							{
								Main.dust[num38].noGravity = true;
								Main.dust[num38].scale += 0.3f;
							}
						}
						return;
					}
					ai[2] += 1f;
					int num39 = 10;
					if (velocity.Y == 0f && CountNPCS(472) < num39)
					{
						if (ai[2] >= 180f)
						{
							ai[2] = 0f;
							ai[3] = 1f;
						}
					}
					else
					{
						if (CountNPCS(472) >= num39)
						{
							ai[2] += 1f;
						}
						if (ai[2] >= 360f)
						{
							ai[2] = 0f;
							ai[3] = -2f;
							velocity.Y -= 3f;
						}
					}
					if (target >= 0 && !Main.player[target].dead && (Main.player[target].Center - base.Center).Length() > 800f)
					{
						ai[3] = -1f;
						ai[2] = 0f;
					}
				}
				if (Main.player[target].dead)
				{
					TargetClosest();
					if (Main.player[target].dead)
					{
						EncourageDespawn(1);
					}
				}
			}
			if (type == 419)
			{
				reflectsProjectiles = false;
				takenDamageMultiplier = 1f;
				int num40 = 6;
				int num41 = 10;
				float num42 = 16f;
				if (ai[2] > 0f)
				{
					ai[2] -= 1f;
				}
				if (ai[2] == 0f)
				{
					if (((Main.player[target].Center.X < base.Center.X && direction < 0) || (Main.player[target].Center.X > base.Center.X && direction > 0)) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						ai[2] = -1f;
						netUpdate = true;
						TargetClosest();
					}
				}
				else
				{
					if (ai[2] < 0f && ai[2] > (float)(-num40))
					{
						ai[2] -= 1f;
						velocity.X *= 0.9f;
						return;
					}
					if (ai[2] == (float)(-num40))
					{
						ai[2] -= 1f;
						TargetClosest();
						Vector2 vector16 = DirectionTo(Main.player[target].Top + new Vector2(0f, -30f));
						if (vector16.HasNaNs())
						{
							vector16 = Vector2.Normalize(new Vector2(spriteDirection, -1f));
						}
						velocity = vector16 * num42;
						netUpdate = true;
						return;
					}
					if (ai[2] < (float)(-num40))
					{
						ai[2] -= 1f;
						if (velocity.Y == 0f)
						{
							ai[2] = 60f;
						}
						else if (ai[2] < (float)(-num40 - num41))
						{
							velocity.Y += 0.15f;
							if (velocity.Y > 24f)
							{
								velocity.Y = 24f;
							}
						}
						reflectsProjectiles = true;
						takenDamageMultiplier = 3f;
						if (justHit)
						{
							ai[2] = 60f;
							netUpdate = true;
						}
						return;
					}
				}
			}
			if (type == 415)
			{
				int num43 = 42;
				int num44 = 18;
				if (justHit)
				{
					ai[2] = 120f;
					netUpdate = true;
				}
				if (ai[2] > 0f)
				{
					ai[2] -= 1f;
				}
				if (ai[2] == 0f)
				{
					int num45 = 0;
					for (int n = 0; n < 200; n++)
					{
						if (Main.npc[n].active && Main.npc[n].type == 516)
						{
							num45++;
						}
					}
					if (num45 > 6)
					{
						ai[2] = 90f;
					}
					else if (((Main.player[target].Center.X < base.Center.X && direction < 0) || (Main.player[target].Center.X > base.Center.X && direction > 0)) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						ai[2] = -1f;
						netUpdate = true;
						TargetClosest();
					}
				}
				else if (ai[2] < 0f && ai[2] > (float)(-num43))
				{
					ai[2] -= 1f;
					if (ai[2] == (float)(-num43))
					{
						ai[2] = 180 + 30 * Main.rand.Next(10);
					}
					velocity.X *= 0.8f;
					if (ai[2] == (float)(-num44) || ai[2] == (float)(-num44 - 8) || ai[2] == (float)(-num44 - 16))
					{
						position += netOffset;
						for (int num46 = 0; num46 < 20; num46++)
						{
							Vector2 vector17 = base.Center + Vector2.UnitX * spriteDirection * 40f;
							Dust obj3 = Main.dust[Dust.NewDust(vector17, 0, 0, 259)];
							Vector2 vector18 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							obj3.position = vector17 + vector18 * 4f;
							obj3.velocity = vector18 * 2f + Vector2.UnitX * Main.rand.NextFloat() * spriteDirection * 3f;
							obj3.scale = 0.3f + vector18.X * (float)(-spriteDirection);
							obj3.fadeIn = 0.7f;
							obj3.noGravity = true;
						}
						position -= netOffset;
						if (velocity.X > -0.5f && velocity.X < 0.5f)
						{
							velocity.X = 0f;
						}
						if (Main.netMode != 1)
						{
							NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X + spriteDirection * 45, (int)base.Center.Y + 8, 516, 0, 0f, 0f, 0f, 0f, target);
						}
					}
					return;
				}
			}
			if (type == 428)
			{
				localAI[0] += 1f;
				if (localAI[0] >= 300f)
				{
					int num47 = (int)base.Center.X / 16 - 1;
					int num48 = (int)base.Center.Y / 16 - 1;
					if (!Collision.SolidTiles(num47, num47 + 2, num48, num48 + 1) && Main.netMode != 1)
					{
						Transform(427);
						life = lifeMax;
						localAI[0] = 0f;
						return;
					}
				}
				int num49 = 0;
				num49 = ((localAI[0] < 60f) ? 16 : ((localAI[0] < 120f) ? 8 : ((localAI[0] < 180f) ? 4 : ((localAI[0] < 240f) ? 2 : ((!(localAI[0] < 300f)) ? 1 : 1)))));
				if (Main.rand.Next(num49) == 0)
				{
					position += netOffset;
					Dust dust4 = Main.dust[Dust.NewDust(position, width, height, 229)];
					dust4.noGravity = true;
					dust4.scale = 1f;
					dust4.noLight = true;
					dust4.velocity = DirectionFrom(dust4.position) * dust4.velocity.Length();
					dust4.position -= dust4.velocity * 5f;
					dust4.position.X += direction * 6;
					dust4.position.Y += 4f;
					position -= netOffset;
				}
			}
			if (type == 427)
			{
				localAI[0] += 1f;
				localAI[0] += Math.Abs(velocity.X) / 2f;
				if (localAI[0] >= 1200f && Main.netMode != 1)
				{
					int num50 = (int)base.Center.X / 16 - 2;
					int num51 = (int)base.Center.Y / 16 - 3;
					if (!Collision.SolidTiles(num50, num50 + 4, num51, num51 + 4))
					{
						Transform(426);
						life = lifeMax;
						localAI[0] = 0f;
						return;
					}
				}
				int num52 = 0;
				num52 = ((localAI[0] < 360f) ? 32 : ((localAI[0] < 720f) ? 16 : ((localAI[0] < 1080f) ? 6 : ((localAI[0] < 1440f) ? 2 : ((!(localAI[0] < 1800f)) ? 1 : 1)))));
				if (Main.rand.Next(num52) == 0)
				{
					position += netOffset;
					Dust obj4 = Main.dust[Dust.NewDust(position, width, height, 229)];
					obj4.noGravity = true;
					obj4.scale = 1f;
					obj4.noLight = true;
					position -= netOffset;
				}
			}
			if (type == 590)
			{
				position += netOffset;
				int num53 = (int)(position.Y + 6f) / 16;
				if (spriteDirection < 0)
				{
					int num54 = (int)(base.Center.X - 22f) / 16;
					Tile tileSafely = Framing.GetTileSafely(num54, num53);
					Tile tileSafely2 = Framing.GetTileSafely(num54 + 1, num53);
					if (WorldGen.InWorld(num54, num53) && tileSafely2.liquid == 0 && tileSafely.liquid == 0)
					{
						Lighting.AddLight(num54, num53, 1f, 0.95f, 0.8f);
						if (Main.rand.Next(30) == 0)
						{
							Dust.NewDust(new Vector2(base.Center.X - 22f, position.Y + 6f), 1, 1, 6);
						}
					}
				}
				else
				{
					int num55 = (int)(base.Center.X + 14f) / 16;
					Tile tileSafely3 = Framing.GetTileSafely(num55, num53);
					Tile tileSafely4 = Framing.GetTileSafely(num55 - 1, num53);
					if (WorldGen.InWorld(num55, num53) && tileSafely4.liquid == 0 && tileSafely3.liquid == 0)
					{
						Lighting.AddLight(num55, num53, 1f, 0.95f, 0.8f);
						if (Main.rand.Next(30) == 0)
						{
							Dust.NewDust(new Vector2(base.Center.X + 14f, position.Y + 6f), 1, 1, 6);
						}
					}
				}
				position -= netOffset;
			}
			else if (type == 591)
			{
				position += netOffset;
				if (!wet)
				{
					if (spriteDirection < 0)
					{
						Lighting.AddLight(new Vector2(base.Center.X - 36f, position.Y + 24f), 1f, 0.95f, 0.8f);
						if (ai[2] == 0f && Main.rand.Next(30) == 0)
						{
							Dust.NewDust(new Vector2(base.Center.X - 36f, position.Y + 24f), 1, 1, 6);
						}
					}
					else
					{
						Lighting.AddLight(new Vector2(base.Center.X + 28f, position.Y + 24f), 1f, 0.95f, 0.8f);
						if (ai[2] == 0f && Main.rand.Next(30) == 0)
						{
							Dust.NewDust(new Vector2(base.Center.X + 28f, position.Y + 24f), 1, 1, 6);
						}
					}
				}
				position -= netOffset;
			}
			bool flag5 = false;
			bool flag6 = false;
			if (velocity.X == 0f)
			{
				flag6 = true;
			}
			if (justHit)
			{
				flag6 = false;
			}
			if (Main.netMode != 1 && type == 198 && (double)life <= (double)lifeMax * 0.55)
			{
				Transform(199);
			}
			if (Main.netMode != 1 && type == 348 && (double)life <= (double)lifeMax * 0.55)
			{
				Transform(349);
			}
			int num56 = 60;
			if (type == 120)
			{
				num56 = 180;
				if (ai[3] == -120f)
				{
					velocity *= 0f;
					ai[3] = 0f;
					position += netOffset;
					SoundEngine.PlaySound(SoundID.Item8, position);
					Vector2 vector19 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num57 = oldPos[2].X + (float)width * 0.5f - vector19.X;
					float num58 = oldPos[2].Y + (float)height * 0.5f - vector19.Y;
					float num59 = (float)Math.Sqrt(num57 * num57 + num58 * num58);
					num59 = 2f / num59;
					num57 *= num59;
					num58 *= num59;
					for (int num60 = 0; num60 < 20; num60++)
					{
						int num61 = Dust.NewDust(position, width, height, 71, num57, num58, 200, default(Color), 2f);
						Main.dust[num61].noGravity = true;
						Main.dust[num61].velocity.X *= 2f;
					}
					for (int num62 = 0; num62 < 20; num62++)
					{
						int num63 = Dust.NewDust(oldPos[2], width, height, 71, 0f - num57, 0f - num58, 200, default(Color), 2f);
						Main.dust[num63].noGravity = true;
						Main.dust[num63].velocity.X *= 2f;
					}
					position -= netOffset;
				}
			}
			bool flag7 = false;
			bool flag8 = true;
			if (type == 343 || type == 47 || type == 67 || type == 109 || type == 110 || type == 111 || type == 120 || type == 163 || type == 164 || type == 239 || type == 168 || type == 199 || type == 206 || type == 214 || type == 215 || type == 216 || type == 217 || type == 218 || type == 219 || type == 220 || type == 226 || type == 243 || type == 251 || type == 257 || type == 258 || type == 290 || type == 291 || type == 292 || type == 293 || type == 305 || type == 306 || type == 307 || type == 308 || type == 309 || type == 348 || type == 349 || type == 350 || type == 351 || type == 379 || (type >= 430 && type <= 436) || type == 591 || type == 380 || type == 381 || type == 382 || type == 383 || type == 386 || type == 391 || (type >= 449 && type <= 452) || type == 466 || type == 464 || type == 166 || type == 469 || type == 468 || type == 471 || type == 470 || type == 480 || type == 481 || type == 482 || type == 411 || type == 424 || type == 409 || (type >= 494 && type <= 506) || type == 425 || type == 427 || type == 426 || type == 428 || type == 580 || type == 508 || type == 415 || type == 419 || type == 520 || (type >= 524 && type <= 527) || type == 528 || type == 529 || type == 530 || type == 532 || type == 582 || type == 624 || type == 631)
			{
				flag8 = false;
			}
			bool flag9 = false;
			int num64 = type;
			if (num64 == 425 || num64 == 471)
			{
				flag9 = true;
			}
			bool flag10 = true;
			switch (type)
			{
			case 110:
			case 111:
			case 206:
			case 214:
			case 215:
			case 216:
			case 291:
			case 292:
			case 293:
			case 350:
			case 379:
			case 380:
			case 381:
			case 382:
			case 409:
			case 411:
			case 424:
			case 426:
			case 466:
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
			case 520:
				if (ai[2] > 0f)
				{
					flag10 = false;
				}
				break;
			}
			if (!flag9 && flag10)
			{
				if (velocity.Y == 0f && ((velocity.X > 0f && direction < 0) || (velocity.X < 0f && direction > 0)))
				{
					flag7 = true;
				}
				if (position.X == oldPosition.X || ai[3] >= (float)num56 || flag7)
				{
					ai[3] += 1f;
				}
				else if ((double)Math.Abs(velocity.X) > 0.9 && ai[3] > 0f)
				{
					ai[3] -= 1f;
				}
				if (ai[3] > (float)(num56 * 10))
				{
					ai[3] = 0f;
				}
				if (justHit)
				{
					ai[3] = 0f;
				}
				if (ai[3] == (float)num56)
				{
					netUpdate = true;
				}
				if (Main.player[target].Hitbox.Intersects(base.Hitbox))
				{
					ai[3] = 0f;
				}
			}
			if (type == 463 && Main.netMode != 1)
			{
				if (localAI[3] > 0f)
				{
					localAI[3] -= 1f;
				}
				if (justHit && localAI[3] <= 0f && Main.rand.Next(3) == 0)
				{
					localAI[3] = 30f;
					int num65 = Main.rand.Next(3, 6);
					int[] array = new int[num65];
					int num66 = 0;
					for (int num67 = 0; num67 < 255; num67++)
					{
						if (Main.player[num67].active && !Main.player[num67].dead && Collision.CanHitLine(position, width, height, Main.player[num67].position, Main.player[num67].width, Main.player[num67].height))
						{
							array[num66] = num67;
							num66++;
							if (num66 == num65)
							{
								break;
							}
						}
					}
					if (num66 > 1)
					{
						for (int num68 = 0; num68 < 100; num68++)
						{
							int num69 = Main.rand.Next(num66);
							int num70;
							for (num70 = num69; num70 == num69; num70 = Main.rand.Next(num66))
							{
							}
							int num71 = array[num69];
							array[num69] = array[num70];
							array[num70] = num71;
						}
					}
					Vector2 vector20 = new Vector2(-1f, -1f);
					for (int num72 = 0; num72 < num66; num72++)
					{
						Vector2 vector21 = Main.npc[array[num72]].Center - base.Center;
						vector21.Normalize();
						vector20 += vector21;
					}
					vector20.Normalize();
					for (int num73 = 0; num73 < num65; num73++)
					{
						float num74 = Main.rand.Next(8, 13);
						Vector2 vector22 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						vector22.Normalize();
						if (num66 > 0)
						{
							vector22 += vector20;
							vector22.Normalize();
						}
						vector22 *= num74;
						if (num66 > 0)
						{
							num66--;
							vector22 = Main.player[array[num66]].Center - base.Center;
							vector22.Normalize();
							vector22 *= num74;
						}
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, position.Y + (float)(width / 4), vector22.X, vector22.Y, 498, (int)((double)damage * 0.15), 1f, Main.myPlayer);
					}
				}
			}
			if (type == 460)
			{
				if (velocity.Y < 0f - gravity || velocity.Y > gravity)
				{
					knockBackResist = 0f;
				}
				else
				{
					knockBackResist = 0.25f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				}
			}
			if (type == 469)
			{
				knockBackResist = 0.45f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				if (ai[2] == 1f)
				{
					knockBackResist = 0f;
				}
				bool flag11 = false;
				int num75 = (int)base.Center.X / 16;
				int num76 = (int)base.Center.Y / 16;
				for (int num77 = num75 - 1; num77 <= num75 + 1; num77++)
				{
					for (int num78 = num76 - 1; num78 <= num76 + 1; num78++)
					{
						if (Main.tile[num77, num78] != null && Main.tile[num77, num78].wall > 0)
						{
							flag11 = true;
							break;
						}
					}
					if (flag11)
					{
						break;
					}
				}
				if (ai[2] == 0f && flag11)
				{
					if (velocity.Y == 0f)
					{
						flag = true;
						velocity.Y = -4.6f;
						velocity.X *= 1.3f;
					}
					else if (velocity.Y > 0f && !Main.player[target].dead)
					{
						ai[2] = 1f;
					}
				}
				if (flag11 && ai[2] == 1f && !Main.player[target].dead && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					Vector2 vector23 = Main.player[target].Center - base.Center;
					float num79 = vector23.Length();
					vector23.Normalize();
					vector23 *= 4.5f + num79 / 300f;
					velocity = (velocity * 29f + vector23) / 30f;
					noGravity = true;
					ai[2] = 1f;
					return;
				}
				noGravity = false;
				ai[2] = 0f;
			}
			if (type == 462 && velocity.Y == 0f && (Main.player[target].Center - base.Center).Length() < 150f && Math.Abs(velocity.X) > 3f && ((velocity.X < 0f && base.Center.X > Main.player[target].Center.X) || (velocity.X > 0f && base.Center.X < Main.player[target].Center.X)))
			{
				flag = true;
				velocity.X *= 1.75f;
				velocity.Y -= 4.5f;
				if (base.Center.Y - Main.player[target].Center.Y > 20f)
				{
					velocity.Y -= 0.5f;
				}
				if (base.Center.Y - Main.player[target].Center.Y > 40f)
				{
					velocity.Y -= 1f;
				}
				if (base.Center.Y - Main.player[target].Center.Y > 80f)
				{
					velocity.Y -= 1.5f;
				}
				if (base.Center.Y - Main.player[target].Center.Y > 100f)
				{
					velocity.Y -= 1.5f;
				}
				if (Math.Abs(velocity.X) > 7f)
				{
					if (velocity.X < 0f)
					{
						velocity.X = -7f;
					}
					else
					{
						velocity.X = 7f;
					}
				}
			}
			if (type == 624 && target < 255)
			{
				if (!Main.remixWorld && !Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					ai[3] = num56;
					directionY = -1;
					if (type == 624 && !AI_003_Gnomes_ShouldTurnToStone() && (base.Center - Main.player[target].Center).Length() > 500f)
					{
						velocity.X *= 0.95f;
						if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
						{
							velocity.X = 0f;
						}
						return;
					}
				}
				else if (Main.player[target].Center.Y > base.Center.Y - 128f)
				{
					ai[3] = 0f;
				}
			}
			if (ai[3] < (float)num56 && DespawnEncouragement_AIStyle3_Fighters_NotDiscouraged(type, position, this))
			{
				if (shimmerTransparency < 1f)
				{
					if ((type == 3 || type == 591 || type == 590 || type == 331 || type == 332 || type == 21 || (type >= 449 && type <= 452) || type == 31 || type == 294 || type == 295 || type == 296 || type == 77 || type == 110 || type == 132 || type == 167 || type == 161 || type == 162 || type == 186 || type == 187 || type == 188 || type == 189 || type == 197 || type == 200 || type == 201 || type == 202 || type == 203 || type == 223 || type == 291 || type == 292 || type == 293 || type == 320 || type == 321 || type == 319 || type == 481 || type == 632 || type == 635) && Main.rand.Next(1000) == 0)
					{
						SoundEngine.PlaySound(14, (int)position.X, (int)position.Y);
					}
					if ((type == 489 || type == 586) && Main.rand.Next(800) == 0)
					{
						SoundEngine.PlaySound(14, (int)position.X, (int)position.Y, type);
					}
					if ((type == 78 || type == 79 || type == 80 || type == 630) && Main.rand.Next(500) == 0)
					{
						SoundEngine.PlaySound(26, (int)position.X, (int)position.Y);
					}
					if (type == 159 && Main.rand.Next(500) == 0)
					{
						SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 7);
					}
					if (type == 162 && Main.rand.Next(500) == 0)
					{
						SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 6);
					}
					if (type == 181 && Main.rand.Next(500) == 0)
					{
						SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 8);
					}
					if (type >= 269 && type <= 280 && Main.rand.Next(1000) == 0)
					{
						SoundEngine.PlaySound(14, (int)position.X, (int)position.Y);
					}
				}
				TargetClosest();
				if (directionY > 0 && Main.player[target].Center.Y <= base.Bottom.Y)
				{
					directionY = -1;
				}
			}
			else if (!(ai[2] > 0f) || !DespawnEncouragement_AIStyle3_Fighters_CanBeBusyWithAction(type))
			{
				if (Main.IsItDay() && (double)(position.Y / 16f) < Main.worldSurface && type != 624 && type != 631)
				{
					EncourageDespawn(10);
				}
				if (velocity.X == 0f)
				{
					if (velocity.Y == 0f)
					{
						ai[0] += 1f;
						if (ai[0] >= 2f)
						{
							direction *= -1;
							spriteDirection = direction;
							ai[0] = 0f;
						}
					}
				}
				else
				{
					ai[0] = 0f;
				}
				if (direction == 0)
				{
					direction = 1;
				}
			}
			if (type == 159 || type == 349)
			{
				if (type == 159 && ((velocity.X > 0f && direction < 0) || (velocity.X < 0f && direction > 0)))
				{
					velocity.X *= 0.95f;
				}
				if (velocity.X < -6f || velocity.X > 6f)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < 6f && direction == 1)
				{
					if (velocity.Y == 0f && velocity.X < 0f)
					{
						velocity.X *= 0.99f;
					}
					velocity.X += 0.07f;
					if (velocity.X > 6f)
					{
						velocity.X = 6f;
					}
				}
				else if (velocity.X > -6f && direction == -1)
				{
					if (velocity.Y == 0f && velocity.X > 0f)
					{
						velocity.X *= 0.99f;
					}
					velocity.X -= 0.07f;
					if (velocity.X < -6f)
					{
						velocity.X = -6f;
					}
				}
			}
			else if (type == 199)
			{
				if (velocity.X < -4f || velocity.X > 4f)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < 4f && direction == 1)
				{
					if (velocity.Y == 0f && velocity.X < 0f)
					{
						velocity.X *= 0.8f;
					}
					velocity.X += 0.1f;
					if (velocity.X > 4f)
					{
						velocity.X = 4f;
					}
				}
				else if (velocity.X > -4f && direction == -1)
				{
					if (velocity.Y == 0f && velocity.X > 0f)
					{
						velocity.X *= 0.8f;
					}
					velocity.X -= 0.1f;
					if (velocity.X < -4f)
					{
						velocity.X = -4f;
					}
				}
			}
			else if (type == 120 || type == 166 || type == 213 || type == 258 || type == 528 || type == 529)
			{
				if (velocity.X < -3f || velocity.X > 3f)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < 3f && direction == 1)
				{
					if (velocity.Y == 0f && velocity.X < 0f)
					{
						velocity.X *= 0.99f;
					}
					velocity.X += 0.07f;
					if (velocity.X > 3f)
					{
						velocity.X = 3f;
					}
				}
				else if (velocity.X > -3f && direction == -1)
				{
					if (velocity.Y == 0f && velocity.X > 0f)
					{
						velocity.X *= 0.99f;
					}
					velocity.X -= 0.07f;
					if (velocity.X < -3f)
					{
						velocity.X = -3f;
					}
				}
			}
			else if (type == 461 || type == 27 || type == 77 || type == 104 || type == 163 || type == 162 || type == 196 || type == 197 || type == 212 || type == 257 || type == 326 || type == 343 || type == 348 || type == 351 || (type >= 524 && type <= 527) || type == 530 || type == 236)
			{
				if (velocity.X < -2f || velocity.X > 2f)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < 2f && direction == 1)
				{
					velocity.X += 0.07f;
					if (velocity.X > 2f)
					{
						velocity.X = 2f;
					}
				}
				else if (velocity.X > -2f && direction == -1)
				{
					velocity.X -= 0.07f;
					if (velocity.X < -2f)
					{
						velocity.X = -2f;
					}
				}
			}
			else if (type == 109)
			{
				if (velocity.X < -2f || velocity.X > 2f)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < 2f && direction == 1)
				{
					velocity.X += 0.04f;
					if (velocity.X > 2f)
					{
						velocity.X = 2f;
					}
				}
				else if (velocity.X > -2f && direction == -1)
				{
					velocity.X -= 0.04f;
					if (velocity.X < -2f)
					{
						velocity.X = -2f;
					}
				}
			}
			else if (type == 21 || type == 26 || type == 31 || type == 294 || type == 295 || type == 296 || type == 47 || type == 73 || type == 140 || type == 164 || type == 239 || type == 167 || type == 168 || type == 185 || type == 198 || type == 201 || type == 202 || type == 203 || type == 217 || type == 218 || type == 219 || type == 226 || type == 181 || type == 254 || type == 338 || type == 339 || type == 340 || type == 342 || type == 385 || type == 389 || type == 462 || type == 463 || type == 466 || type == 464 || type == 469 || type == 470 || type == 480 || type == 482 || type == 425 || type == 429 || type == 586 || type == 631 || type == 635)
			{
				float num80 = 1.5f;
				if (type == 181 && Main.remixWorld)
				{
					num80 = 3.75f;
				}
				else if (type == 294)
				{
					num80 = 2f;
				}
				else if (type == 295)
				{
					num80 = 1.75f;
				}
				else if (type == 296)
				{
					num80 = 1.25f;
				}
				else if (type == 201)
				{
					num80 = 1.1f;
				}
				else if (type == 202)
				{
					num80 = 0.9f;
				}
				else if (type == 203)
				{
					num80 = 1.2f;
				}
				else if (type == 338)
				{
					num80 = 1.75f;
				}
				else if (type == 339)
				{
					num80 = 1.25f;
				}
				else if (type == 340)
				{
					num80 = 2f;
				}
				else if (type == 385)
				{
					num80 = 1.8f;
				}
				else if (type == 389)
				{
					num80 = 2.25f;
				}
				else if (type == 462)
				{
					num80 = 4f;
				}
				else if (type == 463)
				{
					num80 = 0.75f;
				}
				else if (type == 466)
				{
					num80 = 3.75f;
				}
				else if (type == 469)
				{
					num80 = 3.25f;
				}
				else if (type == 480)
				{
					num80 = 1.5f + (1f - (float)life / (float)lifeMax) * 2f;
				}
				else if (type == 425)
				{
					num80 = 6f;
				}
				else if (type == 429)
				{
					num80 = 4f;
				}
				else if (type == 631)
				{
					num80 = 0.9f;
				}
				else if (type == 586)
				{
					num80 = 1.5f + (1f - (float)life / (float)lifeMax) * 3.5f;
				}
				if (type == 21 || type == 201 || type == 202 || type == 203 || type == 342 || type == 635)
				{
					num80 *= 1f + (1f - scale);
				}
				if (velocity.X < 0f - num80 || velocity.X > num80)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < num80 && direction == 1)
				{
					if (type == 466 && velocity.X < -2f)
					{
						velocity.X *= 0.9f;
					}
					if (type == 586 && velocity.Y == 0f && velocity.X < -1f)
					{
						velocity.X *= 0.9f;
					}
					velocity.X += 0.07f;
					if (velocity.X > num80)
					{
						velocity.X = num80;
					}
				}
				else if (velocity.X > 0f - num80 && direction == -1)
				{
					if (type == 466 && velocity.X > 2f)
					{
						velocity.X *= 0.9f;
					}
					if (type == 586 && velocity.Y == 0f && velocity.X > 1f)
					{
						velocity.X *= 0.9f;
					}
					velocity.X -= 0.07f;
					if (velocity.X < 0f - num80)
					{
						velocity.X = 0f - num80;
					}
				}
				if (velocity.Y == 0f && type == 462 && ((direction > 0 && velocity.X < 0f) || (direction < 0 && velocity.X > 0f)))
				{
					velocity.X *= 0.9f;
				}
			}
			else if (type >= 269 && type <= 280)
			{
				float num81 = 1.5f;
				if (type == 269)
				{
					num81 = 2f;
				}
				if (type == 270)
				{
					num81 = 1f;
				}
				if (type == 271)
				{
					num81 = 1.5f;
				}
				if (type == 272)
				{
					num81 = 3f;
				}
				if (type == 273)
				{
					num81 = 1.25f;
				}
				if (type == 274)
				{
					num81 = 3f;
				}
				if (type == 275)
				{
					num81 = 3.25f;
				}
				if (type == 276)
				{
					num81 = 2f;
				}
				if (type == 277)
				{
					num81 = 2.75f;
				}
				if (type == 278)
				{
					num81 = 1.8f;
				}
				if (type == 279)
				{
					num81 = 1.3f;
				}
				if (type == 280)
				{
					num81 = 2.5f;
				}
				num81 *= 1f + (1f - scale);
				if (velocity.X < 0f - num81 || velocity.X > num81)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < num81 && direction == 1)
				{
					velocity.X += 0.07f;
					if (velocity.X > num81)
					{
						velocity.X = num81;
					}
				}
				else if (velocity.X > 0f - num81 && direction == -1)
				{
					velocity.X -= 0.07f;
					if (velocity.X < 0f - num81)
					{
						velocity.X = 0f - num81;
					}
				}
			}
			else if (type >= 305 && type <= 314)
			{
				float num82 = 1.5f;
				if (type == 305 || type == 310)
				{
					num82 = 2f;
				}
				if (type == 306 || type == 311)
				{
					num82 = 1.25f;
				}
				if (type == 307 || type == 312)
				{
					num82 = 2.25f;
				}
				if (type == 308 || type == 313)
				{
					num82 = 1.5f;
				}
				if (type == 309 || type == 314)
				{
					num82 = 1f;
				}
				if (type < 310)
				{
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.85f;
						if ((double)velocity.X > -0.3 && (double)velocity.X < 0.3)
						{
							flag = true;
							velocity.Y = -7f;
							velocity.X = num82 * (float)direction;
						}
					}
					else if (spriteDirection == direction)
					{
						velocity.X = (velocity.X * 10f + num82 * (float)direction) / 11f;
					}
				}
				else if (velocity.X < 0f - num82 || velocity.X > num82)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < num82 && direction == 1)
				{
					velocity.X += 0.07f;
					if (velocity.X > num82)
					{
						velocity.X = num82;
					}
				}
				else if (velocity.X > 0f - num82 && direction == -1)
				{
					velocity.X -= 0.07f;
					if (velocity.X < 0f - num82)
					{
						velocity.X = 0f - num82;
					}
				}
			}
			else if (type == 67 || type == 220 || type == 428)
			{
				if (velocity.X < -0.5f || velocity.X > 0.5f)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.7f;
					}
				}
				else if (velocity.X < 0.5f && direction == 1)
				{
					velocity.X += 0.03f;
					if (velocity.X > 0.5f)
					{
						velocity.X = 0.5f;
					}
				}
				else if (velocity.X > -0.5f && direction == -1)
				{
					velocity.X -= 0.03f;
					if (velocity.X < -0.5f)
					{
						velocity.X = -0.5f;
					}
				}
			}
			else if (type == 78 || type == 79 || type == 80 || type == 630)
			{
				float num83 = 1f;
				float num84 = 0.05f;
				if (life < lifeMax / 2)
				{
					num83 = 2f;
					num84 = 0.1f;
				}
				if (type == 79 || type == 630)
				{
					num83 *= 1.5f;
				}
				if (velocity.X < 0f - num83 || velocity.X > num83)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.7f;
					}
				}
				else if (velocity.X < num83 && direction == 1)
				{
					velocity.X += num84;
					if (velocity.X > num83)
					{
						velocity.X = num83;
					}
				}
				else if (velocity.X > 0f - num83 && direction == -1)
				{
					velocity.X -= num84;
					if (velocity.X < 0f - num83)
					{
						velocity.X = 0f - num83;
					}
				}
			}
			else if (type == 287)
			{
				float num85 = 5f;
				float num86 = 0.2f;
				if (velocity.X < 0f - num85 || velocity.X > num85)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.7f;
					}
				}
				else if (velocity.X < num85 && direction == 1)
				{
					velocity.X += num86;
					if (velocity.X > num85)
					{
						velocity.X = num85;
					}
				}
				else if (velocity.X > 0f - num85 && direction == -1)
				{
					velocity.X -= num86;
					if (velocity.X < 0f - num85)
					{
						velocity.X = 0f - num85;
					}
				}
			}
			else if (type == 243)
			{
				float num87 = 1f;
				float num88 = 0.07f;
				num87 += (1f - (float)life / (float)lifeMax) * 1.5f;
				num88 += (1f - (float)life / (float)lifeMax) * 0.15f;
				if (velocity.X < 0f - num87 || velocity.X > num87)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.7f;
					}
				}
				else if (velocity.X < num87 && direction == 1)
				{
					velocity.X += num88;
					if (velocity.X > num87)
					{
						velocity.X = num87;
					}
				}
				else if (velocity.X > 0f - num87 && direction == -1)
				{
					velocity.X -= num88;
					if (velocity.X < 0f - num87)
					{
						velocity.X = 0f - num87;
					}
				}
			}
			else if (type == 251)
			{
				float num89 = 1f;
				float num90 = 0.08f;
				num89 += (1f - (float)life / (float)lifeMax) * 2f;
				num90 += (1f - (float)life / (float)lifeMax) * 0.2f;
				if (velocity.X < 0f - num89 || velocity.X > num89)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.7f;
					}
				}
				else if (velocity.X < num89 && direction == 1)
				{
					velocity.X += num90;
					if (velocity.X > num89)
					{
						velocity.X = num89;
					}
				}
				else if (velocity.X > 0f - num89 && direction == -1)
				{
					velocity.X -= num90;
					if (velocity.X < 0f - num89)
					{
						velocity.X = 0f - num89;
					}
				}
			}
			else if (type == 386)
			{
				if (ai[2] > 0f)
				{
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.8f;
					}
				}
				else
				{
					float num91 = 0.15f;
					float num92 = 1.5f;
					if (velocity.X < 0f - num92 || velocity.X > num92)
					{
						if (velocity.Y == 0f)
						{
							velocity *= 0.7f;
						}
					}
					else if (velocity.X < num92 && direction == 1)
					{
						velocity.X += num91;
						if (velocity.X > num92)
						{
							velocity.X = num92;
						}
					}
					else if (velocity.X > 0f - num92 && direction == -1)
					{
						velocity.X -= num91;
						if (velocity.X < 0f - num92)
						{
							velocity.X = 0f - num92;
						}
					}
				}
			}
			else if (type == 460)
			{
				float num93 = 3f;
				float num94 = 0.1f;
				if (Math.Abs(velocity.X) > 2f)
				{
					num94 *= 0.8f;
				}
				if ((double)Math.Abs(velocity.X) > 2.5)
				{
					num94 *= 0.8f;
				}
				if (Math.Abs(velocity.X) > 3f)
				{
					num94 *= 0.8f;
				}
				if ((double)Math.Abs(velocity.X) > 3.5)
				{
					num94 *= 0.8f;
				}
				if (Math.Abs(velocity.X) > 4f)
				{
					num94 *= 0.8f;
				}
				if ((double)Math.Abs(velocity.X) > 4.5)
				{
					num94 *= 0.8f;
				}
				if (Math.Abs(velocity.X) > 5f)
				{
					num94 *= 0.8f;
				}
				if ((double)Math.Abs(velocity.X) > 5.5)
				{
					num94 *= 0.8f;
				}
				num93 += (1f - (float)life / (float)lifeMax) * 3f;
				if (velocity.X < 0f - num93 || velocity.X > num93)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.7f;
					}
				}
				else if (velocity.X < num93 && direction == 1)
				{
					if (velocity.X < 0f)
					{
						velocity.X *= 0.93f;
					}
					velocity.X += num94;
					if (velocity.X > num93)
					{
						velocity.X = num93;
					}
				}
				else if (velocity.X > 0f - num93 && direction == -1)
				{
					if (velocity.X > 0f)
					{
						velocity.X *= 0.93f;
					}
					velocity.X -= num94;
					if (velocity.X < 0f - num93)
					{
						velocity.X = 0f - num93;
					}
				}
			}
			else if (type == 508 || type == 580 || type == 582)
			{
				float num95 = 2.5f;
				float num96 = 10f;
				float num97 = Math.Abs(velocity.X);
				if (type == 582)
				{
					num95 = 2.25f;
					num96 = 7f;
					if (num97 > 2.5f)
					{
						num95 = 3f;
						num96 += 75f;
					}
					else if (num97 > 2f)
					{
						num95 = 2.75f;
						num96 += 55f;
					}
				}
				else if (num97 > 2.75f)
				{
					num95 = 3.5f;
					num96 += 80f;
				}
				else if ((double)num97 > 2.25)
				{
					num95 = 3f;
					num96 += 60f;
				}
				if ((double)Math.Abs(velocity.Y) < 0.5)
				{
					if (velocity.X > 0f && direction < 0)
					{
						velocity *= 0.95f;
					}
					if (velocity.X < 0f && direction > 0)
					{
						velocity *= 0.95f;
					}
				}
				if (Math.Abs(velocity.Y) > gravity)
				{
					float num98 = 3f;
					if (type == 582)
					{
						num98 = 2f;
					}
					num96 *= num98;
				}
				if (velocity.X <= 0f && direction < 0)
				{
					velocity.X = (velocity.X * num96 - num95) / (num96 + 1f);
				}
				else if (velocity.X >= 0f && direction > 0)
				{
					velocity.X = (velocity.X * num96 + num95) / (num96 + 1f);
				}
				else if (Math.Abs(base.Center.X - Main.player[target].Center.X) > 20f && Math.Abs(velocity.Y) <= gravity)
				{
					velocity.X *= 0.99f;
					velocity.X += (float)direction * 0.025f;
				}
			}
			else if (type == 391 || type == 427 || type == 415 || type == 419 || type == 518 || type == 532)
			{
				float num99 = 5f;
				float num100 = 0.25f;
				float num101 = 0.7f;
				if (type == 427)
				{
					num99 = 6f;
					num100 = 0.2f;
					num101 = 0.8f;
				}
				else if (type == 415)
				{
					num99 = 4f;
					num100 = 0.1f;
					num101 = 0.95f;
				}
				else if (type == 419)
				{
					num99 = 6f;
					num100 = 0.15f;
					num101 = 0.85f;
				}
				else if (type == 518)
				{
					num99 = 5f;
					num100 = 0.1f;
					num101 = 0.95f;
				}
				else if (type == 532)
				{
					num99 = 5f;
					num100 = 0.15f;
					num101 = 0.98f;
				}
				if (velocity.X < 0f - num99 || velocity.X > num99)
				{
					if (velocity.Y == 0f)
					{
						velocity *= num101;
					}
				}
				else if (velocity.X < num99 && direction == 1)
				{
					velocity.X += num100;
					if (velocity.X > num99)
					{
						velocity.X = num99;
					}
				}
				else if (velocity.X > 0f - num99 && direction == -1)
				{
					velocity.X -= num100;
					if (velocity.X < 0f - num99)
					{
						velocity.X = 0f - num99;
					}
				}
			}
			else if ((type >= 430 && type <= 436) || type == 494 || type == 495 || type == 591)
			{
				if (ai[2] == 0f)
				{
					damage = defDamage;
					float num102 = 1f;
					num102 *= 1f + (1f - scale);
					if (velocity.X < 0f - num102 || velocity.X > num102)
					{
						if (velocity.Y == 0f)
						{
							velocity *= 0.8f;
						}
					}
					else if (velocity.X < num102 && direction == 1)
					{
						velocity.X += 0.07f;
						if (velocity.X > num102)
						{
							velocity.X = num102;
						}
					}
					else if (velocity.X > 0f - num102 && direction == -1)
					{
						velocity.X -= 0.07f;
						if (velocity.X < 0f - num102)
						{
							velocity.X = 0f - num102;
						}
					}
					if (velocity.Y == 0f && (!Main.IsItDay() || (double)position.Y > Main.worldSurface * 16.0) && !Main.player[target].dead)
					{
						Vector2 vector24 = base.Center - Main.player[target].Center;
						int num103 = 50;
						if (type >= 494 && type <= 495)
						{
							num103 = 42;
						}
						if (vector24.Length() < (float)num103 && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							velocity.X *= 0.7f;
							ai[2] = 1f;
						}
					}
				}
				else
				{
					damage = (int)((double)defDamage * 1.5);
					ai[3] = 1f;
					velocity.X *= 0.9f;
					if ((double)Math.Abs(velocity.X) < 0.1)
					{
						velocity.X = 0f;
					}
					ai[2] += 1f;
					if (ai[2] >= 20f || velocity.Y != 0f || (Main.IsItDay() && (double)position.Y < Main.worldSurface * 16.0))
					{
						ai[2] = 0f;
					}
				}
			}
			else if (type != 110 && type != 111 && type != 206 && type != 214 && type != 215 && type != 216 && type != 290 && type != 291 && type != 292 && type != 293 && type != 350 && type != 379 && type != 380 && type != 381 && type != 382 && (type < 449 || type > 452) && type != 468 && type != 481 && type != 411 && type != 409 && (type < 498 || type > 506) && type != 424 && type != 426 && type != 520)
			{
				float num104 = 1f;
				if (type == 624)
				{
					num104 = 2.5f;
				}
				if (type == 186)
				{
					num104 = 1.1f;
				}
				if (type == 187)
				{
					num104 = 0.9f;
				}
				if (type == 188)
				{
					num104 = 1.2f;
				}
				if (type == 189)
				{
					num104 = 0.8f;
				}
				if (type == 132)
				{
					num104 = 0.95f;
				}
				if (type == 200)
				{
					num104 = 0.87f;
				}
				if (type == 223)
				{
					num104 = 1.05f;
				}
				if (type == 632)
				{
					num104 = 0.8f;
				}
				if (type == 489)
				{
					float num105 = (Main.player[target].Center - base.Center).Length();
					num105 *= 0.0025f;
					if ((double)num105 > 1.5)
					{
						num105 = 1.5f;
					}
					num104 = ((!Main.expertMode) ? (2.5f - num105) : (3f - num105));
					num104 *= 0.8f;
				}
				if (type == 489 || type == 3 || type == 132 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 331 || type == 332)
				{
					num104 *= 1f + (1f - scale);
				}
				if (velocity.X < 0f - num104 || velocity.X > num104)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < num104 && direction == 1)
				{
					velocity.X += 0.07f;
					if (velocity.X > num104)
					{
						velocity.X = num104;
					}
				}
				else if (velocity.X > 0f - num104 && direction == -1)
				{
					velocity.X -= 0.07f;
					if (velocity.X < 0f - num104)
					{
						velocity.X = 0f - num104;
					}
				}
			}
			if (type >= 277 && type <= 280)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.2f, 0.1f, 0f);
			}
			else if (type == 520)
			{
				Lighting.AddLight(base.Top + new Vector2(0f, 20f), 0.3f, 0.3f, 0.7f);
			}
			else if (type == 525)
			{
				Vector3 rgb = new Vector3(0.7f, 1f, 0.2f) * 0.5f;
				Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb);
			}
			else if (type == 526)
			{
				Vector3 rgb2 = new Vector3(1f, 1f, 0.5f) * 0.4f;
				Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb2);
			}
			else if (type == 527)
			{
				Vector3 rgb3 = new Vector3(0.6f, 0.3f, 1f) * 0.4f;
				Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb3);
			}
			else if (type == 415)
			{
				hide = false;
				for (int num106 = 0; num106 < 200; num106++)
				{
					if (Main.npc[num106].active && Main.npc[num106].type == 416 && Main.npc[num106].ai[0] == (float)whoAmI)
					{
						hide = true;
						break;
					}
				}
			}
			else if (type == 258)
			{
				if (velocity.Y != 0f)
				{
					TargetClosest();
					spriteDirection = direction;
					if (Main.player[target].Center.X < position.X && velocity.X > 0f)
					{
						velocity.X *= 0.95f;
					}
					else if (Main.player[target].Center.X > position.X + (float)width && velocity.X < 0f)
					{
						velocity.X *= 0.95f;
					}
					if (Main.player[target].Center.X < position.X && velocity.X > -5f)
					{
						velocity.X -= 0.1f;
					}
					else if (Main.player[target].Center.X > position.X + (float)width && velocity.X < 5f)
					{
						velocity.X += 0.1f;
					}
				}
				else if (Main.player[target].Center.Y + 50f < position.Y && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					flag = true;
					velocity.Y = -7f;
				}
			}
			else if (type == 425)
			{
				if (localAI[3] == 0f)
				{
					localAI[3] = 1f;
					ai[3] = -120f;
				}
				if (velocity.Y == 0f)
				{
					ai[2] = 0f;
				}
				if (velocity.Y != 0f && ai[2] == 1f)
				{
					TargetClosest();
					spriteDirection = -direction;
					if (Collision.CanHit(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						float num107 = 0.3f;
						float num108 = 8f;
						float num109 = 0.3f;
						float num110 = 7f;
						float num111 = Main.player[target].Center.X - (float)(direction * 300) - base.Center.X;
						float num112 = Main.player[target].Bottom.Y - base.Bottom.Y;
						if (num111 < 0f && velocity.X > 0f)
						{
							velocity.X *= 0.9f;
						}
						else if (num111 > 0f && velocity.X < 0f)
						{
							velocity.X *= 0.9f;
						}
						if (num111 < 0f && velocity.X > 0f - num110)
						{
							velocity.X -= num109;
						}
						else if (num111 > 0f && velocity.X < num110)
						{
							velocity.X += num109;
						}
						if (velocity.X > num110)
						{
							velocity.X = num110;
						}
						if (velocity.X < 0f - num110)
						{
							velocity.X = 0f - num110;
						}
						if (num112 < -20f && velocity.Y > 0f)
						{
							velocity.Y *= 0.8f;
						}
						else if (num112 > 20f && velocity.Y < 0f)
						{
							velocity.Y *= 0.8f;
						}
						if (num112 < -20f && velocity.Y > 0f - num108)
						{
							velocity.Y -= num107;
						}
						else if (num112 > 20f && velocity.Y < num108)
						{
							velocity.Y += num107;
						}
					}
					if (Main.rand.Next(3) == 0)
					{
						position += netOffset;
						Vector2 vector25 = base.Center + new Vector2(direction * -14, -8f) - Vector2.One * 4f;
						Vector2 vector26 = new Vector2(direction * -6, 12f) * 0.2f + Utils.RandomVector2(Main.rand, -1f, 1f) * 0.1f;
						Dust obj5 = Main.dust[Dust.NewDust(vector25, 8, 8, 229, vector26.X, vector26.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 0.5f)];
						obj5.noGravity = true;
						obj5.velocity = vector26;
						obj5.customData = this;
						position -= netOffset;
					}
					for (int num113 = 0; num113 < 200; num113++)
					{
						if (num113 != whoAmI && Main.npc[num113].active && Main.npc[num113].type == type && Math.Abs(position.X - Main.npc[num113].position.X) + Math.Abs(position.Y - Main.npc[num113].position.Y) < (float)width)
						{
							if (position.X < Main.npc[num113].position.X)
							{
								velocity.X -= 0.15f;
							}
							else
							{
								velocity.X += 0.15f;
							}
							if (position.Y < Main.npc[num113].position.Y)
							{
								velocity.Y -= 0.15f;
							}
							else
							{
								velocity.Y += 0.15f;
							}
						}
					}
				}
				else if (Main.player[target].Center.Y + 100f < position.Y && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					flag = true;
					velocity.Y = -5f;
					ai[2] = 1f;
				}
				if (ai[3] < 0f)
				{
					ai[3] += 1f;
				}
				int num114 = 30;
				int num115 = 10;
				int num116 = 180;
				if (ai[3] >= 0f && ai[3] <= (float)num114)
				{
					Vector2 vector27 = DirectionTo(Main.player[target].Center);
					bool flag12 = Math.Abs(vector27.Y) <= Math.Abs(vector27.X);
					bool flag13 = Distance(Main.player[target].Center) < 800f && flag12 && Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0);
					ai[3] = MathHelper.Clamp(ai[3] + (float)flag13.ToDirectionInt(), 0f, num114);
				}
				if (ai[3] >= (float)(num114 + 1) && (ai[3] += 1f) >= (float)(num114 + num115))
				{
					ai[3] = num114 - num116;
					netUpdate = true;
				}
				if (Main.netMode != 1 && ai[3] == (float)num114)
				{
					ai[3] += 1f;
					netUpdate = true;
					int num117 = 20;
					Vector2 chaserPosition = base.Center + new Vector2(direction * 30, 2f);
					Vector2 vector28 = DirectionTo(Main.player[target].Center) * num117;
					if (vector28.HasNaNs())
					{
						vector28 = new Vector2(direction * num117, 0f);
					}
					int num118 = 2;
					Utils.ChaseResults chaseResults = Utils.GetChaseResults(chaserPosition, num117, Main.player[target].Center, Main.player[target].velocity * 0.5f / num118);
					if (chaseResults.InterceptionHappens)
					{
						Vector2 vector29 = chaseResults.ChaserVelocity / num118;
						vector28.X = vector29.X;
						vector28.Y = vector29.Y;
					}
					int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(75f, 50f);
					for (int num119 = 0; num119 < 4; num119++)
					{
						Vector2 vector30 = vector28 + Utils.RandomVector2(Main.rand, -0.8f, 0.8f) * ((num119 != 0) ? 1 : 0);
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), chaserPosition.X, chaserPosition.Y, vector30.X, vector30.Y, 577, attackDamage_ForProjectiles, 1f, Main.myPlayer);
					}
				}
			}
			else if (type == 427)
			{
				if (velocity.Y == 0f)
				{
					ai[2] = 0f;
					rotation = 0f;
				}
				else
				{
					rotation = velocity.X * 0.1f;
				}
				if (velocity.Y != 0f && ai[2] == 1f)
				{
					TargetClosest();
					spriteDirection = -direction;
					if (Collision.CanHit(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						float num120 = Main.player[target].Center.X - base.Center.X;
						float num121 = Main.player[target].Center.Y - base.Center.Y;
						if (num120 < 0f && velocity.X > 0f)
						{
							velocity.X *= 0.98f;
						}
						else if (num120 > 0f && velocity.X < 0f)
						{
							velocity.X *= 0.98f;
						}
						if (num120 < -20f && velocity.X > -6f)
						{
							velocity.X -= 0.015f;
						}
						else if (num120 > 20f && velocity.X < 6f)
						{
							velocity.X += 0.015f;
						}
						if (velocity.X > 6f)
						{
							velocity.X = 6f;
						}
						if (velocity.X < -6f)
						{
							velocity.X = -6f;
						}
						if (num121 < -20f && velocity.Y > 0f)
						{
							velocity.Y *= 0.98f;
						}
						else if (num121 > 20f && velocity.Y < 0f)
						{
							velocity.Y *= 0.98f;
						}
						if (num121 < -20f && velocity.Y > -6f)
						{
							velocity.Y -= 0.15f;
						}
						else if (num121 > 20f && velocity.Y < 6f)
						{
							velocity.Y += 0.15f;
						}
					}
					for (int num122 = 0; num122 < 200; num122++)
					{
						if (num122 != whoAmI && Main.npc[num122].active && Main.npc[num122].type == type && Math.Abs(position.X - Main.npc[num122].position.X) + Math.Abs(position.Y - Main.npc[num122].position.Y) < (float)width)
						{
							if (position.X < Main.npc[num122].position.X)
							{
								velocity.X -= 0.05f;
							}
							else
							{
								velocity.X += 0.05f;
							}
							if (position.Y < Main.npc[num122].position.Y)
							{
								velocity.Y -= 0.05f;
							}
							else
							{
								velocity.Y += 0.05f;
							}
						}
					}
				}
				else if (Main.player[target].Center.Y + 100f < position.Y && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					flag = true;
					velocity.Y = -5f;
					ai[2] = 1f;
				}
			}
			else if (type == 426)
			{
				float num123 = 6f;
				float num124 = 0.2f;
				float num125 = 6f;
				if (ai[1] > 0f && velocity.Y > 0f)
				{
					velocity.Y *= 0.85f;
					if (velocity.Y == 0f)
					{
						velocity.Y = -0.4f;
					}
				}
				if (velocity.Y != 0f)
				{
					TargetClosest();
					spriteDirection = direction;
					if (Collision.CanHit(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						float num126 = Main.player[target].Center.X - (float)(direction * 300) - base.Center.X;
						if (num126 < 40f && velocity.X > 0f)
						{
							velocity.X *= 0.98f;
						}
						else if (num126 > 40f && velocity.X < 0f)
						{
							velocity.X *= 0.98f;
						}
						if (num126 < 40f && velocity.X > 0f - num123)
						{
							velocity.X -= num124;
						}
						else if (num126 > 40f && velocity.X < num123)
						{
							velocity.X += num124;
						}
						if (velocity.X > num123)
						{
							velocity.X = num123;
						}
						if (velocity.X < 0f - num123)
						{
							velocity.X = 0f - num123;
						}
					}
				}
				else if (Main.player[target].Center.Y + 100f < position.Y && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					flag = true;
					velocity.Y = 0f - num125;
				}
				for (int num127 = 0; num127 < 200; num127++)
				{
					if (num127 != whoAmI && Main.npc[num127].active && Main.npc[num127].type == type && Math.Abs(position.X - Main.npc[num127].position.X) + Math.Abs(position.Y - Main.npc[num127].position.Y) < (float)width)
					{
						if (position.X < Main.npc[num127].position.X)
						{
							velocity.X -= 0.1f;
						}
						else
						{
							velocity.X += 0.1f;
						}
						if (position.Y < Main.npc[num127].position.Y)
						{
							velocity.Y -= 0.1f;
						}
						else
						{
							velocity.Y += 0.1f;
						}
					}
				}
				if (Main.rand.Next(6) == 0 && ai[1] <= 20f)
				{
					position += netOffset;
					Dust obj6 = Main.dust[Dust.NewDust(base.Center + new Vector2((spriteDirection == 1) ? 8 : (-20), -20f), 8, 8, 229, velocity.X, velocity.Y, 100)];
					obj6.velocity = obj6.velocity / 4f + velocity / 2f;
					obj6.scale = 0.6f;
					obj6.noLight = true;
					position -= netOffset;
				}
				if (ai[1] >= 57f)
				{
					position += netOffset;
					int num128 = Utils.SelectRandom<int>(Main.rand, 161, 229);
					Dust obj7 = Main.dust[Dust.NewDust(base.Center + new Vector2((spriteDirection == 1) ? 8 : (-20), -20f), 8, 8, num128, velocity.X, velocity.Y, 100)];
					obj7.velocity = obj7.velocity / 4f + DirectionTo(Main.player[target].Top);
					obj7.scale = 1.2f;
					obj7.noLight = true;
					position -= netOffset;
				}
				if (Main.rand.Next(6) == 0)
				{
					position += netOffset;
					Dust dust5 = Main.dust[Dust.NewDust(base.Center, 2, 2, 229)];
					dust5.position = base.Center + new Vector2((spriteDirection == 1) ? 26 : (-26), 24f);
					dust5.velocity.X = 0f;
					if (dust5.velocity.Y < 0f)
					{
						dust5.velocity.Y = 0f;
					}
					dust5.noGravity = true;
					dust5.scale = 1f;
					dust5.noLight = true;
					position -= netOffset;
				}
			}
			else if (type == 185)
			{
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					localAI[0] = 0f;
				}
				else if (localAI[0] == 1f)
				{
					rotation += velocity.X * 0.05f;
				}
			}
			else if (type == 428)
			{
				if (velocity.Y == 0f)
				{
					rotation = 0f;
				}
				else
				{
					rotation += velocity.X * 0.08f;
				}
			}
			if (type == 159 && Main.netMode != 1)
			{
				Vector2 vector31 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num129 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector31.X;
				float num130 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector31.Y;
				if ((float)Math.Sqrt(num129 * num129 + num130 * num130) > 300f)
				{
					Transform(158);
				}
			}
			if (Main.netMode != 1)
			{
				if (Main.expertMode && target >= 0 && (type == 163 || type == 238 || type == 236 || type == 237) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					localAI[0] += 1f;
					if (justHit)
					{
						localAI[0] -= Main.rand.Next(20, 60);
						if (localAI[0] < 0f)
						{
							localAI[0] = 0f;
						}
					}
					if (localAI[0] > (float)Main.rand.Next(180, 900))
					{
						localAI[0] = 0f;
						Vector2 vector32 = Main.player[target].Center - base.Center;
						vector32.Normalize();
						vector32 *= 8f;
						int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(18f, 18f);
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector32.X, vector32.Y, 472, attackDamage_ForProjectiles2, 0f, Main.myPlayer);
					}
				}
				if (velocity.Y == 0f)
				{
					int num131 = -1;
					switch (type)
					{
					case 164:
						num131 = 165;
						break;
					case 236:
						num131 = 237;
						break;
					case 163:
						num131 = 238;
						break;
					case 239:
						num131 = 240;
						break;
					case 530:
						num131 = 531;
						break;
					}
					if (num131 != -1 && NPCCanStickToWalls())
					{
						Transform(num131);
					}
				}
			}
			if (type == 243)
			{
				if (justHit && Main.rand.Next(3) == 0)
				{
					ai[2] -= Main.rand.Next(30);
				}
				if (ai[2] < 0f)
				{
					ai[2] = 0f;
				}
				if (confused)
				{
					ai[2] = 0f;
				}
				ai[2] += 1f;
				float num132 = Main.rand.Next(30, 900);
				num132 *= (float)life / (float)lifeMax;
				num132 += 30f;
				if (Main.netMode != 1 && ai[2] >= num132 && velocity.Y == 0f && !Main.player[target].dead && !Main.player[target].frozen && ((direction > 0 && base.Center.X < Main.player[target].Center.X) || (direction < 0 && base.Center.X > Main.player[target].Center.X)) && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					Vector2 vector33 = new Vector2(position.X + (float)width * 0.5f, position.Y + 20f);
					vector33.X += 10 * direction;
					float num133 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector33.X;
					float num134 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector33.Y;
					num133 += (float)Main.rand.Next(-40, 41);
					num134 += (float)Main.rand.Next(-40, 41);
					float num135 = (float)Math.Sqrt(num133 * num133 + num134 * num134);
					netUpdate = true;
					num135 = 15f / num135;
					num133 *= num135;
					num134 *= num135;
					int num136 = 32;
					int num137 = 257;
					vector33.X += num133 * 3f;
					vector33.Y += num134 * 3f;
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector33.X, vector33.Y, num133, num134, num137, num136, 0f, Main.myPlayer);
					ai[2] = 0f;
				}
			}
			if (type == 251)
			{
				if (justHit)
				{
					ai[2] -= Main.rand.Next(30);
				}
				if (ai[2] < 0f)
				{
					ai[2] = 0f;
				}
				if (confused)
				{
					ai[2] = 0f;
				}
				ai[2] += 1f;
				float num138 = Main.rand.Next(60, 1800);
				num138 *= (float)life / (float)lifeMax;
				num138 += 15f;
				if (Main.netMode != 1 && ai[2] >= num138 && velocity.Y == 0f && !Main.player[target].dead && !Main.player[target].frozen && ((direction > 0 && base.Center.X < Main.player[target].Center.X) || (direction < 0 && base.Center.X > Main.player[target].Center.X)) && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					Vector2 vector34 = new Vector2(position.X + (float)width * 0.5f, position.Y + 12f);
					vector34.X += 6 * direction;
					float num139 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector34.X;
					float num140 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector34.Y;
					num139 += (float)Main.rand.Next(-40, 41);
					num140 += (float)Main.rand.Next(-30, 0);
					float num141 = (float)Math.Sqrt(num139 * num139 + num140 * num140);
					netUpdate = true;
					num141 = 15f / num141;
					num139 *= num141;
					num140 *= num141;
					int num142 = 30;
					int num143 = 83;
					vector34.X += num139 * 3f;
					vector34.Y += num140 * 3f;
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector34.X, vector34.Y, num139, num140, num143, num142, 0f, Main.myPlayer);
					ai[2] = 0f;
				}
			}
			if (type == 386)
			{
				if (confused)
				{
					ai[2] = -60f;
				}
				else
				{
					if (ai[2] < 60f)
					{
						ai[2] += 1f;
					}
					if (ai[2] > 0f && CountNPCS(387) >= 4 * CountNPCS(386))
					{
						ai[2] = 0f;
					}
					if (justHit)
					{
						ai[2] = -30f;
					}
					if (ai[2] == 30f)
					{
						int num144 = (int)position.X / 16;
						int num145 = (int)position.Y / 16;
						int num146 = (int)position.X / 16;
						int num147 = (int)position.Y / 16;
						int num148 = 5;
						int num149 = 0;
						bool flag14 = false;
						int num150 = 2;
						int num151 = 0;
						while (!flag14 && num149 < 100)
						{
							num149++;
							int num152 = Main.rand.Next(num144 - num148, num144 + num148);
							for (int num153 = Main.rand.Next(num145 - num148, num145 + num148); num153 < num145 + num148; num153++)
							{
								if ((num153 < num145 - num150 || num153 > num145 + num150 || num152 < num144 - num150 || num152 > num144 + num150) && (num153 < num147 - num151 || num153 > num147 + num151 || num152 < num146 - num151 || num152 > num146 + num151) && Main.tile[num152, num153].nactive())
								{
									bool flag15 = true;
									if (Main.tile[num152, num153 - 1].lava())
									{
										flag15 = false;
									}
									if (flag15 && Main.tileSolid[Main.tile[num152, num153].type] && !Collision.SolidTiles(num152 - 1, num152 + 1, num153 - 4, num153 - 1))
									{
										int num154 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), num152 * 16 - width / 2, num153 * 16, 387);
										Main.npc[num154].position.Y = num153 * 16 - Main.npc[num154].height;
										flag14 = true;
										netUpdate = true;
										break;
									}
								}
							}
						}
					}
					if (ai[2] == 60f)
					{
						ai[2] = -120f;
					}
				}
			}
			if (type == 389)
			{
				if (confused)
				{
					ai[2] = -60f;
				}
				else
				{
					if (ai[2] < 20f)
					{
						ai[2] += 1f;
					}
					if (justHit)
					{
						ai[2] = -30f;
					}
					if (ai[2] == 20f && Main.netMode != 1)
					{
						ai[2] = -10 + Main.rand.Next(3) * -10;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y + 8f, direction * 6, 0f, 437, 25, 1f, Main.myPlayer);
					}
				}
			}
			if (type == 110 || type == 111 || type == 206 || type == 214 || type == 215 || type == 216 || type == 290 || type == 291 || type == 292 || type == 293 || type == 350 || type == 379 || type == 380 || type == 381 || type == 382 || (type >= 449 && type <= 452) || type == 468 || type == 481 || type == 411 || type == 409 || (type >= 498 && type <= 506) || type == 424 || type == 426 || type == 520)
			{
				bool flag16 = type == 381 || type == 382 || type == 520;
				bool flag17 = type == 426;
				bool flag18 = true;
				int num155 = -1;
				int num156 = -1;
				if (type == 411)
				{
					flag16 = true;
					num155 = 120;
					num156 = 120;
					if (ai[1] <= 220f)
					{
						flag18 = false;
					}
				}
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				if (justHit)
				{
					ai[1] = 30f;
					ai[2] = 0f;
				}
				int num157 = 70;
				if (type == 379 || type == 380)
				{
					num157 = 80;
				}
				if (type == 381 || type == 382)
				{
					num157 = 80;
				}
				if (type == 520)
				{
					num157 = 15;
				}
				if (type == 350)
				{
					num157 = 110;
				}
				if (type == 291)
				{
					num157 = 200;
				}
				if (type == 292)
				{
					num157 = 120;
				}
				if (type == 293)
				{
					num157 = 90;
				}
				if (type == 111)
				{
					num157 = 180;
				}
				if (type == 206)
				{
					num157 = 50;
				}
				if (type == 481)
				{
					num157 = 100;
				}
				if (type == 214)
				{
					num157 = 40;
				}
				if (type == 215)
				{
					num157 = 80;
				}
				if (type == 290)
				{
					num157 = 30;
				}
				if (type == 411)
				{
					num157 = 330;
				}
				if (type == 409)
				{
					num157 = 60;
				}
				if (type == 424)
				{
					num157 = 180;
				}
				if (type == 426)
				{
					num157 = 60;
				}
				bool flag19 = false;
				if (type == 216)
				{
					if (localAI[2] >= 20f)
					{
						flag19 = true;
					}
					num157 = ((!flag19) ? 8 : 60);
				}
				int num158 = num157 / 2;
				if (type == 424)
				{
					num158 = num157 - 1;
				}
				if (type == 426)
				{
					num158 = num157 - 1;
				}
				if (type == 411)
				{
					num158 = 220;
				}
				if (confused)
				{
					ai[2] = 0f;
				}
				if (ai[2] > 0f)
				{
					if (flag18)
					{
						TargetClosest();
					}
					if (ai[1] == (float)num158)
					{
						if (type == 216)
						{
							localAI[2] += 1f;
						}
						float num159 = 11f;
						if (type == 111)
						{
							num159 = 9f;
						}
						if (type == 206)
						{
							num159 = 7f;
						}
						if (type == 290)
						{
							num159 = 9f;
						}
						if (type == 293)
						{
							num159 = 4f;
						}
						if (type == 214)
						{
							num159 = 14f;
						}
						if (type == 215)
						{
							num159 = 16f;
						}
						if (type == 382)
						{
							num159 = 7f;
						}
						if (type == 520)
						{
							num159 = 8f;
						}
						if (type == 409)
						{
							num159 = 4f;
						}
						if (type >= 449 && type <= 452)
						{
							num159 = 7f;
						}
						if (type == 481)
						{
							num159 = 8f;
						}
						if (type == 468)
						{
							num159 = 7.5f;
						}
						if (type == 411)
						{
							num159 = 1f;
						}
						if (type >= 498 && type <= 506)
						{
							num159 = 7f;
						}
						Vector2 chaserPosition2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						if (type == 481)
						{
							chaserPosition2.Y -= 14f;
						}
						if (type == 206)
						{
							chaserPosition2.Y -= 10f;
						}
						if (type == 290)
						{
							chaserPosition2.Y -= 10f;
						}
						if (type == 381 || type == 382)
						{
							chaserPosition2.Y += 6f;
						}
						if (type == 520)
						{
							chaserPosition2.Y = position.Y + 20f;
						}
						if (type >= 498 && type <= 506)
						{
							chaserPosition2.Y -= 8f;
						}
						if (type == 426)
						{
							chaserPosition2 += new Vector2(spriteDirection * 2, -12f);
							num159 = 7f;
						}
						float num160 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - chaserPosition2.X;
						float num161 = Math.Abs(num160) * 0.1f;
						if (type == 291 || type == 292)
						{
							num161 = 0f;
						}
						if (type == 215)
						{
							num161 = Math.Abs(num160) * 0.08f;
						}
						if (type == 214 || (type == 216 && !flag19))
						{
							num161 = 0f;
						}
						if (type == 381 || type == 382 || type == 520)
						{
							num161 = 0f;
						}
						if (type >= 449 && type <= 452)
						{
							num161 = Math.Abs(num160) * (float)Main.rand.Next(10, 50) * 0.01f;
						}
						if (type == 468)
						{
							num161 = Math.Abs(num160) * (float)Main.rand.Next(10, 50) * 0.01f;
						}
						if (type == 481)
						{
							num161 = Math.Abs(num160) * (float)Main.rand.Next(-10, 11) * 0.0035f;
						}
						if (type >= 498 && type <= 506)
						{
							num161 = Math.Abs(num160) * (float)Main.rand.Next(1, 11) * 0.0025f;
						}
						float num162 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - chaserPosition2.Y - num161;
						if (type == 291)
						{
							num160 += (float)Main.rand.Next(-40, 41) * 0.2f;
							num162 += (float)Main.rand.Next(-40, 41) * 0.2f;
						}
						else if (type == 381 || type == 382 || type == 520)
						{
							num160 += (float)Main.rand.Next(-100, 101) * 0.4f;
							num162 += (float)Main.rand.Next(-100, 101) * 0.4f;
							num160 *= (float)Main.rand.Next(85, 116) * 0.01f;
							num162 *= (float)Main.rand.Next(85, 116) * 0.01f;
							if (type == 520)
							{
								num160 += (float)Main.rand.Next(-100, 101) * 0.6f;
								num162 += (float)Main.rand.Next(-100, 101) * 0.6f;
								num160 *= (float)Main.rand.Next(85, 116) * 0.015f;
								num162 *= (float)Main.rand.Next(85, 116) * 0.015f;
							}
						}
						else if (type == 481)
						{
							num160 += (float)Main.rand.Next(-40, 41) * 0.4f;
							num162 += (float)Main.rand.Next(-40, 41) * 0.4f;
						}
						else if (type >= 498 && type <= 506)
						{
							num160 += (float)Main.rand.Next(-40, 41) * 0.3f;
							num162 += (float)Main.rand.Next(-40, 41) * 0.3f;
						}
						else if (type == 426)
						{
							num160 += (float)Main.rand.Next(-30, 31) * 0.3f;
							num162 += (float)Main.rand.Next(-30, 31) * 0.3f;
						}
						else if (type != 292)
						{
							num160 += (float)Main.rand.Next(-40, 41);
							num162 += (float)Main.rand.Next(-40, 41);
						}
						float num163 = (float)Math.Sqrt(num160 * num160 + num162 * num162);
						netUpdate = true;
						num163 = num159 / num163;
						num160 *= num163;
						num162 *= num163;
						int num164 = 35;
						int num165 = 82;
						if (type == 111)
						{
							num164 = 11;
						}
						if (type == 206)
						{
							num164 = 37;
						}
						if (type == 379 || type == 380)
						{
							num164 = 40;
						}
						if (type == 350)
						{
							num164 = 45;
						}
						if (type == 468)
						{
							num164 = 50;
						}
						if (type == 111)
						{
							num165 = 81;
						}
						if (type == 379 || type == 380)
						{
							num165 = 81;
						}
						if (type == 381)
						{
							num165 = 436;
							num164 = 24;
						}
						if (type == 382)
						{
							num165 = 438;
							num164 = 30;
						}
						if (type == 520)
						{
							num165 = 592;
							num164 = 35;
						}
						if (type >= 449 && type <= 452)
						{
							num165 = 471;
							num164 = 15;
						}
						if (type >= 498 && type <= 506)
						{
							num165 = 572;
							num164 = 14;
						}
						if (type == 481)
						{
							num165 = 508;
							num164 = 18;
						}
						if (type == 206)
						{
							num165 = 177;
						}
						if (type == 468)
						{
							num165 = 501;
						}
						if (type == 411)
						{
							num165 = 537;
							num164 = GetAttackDamage_ForProjectiles(60f, 45f);
						}
						if (type == 424)
						{
							num165 = 573;
							num164 = GetAttackDamage_ForProjectiles(60f, 45f);
						}
						if (type == 426)
						{
							num165 = 581;
							num164 = GetAttackDamage_ForProjectiles(60f, 45f);
						}
						if (type == 291)
						{
							num165 = 302;
							num164 = 100;
						}
						if (type == 290)
						{
							num165 = 300;
							num164 = 60;
						}
						if (type == 293)
						{
							num165 = 303;
							num164 = 60;
						}
						if (type == 214)
						{
							num165 = 180;
							num164 = 25;
						}
						if (type == 215)
						{
							num165 = 82;
							num164 = 40;
						}
						if (type == 292)
						{
							num164 = 50;
							num165 = 180;
						}
						if (type == 216)
						{
							num165 = 180;
							num164 = 30;
							if (flag19)
							{
								num164 = 100;
								num165 = 240;
								localAI[2] = 0f;
							}
						}
						Player player3 = Main.player[target];
						Vector2? vector35 = null;
						if (type == 426)
						{
							vector35 = Main.rand.NextVector2FromRectangle(player3.Hitbox);
						}
						if (vector35.HasValue)
						{
							Utils.ChaseResults chaseResults2 = Utils.GetChaseResults(chaserPosition2, num159, vector35.Value, player3.velocity);
							if (chaseResults2.InterceptionHappens)
							{
								Vector2 vector36 = Utils.FactorAcceleration(chaseResults2.ChaserVelocity, chaseResults2.InterceptionTime, new Vector2(0f, 0.1f), 15);
								num160 = vector36.X;
								num162 = vector36.Y;
							}
						}
						chaserPosition2.X += num160;
						chaserPosition2.Y += num162;
						if (type == 290)
						{
							num164 = GetAttackDamage_ForProjectiles(num164, (float)num164 * 0.75f);
						}
						if (type >= 381 && type <= 392)
						{
							num164 = GetAttackDamage_ForProjectiles(num164, (float)num164 * 0.8f);
						}
						if (Main.netMode != 1)
						{
							if (type == 292)
							{
								for (int num166 = 0; num166 < 4; num166++)
								{
									num160 = player3.position.X + (float)player3.width * 0.5f - chaserPosition2.X;
									num162 = player3.position.Y + (float)player3.height * 0.5f - chaserPosition2.Y;
									num163 = (float)Math.Sqrt(num160 * num160 + num162 * num162);
									num163 = 12f / num163;
									num160 = (num160 += (float)Main.rand.Next(-40, 41));
									num162 = (num162 += (float)Main.rand.Next(-40, 41));
									num160 *= num163;
									num162 *= num163;
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), chaserPosition2.X, chaserPosition2.Y, num160, num162, num165, num164, 0f, Main.myPlayer);
								}
							}
							else if (type == 411)
							{
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), chaserPosition2.X, chaserPosition2.Y, num160, num162, num165, num164, 0f, Main.myPlayer, 0f, whoAmI);
							}
							else if (type == 424)
							{
								for (int num167 = 0; num167 < 4; num167++)
								{
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X - (float)(spriteDirection * 4), base.Center.Y + 6f, (float)(-3 + 2 * num167) * 0.15f, (float)(-Main.rand.Next(0, 3)) * 0.2f - 0.1f, num165, num164, 0f, Main.myPlayer, 0f, whoAmI);
								}
							}
							else if (type == 409)
							{
								int num168 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 410, whoAmI);
								Main.npc[num168].velocity = new Vector2(num160, -6f + num162);
							}
							else
							{
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), chaserPosition2.X, chaserPosition2.Y, num160, num162, num165, num164, 0f, Main.myPlayer);
							}
						}
						if (Math.Abs(num162) > Math.Abs(num160) * 2f)
						{
							if (num162 > 0f)
							{
								ai[2] = 1f;
							}
							else
							{
								ai[2] = 5f;
							}
						}
						else if (Math.Abs(num160) > Math.Abs(num162) * 2f)
						{
							ai[2] = 3f;
						}
						else if (num162 > 0f)
						{
							ai[2] = 2f;
						}
						else
						{
							ai[2] = 4f;
						}
					}
					if ((velocity.Y != 0f && !flag17) || ai[1] <= 0f)
					{
						ai[2] = 0f;
						ai[1] = 0f;
					}
					else if (!flag16 || (num155 != -1 && ai[1] >= (float)num155 && ai[1] < (float)(num155 + num156) && (!flag17 || velocity.Y == 0f)))
					{
						velocity.X *= 0.9f;
						spriteDirection = direction;
					}
				}
				if (type == 468 && !Main.eclipse)
				{
					flag16 = true;
				}
				else if ((ai[2] <= 0f || flag16) && (velocity.Y == 0f || flag17) && ai[1] <= 0f && !Main.player[target].dead)
				{
					bool flag20 = Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
					if (type == 520)
					{
						flag20 = Collision.CanHitLine(base.Top + new Vector2(0f, 20f), 0, 0, Main.player[target].position, Main.player[target].width, Main.player[target].height);
					}
					if (Main.player[target].stealth == 0f && Main.player[target].itemAnimation == 0)
					{
						flag20 = false;
					}
					if (flag20)
					{
						float num169 = 10f;
						Vector2 vector37 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num170 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector37.X;
						float num171 = Math.Abs(num170) * 0.1f;
						float num172 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector37.Y - num171;
						num170 += (float)Main.rand.Next(-40, 41);
						num172 += (float)Main.rand.Next(-40, 41);
						float num173 = (float)Math.Sqrt(num170 * num170 + num172 * num172);
						float num174 = 700f;
						if (type == 214)
						{
							num174 = 550f;
						}
						if (type == 215)
						{
							num174 = 800f;
						}
						if (type >= 498 && type <= 506)
						{
							num174 = 190f;
						}
						if (type >= 449 && type <= 452)
						{
							num174 = 200f;
						}
						if (type == 481)
						{
							num174 = 400f;
						}
						if (type == 468)
						{
							num174 = 400f;
						}
						if (num173 < num174)
						{
							netUpdate = true;
							velocity.X *= 0.5f;
							num173 = num169 / num173;
							num170 *= num173;
							num172 *= num173;
							ai[2] = 3f;
							ai[1] = num157;
							if (Math.Abs(num172) > Math.Abs(num170) * 2f)
							{
								if (num172 > 0f)
								{
									ai[2] = 1f;
								}
								else
								{
									ai[2] = 5f;
								}
							}
							else if (Math.Abs(num170) > Math.Abs(num172) * 2f)
							{
								ai[2] = 3f;
							}
							else if (num172 > 0f)
							{
								ai[2] = 2f;
							}
							else
							{
								ai[2] = 4f;
							}
						}
					}
				}
				if (ai[2] <= 0f || (flag16 && (num155 == -1 || !(ai[1] >= (float)num155) || !(ai[1] < (float)(num155 + num156)))))
				{
					float num175 = 1f;
					float num176 = 0.07f;
					float num177 = 0.8f;
					if (type == 214)
					{
						num175 = 2f;
						num176 = 0.09f;
					}
					else if (type == 215)
					{
						num175 = 1.5f;
						num176 = 0.08f;
					}
					else if (type == 381 || type == 382)
					{
						num175 = 2f;
						num176 = 0.5f;
					}
					else if (type == 520)
					{
						num175 = 4f;
						num176 = 1f;
						num177 = 0.7f;
					}
					else if (type == 411)
					{
						num175 = 2f;
						num176 = 0.5f;
					}
					else if (type == 409)
					{
						num175 = 2f;
						num176 = 0.5f;
					}
					else if (type == 426)
					{
						num175 = 4f;
						num176 = 0.6f;
						num177 = 0.95f;
					}
					bool flag21 = false;
					if ((type == 381 || type == 382) && Vector2.Distance(base.Center, Main.player[target].Center) < 300f && Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						flag21 = true;
						ai[3] = 0f;
					}
					if (type == 520 && Vector2.Distance(base.Center, Main.player[target].Center) < 400f && Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						flag21 = true;
						ai[3] = 0f;
					}
					if (velocity.X < 0f - num175 || velocity.X > num175 || flag21)
					{
						if (velocity.Y == 0f)
						{
							velocity *= num177;
						}
					}
					else if (velocity.X < num175 && direction == 1)
					{
						velocity.X += num176;
						if (velocity.X > num175)
						{
							velocity.X = num175;
						}
					}
					else if (velocity.X > 0f - num175 && direction == -1)
					{
						velocity.X -= num176;
						if (velocity.X < 0f - num175)
						{
							velocity.X = 0f - num175;
						}
					}
				}
				if (type == 520)
				{
					localAI[2] += 1f;
					if (localAI[2] >= 6f)
					{
						localAI[2] = 0f;
						localAI[3] = Main.player[target].DirectionFrom(base.Top + new Vector2(0f, 20f)).ToRotation();
					}
				}
			}
			if (type == 109 && Main.netMode != 1 && !Main.player[target].dead)
			{
				if (justHit)
				{
					ai[2] = 0f;
				}
				ai[2] += 1f;
				if (ai[2] > 60f)
				{
					Vector2 vector38 = new Vector2(position.X + (float)width * 0.5f - (float)(direction * 24), position.Y + 4f);
					if (Main.rand.Next(5) != 0 || AnyNPCs(378))
					{
						int num178 = Main.rand.Next(3, 8) * direction;
						int num179 = Main.rand.Next(-8, -5);
						int num180 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector38.X, vector38.Y, num178, num179, 75, 80, 0f, Main.myPlayer);
						Main.projectile[num180].timeLeft = 300;
						ai[2] = 0f;
					}
					else
					{
						ai[2] = -120f;
						int number = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector38.X, (int)vector38.Y, 378);
						NetMessage.SendData(23, -1, -1, null, number);
					}
				}
			}
			if (velocity.Y == 0f || flag)
			{
				int num181 = (int)(position.Y + (float)height + 7f) / 16;
				int num182 = (int)(position.Y - 9f) / 16;
				int num183 = (int)position.X / 16;
				int num184 = (int)(position.X + (float)width) / 16;
				int num185 = (int)(position.X + 8f) / 16;
				int num186 = (int)(position.X + (float)width - 8f) / 16;
				bool flag22 = false;
				for (int num187 = num185; num187 <= num186; num187++)
				{
					if (num187 >= num183 && num187 <= num184 && Main.tile[num187, num181] == null)
					{
						flag22 = true;
						continue;
					}
					if (Main.tile[num187, num182] != null && Main.tile[num187, num182].nactive() && Main.tileSolid[Main.tile[num187, num182].type])
					{
						flag5 = false;
						break;
					}
					if (!flag22 && num187 >= num183 && num187 <= num184 && Main.tile[num187, num181].nactive() && Main.tileSolid[Main.tile[num187, num181].type])
					{
						flag5 = true;
					}
				}
				if (!flag5 && velocity.Y < 0f)
				{
					velocity.Y = 0f;
				}
				if (flag22)
				{
					return;
				}
			}
			if (type == 428)
			{
				flag5 = false;
			}
			if (velocity.Y >= 0f && (type != 580 || directionY != 1))
			{
				int num188 = 0;
				if (velocity.X < 0f)
				{
					num188 = -1;
				}
				if (velocity.X > 0f)
				{
					num188 = 1;
				}
				Vector2 vector39 = position;
				vector39.X += velocity.X;
				int num189 = (int)((vector39.X + (float)(width / 2) + (float)((width / 2 + 1) * num188)) / 16f);
				int num190 = (int)((vector39.Y + (float)height - 1f) / 16f);
				if (WorldGen.InWorld(num189, num190, 4))
				{
					if (Main.tile[num189, num190] == null)
					{
						Main.tile[num189, num190] = new Tile();
					}
					if (Main.tile[num189, num190 - 1] == null)
					{
						Main.tile[num189, num190 - 1] = new Tile();
					}
					if (Main.tile[num189, num190 - 2] == null)
					{
						Main.tile[num189, num190 - 2] = new Tile();
					}
					if (Main.tile[num189, num190 - 3] == null)
					{
						Main.tile[num189, num190 - 3] = new Tile();
					}
					if (Main.tile[num189, num190 + 1] == null)
					{
						Main.tile[num189, num190 + 1] = new Tile();
					}
					if (Main.tile[num189 - num188, num190 - 3] == null)
					{
						Main.tile[num189 - num188, num190 - 3] = new Tile();
					}
					if ((float)(num189 * 16) < vector39.X + (float)width && (float)(num189 * 16 + 16) > vector39.X && ((Main.tile[num189, num190].nactive() && !Main.tile[num189, num190].topSlope() && !Main.tile[num189, num190 - 1].topSlope() && Main.tileSolid[Main.tile[num189, num190].type] && !Main.tileSolidTop[Main.tile[num189, num190].type]) || (Main.tile[num189, num190 - 1].halfBrick() && Main.tile[num189, num190 - 1].nactive())) && (!Main.tile[num189, num190 - 1].nactive() || !Main.tileSolid[Main.tile[num189, num190 - 1].type] || Main.tileSolidTop[Main.tile[num189, num190 - 1].type] || (Main.tile[num189, num190 - 1].halfBrick() && (!Main.tile[num189, num190 - 4].nactive() || !Main.tileSolid[Main.tile[num189, num190 - 4].type] || Main.tileSolidTop[Main.tile[num189, num190 - 4].type]))) && (!Main.tile[num189, num190 - 2].nactive() || !Main.tileSolid[Main.tile[num189, num190 - 2].type] || Main.tileSolidTop[Main.tile[num189, num190 - 2].type]) && (!Main.tile[num189, num190 - 3].nactive() || !Main.tileSolid[Main.tile[num189, num190 - 3].type] || Main.tileSolidTop[Main.tile[num189, num190 - 3].type]) && (!Main.tile[num189 - num188, num190 - 3].nactive() || !Main.tileSolid[Main.tile[num189 - num188, num190 - 3].type]))
					{
						float num191 = num190 * 16;
						if (Main.tile[num189, num190].halfBrick())
						{
							num191 += 8f;
						}
						if (Main.tile[num189, num190 - 1].halfBrick())
						{
							num191 -= 8f;
						}
						if (num191 < vector39.Y + (float)height)
						{
							float num192 = vector39.Y + (float)height - num191;
							float num193 = 16.1f;
							if (type == 163 || type == 164 || type == 236 || type == 239 || type == 530)
							{
								num193 += 8f;
							}
							if (num192 <= num193)
							{
								gfxOffY += position.Y + (float)height - num191;
								position.Y = num191 - (float)height;
								if (num192 < 9f)
								{
									stepSpeed = 1f;
								}
								else
								{
									stepSpeed = 2f;
								}
							}
						}
					}
				}
			}
			if (flag5)
			{
				int num194 = (int)((position.X + (float)(width / 2) + (float)(15 * direction)) / 16f);
				int num195 = (int)((position.Y + (float)height - 15f) / 16f);
				if (type == 109 || type == 163 || type == 164 || type == 199 || type == 236 || type == 239 || type == 257 || type == 258 || type == 290 || type == 391 || type == 425 || type == 427 || type == 426 || type == 580 || type == 508 || type == 415 || type == 530 || type == 532 || type == 582)
				{
					num194 = (int)((position.X + (float)(width / 2) + (float)((width / 2 + 16) * direction)) / 16f);
				}
				if (Main.tile[num194, num195] == null)
				{
					Main.tile[num194, num195] = new Tile();
				}
				if (Main.tile[num194, num195 - 1] == null)
				{
					Main.tile[num194, num195 - 1] = new Tile();
				}
				if (Main.tile[num194, num195 - 2] == null)
				{
					Main.tile[num194, num195 - 2] = new Tile();
				}
				if (Main.tile[num194, num195 - 3] == null)
				{
					Main.tile[num194, num195 - 3] = new Tile();
				}
				if (Main.tile[num194, num195 + 1] == null)
				{
					Main.tile[num194, num195 + 1] = new Tile();
				}
				if (Main.tile[num194 + direction, num195 - 1] == null)
				{
					Main.tile[num194 + direction, num195 - 1] = new Tile();
				}
				if (Main.tile[num194 + direction, num195 + 1] == null)
				{
					Main.tile[num194 + direction, num195 + 1] = new Tile();
				}
				if (Main.tile[num194 - direction, num195 + 1] == null)
				{
					Main.tile[num194 - direction, num195 + 1] = new Tile();
				}
				Main.tile[num194, num195 + 1].halfBrick();
				if (Main.tile[num194, num195 - 1].nactive() && (Main.tile[num194, num195 - 1].type == 10 || Main.tile[num194, num195 - 1].type == 388) && flag8)
				{
					ai[2] += 1f;
					ai[3] = 0f;
					if (ai[2] >= 60f)
					{
						bool flag23 = type == 3 || type == 430 || type == 590 || type == 331 || type == 332 || type == 132 || type == 161 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 320 || type == 321 || type == 319 || type == 21 || type == 324 || type == 323 || type == 322 || type == 44 || type == 196 || type == 167 || type == 77 || type == 197 || type == 202 || type == 203 || type == 449 || type == 450 || type == 451 || type == 452 || type == 481 || type == 201 || type == 635;
						bool flag24 = Main.player[target].ZoneGraveyard && Main.rand.Next(60) == 0;
						if ((!Main.bloodMoon || Main.getGoodWorld) && !flag24 && flag23)
						{
							ai[1] = 0f;
						}
						velocity.X = 0.5f * (float)(-direction);
						int num196 = 5;
						if (Main.tile[num194, num195 - 1].type == 388)
						{
							num196 = 2;
						}
						ai[1] += num196;
						if (type == 27)
						{
							ai[1] += 1f;
						}
						if (type == 31 || type == 294 || type == 295 || type == 296)
						{
							ai[1] += 6f;
						}
						ai[2] = 0f;
						bool flag25 = false;
						if (ai[1] >= 10f)
						{
							flag25 = true;
							ai[1] = 10f;
						}
						if (type == 460)
						{
							flag25 = true;
						}
						WorldGen.KillTile(num194, num195 - 1, fail: true);
						if ((Main.netMode != 1 || !flag25) && flag25 && Main.netMode != 1)
						{
							if (type == 26)
							{
								WorldGen.KillTile(num194, num195 - 1);
								if (Main.netMode == 2)
								{
									NetMessage.SendData(17, -1, -1, null, 0, num194, num195 - 1);
								}
							}
							else
							{
								if (Main.tile[num194, num195 - 1].type == 10)
								{
									bool flag26 = WorldGen.OpenDoor(num194, num195 - 1, direction);
									if (!flag26)
									{
										ai[3] = num56;
										netUpdate = true;
									}
									if (Main.netMode == 2 && flag26)
									{
										NetMessage.SendData(19, -1, -1, null, 0, num194, num195 - 1, direction);
									}
								}
								if (Main.tile[num194, num195 - 1].type == 388)
								{
									bool flag27 = WorldGen.ShiftTallGate(num194, num195 - 1, closing: false);
									if (!flag27)
									{
										ai[3] = num56;
										netUpdate = true;
									}
									if (Main.netMode == 2 && flag27)
									{
										NetMessage.SendData(19, -1, -1, null, 4, num194, num195 - 1);
									}
								}
							}
						}
					}
				}
				else
				{
					int num197 = spriteDirection;
					if (type == 425)
					{
						num197 *= -1;
					}
					if ((velocity.X < 0f && num197 == -1) || (velocity.X > 0f && num197 == 1))
					{
						if (height >= 32 && Main.tile[num194, num195 - 2].nactive() && Main.tileSolid[Main.tile[num194, num195 - 2].type])
						{
							if (Main.tile[num194, num195 - 3].nactive() && Main.tileSolid[Main.tile[num194, num195 - 3].type])
							{
								velocity.Y = -8f;
								netUpdate = true;
							}
							else
							{
								velocity.Y = -7f;
								netUpdate = true;
							}
						}
						else if (Main.tile[num194, num195 - 1].nactive() && Main.tileSolid[Main.tile[num194, num195 - 1].type])
						{
							if (type == 624)
							{
								velocity.Y = -8f;
								int num198 = (int)(position.Y + (float)height) / 16;
								if (WorldGen.SolidTile((int)base.Center.X / 16, num198 - 8))
								{
									direction *= -1;
									spriteDirection = direction;
									velocity.X = 3 * direction;
								}
							}
							else
							{
								velocity.Y = -6f;
							}
							netUpdate = true;
						}
						else if (position.Y + (float)height - (float)(num195 * 16) > 20f && Main.tile[num194, num195].nactive() && !Main.tile[num194, num195].topSlope() && Main.tileSolid[Main.tile[num194, num195].type])
						{
							velocity.Y = -5f;
							netUpdate = true;
						}
						else if (directionY < 0 && type != 67 && (!Main.tile[num194, num195 + 1].nactive() || !Main.tileSolid[Main.tile[num194, num195 + 1].type]) && (!Main.tile[num194 + direction, num195 + 1].nactive() || !Main.tileSolid[Main.tile[num194 + direction, num195 + 1].type]))
						{
							velocity.Y = -8f;
							velocity.X *= 1.5f;
							netUpdate = true;
						}
						else if (flag8)
						{
							ai[1] = 0f;
							ai[2] = 0f;
						}
						if (velocity.Y == 0f && flag6 && ai[3] == 1f)
						{
							velocity.Y = -5f;
						}
						if (velocity.Y == 0f && (Main.expertMode || type == 586) && Main.player[target].Bottom.Y < base.Top.Y && Math.Abs(base.Center.X - Main.player[target].Center.X) < (float)(Main.player[target].width * 3) && Collision.CanHit(this, Main.player[target]))
						{
							if (type == 586)
							{
								int num199 = (int)((base.Bottom.Y - 16f - Main.player[target].Bottom.Y) / 16f);
								if (num199 < 14 && Collision.CanHit(this, Main.player[target]))
								{
									if (num199 < 7)
									{
										velocity.Y = -8.8f;
									}
									else if (num199 < 8)
									{
										velocity.Y = -9.2f;
									}
									else if (num199 < 9)
									{
										velocity.Y = -9.7f;
									}
									else if (num199 < 10)
									{
										velocity.Y = -10.3f;
									}
									else if (num199 < 11)
									{
										velocity.Y = -10.6f;
									}
									else
									{
										velocity.Y = -11f;
									}
								}
							}
							if (velocity.Y == 0f)
							{
								int num200 = 6;
								if (Main.player[target].Bottom.Y > base.Top.Y - (float)(num200 * 16))
								{
									velocity.Y = -7.9f;
								}
								else
								{
									int num201 = (int)(base.Center.X / 16f);
									int num202 = (int)(base.Bottom.Y / 16f) - 1;
									for (int num203 = num202; num203 > num202 - num200; num203--)
									{
										if (Main.tile[num201, num203].nactive() && TileID.Sets.Platforms[Main.tile[num201, num203].type])
										{
											velocity.Y = -7.9f;
											break;
										}
									}
								}
							}
						}
					}
					if ((type == 31 || type == 294 || type == 295 || type == 296 || type == 47 || type == 77 || type == 104 || type == 168 || type == 196 || type == 385 || type == 389 || type == 464 || type == 470 || (type >= 524 && type <= 527)) && velocity.Y == 0f)
					{
						int num204 = 100;
						int num205 = 50;
						if (type == 586)
						{
							num204 = 150;
							num205 = 150;
						}
						if (Math.Abs(position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) < (float)num204 && Math.Abs(position.Y + (float)(height / 2) - (Main.player[target].position.Y + (float)(Main.player[target].height / 2))) < (float)num205 && ((direction > 0 && velocity.X >= 1f) || (direction < 0 && velocity.X <= -1f)))
						{
							if (type == 586)
							{
								velocity.X += direction;
								velocity.X *= 2f;
								if (velocity.X > 8f)
								{
									velocity.X = 8f;
								}
								if (velocity.X < -8f)
								{
									velocity.X = -8f;
								}
								velocity.Y = -4.5f;
								if (position.Y > Main.player[target].position.Y + 40f)
								{
									velocity.Y -= 2f;
								}
								if (position.Y > Main.player[target].position.Y + 80f)
								{
									velocity.Y -= 2f;
								}
								if (position.Y > Main.player[target].position.Y + 120f)
								{
									velocity.Y -= 2f;
								}
							}
							else
							{
								velocity.X *= 2f;
								if (velocity.X > 3f)
								{
									velocity.X = 3f;
								}
								if (velocity.X < -3f)
								{
									velocity.X = -3f;
								}
								velocity.Y = -4f;
							}
							netUpdate = true;
						}
					}
					if (type == 120 && velocity.Y < 0f)
					{
						velocity.Y *= 1.1f;
					}
					if (type == 287 && velocity.Y == 0f && Math.Abs(position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) < 150f && Math.Abs(position.Y + (float)(height / 2) - (Main.player[target].position.Y + (float)(Main.player[target].height / 2))) < 50f && ((direction > 0 && velocity.X >= 1f) || (direction < 0 && velocity.X <= -1f)))
					{
						velocity.X = 8 * direction;
						velocity.Y = -4f;
						netUpdate = true;
					}
					if (type == 287 && velocity.Y < 0f)
					{
						velocity.X *= 1.2f;
						velocity.Y *= 1.1f;
					}
					if (type == 460 && velocity.Y < 0f)
					{
						velocity.X *= 1.3f;
						velocity.Y *= 1.1f;
					}
				}
			}
			else if (flag8)
			{
				ai[1] = 0f;
				ai[2] = 0f;
			}
			if (Main.netMode != 1 && type == 120 && ai[3] >= (float)num56)
			{
				int targetTileX = (int)Main.player[target].Center.X / 16;
				int targetTileY = (int)Main.player[target].Center.Y / 16;
				Vector2 chosenTile = Vector2.Zero;
				if (AI_AttemptToFindTeleportSpot(ref chosenTile, targetTileX, targetTileY, 20, 9))
				{
					position.X = chosenTile.X * 16f - (float)(width / 2);
					position.Y = chosenTile.Y * 16f - (float)height;
					ai[3] = -120f;
					netUpdate = true;
				}
			}
		}

		public static bool DespawnEncouragement_AIStyle3_Fighters_NotDiscouraged(int npcID, Vector2 position, NPC npcInstance)
		{
			if (!Main.eclipse && Main.IsItDay() && (npcInstance == null || !npcInstance.SpawnedFromStatue) && !((double)position.Y > Main.worldSurface * 16.0) && (npcInstance == null || !Main.player[npcInstance.target].ZoneGraveyard) && (!Main.snowMoon || (npcID != 343 && npcID != 350)) && (Main.invasionType != 1 || (npcID != 26 && npcID != 27 && npcID != 28 && npcID != 111 && npcID != 471)) && (!Main.dontStarveWorld || (npcID != 164 && npcID != 163)) && npcID != 73 && npcID != 624 && (npcID != 631 || !(npcInstance.ai[2] > 0f)) && (Main.invasionType != 3 || npcID < 212 || npcID > 216) && (Main.invasionType != 4 || (npcID != 381 && npcID != 382 && npcID != 383 && npcID != 385 && npcID != 386 && npcID != 389 && npcID != 391 && npcID != 520)) && npcID != 31 && npcID != 294 && npcID != 295 && npcID != 296 && npcID != 47 && npcID != 67 && npcID != 77 && npcID != 78 && npcID != 79 && npcID != 80 && npcID != 630 && npcID != 110 && npcID != 120 && npcID != 168 && npcID != 181 && npcID != 185 && npcID != 198 && npcID != 199 && npcID != 206 && npcID != 217 && npcID != 218 && npcID != 219 && npcID != 220 && npcID != 239 && npcID != 243 && npcID != 254 && npcID != 255 && npcID != 257 && npcID != 258 && npcID != 291 && npcID != 292 && npcID != 293 && npcID != 379 && npcID != 380 && npcID != 464 && npcID != 470 && npcID != 424 && (npcID != 411 || (npcInstance != null && !(npcInstance.ai[1] >= 180f) && !(npcInstance.ai[1] < 90f))))
			{
				switch (npcID)
				{
				default:
					if (npcID != 528 && npcID != 529 && npcID != 530)
					{
						return npcID == 532;
					}
					break;
				case 409:
				case 415:
				case 419:
				case 425:
				case 427:
				case 428:
				case 429:
				case 508:
				case 524:
				case 525:
				case 526:
				case 527:
				case 580:
				case 582:
					break;
				}
			}
			return true;
		}

		public static bool DespawnEncouragement_AIStyle3_Fighters_CanBeBusyWithAction(int npcID)
		{
			if (npcID != 110 && npcID != 111 && npcID != 206 && npcID != 216 && npcID != 214 && npcID != 215 && npcID != 291 && npcID != 292 && npcID != 293 && npcID != 350 && npcID != 381 && npcID != 382 && npcID != 383 && npcID != 385 && npcID != 386 && npcID != 389 && npcID != 391 && npcID != 469 && npcID != 166 && npcID != 466 && npcID != 471 && npcID != 411 && npcID != 409 && npcID != 424 && npcID != 425 && npcID != 426 && npcID != 415 && npcID != 419)
			{
				return npcID == 520;
			}
			return true;
		}

		private void AI_001_Slimes()
		{
			if (type == 1 && (ai[1] == 1f || ai[1] == 2f || ai[1] == 3f))
			{
				ai[1] = -1f;
			}
			if (type == 1 && ai[1] == 75f)
			{
				float num = 0.3f;
				Lighting.AddLight((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f), 0.8f * num, 0.7f * num, 0.1f * num);
				if (Main.rand.Next(12) == 0)
				{
					Dust dust = Dust.NewDustPerfect(base.Center + new Vector2(0f, (float)height * 0.2f) + Main.rand.NextVector2CircularEdge(width, (float)height * 0.6f) * (0.3f + Main.rand.NextFloat() * 0.5f), 228, new Vector2(0f, (0f - Main.rand.NextFloat()) * 0.3f - 1.5f), 127);
					dust.scale = 0.5f;
					dust.fadeIn = 1.1f;
					dust.noGravity = true;
					dust.noLight = true;
				}
			}
			if (type == 1 && ai[1] == 0f && Main.netMode != 1 && value > 0f)
			{
				ai[1] = -1f;
				if (Main.remixWorld && ai[0] != -999f && Main.rand.Next(3) == 0)
				{
					ai[1] = 75f;
					netUpdate = true;
				}
				else if (Main.rand.Next(20) == 0)
				{
					int num2 = AI_001_Slimes_GenerateItemInsideBody(ai[0] == -999f);
					ai[1] = num2;
					netUpdate = true;
				}
			}
			if (type == 1 && ai[0] == -999f)
			{
				frame.Y = 0;
				frameCounter = 0.0;
				rotation = 0f;
				return;
			}
			if (type == 244)
			{
				float num3 = (float)Main.DiscoR / 255f;
				float num4 = (float)Main.DiscoG / 255f;
				float num5 = (float)Main.DiscoB / 255f;
				num3 *= 1f;
				num4 *= 1f;
				num5 *= 1f;
				Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), num3, num4, num5);
				AI_001_SetRainbowSlimeColor();
			}
			bool flag = false;
			if (!Main.dayTime || life != lifeMax || (double)position.Y > Main.worldSurface * 16.0 || Main.slimeRain)
			{
				flag = true;
			}
			if (Main.remixWorld && type == 59 && life == lifeMax)
			{
				flag = false;
			}
			if (type == 81)
			{
				flag = true;
				if (Main.rand.Next(30) == 0)
				{
					position += netOffset;
					int num6 = Dust.NewDust(position, width, height, 14, 0f, 0f, alpha, this.color);
					Main.dust[num6].velocity *= 0.3f;
					position -= netOffset;
				}
			}
			if ((type == 377 || type == 446) && target != 255 && !Main.player[target].dead && Vector2.Distance(base.Center, Main.player[target].Center) <= 200f && !wet)
			{
				flag = true;
			}
			if (type == 183)
			{
				flag = true;
			}
			if (type == 304)
			{
				flag = true;
			}
			if (type == 667)
			{
				flag = true;
			}
			if (type == 244)
			{
				flag = true;
				ai[0] += 2f;
			}
			if (type == 147 && Main.rand.Next(10) == 0)
			{
				position += netOffset;
				int num7 = Dust.NewDust(position, width, height, 76);
				Main.dust[num7].noGravity = true;
				Main.dust[num7].velocity *= 0.1f;
				position -= netOffset;
			}
			if (type == 667)
			{
				Color color = new Color(204, 181, 72, 255);
				Lighting.AddLight((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f), (float)(int)color.R / 255f * 1.1f, (float)(int)color.G / 255f * 1.1f, (float)(int)color.B / 255f * 1.1f);
				if (velocity.Length() > 1f || Main.rand.Next(4) != 0)
				{
					int num8 = 8;
					Vector2 vector = position + new Vector2(-num8, -num8);
					int num9 = width + num8 * 2;
					int num10 = height + num8 * 2;
					position += netOffset;
					int num11 = Dust.NewDust(vector, num9, num10, 246);
					Main.dust[num11].noGravity = true;
					Main.dust[num11].noLightEmittence = true;
					Main.dust[num11].velocity *= 0.2f;
					Main.dust[num11].scale = 1.5f;
					position -= netOffset;
				}
			}
			if (type == 676)
			{
				Lighting.AddLight(base.Center, 23);
				if ((velocity.Length() > 1f && Main.rand.Next(3) == 0) || Main.rand.Next(5) == 0)
				{
					Dust dust2 = Dust.NewDustPerfect(Main.rand.NextVector2FromRectangle(base.Hitbox), 306);
					dust2.noGravity = true;
					dust2.noLightEmittence = true;
					dust2.alpha = 127;
					dust2.color = Main.hslToRgb(((float)Main.timeForVisualEffects / 300f + Main.rand.NextFloat() * 0.1f) % 1f, 1f, 0.65f);
					dust2.color.A = 0;
					dust2.velocity = dust2.position - base.Center;
					dust2.velocity *= 0.1f;
					dust2.velocity.X *= 0.25f;
					if (dust2.velocity.Y > 0f)
					{
						dust2.velocity.Y *= -1f;
					}
					dust2.scale = Main.rand.NextFloat() * 0.3f + 0.5f;
					dust2.fadeIn = 0.9f;
					dust2.position += netOffset;
				}
			}
			if (type == 184)
			{
				if (Main.rand.Next(8) == 0)
				{
					position += netOffset;
					int num12 = Dust.NewDust(position - velocity, width, height, 76);
					Main.dust[num12].noGravity = true;
					Main.dust[num12].velocity *= 0.15f;
					position -= netOffset;
				}
				flag = true;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (!wet && !Main.player[target].npcTypeNoAggro[type])
				{
					Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num13 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector2.X;
					float num14 = Main.player[target].position.Y - vector2.Y;
					float num15 = (float)Math.Sqrt(num13 * num13 + num14 * num14);
					if (Main.expertMode && num15 < 120f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							for (int i = 0; i < 5; i++)
							{
								Vector2 vector3 = new Vector2(i - 2, -4f);
								vector3.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector3.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector3.Normalize();
								vector3 *= 4f + (float)Main.rand.Next(-50, 51) * 0.01f;
								int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(9f, 9f);
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector2.X, vector2.Y, vector3.X, vector3.Y, 174, attackDamage_ForProjectiles, 0f, Main.myPlayer);
								localAI[0] = 30f;
							}
						}
					}
					else if (num15 < 200f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							num14 = Main.player[target].position.Y - vector2.Y - (float)Main.rand.Next(0, 200);
							num15 = (float)Math.Sqrt(num13 * num13 + num14 * num14);
							num15 = 4.5f / num15;
							num13 *= num15;
							num14 *= num15;
							localAI[0] = 50f;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector2.X, vector2.Y, num13, num14, 174, 9, 0f, Main.myPlayer);
						}
					}
				}
			}
			if (type == 535)
			{
				flag = true;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (!wet && !Main.player[target].npcTypeNoAggro[type])
				{
					Vector2 vector4 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num16 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector4.X;
					float num17 = Main.player[target].position.Y - vector4.Y;
					float num18 = (float)Math.Sqrt(num16 * num16 + num17 * num17);
					if (Main.expertMode && num18 < 120f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							for (int j = 0; j < 5; j++)
							{
								Vector2 vector5 = new Vector2(j - 2, -4f);
								vector5.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector5.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector5.Normalize();
								vector5 *= 4f + (float)Main.rand.Next(-50, 51) * 0.01f;
								int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(9f, 9f);
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector4.X, vector4.Y, vector5.X, vector5.Y, 605, attackDamage_ForProjectiles2, 0f, Main.myPlayer);
								localAI[0] = 30f;
							}
						}
					}
					else if (num18 < 200f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							num17 = Main.player[target].position.Y - vector4.Y - (float)Main.rand.Next(0, 200);
							num18 = (float)Math.Sqrt(num16 * num16 + num17 * num17);
							num18 = 4.5f / num18;
							num16 *= num18;
							num17 *= num18;
							localAI[0] = 50f;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector4.X, vector4.Y, num16, num17, 605, 9, 0f, Main.myPlayer);
						}
					}
				}
			}
			if (type == 658)
			{
				flag = true;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (!wet && Main.player[target].active && !Main.player[target].dead && !Main.player[target].npcTypeNoAggro[type])
				{
					Player obj = Main.player[target];
					Vector2 center = base.Center;
					float num19 = obj.Center.X - center.X;
					float num20 = obj.Center.Y - center.Y;
					float num21 = (float)Math.Sqrt(num19 * num19 + num20 * num20);
					int num22 = CountNPCS(658);
					if (Main.expertMode && num22 < 5 && Math.Abs(num19) < 500f && Math.Abs(num20) < 550f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							for (int k = 0; k < 3; k++)
							{
								Vector2 vector6 = new Vector2(k - 1, -4f);
								vector6.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector6.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector6.Normalize();
								vector6 *= 6f + (float)Main.rand.Next(-50, 51) * 0.01f;
								if (num21 > 350f)
								{
									vector6 *= 2f;
								}
								else if (num21 > 250f)
								{
									vector6 *= 1.5f;
								}
								int attackDamage_ForProjectiles_MultiLerp = GetAttackDamage_ForProjectiles_MultiLerp(15f, 17f, 20f);
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center.X, center.Y, vector6.X, vector6.Y, 920, attackDamage_ForProjectiles_MultiLerp, 0f, Main.myPlayer);
								localAI[0] = 25f;
								if (num22 > 4)
								{
									break;
								}
							}
						}
					}
					else if (Math.Abs(num19) < 500f && Math.Abs(num20) < 550f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						float num23 = num21;
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							num20 = Main.player[target].position.Y - center.Y - (float)Main.rand.Next(0, 200);
							num21 = (float)Math.Sqrt(num19 * num19 + num20 * num20);
							num21 = 4.5f / num21;
							num21 *= 2f;
							if (num23 > 350f)
							{
								num21 *= 2f;
							}
							else if (num23 > 250f)
							{
								num21 *= 1.5f;
							}
							num19 *= num21;
							num20 *= num21;
							localAI[0] = 50f;
							int attackDamage_ForProjectiles_MultiLerp2 = GetAttackDamage_ForProjectiles_MultiLerp(15f, 17f, 20f);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center.X, center.Y, num19, num20, 920, attackDamage_ForProjectiles_MultiLerp2, 0f, Main.myPlayer);
						}
					}
				}
			}
			if (type == 659)
			{
				flag = true;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (!wet && Main.player[target].active && !Main.player[target].dead && !Main.player[target].npcTypeNoAggro[type])
				{
					Player obj2 = Main.player[target];
					Vector2 center2 = base.Center;
					float num24 = obj2.Center.X - center2.X;
					float num25 = obj2.Center.Y - center2.Y;
					float num26 = (float)Math.Sqrt(num24 * num24 + num25 * num25);
					float num27 = num26;
					if (Math.Abs(num24) < 500f && Math.Abs(num25) < 550f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							num25 = Main.player[target].position.Y - center2.Y - (float)Main.rand.Next(0, 200);
							num26 = (float)Math.Sqrt(num24 * num24 + num25 * num25);
							num26 = 4.5f / num26;
							num26 *= 2f;
							if (num27 > 350f)
							{
								num26 *= 1.75f;
							}
							else if (num27 > 250f)
							{
								num26 *= 1.25f;
							}
							num24 *= num26;
							num25 *= num26;
							localAI[0] = 40f;
							if (Main.expertMode)
							{
								localAI[0] = 30f;
							}
							int attackDamage_ForProjectiles_MultiLerp3 = GetAttackDamage_ForProjectiles_MultiLerp(15f, 17f, 20f);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center2.X, center2.Y, num24, num25, 921, attackDamage_ForProjectiles_MultiLerp3, 0f, Main.myPlayer);
						}
					}
				}
			}
			if (type == 204)
			{
				flag = true;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (!wet && !Main.player[target].npcTypeNoAggro[type])
				{
					Vector2 vector7 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num28 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector7.X;
					float num29 = Main.player[target].position.Y - vector7.Y;
					float num30 = (float)Math.Sqrt(num28 * num28 + num29 * num29);
					if (Main.expertMode && num30 < 200f && Collision.CanHit(new Vector2(position.X, position.Y - 20f), width, height + 20, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							for (int l = 0; l < 5; l++)
							{
								Vector2 vector8 = new Vector2(l - 2, -2f);
								vector8.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.02f;
								vector8.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.02f;
								vector8.Normalize();
								vector8 *= 3f + (float)Main.rand.Next(-50, 51) * 0.01f;
								int attackDamage_ForProjectiles3 = GetAttackDamage_ForProjectiles(13f, 13f);
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector7.X, vector7.Y, vector8.X, vector8.Y, 176, attackDamage_ForProjectiles3, 0f, Main.myPlayer);
								localAI[0] = 80f;
							}
						}
					}
					if (num30 < 400f && Collision.CanHit(new Vector2(position.X, position.Y - 20f), width, height + 20, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -80f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							num29 = Main.player[target].position.Y - vector7.Y - (float)Main.rand.Next(-30, 20);
							num29 -= num30 * 0.05f;
							num28 = Main.player[target].position.X - vector7.X - (float)Main.rand.Next(-20, 20);
							num30 = (float)Math.Sqrt(num28 * num28 + num29 * num29);
							num30 = 7f / num30;
							num28 *= num30;
							num29 *= num30;
							localAI[0] = 65f;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector7.X, vector7.Y, num28, num29, 176, 13, 0f, Main.myPlayer);
						}
					}
				}
			}
			if (type == 377 || type == 446)
			{
				if (localAI[2] < 90f)
				{
					localAI[2] += 1f;
				}
				else
				{
					friendly = false;
				}
			}
			if (type == 59)
			{
				position += netOffset;
				Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 1f, 0.3f, 0.1f);
				int num31 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 1.7f);
				Main.dust[num31].noGravity = true;
				position -= netOffset;
			}
			if (ai[2] > 1f)
			{
				ai[2] -= 1f;
			}
			if (wet)
			{
				if (collideY)
				{
					velocity.Y = -2f;
				}
				if (velocity.Y < 0f && ai[3] == position.X)
				{
					direction *= -1;
					ai[2] = 200f;
				}
				if (velocity.Y > 0f)
				{
					ai[3] = position.X;
				}
				if (type == 59 && !Main.remixWorld)
				{
					if (velocity.Y > 2f)
					{
						velocity.Y *= 0.9f;
					}
					else if (directionY < 0)
					{
						velocity.Y -= 0.8f;
					}
					velocity.Y -= 0.5f;
					if (velocity.Y < -10f)
					{
						velocity.Y = -10f;
					}
				}
				else
				{
					if (velocity.Y > 2f)
					{
						velocity.Y *= 0.9f;
					}
					velocity.Y -= 0.5f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				if (ai[2] == 1f && flag)
				{
					TargetClosest();
				}
			}
			aiAction = 0;
			if (ai[2] == 0f)
			{
				ai[0] = -100f;
				ai[2] = 1f;
				TargetClosest();
			}
			if (velocity.Y == 0f)
			{
				if (collideY && oldVelocity.Y != 0f && Collision.SolidCollision(position, width, height))
				{
					position.X -= velocity.X + (float)direction;
				}
				if (ai[3] == position.X)
				{
					direction *= -1;
					ai[2] = 200f;
				}
				ai[3] = 0f;
				velocity.X *= 0.8f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				if (flag)
				{
					ai[0] += 1f;
				}
				ai[0] += 1f;
				if (type == 59 && !Main.remixWorld)
				{
					ai[0] += 2f;
				}
				if (type == 71)
				{
					ai[0] += 3f;
				}
				if (type == 667)
				{
					ai[0] += 3f;
				}
				if (type == 138)
				{
					ai[0] += 2f;
				}
				if (type == 183)
				{
					ai[0] += 1f;
				}
				if (type == 658)
				{
					ai[0] += 5f;
				}
				if (type == 659)
				{
					ai[0] += 3f;
				}
				if (type == 304)
				{
					float num32 = (1 - life / lifeMax) * 10;
					ai[0] += num32;
				}
				if (type == 377 || type == 446)
				{
					ai[0] += 3f;
				}
				if (type == 81)
				{
					if (scale >= 0f)
					{
						ai[0] += 4f;
					}
					else
					{
						ai[0] += 1f;
					}
				}
				float num33 = -1000f;
				if (type == 659)
				{
					num33 = -500f;
				}
				if (type == 667)
				{
					num33 = -400f;
				}
				int num34 = 0;
				if (ai[0] >= 0f)
				{
					num34 = 1;
				}
				if (ai[0] >= num33 && ai[0] <= num33 * 0.5f)
				{
					num34 = 2;
				}
				if (ai[0] >= num33 * 2f && ai[0] <= num33 * 1.5f)
				{
					num34 = 3;
				}
				if (num34 > 0)
				{
					netUpdate = true;
					if (flag && ai[2] == 1f)
					{
						TargetClosest();
					}
					if (num34 == 3)
					{
						velocity.Y = -8f;
						if (type == 59 && !Main.remixWorld)
						{
							velocity.Y -= 2f;
						}
						velocity.X += 3 * direction;
						if (type == 59 && !Main.remixWorld)
						{
							velocity.X += 0.5f * (float)direction;
						}
						ai[0] = -200f;
						ai[3] = position.X;
					}
					else
					{
						velocity.Y = -6f;
						velocity.X += 2 * direction;
						if (type == 59 && !Main.remixWorld)
						{
							velocity.X += 2 * direction;
						}
						ai[0] = -120f;
						if (num34 == 1)
						{
							ai[0] += num33;
						}
						else
						{
							ai[0] += num33 * 2f;
						}
					}
					if (type == 659)
					{
						velocity.Y *= 1.6f;
						velocity.X *= 1.2f;
					}
					if (type == 685)
					{
						velocity.Y *= 0.5f;
						velocity.X *= 0.2f;
						if (Main.rand.Next(2) == 0)
						{
							direction *= -1;
						}
					}
					if (type == 141)
					{
						velocity.Y *= 1.3f;
						velocity.X *= 1.2f;
					}
					if (type == 377 || type == 446)
					{
						velocity.Y *= 0.9f;
						velocity.X *= 0.6f;
						if (flag)
						{
							direction = -direction;
							velocity.X *= -1f;
						}
						int i2 = (int)(base.Center.X / 16f);
						int j2 = (int)(base.Center.Y / 16f) - 1;
						if (WorldGen.SolidTile(i2, j2) && 0f - velocity.Y + (float)height > 16f)
						{
							velocity.Y = -(16 - height);
						}
					}
				}
				else if (ai[0] >= -30f)
				{
					aiAction = 1;
				}
			}
			else if (target < 255 && ((direction == 1 && velocity.X < 3f) || (direction == -1 && velocity.X > -3f)))
			{
				if (collideX && Math.Abs(velocity.X) == 0.2f)
				{
					position.X -= 1.4f * (float)direction;
				}
				if (collideY && oldVelocity.Y != 0f && Collision.SolidCollision(position, width, height))
				{
					position.X -= velocity.X + (float)direction;
				}
				if ((direction == -1 && (double)velocity.X < 0.01) || (direction == 1 && (double)velocity.X > -0.01))
				{
					velocity.X += 0.2f * (float)direction;
				}
				else
				{
					velocity.X *= 0.93f;
				}
			}
		}

		public void AI_001_SetRainbowSlimeColor()
		{
			color.R = (byte)Main.DiscoR;
			color.G = (byte)Main.DiscoG;
			color.B = (byte)Main.DiscoB;
			color.A = 100;
			alpha = 175;
		}

		private static int AI_001_Slimes_GenerateItemInsideBody(bool isBallooned)
		{
			int num = Main.rand.Next(4);
			if (isBallooned)
			{
				switch (Main.rand.Next(13))
				{
				default:
					return 4367;
				case 1:
					return 4368;
				case 2:
					return 4369;
				case 3:
					return 4370;
				case 4:
					return 4371;
				case 5:
					return 4612;
				case 6:
					return 4674;
				case 7:
				case 8:
				case 9:
					return 4343;
				case 10:
				case 11:
				case 12:
					return 4344;
				}
			}
			switch (num)
			{
			case 0:
				switch (Main.rand.Next(7))
				{
				case 0:
					return 290;
				case 1:
					return 292;
				case 2:
					return 296;
				case 3:
					return 2322;
				default:
					if (Main.netMode != 0 && Main.rand.Next(2) == 0)
					{
						return 2997;
					}
					return 2350;
				}
			case 1:
				return Main.rand.Next(4) switch
				{
					0 => 8, 
					1 => 166, 
					2 => 965, 
					_ => 58, 
				};
			case 2:
				if (Main.rand.Next(2) == 0)
				{
					return Main.rand.Next(11, 15);
				}
				return Main.rand.Next(699, 703);
			default:
				return Main.rand.Next(3) switch
				{
					0 => 71, 
					1 => 72, 
					_ => 73, 
				};
			}
		}

		private void AI_110_Betsy()
		{
			//IL_0486: Unknown result type (might be due to invalid IL or missing references)
			//IL_04f4: Unknown result type (might be due to invalid IL or missing references)
			//IL_0693: Unknown result type (might be due to invalid IL or missing references)
			//IL_0698: Unknown result type (might be due to invalid IL or missing references)
			//IL_0b13: Unknown result type (might be due to invalid IL or missing references)
			//IL_0c83: Unknown result type (might be due to invalid IL or missing references)
			//IL_10a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_117f: Unknown result type (might be due to invalid IL or missing references)
			//IL_1363: Unknown result type (might be due to invalid IL or missing references)
			//IL_1376: Unknown result type (might be due to invalid IL or missing references)
			//IL_137b: Unknown result type (might be due to invalid IL or missing references)
			NPCUtils.TargetClosestBetsy(this, faceTarget: false);
			NPCAimedTarget targetData = GetTargetData();
			int num = -1;
			float num2 = 1f;
			int num3 = 35;
			int num4 = 35;
			float num5 = 10f;
			float num6 = 0.45f;
			float num7 = 7.5f;
			float num8 = 30f;
			float num9 = 30f;
			float num10 = 23f;
			float num11 = 600f;
			float num12 = 12f;
			float num13 = 40f;
			float num14 = 80f;
			float num15 = num13 + num14;
			float num16 = 1500f;
			float num17 = 60f;
			float num18 = 13f;
			float amount = 1f / 30f;
			float num19 = 12f;
			int num20 = 10;
			int num21 = 6 * num20;
			float num22 = 60f;
			float num23 = num17 + (float)num21 + num22;
			float num24 = 60f;
			float num25 = 1f;
			float num26 = MathF.PI * 2f * (num25 / num24);
			float num27 = 0.1f;
			float num28 = 32f;
			float num29 = 90f;
			float num30 = 20f;
			_ = ai[0];
			_ = -1f;
			SlotId val;
			if (ai[0] == 0f)
			{
				if ((ai[1] += 1f) >= num5)
				{
					ai[1] = 0f;
					ai[0] = 1f;
					ai[2] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 1f)
			{
				if (ai[2] == 0f)
				{
					ai[2] = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
				}
				Vector2 destination = targetData.Center + new Vector2((0f - ai[2]) * 300f, -200f);
				Vector2 desiredVelocity = DirectionTo(destination) * num7;
				SimpleFlyMovement(desiredVelocity, num6);
				int num31 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
				direction = (spriteDirection = num31);
				if ((ai[1] += 1f) >= num8)
				{
					int num32 = 1;
					if (ai[3] == 5f && Main.rand.Next(3) == 0)
					{
						ai[3] += 1f;
					}
					switch ((int)ai[3])
					{
					case 0:
					case 1:
					case 3:
						num32 = 2;
						break;
					case 2:
						num32 = 3;
						break;
					case 4:
						num32 = 4;
						break;
					case 5:
						num32 = 5;
						break;
					case 6:
						num32 = 3;
						break;
					case 7:
						num32 = 6;
						break;
					}
					ai[0] = num32;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] += 1f;
					netUpdate = true;
					if (ai[3] >= 8f)
					{
						ai[3] = 0f;
					}
					switch (num32)
					{
					case 2:
					{
						Vector2 vector2 = DirectionTo(targetData.Center);
						spriteDirection = ((vector2.X > 0f) ? 1 : (-1));
						rotation = vector2.ToRotation();
						if (spriteDirection == -1)
						{
							rotation += MathF.PI;
						}
						velocity = vector2 * num10;
						break;
					}
					case 3:
					{
						Vector2 vector3 = new Vector2((targetData.Center.X > base.Center.X) ? 1 : (-1), 0f);
						spriteDirection = ((vector3.X > 0f) ? 1 : (-1));
						velocity = vector3 * -2f;
						break;
					}
					case 5:
					{
						Vector2 vector = DirectionTo(targetData.Center);
						spriteDirection = ((vector.X > 0f) ? 1 : (-1));
						rotation = vector.ToRotation();
						if (spriteDirection == -1)
						{
							rotation += MathF.PI;
						}
						velocity = vector * num28;
						break;
					}
					}
				}
			}
			else if (ai[0] == 2f)
			{
				if (ai[1] == 0f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyWindAttack, base.Center);
				}
				if ((ai[1] += 1f) >= num9)
				{
					ai[0] = 1f;
					ai[1] = 0f;
					ai[2] = 0f;
				}
			}
			else if (ai[0] == 3f)
			{
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]));
				if (activeSound != null)
				{
					activeSound.Position = base.Center;
				}
				ai[1] += 1f;
				int num33 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
				ai[2] = num33;
				if (ai[1] < num13)
				{
					Vector2 vector4 = targetData.Center + new Vector2((float)num33 * (0f - num11), -250f);
					Vector2 vector5 = DirectionTo(vector4) * num12;
					if (Distance(vector4) < num12)
					{
						base.Center = vector4;
					}
					else
					{
						position += vector5;
					}
					if (Vector2.Distance(vector4, base.Center) < 16f)
					{
						ai[1] = num13 - 1f;
					}
					num2 = 1.5f;
				}
				if (ai[1] == num13)
				{
					int num34 = ((targetData.Center.X > base.Center.X) ? 1 : (-1));
					velocity = new Vector2(num34, 0f) * 10f;
					direction = (spriteDirection = num34);
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center, velocity, 687, num3, 0f, Main.myPlayer, 0f, whoAmI);
					}
					float[] array = localAI;
					val = SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyFlameBreath, base.Center);
					array[2] = ((SlotId)(ref val)).ToFloat();
				}
				if (ai[1] >= num13)
				{
					num2 = 1.5f;
					if (Math.Abs(targetData.Center.X - base.Center.X) > 550f && Math.Abs(velocity.X) < 20f)
					{
						velocity.X += (float)Math.Sign(velocity.X) * 0.5f;
					}
				}
				if (ai[1] >= num15)
				{
					ai[0] = 1f;
					ai[1] = 0f;
					ai[2] = 0f;
				}
			}
			else if (ai[0] == 4f)
			{
				int num35 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
				ai[2] = num35;
				if (ai[1] < num17)
				{
					Vector2 vector6 = targetData.Center + new Vector2((float)num35 * (0f - num16), -350f);
					Vector2 value = DirectionTo(vector6) * num18;
					velocity = Vector2.Lerp(velocity, value, amount);
					int num36 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
					direction = (spriteDirection = num36);
					if (Vector2.Distance(vector6, base.Center) < 16f)
					{
						ai[1] = num17 - 1f;
					}
					num2 = 1.5f;
				}
				else if (ai[1] == num17)
				{
					Vector2 v = DirectionTo(targetData.Center);
					v.Y *= 0.25f;
					v = v.SafeNormalize(Vector2.UnitX * direction);
					spriteDirection = ((v.X > 0f) ? 1 : (-1));
					rotation = v.ToRotation();
					if (spriteDirection == -1)
					{
						rotation += MathF.PI;
					}
					velocity = v * num19;
				}
				else
				{
					position.X += DirectionTo(targetData.Center).X * 7f;
					position.Y += DirectionTo(targetData.Center + new Vector2(0f, -400f)).Y * 6f;
					if (ai[1] <= num23 - num22)
					{
						num2 = 1.5f;
					}
					float num37 = 30f;
					Vector2 vector7 = base.Center + new Vector2((110f + num37) * (float)direction, 20f).RotatedBy(rotation);
					int num38 = (int)(ai[1] - num17 + 1f);
					if (num38 <= num21 && num38 % num20 == 0 && Main.netMode != 1)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector7, velocity, 686, num4, 0f, Main.myPlayer);
					}
				}
				if (ai[1] > num23 - num22)
				{
					velocity.Y -= 0.1f;
				}
				ai[1] += 1f;
				if (ai[1] >= num23)
				{
					ai[0] = 1f;
					ai[1] = 0f;
					ai[2] = 0f;
				}
			}
			else if (ai[0] == 5f)
			{
				velocity = velocity.RotatedBy((0f - num26) * (float)direction);
				position.Y -= num27;
				position += DirectionTo(targetData.Center) * 10f;
				rotation -= num26 * (float)direction;
				num2 *= 0.7f;
				if (ai[1] == 1f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyFlyingCircleAttack, base.Center);
				}
				if ((ai[1] += 1f) >= num24)
				{
					ai[0] = 1f;
					ai[1] = 0f;
					ai[2] = 0f;
					velocity /= 2f;
				}
			}
			else if (ai[0] == 6f)
			{
				if (ai[1] == 0f)
				{
					Vector2 destination2 = targetData.Center + new Vector2(0f, -200f);
					Vector2 desiredVelocity2 = DirectionTo(destination2) * num7 * 2f;
					SimpleFlyMovement(desiredVelocity2, num6 * 2f);
					int num39 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
					direction = (spriteDirection = num39);
					ai[2] += 1f;
					if (Distance(targetData.Center) < 350f || ai[2] >= 180f)
					{
						ai[1] = 1f;
						netUpdate = true;
					}
				}
				else
				{
					if (ai[1] == 1f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyScream);
					}
					if (ai[1] < num30)
					{
						velocity *= 0.95f;
					}
					else
					{
						velocity *= 0.98f;
					}
					if (ai[1] == num30)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y /= 3f;
						}
						velocity.Y -= 3f;
					}
					num2 *= 0.85f;
					if (ai[1] == 20f || ai[1] == 25f || ai[1] == 30f)
					{
						Point point = base.Center.ToTileCoordinates();
						int num40 = 30;
						int num41 = 35;
						int num42 = 4;
						for (int i = point.X - num40; i <= point.X + num40; i++)
						{
							bool flag = false;
							for (int j = point.Y - num41 / 3; j < point.Y + num41; j++)
							{
								Tile tileSafely = Framing.GetTileSafely(i, j);
								bool flag2 = tileSafely.active() && Main.tileSolid[tileSafely.type] && !Main.tileFrameImportant[tileSafely.type];
								if (flag && flag2)
								{
									int num43 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely);
									for (int k = 0; k < num43; k++)
									{
										Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
										obj.velocity.Y -= 3f + (float)num42 * 1.5f;
										obj.velocity.Y *= Main.rand.NextFloat();
										obj.scale += (float)num42 * 0.03f;
									}
									for (int l = 0; l < num43 - 1; l++)
									{
										Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
										obj2.velocity.Y -= 1f + (float)num42;
										obj2.velocity.Y *= Main.rand.NextFloat();
									}
									if (num43 > 0 && Main.rand.Next(3) != 0)
									{
										float num44 = Math.Abs(point.X - i) / (num40 / 2);
										Gore gore = Gore.NewGoreDirect(position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num42 * 0.15f + num44 * 0.5f);
										gore.velocity.Y -= 0.1f + (float)num42 * 0.5f + num44 * (float)num42 * 1f;
										gore.velocity.Y *= Main.rand.NextFloat();
										gore.position = new Vector2(i * 16 + 20, j * 16 + 20);
									}
								}
								flag = !flag2;
							}
						}
					}
					bool flag3 = ai[1] == 20f || ai[1] == 45f || ai[1] == 70f;
					if (CountNPCS(560) > 4)
					{
						flag3 = false;
					}
					if (flag3 && Main.netMode != 1)
					{
						for (int m = 0; m < 1; m++)
						{
							Vector2 vector8 = base.Center + (MathF.PI * 2f * Main.rand.NextFloat()).ToRotationVector2() * new Vector2(2f, 1f) * 300f * (0.6f + Main.rand.NextFloat() * 0.4f);
							if (Vector2.Distance(vector8, targetData.Center) > 100f)
							{
								Point point2 = vector8.ToPoint();
								NewNPC(GetSpawnSourceForNPCFromNPCAI(), point2.X, point2.Y, 560, whoAmI);
								SoundEngine.PlayTrackedSound(SoundID.DD2_BetsySummon, vector8);
							}
						}
						List<NPC> list = new List<NPC>();
						for (int n = 0; n < 200; n++)
						{
							NPC nPC = Main.npc[n];
							if (nPC.active && nPC.type == 549)
							{
								list.Add(nPC);
							}
						}
						if (list.Count > 0)
						{
							for (int num45 = 0; num45 < 3; num45++)
							{
								NPC nPC2 = list[Main.rand.Next(list.Count)];
								Point point3 = nPC2.Center.ToPoint();
								NewNPC(GetSpawnSourceForNPCFromNPCAI(), point3.X, point3.Y, 560);
								SoundEngine.PlayTrackedSound(SoundID.DD2_BetsySummon, nPC2.Center);
							}
						}
					}
					ai[1] += 1f;
				}
				if (ai[1] >= num29)
				{
					ai[0] = 1f;
					ai[1] = 0f;
					ai[2] = 0f;
				}
			}
			localAI[0] += num2;
			if (localAI[0] >= 36f)
			{
				localAI[0] = 0f;
			}
			if (num != -1)
			{
				localAI[0] = num * 4;
			}
			if ((localAI[1] += 1f) >= 60f)
			{
				localAI[1] = 0f;
			}
			float num46 = DirectionTo(targetData.Center).ToRotation();
			float num47 = 0.04f;
			switch ((int)ai[0])
			{
			case 2:
			case 5:
				num47 = 0f;
				break;
			case 3:
				num47 = 0.01f;
				num46 = 0f;
				if (spriteDirection == -1)
				{
					num46 -= MathF.PI;
				}
				if (ai[1] >= num13)
				{
					num46 += (float)spriteDirection * MathF.PI / 12f;
					num47 = 0.05f;
				}
				break;
			case 4:
				num47 = 0.01f;
				num46 = MathF.PI;
				if (spriteDirection == 1)
				{
					num46 += MathF.PI;
				}
				break;
			case 6:
				num47 = 0.02f;
				num46 = 0f;
				if (spriteDirection == -1)
				{
					num46 -= MathF.PI;
				}
				break;
			}
			if (spriteDirection == -1)
			{
				num46 += MathF.PI;
			}
			if (num47 != 0f)
			{
				rotation = rotation.AngleTowards(num46, num47);
			}
			if (SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2])) == null)
			{
				float[] array2 = localAI;
				val = SlotId.Invalid;
				array2[2] = ((SlotId)(ref val)).ToFloat();
			}
		}

		private void AI_026_Unicorns()
		{
			int num = 30;
			int num2 = 10;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			if (velocity.Y == 0f && ((velocity.X > 0f && direction < 0) || (velocity.X < 0f && direction > 0)))
			{
				flag2 = true;
				ai[3] += 1f;
			}
			if (type == 546)
			{
				num2 = 4;
				bool flag4 = velocity.Y == 0f;
				for (int i = 0; i < 200; i++)
				{
					if (i != whoAmI && Main.npc[i].active && Main.npc[i].type == type && Math.Abs(position.X - Main.npc[i].position.X) + Math.Abs(position.Y - Main.npc[i].position.Y) < (float)width)
					{
						if (position.X < Main.npc[i].position.X)
						{
							velocity.X -= 0.05f;
						}
						else
						{
							velocity.X += 0.05f;
						}
						if (position.Y < Main.npc[i].position.Y)
						{
							velocity.Y -= 0.05f;
						}
						else
						{
							velocity.Y += 0.05f;
						}
					}
				}
				if (flag4)
				{
					velocity.Y = 0f;
				}
			}
			if (type == 315)
			{
				int num3 = 480;
				if (localAI[0]++ >= (float)num3)
				{
					localAI[0] = 0f;
					int num4 = target;
					if (Main.netMode != 1 && num4 != 255)
					{
						int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(40f, 30f);
						Projectile.NewProjectile(GetSpawnSourceForNPCFromNPCAI(), base.Center + Main.rand.NextVector2Circular(40f, 40f), new Vector2(velocity.X, Main.rand.NextFloatDirection() * 3f), 1001, attackDamage_ForProjectiles, 0f, Main.myPlayer, num4);
					}
				}
				Lighting.AddLight(base.Center, 0.4f, 0.36f, 0.2f);
				int num5 = frame.Height;
				if (num5 < 1)
				{
					num5 = 1;
				}
				int num6 = frame.Y / num5;
				if (num6 >= 4 && num6 <= 7)
				{
					Vector2 vector = base.Bottom + new Vector2(-30f, -8f);
					Vector2 vector2 = new Vector2(60f, 8f);
					if (Main.rand.Next(3) != 0)
					{
						Dust dust = Dust.NewDustPerfect(vector + new Vector2(Main.rand.NextFloat() * vector2.X, Main.rand.NextFloat() * vector2.Y), 6, velocity);
						dust.scale = 0.6f;
						dust.fadeIn = 1.1f;
						dust.noGravity = true;
						dust.noLight = true;
					}
				}
			}
			if (position.X == oldPosition.X || ai[3] >= (float)num || flag2)
			{
				ai[3] += 1f;
				flag3 = true;
			}
			else if (ai[3] > 0f)
			{
				ai[3] -= 1f;
			}
			if (ai[3] > (float)(num * num2))
			{
				ai[3] = 0f;
			}
			if (justHit)
			{
				ai[3] = 0f;
			}
			if (ai[3] == (float)num)
			{
				netUpdate = true;
			}
			Vector2 vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num7 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector3.X;
			float num8 = Main.player[target].position.Y - vector3.Y;
			float num9 = (float)Math.Sqrt(num7 * num7 + num8 * num8);
			if (num9 < 200f && !flag3)
			{
				ai[3] = 0f;
			}
			if (type == 410)
			{
				ai[1] += 1f;
				bool flag5 = ai[1] >= 240f;
				if (!flag5 && velocity.Y == 0f)
				{
					for (int j = 0; j < 255; j++)
					{
						if (Main.player[j].active && !Main.player[j].dead && Main.player[j].Distance(base.Center) < 800f && Main.player[j].Center.Y < base.Center.Y && Math.Abs(Main.player[j].Center.X - base.Center.X) < 20f)
						{
							flag5 = true;
							break;
						}
					}
				}
				if (flag5 && Main.netMode != 1)
				{
					for (int k = 0; k < 3; k++)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, (Main.rand.NextFloat() - 0.5f) * 2f, -4f - 10f * Main.rand.NextFloat(), 538, 50, 0f, Main.myPlayer);
					}
					HitEffect(9999);
					active = false;
					return;
				}
			}
			else if (type == 423)
			{
				if (ai[2] == 1f)
				{
					ai[1] += 1f;
					velocity.X *= 0.7f;
					if (ai[1] < 30f)
					{
						Vector2 vector4 = base.Center + Vector2.UnitX * spriteDirection * -20f;
						Dust obj = Main.dust[Dust.NewDust(vector4, 0, 0, 242)];
						Vector2 vector5 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						obj.position = vector4 + vector5 * 20f;
						obj.velocity = -vector5 * 2f;
						obj.scale = 0.5f + vector5.X * (float)(-spriteDirection);
						obj.fadeIn = 1f;
						obj.noGravity = true;
					}
					else if (ai[1] == 30f)
					{
						for (int l = 0; l < 20; l++)
						{
							Vector2 vector6 = base.Center + Vector2.UnitX * spriteDirection * -20f;
							Dust obj2 = Main.dust[Dust.NewDust(vector6, 0, 0, 242)];
							Vector2 vector7 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							obj2.position = vector6 + vector7 * 4f;
							obj2.velocity = vector7 * 4f + Vector2.UnitX * Main.rand.NextFloat() * spriteDirection * -5f;
							obj2.scale = 0.5f + vector7.X * (float)(-spriteDirection);
							obj2.fadeIn = 1f;
							obj2.noGravity = true;
						}
					}
					if (velocity.X > -0.5f && velocity.X < 0.5f)
					{
						velocity.X = 0f;
					}
					if (ai[1] == 30f && Main.netMode != 1)
					{
						int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(50f, 35f);
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * -20), base.Center.Y, spriteDirection * -7, 0f, 575, attackDamage_ForProjectiles2, 0f, Main.myPlayer, target);
					}
					if (ai[1] >= 60f)
					{
						ai[1] = -Main.rand.Next(320, 601);
						ai[2] = 0f;
					}
				}
				else
				{
					ai[1] += 1f;
					if (ai[1] >= 180f && num9 < 500f && velocity.Y == 0f)
					{
						flag = true;
						ai[1] = 0f;
						ai[2] = 1f;
						netUpdate = true;
					}
					else if (velocity.Y == 0f && num9 < 100f && Math.Abs(velocity.X) > 3f && ((base.Center.X < Main.player[target].Center.X && velocity.X > 0f) || (base.Center.X > Main.player[target].Center.X && velocity.X < 0f)))
					{
						velocity.Y -= 4f;
					}
				}
			}
			else if (type == 155 || type == 329)
			{
				if (velocity.Y == 0f && num9 < 100f && Math.Abs(velocity.X) > 3f && ((position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2) && velocity.X > 0f) || (position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2) && velocity.X < 0f)))
				{
					velocity.Y -= 4f;
				}
			}
			else if (type == 546 && velocity.Y == 0f && Math.Abs(velocity.X) > 3f && ((base.Center.X < Main.player[target].Center.X && velocity.X > 0f) || (base.Center.X > Main.player[target].Center.X && velocity.X < 0f)))
			{
				velocity.Y -= 4f;
				SoundEngine.PlaySound(3, base.Center, 11);
			}
			if (type == 546 && !Main.player[target].ZoneDesert)
			{
				int num10 = direction;
				TargetClosest();
				if (!Main.player[target].ZoneDesert)
				{
					EncourageDespawn(10);
					ai[3] = num;
					direction = num10;
				}
			}
			if (ai[3] < (float)num)
			{
				if ((type == 329 || type == 315) && !Main.pumpkinMoon)
				{
					EncourageDespawn(10);
				}
				else
				{
					TargetClosest();
				}
			}
			else
			{
				if (velocity.X == 0f)
				{
					if (velocity.Y == 0f)
					{
						ai[0] += 1f;
						if (ai[0] >= 2f)
						{
							direction *= -1;
							spriteDirection = direction;
							ai[0] = 0f;
						}
					}
				}
				else
				{
					ai[0] = 0f;
				}
				directionY = -1;
				if (direction == 0)
				{
					direction = 1;
				}
			}
			float num11 = 6f;
			float num12 = 0.07f;
			if (!flag && (velocity.Y == 0f || wet || (velocity.X <= 0f && direction < 0) || (velocity.X >= 0f && direction > 0)))
			{
				if (type == 155)
				{
					if (velocity.X > 0f && direction < 0)
					{
						velocity.X *= 0.95f;
					}
					if (velocity.X < 0f && direction > 0)
					{
						velocity.X *= 0.95f;
					}
				}
				else if (type == 329)
				{
					if (velocity.X > 0f && direction < 0)
					{
						velocity.X *= 0.9f;
					}
					if (velocity.X < 0f && direction > 0)
					{
						velocity.X *= 0.9f;
					}
					if (direction > 0 && velocity.X < 3f)
					{
						velocity.X += 0.1f;
					}
					if (direction < 0 && velocity.X > -3f)
					{
						velocity.X -= 0.1f;
					}
				}
				else if (type == 315)
				{
					if (velocity.X > 0f && direction < 0)
					{
						velocity.X *= 0.95f;
					}
					if (velocity.X < 0f && direction > 0)
					{
						velocity.X *= 0.95f;
					}
					if (velocity.X < 0f - num11 || velocity.X > num11)
					{
						if (velocity.Y == 0f)
						{
							velocity *= 0.8f;
						}
					}
					else if (velocity.X < num11 && direction == 1)
					{
						velocity.X += 0.07f;
						if (velocity.X > num11)
						{
							velocity.X = num11;
						}
					}
					else if (velocity.X > 0f - num11 && direction == -1)
					{
						velocity.X -= 0.07f;
						if (velocity.X < 0f - num11)
						{
							velocity.X = 0f - num11;
						}
					}
				}
				else if (type == 410)
				{
					if (Math.Sign(velocity.X) != direction)
					{
						velocity.X *= 0.9f;
					}
					num11 = 6f;
					num12 = 0.2f;
				}
				else if (type == 423)
				{
					if (Math.Sign(velocity.X) != direction)
					{
						velocity.X *= 0.85f;
					}
					num11 = 10f;
					num12 = 0.2f;
				}
				else if (type == 546)
				{
					if (Math.Sign(velocity.X) != direction)
					{
						velocity.X *= 0.92f;
					}
					float num13 = MathHelper.Lerp(0.6f, 1f, Math.Abs(Main.windSpeedTarget)) * (float)Math.Sign(Main.windSpeedTarget);
					if (!Main.player[target].ZoneSandstorm)
					{
						num13 = 0f;
					}
					num11 = 4f + num13 * (float)direction * 3f;
					num12 = 0.05f;
				}
				if (velocity.X < 0f - num11 || velocity.X > num11)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < num11 && direction == 1)
				{
					velocity.X += num12;
					if (velocity.X > num11)
					{
						velocity.X = num11;
					}
				}
				else if (velocity.X > 0f - num11 && direction == -1)
				{
					velocity.X -= num12;
					if (velocity.X < 0f - num11)
					{
						velocity.X = 0f - num11;
					}
				}
			}
			if (velocity.Y >= 0f)
			{
				int num14 = 0;
				if (velocity.X < 0f)
				{
					num14 = -1;
				}
				if (velocity.X > 0f)
				{
					num14 = 1;
				}
				Vector2 vector8 = position;
				vector8.X += velocity.X;
				int num15 = (int)((vector8.X + (float)(width / 2) + (float)((width / 2 + 1) * num14)) / 16f);
				int num16 = (int)((vector8.Y + (float)height - 1f) / 16f);
				if (Main.tile[num15, num16] == null)
				{
					Main.tile[num15, num16] = new Tile();
				}
				if (Main.tile[num15, num16 - 1] == null)
				{
					Main.tile[num15, num16 - 1] = new Tile();
				}
				if (Main.tile[num15, num16 - 2] == null)
				{
					Main.tile[num15, num16 - 2] = new Tile();
				}
				if (Main.tile[num15, num16 - 3] == null)
				{
					Main.tile[num15, num16 - 3] = new Tile();
				}
				if (Main.tile[num15, num16 + 1] == null)
				{
					Main.tile[num15, num16 + 1] = new Tile();
				}
				if ((float)(num15 * 16) < vector8.X + (float)width && (float)(num15 * 16 + 16) > vector8.X && ((Main.tile[num15, num16].nactive() && !Main.tile[num15, num16].topSlope() && !Main.tile[num15, num16 - 1].topSlope() && Main.tileSolid[Main.tile[num15, num16].type] && !Main.tileSolidTop[Main.tile[num15, num16].type]) || (Main.tile[num15, num16 - 1].halfBrick() && Main.tile[num15, num16 - 1].nactive())) && (!Main.tile[num15, num16 - 1].nactive() || !Main.tileSolid[Main.tile[num15, num16 - 1].type] || Main.tileSolidTop[Main.tile[num15, num16 - 1].type] || (Main.tile[num15, num16 - 1].halfBrick() && (!Main.tile[num15, num16 - 4].nactive() || !Main.tileSolid[Main.tile[num15, num16 - 4].type] || Main.tileSolidTop[Main.tile[num15, num16 - 4].type]))) && (!Main.tile[num15, num16 - 2].nactive() || !Main.tileSolid[Main.tile[num15, num16 - 2].type] || Main.tileSolidTop[Main.tile[num15, num16 - 2].type]) && (!Main.tile[num15, num16 - 3].nactive() || !Main.tileSolid[Main.tile[num15, num16 - 3].type] || Main.tileSolidTop[Main.tile[num15, num16 - 3].type]) && (!Main.tile[num15 - num14, num16 - 3].nactive() || !Main.tileSolid[Main.tile[num15 - num14, num16 - 3].type]))
				{
					float num17 = num16 * 16;
					if (Main.tile[num15, num16].halfBrick())
					{
						num17 += 8f;
					}
					if (Main.tile[num15, num16 - 1].halfBrick())
					{
						num17 -= 8f;
					}
					if (num17 < vector8.Y + (float)height)
					{
						float num18 = vector8.Y + (float)height - num17;
						if ((double)num18 <= 16.1)
						{
							gfxOffY += position.Y + (float)height - num17;
							position.Y = num17 - (float)height;
							if (num18 < 9f)
							{
								stepSpeed = 1f;
							}
							else
							{
								stepSpeed = 2f;
							}
						}
					}
				}
			}
			if (velocity.Y == 0f)
			{
				bool flag6 = true;
				int num19 = (int)(position.Y - 7f) / 16;
				int num20 = (int)(position.X - 7f) / 16;
				int num21 = (int)(position.X + (float)width + 7f) / 16;
				for (int m = num20; m <= num21; m++)
				{
					if (Main.tile[m, num19] != null && Main.tile[m, num19].nactive() && Main.tileSolid[Main.tile[m, num19].type])
					{
						flag6 = false;
						break;
					}
				}
				if (flag6)
				{
					int num22 = (int)((position.X + (float)(width / 2) + (float)((width / 2 + 2) * direction) + velocity.X * 5f) / 16f);
					int num23 = (int)((position.Y + (float)height - 15f) / 16f);
					if (Main.tile[num22, num23] == null)
					{
						Main.tile[num22, num23] = new Tile();
					}
					if (Main.tile[num22, num23 - 1] == null)
					{
						Main.tile[num22, num23 - 1] = new Tile();
					}
					if (Main.tile[num22, num23 - 2] == null)
					{
						Main.tile[num22, num23 - 2] = new Tile();
					}
					if (Main.tile[num22, num23 - 3] == null)
					{
						Main.tile[num22, num23 - 3] = new Tile();
					}
					if (Main.tile[num22, num23 + 1] == null)
					{
						Main.tile[num22, num23 + 1] = new Tile();
					}
					if (Main.tile[num22 + direction, num23 - 1] == null)
					{
						Main.tile[num22 + direction, num23 - 1] = new Tile();
					}
					if (Main.tile[num22 + direction, num23 + 1] == null)
					{
						Main.tile[num22 + direction, num23 + 1] = new Tile();
					}
					if (Main.tile[num22 - direction, num23 + 1] == null)
					{
						Main.tile[num22 - direction, num23 + 1] = new Tile();
					}
					if (Main.tile[num22 + direction, num23 + 3] == null)
					{
						Main.tile[num22 + direction, num23 + 3] = new Tile();
					}
					int num24 = spriteDirection;
					if (type == 423 || type == 410 || type == 546)
					{
						num24 *= -1;
					}
					if ((velocity.X < 0f && num24 == -1) || (velocity.X > 0f && num24 == 1))
					{
						bool flag7 = type == 410 || type == 423;
						float num25 = 3f;
						if (Main.tile[num22, num23 - 2].nactive() && Main.tileSolid[Main.tile[num22, num23 - 2].type])
						{
							if (Main.tile[num22, num23 - 3].nactive() && Main.tileSolid[Main.tile[num22, num23 - 3].type])
							{
								velocity.Y = -8.5f;
								netUpdate = true;
							}
							else
							{
								velocity.Y = -7.5f;
								netUpdate = true;
							}
						}
						else if (Main.tile[num22, num23 - 1].nactive() && !Main.tile[num22, num23 - 1].topSlope() && Main.tileSolid[Main.tile[num22, num23 - 1].type])
						{
							velocity.Y = -7f;
							netUpdate = true;
						}
						else if (position.Y + (float)height - (float)(num23 * 16) > 20f && Main.tile[num22, num23].nactive() && !Main.tile[num22, num23].topSlope() && Main.tileSolid[Main.tile[num22, num23].type])
						{
							velocity.Y = -6f;
							netUpdate = true;
						}
						else if ((directionY < 0 || Math.Abs(velocity.X) > num25) && (!flag7 || !Main.tile[num22, num23 + 1].nactive() || !Main.tileSolid[Main.tile[num22, num23 + 1].type]) && (!Main.tile[num22, num23 + 2].nactive() || !Main.tileSolid[Main.tile[num22, num23 + 2].type]) && (!Main.tile[num22 + direction, num23 + 3].nactive() || !Main.tileSolid[Main.tile[num22 + direction, num23 + 3].type]))
						{
							velocity.Y = -8f;
							netUpdate = true;
						}
					}
				}
			}
			if (type == 423 && Math.Abs(velocity.X) >= num11 * 0.95f)
			{
				Rectangle hitbox = base.Hitbox;
				for (int n = 0; n < 2; n++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust obj3 = Main.dust[Dust.NewDust(hitbox.TopLeft(), hitbox.Width, hitbox.Height, 242)];
						obj3.velocity = Vector2.Zero;
						obj3.noGravity = true;
						obj3.fadeIn = 1f;
						obj3.scale = 0.5f + Main.rand.NextFloat();
					}
				}
			}
			if (type == 546)
			{
				rotation += velocity.X * 0.05f;
				spriteDirection = -direction;
			}
		}

		private void AI_107_ImprovedWalkers()
		{
			//IL_0509: Unknown result type (might be due to invalid IL or missing references)
			//IL_0589: Unknown result type (might be due to invalid IL or missing references)
			//IL_05f1: Unknown result type (might be due to invalid IL or missing references)
			//IL_0813: Unknown result type (might be due to invalid IL or missing references)
			//IL_0835: Unknown result type (might be due to invalid IL or missing references)
			//IL_0890: Unknown result type (might be due to invalid IL or missing references)
			//IL_0895: Unknown result type (might be due to invalid IL or missing references)
			//IL_08a6: Unknown result type (might be due to invalid IL or missing references)
			//IL_08ab: Unknown result type (might be due to invalid IL or missing references)
			//IL_08d6: Unknown result type (might be due to invalid IL or missing references)
			//IL_08f5: Unknown result type (might be due to invalid IL or missing references)
			//IL_0f1e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0f7b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0f80: Unknown result type (might be due to invalid IL or missing references)
			//IL_0f9d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0fa2: Unknown result type (might be due to invalid IL or missing references)
			//IL_0fe2: Unknown result type (might be due to invalid IL or missing references)
			//IL_0fe7: Unknown result type (might be due to invalid IL or missing references)
			//IL_1003: Unknown result type (might be due to invalid IL or missing references)
			//IL_1008: Unknown result type (might be due to invalid IL or missing references)
			//IL_10a1: Unknown result type (might be due to invalid IL or missing references)
			//IL_10c3: Unknown result type (might be due to invalid IL or missing references)
			//IL_10c8: Unknown result type (might be due to invalid IL or missing references)
			//IL_10e9: Unknown result type (might be due to invalid IL or missing references)
			//IL_110b: Unknown result type (might be due to invalid IL or missing references)
			//IL_1110: Unknown result type (might be due to invalid IL or missing references)
			//IL_139a: Unknown result type (might be due to invalid IL or missing references)
			//IL_139f: Unknown result type (might be due to invalid IL or missing references)
			//IL_145b: Unknown result type (might be due to invalid IL or missing references)
			//IL_147d: Unknown result type (might be due to invalid IL or missing references)
			//IL_1482: Unknown result type (might be due to invalid IL or missing references)
			//IL_16d7: Unknown result type (might be due to invalid IL or missing references)
			//IL_196e: Unknown result type (might be due to invalid IL or missing references)
			//IL_1e7c: Unknown result type (might be due to invalid IL or missing references)
			//IL_1e9e: Unknown result type (might be due to invalid IL or missing references)
			//IL_23c4: Unknown result type (might be due to invalid IL or missing references)
			//IL_2c37: Unknown result type (might be due to invalid IL or missing references)
			bool flag = velocity.X == 0f && velocity.Y == 0f && !justHit;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			int num = 32;
			int num2 = 15;
			float num3 = 9f;
			bool flag5 = false;
			float num4 = 40f;
			int num5 = 30;
			int num6 = 0;
			bool flag6 = false;
			bool flag7 = true;
			float num7 = 0.9f;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = true;
			int num8 = 70;
			int num9 = num8 / 2;
			float num10 = 11f;
			Vector2 vector = Vector2.Zero;
			int num11 = 1;
			int num12 = 81;
			float num13 = 700f;
			float num14 = 0f;
			float num15 = 0.1f;
			Vector2? vector2 = null;
			float num16 = 0.5f;
			int num17 = 1;
			float num18 = 1f;
			bool flag16 = false;
			float num19 = 30f;
			float num20 = 0f;
			bool flag17 = false;
			bool flag18 = true;
			bool flag19 = false;
			int num21 = 30;
			bool flag20 = false;
			bool flag21 = false;
			bool flag22 = false;
			bool flag23 = false;
			LegacySoundStyle style = null;
			int num22 = 0;
			bool flag24 = false;
			float num23 = 1f;
			float num24 = 0.07f;
			float num25 = 0.8f;
			float num26 = width / 2 + 6;
			bool flag25 = directionY < 0;
			bool flag26 = false;
			int num27 = 1;
			bool flag27 = false;
			float num28 = 5f;
			float num29 = 3f;
			float num30 = 8f;
			float amount = 0.05f;
			float amount2 = 0.04f;
			float amount3 = 0.1f;
			bool flag28 = false;
			float num31 = 0.025f;
			NPCAimedTarget targetData = GetTargetData();
			NPCUtils.NPCTargetingMethod nPCTargetingMethod = NPCUtils.TargetClosestCommon;
			if (NPCID.Sets.BelongsToInvasionOldOnesArmy[type])
			{
				nPCTargetingMethod = NPCUtils.TargetClosestOldOnesInvasion;
			}
			if (targetData.Type == NPCTargetType.NPC && Main.npc[TranslatedTargetIndex].type == 548 && Main.npc[TranslatedTargetIndex].dontTakeDamageFromHostiles)
			{
				nPCTargetingMethod(this, faceTarget: true, null);
				targetData = GetTargetData();
			}
			if (NPCID.Sets.FighterUsesDD2PortalAppearEffect[type])
			{
				if (!targetData.Invalid)
				{
					flag2 = !Collision.CanHit(base.Center, 0, 0, targetData.Center, 0, 0) && (direction == Math.Sign(targetData.Center.X - base.Center.X) || (noGravity && Distance(targetData.Center) > 50f && base.Center.Y > targetData.Center.Y));
				}
				flag2 &= ai[0] <= 0f;
			}
			if (flag2)
			{
				if (velocity.Y == 0f || Math.Abs(targetData.Center.Y - base.Center.Y) > 800f)
				{
					noGravity = true;
					noTileCollide = true;
				}
			}
			else
			{
				noGravity = false;
				noTileCollide = false;
			}
			bool flag29 = NPCID.Sets.FighterUsesDD2PortalAppearEffect[type];
			bool flag30 = true;
			SlotId val;
			switch (type)
			{
			case 576:
			case 577:
				num22 = 700;
				style = SoundID.DD2_OgreRoar;
				num26 -= 32f;
				flag5 = true;
				num6 = 60;
				num4 = 130f;
				num5 = 44;
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				num7 = 0.7f;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (ai[0] <= 0f)
				{
					float num34 = ai[1];
					float num35 = Distance(targetData.Center);
					if (localAI[3] >= 60f)
					{
						if (num35 <= num4 + 300f && localAI[0] <= 0f)
						{
							ai[1] = 2f;
						}
						else if (num35 > num4 + 30f)
						{
							ai[1] = 1f;
						}
						else if (!(num35 > num4))
						{
							ai[1] = 0f;
							if (num34 == 1f)
							{
								ai[0] = 0f;
							}
						}
					}
					if (num34 != ai[1])
					{
						netUpdate = true;
					}
				}
				else if (ai[1] == 2f)
				{
					localAI[0] = 300f;
				}
				switch ((int)ai[1])
				{
				case 0:
					num5 = 44;
					if (ai[0] == 40f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_OgreAttack, base.Center);
					}
					break;
				case 2:
					num5 = 90;
					num4 = 250f;
					flag4 = true;
					num11 = GetAttackDamage_ForProjectiles(60f, 40f);
					num9 = 36;
					num = 56;
					num2 = 41;
					num3 = 13f;
					flag3 = true;
					num12 = 683;
					flag15 = false;
					vector = new Vector2(-direction * 20, height / 2 - 1);
					if (ai[0] == 40f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_OgreGroundPound, base.Center);
					}
					break;
				case 1:
					flag3 = true;
					num5 = 90;
					num4 = 1000f;
					num6 = 240;
					num11 = GetAttackDamage_ForProjectiles(40f, 30f);
					flag15 = false;
					vector = new Vector2(direction * 30, -70f);
					num12 = 676;
					if (ai[0] == 80f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_OgreSpit, base.Center);
					}
					break;
				}
				if (ai[0] < (float)(-num6))
				{
					ai[0] = -num6;
				}
				break;
			case 552:
			case 553:
			case 554:
				style = SoundID.DD2_GoblinScream;
				num22 = 1000;
				flag5 = true;
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				if (type == 553)
				{
					num24 += 0.01f;
					num23 += 0.2f;
				}
				if (type == 554)
				{
					num24 += 0.02f;
					num23 += 0.4f;
				}
				if (!(localAI[3] >= 60f))
				{
					num24 = 0.01f + localAI[3] / 60f * 0.05f;
				}
				break;
			case 570:
			case 571:
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				flag24 = true;
				flag12 = true;
				flag15 = ai[1] > 40f;
				num8 = 60;
				num9 = 40;
				if (type == 571 && ai[1] > 10f && ai[1] <= 40f && (int)ai[1] % 6 == 0)
				{
					num9 = (int)ai[1] - 1;
				}
				if (type == 570 && ai[1] > 10f && ai[1] <= 40f && (int)ai[1] % 9 == 0)
				{
					num9 = (int)ai[1] - 1;
				}
				num12 = 671;
				vector.X += 22 * direction;
				num15 = 0.15f;
				num16 = 1.5f;
				num13 = 600f;
				num10 = 13f;
				num17 = 1;
				num18 = 0f;
				if (type == 570)
				{
					num16 = 2.5f;
				}
				num11 = GetAttackDamage_ForProjectiles(35f, 25f);
				if (type == 571)
				{
					num11 = GetAttackDamage_ForProjectiles(60f, 45f);
				}
				num23 = 0.77f;
				if (ai[0] > 0f)
				{
					if (ai[1] == 40f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DrakinShot, base.Center);
					}
					else if (ai[1] == 60f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DrakinBreathIn, base.Center);
					}
				}
				if (!(localAI[3] >= 60f))
				{
					num13 = 1f;
					num24 = 0.01f + localAI[3] / 60f * 0.05f;
				}
				break;
			case 572:
			case 573:
				if (localAI[3] == 0f)
				{
					float[] array = localAI;
					val = SlotId.Invalid;
					array[0] = ((SlotId)(ref val)).ToFloat();
					float[] array2 = localAI;
					val = SlotId.Invalid;
					array2[1] = ((SlotId)(ref val)).ToFloat();
				}
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				if (ai[1] == 2f)
				{
					SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]))?.Stop();
					SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]))?.Stop();
					position = base.Center;
					width = (height = 192);
					base.Center = position;
					velocity = Vector2.Zero;
					damage = GetAttackDamage_ScaledByStrength(80f);
					alpha = 255;
					for (int k = 0; k < 4; k++)
					{
						int num37 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num37].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					}
					for (int l = 0; l < 20; l++)
					{
						int num38 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
						Main.dust[num38].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
						Main.dust[num38].noGravity = true;
						Main.dust[num38].velocity *= 3f;
						num38 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num38].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 4f;
						Main.dust[num38].velocity *= 2f;
						Main.dust[num38].noGravity = true;
						Main.dust[num38].fadeIn = 2.5f;
					}
					for (int m = 0; m < 6; m++)
					{
						int num39 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
						Main.dust[num39].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
						Main.dust[num39].noGravity = true;
						Main.dust[num39].velocity *= 3f;
					}
					for (int n = 0; n < 12; n++)
					{
						int num40 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num40].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
						Main.dust[num40].noGravity = true;
						Main.dust[num40].velocity *= 3f;
					}
					for (int num41 = 0; num41 < 5; num41++)
					{
						int num42 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num42].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
						Main.gore[num42].velocity *= 0.3f;
						Main.gore[num42].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
						Main.gore[num42].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
					}
					ai[0] += 1f;
					if (ai[0] >= 3f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldExplosion, base.Center);
						life = 0;
						HitEffect();
						active = false;
					}
					return;
				}
				if (ai[0] > 0f && ai[1] == 0f && life > 0)
				{
					SlotId val2 = SlotId.FromFloat(localAI[0]);
					if (!((SlotId)(ref val2)).get_IsValid())
					{
						float[] array3 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldIgnite, base.Center);
						array3[0] = ((SlotId)(ref val)).ToFloat();
					}
					localAI[2] += 1f;
					if (localAI[2] == 30f)
					{
						float[] array4 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldIgniteLoop, base.Center);
						array4[0] = ((SlotId)(ref val)).ToFloat();
						float[] array5 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldScreamChargeLoop, base.Center);
						array5[1] = ((SlotId)(ref val)).ToFloat();
					}
				}
				if (ai[0] > 0f && ai[1] == 1f)
				{
					ai[0] = 0f;
					ai[1] = 2f;
					netUpdate = true;
					return;
				}
				num23 = 0.88f;
				if (ai[0] == 1f)
				{
					ai[1] = 1f;
				}
				if (ai[0] == 0f && ai[1] == 1f)
				{
					ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]));
					if (activeSound == null)
					{
						float[] array6 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldIgniteLoop, base.Center);
						array6[0] = ((SlotId)(ref val)).ToFloat();
					}
					else
					{
						activeSound.Position = base.Center;
					}
					ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
					if (activeSound2 == null)
					{
						float[] array7 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldScreamChargeLoop, base.Center);
						array7[1] = ((SlotId)(ref val)).ToFloat();
					}
					else
					{
						activeSound2.Position = base.Center;
					}
				}
				if (ai[1] > 0f && ai[0] == 0f)
				{
					flag5 = true;
					num5 = 40;
					num4 = 64f;
					num24 = 0.3f;
					num23 = 4f;
					Vector2 vector3 = base.Center + new Vector2(spriteDirection * 12, 0f);
					if (Main.rand.Next(6) == 0)
					{
						Dust dust3 = Dust.NewDustDirect(vector3, 1, 1, 213, Main.rand.Next(-2, 3), Main.rand.Next(-2, 3), 100, new Color(255, 255, 255, 0));
						dust3.noGravity = true;
						dust3.fadeIn = dust3.scale + 1f + 0.01f * (float)Main.rand.Next(0, 51);
						dust3.velocity *= 0.3f;
						dust3.velocity.X += (float)(-spriteDirection) * 1.2f;
						dust3.velocity.Y += -3.5f;
						dust3.velocity.X += velocity.X;
					}
					if (Main.rand.Next(12) == 0)
					{
						Dust dust4 = Dust.NewDustPerfect(vector3, 6, velocity, 100);
						dust4.noGravity = true;
						dust4.velocity.Y -= 1f + Main.rand.NextFloat();
						dust4.scale = 1.1f;
						dust4.fadeIn = 0.5f;
						dust4.customData = this;
					}
				}
				else
				{
					flag5 = true;
					num5 = 40;
					num4 = 700f;
				}
				if (!(localAI[3] >= 60f))
				{
					num24 = 0.01f + localAI[3] / 60f * 0.05f;
				}
				break;
			case 568:
			case 569:
			{
				num5 = 110;
				num24 = 0.16f;
				num25 = 0.7f;
				num23 = 1.4f;
				flag5 = true;
				num4 = 600f;
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				if (!(localAI[3] >= 60f))
				{
					num24 = 0.01f + localAI[3] / 60f * 0.05f;
				}
				if (ai[0] == 0f)
				{
					float[] array8 = localAI;
					val = SlotId.Invalid;
					array8[1] = ((SlotId)(ref val)).ToFloat();
				}
				if (ai[0] != 1f)
				{
					break;
				}
				HitSound = SoundID.DD2_WitherBeastCrystalImpact;
				ai[0] += 1f;
				if (Main.rand.Next(10) == 0)
				{
					Dust dust7 = Dust.NewDustDirect(base.TopLeft, width, height, 271, 0f, -3f, 0, Color.Transparent, 0.6f);
					dust7.velocity.X /= 2f;
					dust7.noGravity = true;
					dust7.fadeIn = 1.5f;
					dust7.position.Y += 4f;
				}
				ActiveSound activeSound3 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
				if (activeSound3 == null)
				{
					float[] array9 = localAI;
					val = SoundEngine.PlayTrackedSound(SoundID.DD2_WitherBeastAuraPulse, base.Center);
					array9[1] = ((SlotId)(ref val)).ToFloat();
				}
				else
				{
					activeSound3.Position = base.Center;
				}
				localAI[0] += 1f;
				if (localAI[0] > 60f && Main.rand.Next(10) == 0)
				{
					Vector2 vec = base.Center + (Main.rand.NextFloat() * (MathF.PI * 2f)).ToRotationVector2() * 400f * (0.3f + 0.7f * Main.rand.NextFloat());
					Point point = vec.ToTileCoordinates();
					if (!WorldGen.SolidTile(point.X, point.Y))
					{
						Dust dust8 = Dust.NewDustPerfect(vec, 27, new Vector2(0f, -3f), 0, new Color(255, 255, 255, 127), 1.5f);
						dust8.velocity = DirectionTo(dust8.position) * dust8.velocity.Length();
						dust8.fadeIn = 1.5f;
					}
				}
				if (Main.netMode != 2)
				{
					Player player = Main.player[Main.myPlayer];
					if (!player.dead && player.active && (player.Center - base.Center).Length() < 400f && !player.creativeGodMode)
					{
						player.AddBuff(195, 3, quiet: false);
					}
				}
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				if (!(ai[1] <= 0f))
				{
					break;
				}
				ai[1] = 60f;
				if (Main.netMode != 1)
				{
					int num51 = lifeMax / 20;
					if (num51 > lifeMax - life)
					{
						num51 = lifeMax - life;
					}
					if (num51 > 0)
					{
						life += num51;
						HealEffect(num51);
						netUpdate = true;
					}
				}
				break;
			}
			case 561:
			case 562:
			case 563:
			{
				bool num36 = localAI[3] >= 60f;
				if (ai[1] == 82f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_JavelinThrowersAttack, base.Center);
					num22 = 7;
					style = SoundID.DD2_JavelinThrowersTaunt;
				}
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				flag24 = true;
				flag12 = true;
				flag15 = ai[1] > 82f;
				num8 = 90;
				num9 = 82;
				num12 = 662;
				if (type == 563)
				{
					num12 = 685;
				}
				vector.Y -= 14f;
				num15 = 0f;
				num16 = 0.5f;
				num13 = 600f;
				num10 = 13f;
				if (!num36)
				{
					num13 = 1f;
					num24 = 0.01f + localAI[3] / 60f * 0.05f;
				}
				if (type == 561)
				{
					num23 = 0.88f;
					num16 = 0.6f;
					num11 = GetAttackDamage_ForProjectiles(15f, 10f);
					num10 = 11.5f;
					num13 -= 100f;
				}
				if (type == 562)
				{
					num23 = 0.94f;
					num16 = 0.5f;
					num11 = GetAttackDamage_ForProjectiles(30f, 20f);
					num10 = 12.2f;
					num13 -= 50f;
				}
				if (type == 563)
				{
					num23 = 1f;
					num16 = 0.4f;
					num11 = GetAttackDamage_ForProjectiles(45f, 30f);
				}
				break;
			}
			case 555:
			case 556:
			case 557:
			{
				num22 = 800;
				style = SoundID.DD2_GoblinBomberScream;
				bool num33 = localAI[3] >= 60f;
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				flag24 = true;
				flag12 = true;
				flag15 = ai[1] > 18f;
				num8 = 42;
				num9 = 18;
				num12 = 681;
				num11 = 10;
				vector.Y -= 14f;
				num15 = 0.4f;
				num16 = 0.5f;
				num13 = 280f;
				num10 = 6f;
				if (!num33)
				{
					num13 = 1f;
					num24 = 0.01f + localAI[3] / 60f * 0.05f;
				}
				if (type == 555)
				{
					num23 = 0.88f;
					num16 = 0.6f;
					num11 = GetAttackDamage_ForProjectiles(20f, 15f);
				}
				if (type == 556)
				{
					num23 = 0.88f;
					num16 = 0.6f;
					num11 = GetAttackDamage_ForProjectiles(30f, 25f);
				}
				if (type == 557)
				{
					num23 = 1.12f;
					num16 = 0.4f;
					num11 = GetAttackDamage_ForProjectiles(40f, 35f);
				}
				if (ai[1] == (float)num9)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_GoblinBomberThrow, base.Center);
				}
				break;
			}
			case 566:
			case 567:
			{
				DelegateMethods.v3_1 = new Vector3(0.3f, 0.05f, 0.45f) * 1.5f;
				Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.CastLightOpen);
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				bool num43 = localAI[3] >= 120f;
				if (!num43)
				{
					num24 = 0f;
				}
				if (num43)
				{
					dontTakeDamage = false;
					break;
				}
				dontTakeDamage = true;
				velocity.X = 0f;
				flag24 = true;
				flag20 = true;
				ai[3] = 0f;
				if (localAI[3] == 0f)
				{
					alpha = 255;
				}
				localAI[3] += 1f;
				float num44 = localAI[3];
				if (num44 >= 110f)
				{
					alpha -= 26;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (num44 >= 100f)
				{
					int num45 = (int)localAI[3] / 20;
					float num46 = base.Size.Length() / 2f;
					num46 /= 20f;
					int maxValue = 5;
					for (int num47 = 0; num47 < num45 * 2; num47++)
					{
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust5 = Dust.NewDustDirect(position, width, height, 236, velocity.X * 1f);
							dust5.scale = 1f;
							dust5.fadeIn = 0.3f;
							dust5.velocity = new Vector2(Main.rand.NextFloatDirection() * 1f, 0f - dust5.velocity.Length()) * 1.25f * num46;
						}
					}
				}
				else
				{
					int num48 = (int)localAI[3] / 10;
					float num49 = base.Size.Length() / 2f;
					num49 /= 20f;
					int maxValue2 = 5;
					for (int num50 = 0; (float)num50 < (float)num48 * 1.3f; num50++)
					{
						if (Main.rand.Next(maxValue2) == 0)
						{
							Dust dust6 = Dust.NewDustDirect(position + new Vector2(-width / 2, 8f), width + width, height, 27, velocity.X * 1f, 0f, 100);
							dust6.scale = 1.1f;
							dust6.fadeIn = 0.1f;
							dust6.velocity = new Vector2(Main.rand.NextFloatDirection() * 0.1f, 0f - dust6.velocity.Length()) * 1.05f * num49 * Main.rand.NextFloat();
							dust6.velocity.Y *= Utils.GetLerpValue((float)width * 0.75f, 0f, Math.Abs(dust6.position.X - base.Center.X), clamped: true);
						}
					}
				}
				if (num44 > 100f && (int)num44 % 4 == 0)
				{
					Gore.NewGoreDirect(base.Left, new Vector2(0f, -3f), Utils.SelectRandom<int>(Main.rand, 971, 972), 0.85f).velocity.X *= 0.8f;
				}
				break;
			}
			case 620:
			{
				flag27 = wet;
				flag30 = false;
				flag16 = true;
				num20 = 150f;
				num19 = 20f;
				bool dayTime = Main.dayTime;
				flag21 = !dayTime;
				flag24 = true;
				flag12 = true;
				flag15 = ai[1] > 40f;
				num8 = 60;
				num9 = 40;
				if (ai[1] > 10f && ai[1] <= 40f && (int)ai[1] % 5 == 0)
				{
					num9 = (int)ai[1] - 1;
				}
				num12 = 811;
				vector.X -= 4 * direction;
				vector.Y -= 20f;
				num15 = 0.15f;
				num16 = 2.5f;
				num13 = 600f;
				num10 = 13f;
				num17 = 1;
				num18 = 0f;
				num11 = GetAttackDamage_ForProjectiles(40f, 30f);
				num23 = 8f;
				num24 *= 3f;
				num25 = 0.9f;
				if (ai[0] > 0f)
				{
					if (ai[1] == 40f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DrakinShot, base.Center);
					}
					else if (ai[1] == 60f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DrakinBreathIn, base.Center);
					}
				}
				position += netOffset;
				if (alpha == 255)
				{
					spriteDirection = direction;
					velocity.Y = -6f;
					netUpdate = true;
					for (int i = 0; i < 35; i++)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 5);
						dust.velocity *= 1f;
						dust.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust.velocity += velocity * 0.5f;
					}
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha != 0)
				{
					for (int j = 0; j < 2; j++)
					{
						Dust dust2 = Dust.NewDustDirect(position, width, height, 5);
						dust2.velocity *= 1f;
						dust2.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust2.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust2.velocity += velocity * 0.3f;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					Dust.NewDustDirect(position, width, height, 5, 0f, 0f, 50, default(Color), 1.3f).velocity = Vector2.Zero;
				}
				position -= netOffset;
				if (dayTime)
				{
					flag12 = false;
					flag24 = false;
					flag23 = true;
				}
				else
				{
					if (velocity.Y != 0f || !((float)targetData.Hitbox.Bottom < base.Top.Y) || !(Math.Abs(base.Center.X - (float)targetData.Hitbox.Center.X) < (float)(width * 3)) || !Collision.CanHit(base.Hitbox.TopLeft(), base.Hitbox.Width, base.Hitbox.Height, targetData.Hitbox.TopLeft(), targetData.Hitbox.Width, targetData.Hitbox.Height))
					{
						break;
					}
					int num32 = (int)((base.Bottom.Y - 16f - (float)targetData.Hitbox.Bottom) / 16f);
					if (num32 < 27)
					{
						if (num32 < 11)
						{
							velocity.Y = -11f;
						}
						else if (num32 < 15)
						{
							velocity.Y = -13f;
						}
						else if (num32 < 19)
						{
							velocity.Y = -14f;
						}
						else
						{
							velocity.Y = -15.9f;
						}
					}
				}
				break;
			}
			}
			if (flag28)
			{
				bool flag31 = velocity.Y == 0f;
				for (int num52 = 0; num52 < 200; num52++)
				{
					if (num52 != whoAmI && Main.npc[num52].active && Main.npc[num52].type == type && Math.Abs(position.X - Main.npc[num52].position.X) + Math.Abs(position.Y - Main.npc[num52].position.Y) < (float)width)
					{
						if (position.X < Main.npc[num52].position.X)
						{
							velocity.X -= num31;
						}
						else
						{
							velocity.X += num31;
						}
						if (position.Y < Main.npc[num52].position.Y)
						{
							velocity.Y -= num31;
						}
						else
						{
							velocity.Y += num31;
						}
					}
				}
				if (flag31)
				{
					velocity.Y = 0f;
				}
			}
			if (flag29)
			{
				if (localAI[3] == 0f)
				{
					alpha = 255;
				}
				if (localAI[3] == 30f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
				}
				if (localAI[3] < 60f)
				{
					localAI[3] += 1f;
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					int num53 = (int)localAI[3] / 10;
					float num54 = base.Size.Length() / 2f;
					num54 /= 20f;
					int maxValue3 = 5;
					if (type == 576 || type == 577)
					{
						maxValue3 = 1;
					}
					for (int num55 = 0; num55 < num53; num55++)
					{
						if (Main.rand.Next(maxValue3) == 0)
						{
							Dust dust9 = Dust.NewDustDirect(position, width, height, 27, velocity.X * 1f, 0f, 100);
							dust9.scale = 0.55f;
							dust9.fadeIn = 0.7f;
							dust9.velocity *= 0.1f * num54;
							dust9.velocity += velocity;
						}
					}
				}
			}
			if (flag27)
			{
				noGravity = true;
				TargetClosest(faceTarget: false);
				if (collideX)
				{
					velocity.X = 0f - oldVelocity.X;
				}
				if (velocity.X != 0f)
				{
					direction = Math.Sign(direction);
				}
				if (Collision.CanHit(position, width, height, targetData.Position, targetData.Width, targetData.Height))
				{
					Vector2 value = targetData.Center - base.Center;
					value.Normalize();
					value *= num28;
					velocity = Vector2.Lerp(velocity, value, amount);
					return;
				}
				float num56 = num28;
				if (velocity.Y > 0f)
				{
					num56 = num29;
				}
				if (velocity.Y < 0f)
				{
					num56 = num30;
				}
				Vector2 value2 = new Vector2(direction, -1f);
				value2.Normalize();
				value2 *= num56;
				if (num56 < num28)
				{
					velocity = Vector2.Lerp(velocity, value2, amount2);
				}
				else
				{
					velocity = Vector2.Lerp(velocity, value2, amount3);
				}
				return;
			}
			bool flag32 = false;
			if ((flag12 || flag5) && ai[0] > 0f)
			{
				flag18 = false;
			}
			if (flag12 && ai[1] > 0f)
			{
				flag22 = true;
			}
			if (flag5 && ai[0] > 0f)
			{
				flag22 = true;
			}
			if (flag5)
			{
				if (ai[0] < 0f)
				{
					ai[0] += 1f;
					flag = false;
				}
				if (ai[0] == 0f && (velocity.Y == 0f || flag6) && targetData.Type != 0 && (Collision.CanHit(position, width, height, targetData.Position, targetData.Width, targetData.Height) || Collision.CanHitLine(position, width, height, targetData.Position, targetData.Width, targetData.Height)) && (targetData.Center - base.Center).Length() < num4)
				{
					ai[0] = num5;
					netUpdate = true;
				}
				if (ai[0] > 0f)
				{
					spriteDirection = direction * num27;
					if (flag7)
					{
						velocity.X *= num7;
						flag24 = true;
						flag20 = true;
						ai[3] = 0f;
						netUpdate = true;
					}
					ai[0] -= 1f;
					if (ai[0] == 0f)
					{
						ai[0] = -num6;
						netUpdate = true;
					}
				}
			}
			if (flag3 && ai[0] > 0f)
			{
				if (flag15)
				{
					nPCTargetingMethod(this, faceTarget: true, null);
					targetData = GetTargetData();
				}
				if (ai[0] == (float)num9)
				{
					Vector2 vector4 = base.Center + vector;
					Vector2 v = targetData.Center - vector4;
					v.Y -= Math.Abs(v.X) * num15;
					Vector2 vector5 = v.SafeNormalize(-Vector2.UnitY) * num10;
					for (int num57 = 0; num57 < num17; num57++)
					{
						Vector2 vector6 = vector5;
						Vector2 vector7 = vector4;
						if (vector2.HasValue)
						{
							vector6 += vector2.Value;
						}
						else
						{
							vector6 += Utils.RandomVector2(Main.rand, 0f - num16, num16);
						}
						vector7 += vector5 * num18;
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector7, vector6, num12, num11, 0f, Main.myPlayer);
						}
					}
				}
			}
			if (flag4 && ai[0] > 0f)
			{
				if (velocity.Y != 0f && ai[0] < (float)num2)
				{
					ai[0] = num2;
				}
				if (ai[0] == (float)num)
				{
					velocity.Y = 0f - num3;
				}
			}
			if (!flag17 && flag18)
			{
				if (velocity.Y == 0f && velocity.X * (float)direction < 0f)
				{
					flag19 = true;
				}
				if (position.X == oldPosition.X || ai[3] >= (float)num21 || flag19)
				{
					ai[3] += 1f;
				}
				else if (Math.Abs(velocity.X) > 0.9f && ai[3] > 0f)
				{
					ai[3] -= 1f;
				}
				if (ai[3] > (float)(num21 * 10))
				{
					ai[3] = 0f;
				}
				if (justHit && !flag30)
				{
					ai[3] = 0f;
				}
				if (targetData.Hitbox.Intersects(base.Hitbox))
				{
					ai[3] = 0f;
				}
				if (ai[3] == (float)num21)
				{
					netUpdate = true;
					if (flag30)
					{
						noGravity = true;
						noTileCollide = true;
						position.X += direction * width * 2;
						int num58 = 20;
						float num59 = base.Size.Length() / 2f;
						num59 /= 20f;
						int maxValue4 = 5;
						if (type == 576 || type == 577)
						{
							maxValue4 = 1;
						}
						for (int num60 = 0; num60 < num58; num60++)
						{
							if (Main.rand.Next(maxValue4) == 0)
							{
								Dust dust10 = Dust.NewDustDirect(position, width, height, 27, velocity.X * 1f, 0f, 100);
								dust10.scale = 0.55f;
								dust10.fadeIn = 0.7f;
								dust10.velocity *= 3f * num59;
								dust10.noGravity = true;
								dust10.fadeIn = 1.5f;
								dust10.velocity *= 3f;
							}
						}
						return;
					}
				}
			}
			if (!flag20)
			{
				if (ai[3] < (float)num21 && flag21)
				{
					if (num22 > 0 && Main.rand.Next(num22) == 0)
					{
						SoundEngine.PlayTrackedSound(style, base.Center);
					}
					bool hasValidTarget = HasValidTarget;
					nPCTargetingMethod(this, faceTarget: true, null);
					targetData = GetTargetData();
					if (hasValidTarget != HasValidTarget)
					{
						netUpdate = true;
					}
				}
				else if (!flag22)
				{
					if (flag23)
					{
						EncourageDespawn(10);
					}
					if (velocity.X == 0f)
					{
						if (velocity.Y == 0f)
						{
							ai[2] += 1f;
							if (ai[2] >= 2f)
							{
								direction *= -1;
								spriteDirection = direction * num27;
								ai[2] = 0f;
								netUpdate = true;
							}
						}
					}
					else if (ai[2] != 0f)
					{
						ai[2] = 0f;
						netUpdate = true;
					}
					if (direction == 0)
					{
						direction = 1;
					}
				}
			}
			if (!flag24)
			{
				if (velocity.X < 0f - num23 || velocity.X > num23)
				{
					if (velocity.Y == 0f)
					{
						velocity *= num25;
					}
				}
				else if ((velocity.X < num23 && direction == 1) || (velocity.X > 0f - num23 && direction == -1))
				{
					velocity.X = MathHelper.Clamp(velocity.X + num24 * (float)direction, 0f - num23, num23);
				}
			}
			if (flag12)
			{
				if (confused)
				{
					ai[0] = 0f;
				}
				else
				{
					if (ai[1] > 0f)
					{
						ai[1] -= 1f;
					}
					if (justHit)
					{
						ai[1] = num19;
						ai[0] = 0f;
					}
					if (ai[0] > 0f)
					{
						if (flag15)
						{
							nPCTargetingMethod(this, faceTarget: true, null);
							targetData = GetTargetData();
						}
						if (ai[1] == (float)num9)
						{
							Vector2 vector8 = base.Center + vector;
							Vector2 v2 = targetData.Center - vector8;
							v2.Y -= Math.Abs(v2.X) * num15;
							Vector2 vector9 = v2.SafeNormalize(-Vector2.UnitY) * num10;
							for (int num61 = 0; num61 < num17; num61++)
							{
								Vector2 vector10 = vector8;
								Vector2 vector11 = vector9;
								if (vector2.HasValue)
								{
									vector11 += vector2.Value;
								}
								else
								{
									vector11 += Utils.RandomVector2(Main.rand, 0f - num16, num16);
								}
								vector10 += vector11 * num18;
								if (Main.netMode != 1)
								{
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector10, vector11, num12, num11, 0f, Main.myPlayer);
								}
							}
							if (Math.Abs(vector9.Y) > Math.Abs(vector9.X) * 2f)
							{
								ai[0] = ((vector9.Y > 0f) ? 1 : 5);
							}
							else if (Math.Abs(vector9.X) > Math.Abs(vector9.Y) * 2f)
							{
								ai[0] = 3f;
							}
							else
							{
								ai[0] = ((vector9.Y > 0f) ? 2 : 4);
							}
							if (flag16)
							{
								direction = ((vector9.X > 0f) ? 1 : (-1));
							}
						}
						bool flag33 = true;
						if ((velocity.Y != 0f && !flag14) || ai[1] <= 0f)
						{
							bool flag34 = false;
							if (num20 != 0f && ai[1] <= 0f)
							{
								flag34 = true;
							}
							ai[0] = 0f;
							ai[1] = (flag34 ? num20 : 0f);
						}
						else if (!flag13 || (!flag33 && (!flag14 || velocity.Y == 0f)))
						{
							velocity.X *= 0.9f;
							spriteDirection = direction * num27;
						}
					}
					if ((ai[0] <= 0f || flag13) && (velocity.Y == 0f || flag14) && ai[1] <= 0f && targetData.Type != 0 && Collision.CanHit(position, width, height, targetData.Position, targetData.Width, targetData.Height))
					{
						Vector2 vector12 = targetData.Center - base.Center;
						if (vector12.Length() < num13)
						{
							netUpdate = true;
							velocity.X *= 0.5f;
							ai[0] = 3f;
							ai[1] = num8;
							if (Math.Abs(vector12.Y) > Math.Abs(vector12.X) * 2f)
							{
								ai[0] = ((vector12.Y > 0f) ? 1 : 5);
							}
							else if (Math.Abs(vector12.X) > Math.Abs(vector12.Y) * 2f)
							{
								ai[0] = 3f;
							}
							else
							{
								ai[0] = ((vector12.Y > 0f) ? 2 : 4);
							}
							if (flag16)
							{
								direction = ((vector12.X > 0f) ? 1 : (-1));
							}
						}
					}
					if (ai[0] <= 0f || flag13)
					{
						bool flag35 = Distance(targetData.Center) < num14;
						if (flag35 && Collision.CanHitLine(position, width, height, targetData.Position, targetData.Width, targetData.Height))
						{
							ai[3] = 0f;
						}
						if (velocity.X < 0f - num23 || velocity.X > num23 || flag35)
						{
							if (velocity.Y == 0f)
							{
								velocity.X *= num25;
							}
						}
						else if ((velocity.X < num23 && direction == 1) || (velocity.X > 0f - num23 && direction == -1))
						{
							velocity.X = MathHelper.Clamp(velocity.X + num24 * (float)direction, 0f - num23, num23);
						}
					}
				}
			}
			if (velocity.Y == 0f)
			{
				int num62 = (int)(base.Bottom.Y + 7f) / 16;
				int num63 = (int)base.Left.X / 16;
				int num64 = (int)base.Right.X / 16;
				int num65;
				for (num65 = num63; num65 <= num64; num65++)
				{
					num65 = Utils.Clamp(num65, 0, Main.maxTilesX);
					num62 = Utils.Clamp(num62, 0, Main.maxTilesY);
					Tile tile = Main.tile[num65, num62];
					if (tile == null)
					{
						return;
					}
					if (tile.nactive() && Main.tileSolid[tile.type])
					{
						flag32 = true;
						break;
					}
				}
			}
			Point point2 = base.Center.ToTileCoordinates();
			if (WorldGen.InWorld(point2.X, point2.Y, 5) && !noGravity)
			{
				GetTileCollisionParameters(out var cPosition, out var cWidth, out var cHeight);
				Vector2 vector13 = position - cPosition;
				Collision.StepUp(ref cPosition, ref velocity, cWidth, cHeight, ref stepSpeed, ref gfxOffY);
				position = cPosition + vector13;
			}
			if (flag32)
			{
				int num66 = (int)(base.Center.X + num26 * (float)direction) / 16;
				int num67 = ((int)base.Bottom.Y - 15) / 16;
				bool flag36 = position.Y + (float)height - (float)(num67 * 16) > 20f;
				Tile tileSafely = Framing.GetTileSafely(num66 + direction, num67 + 1);
				Tile tileSafely2 = Framing.GetTileSafely(num66, num67 + 1);
				Tile tileSafely3 = Framing.GetTileSafely(num66, num67);
				Tile tileSafely4 = Framing.GetTileSafely(num66, num67 - 1);
				Tile tileSafely5 = Framing.GetTileSafely(num66, num67 - 2);
				Tile tileSafely6 = Framing.GetTileSafely(num66, num67 - 3);
				if (flag8 && tileSafely4.nactive() && (tileSafely4.type == 10 || tileSafely4.type == 388))
				{
					ai[0] += 1f;
					ai[3] = 0f;
					if (ai[0] >= 60f)
					{
						if (flag9)
						{
							ai[1] = 0f;
						}
						int num68 = 5;
						if (Main.tile[num66, num67 - 1].type == 388)
						{
							num68 = 2;
						}
						velocity.X = 0.5f * (float)(-direction);
						ai[1] += num68;
						bool flag37 = false;
						if (ai[1] >= 10f)
						{
							flag37 = true;
							ai[1] = 10f;
						}
						if (flag10)
						{
							flag37 = true;
						}
						WorldGen.KillTile(num66, num67 - 1, fail: true);
						if (Main.netMode != 1 && flag37)
						{
							if (flag11)
							{
								WorldGen.KillTile(num66, num67 - 1);
								if (Main.netMode == 2)
								{
									NetMessage.SendData(17, -1, -1, null, 0, num66, num67 - 1);
								}
							}
							else
							{
								if (tileSafely4.type == 10)
								{
									bool flag38 = WorldGen.OpenDoor(num66, num67 - 1, direction);
									if (!flag38)
									{
										ai[3] = num21;
										netUpdate = true;
									}
									if (Main.netMode == 2 && flag38)
									{
										NetMessage.SendData(19, -1, -1, null, 0, num66, num67 - 1, direction);
									}
								}
								if (tileSafely4.type == 388)
								{
									bool flag39 = WorldGen.ShiftTallGate(num66, num67 - 1, closing: false);
									if (!flag39)
									{
										ai[3] = num21;
										netUpdate = true;
									}
									if (Main.netMode == 2 && flag39)
									{
										NetMessage.SendData(19, -1, -1, null, 4, num66, num67 - 1, direction);
									}
								}
							}
						}
					}
				}
				else
				{
					int num69 = spriteDirection * num27;
					if (velocity.X * (float)num69 > 0f)
					{
						if (height >= 32 && tileSafely5.nactive() && Main.tileSolid[tileSafely5.type])
						{
							netUpdate = true;
							velocity.Y = -7f;
							if (tileSafely6.nactive() && Main.tileSolid[tileSafely6.type])
							{
								velocity.Y = -8f;
							}
						}
						else if (tileSafely4.nactive() && Main.tileSolid[tileSafely4.type])
						{
							velocity.Y = -6f;
							netUpdate = true;
						}
						else if (flag36 && tileSafely3.nactive() && !tileSafely3.topSlope() && Main.tileSolid[tileSafely3.type])
						{
							velocity.Y = -5f;
							netUpdate = true;
						}
						else if (flag25 && (!tileSafely2.nactive() || !Main.tileSolid[tileSafely2.type]) && (!tileSafely.nactive() || !Main.tileSolid[tileSafely.type]))
						{
							velocity.X *= 1.5f;
							velocity.Y = -8f;
							netUpdate = true;
						}
						else if (flag8)
						{
							ai[0] = 0f;
							ai[1] = 0f;
						}
						if (velocity.Y == 0f && flag && ai[3] == 1f)
						{
							velocity.Y = -5f;
							netUpdate = true;
						}
					}
					if (flag26 && velocity.Y == 0f && Math.Abs(targetData.Center.X - base.Center.X) < 100f && Math.Abs(targetData.Center.Y - base.Center.Y) < 50f && Math.Abs(velocity.X) >= 1f && velocity.X * (float)direction > 0f)
					{
						velocity.X = MathHelper.Clamp(velocity.X * 2f, -3f, 3f);
						velocity.Y = -4f;
						netAlways = true;
					}
				}
			}
			else if (flag8)
			{
				ai[0] = 0f;
				ai[1] = 0f;
			}
			if (!flag2 || !noTileCollide)
			{
				return;
			}
			wet = false;
			if (flag29)
			{
				if (alpha < 60)
				{
					alpha += 20;
				}
				localAI[3] = 40f;
			}
			bool num70 = velocity.Y == 0f;
			if (Math.Abs(base.Center.X - targetData.Center.X) > 200f)
			{
				spriteDirection = (direction = ((targetData.Center.X > base.Center.X) ? 1 : (-1)));
				velocity.X = MathHelper.Lerp(velocity.X, direction, 0.05f);
			}
			int num71 = 80;
			int num72 = height;
			Vector2 vector14 = new Vector2(base.Center.X - (float)(num71 / 2), position.Y + (float)height - (float)num72);
			bool flag40 = false;
			if (position.Y + (float)height < targetData.Position.Y + (float)targetData.Height - 16f)
			{
				flag40 = true;
			}
			if (flag40)
			{
				velocity.Y += 0.5f;
			}
			else if (Collision.SolidCollision(vector14, num71, num72) || targetData.Center.Y - base.Center.Y < -100f || (targetData.Center.Y - base.Center.Y < 10f && Math.Abs(targetData.Center.X - base.Center.X) < 60f))
			{
				if (velocity.Y > 0f)
				{
					velocity.Y = 0f;
				}
				if ((double)velocity.Y > -0.2)
				{
					velocity.Y -= 0.025f;
				}
				else
				{
					velocity.Y -= 0.2f;
				}
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
			}
			else
			{
				if (velocity.Y < 0f)
				{
					velocity.Y = 0f;
				}
				if ((double)velocity.Y < 0.1)
				{
					velocity.Y += 0.025f;
				}
				else
				{
					velocity.Y += 0.5f;
				}
			}
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
			if (num70)
			{
				velocity.Y = 0f;
			}
		}

		private void AI_084_LunaticCultist()
		{
			if (this.ai[0] != -1f && Main.rand.Next(1000) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(88, 92));
			}
			bool expertMode = Main.expertMode;
			bool flag = life <= lifeMax / 2;
			int num = 120;
			int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(35f, 25f);
			if (expertMode)
			{
				num = 90;
			}
			if (Main.getGoodWorld)
			{
				num -= 30;
			}
			int num2 = 18;
			int num3 = 3;
			int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(30f, 20f);
			if (expertMode)
			{
				num2 = 12;
				num3 = 4;
			}
			if (Main.getGoodWorld)
			{
				num2 = 10;
				num3 = 5;
			}
			int num4 = 80;
			int attackDamage_ForProjectiles3 = GetAttackDamage_ForProjectiles(45f, 30f);
			if (expertMode)
			{
				num4 = 40;
			}
			if (Main.getGoodWorld)
			{
				num4 -= 20;
			}
			int num5 = 20;
			int num6 = 2;
			if (expertMode)
			{
				num5 = 30;
				num6 = 2;
			}
			int num7 = 20;
			int num8 = 3;
			bool flag2 = type == 439;
			bool flag3 = false;
			bool flag4 = false;
			if (flag)
			{
				defense = (int)((float)defDefense * 0.65f);
			}
			if (!flag2)
			{
				if (this.ai[3] < 0f || !Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 439)
				{
					life = 0;
					HitEffect();
					active = false;
					return;
				}
				this.ai[0] = Main.npc[(int)this.ai[3]].ai[0];
				this.ai[1] = Main.npc[(int)this.ai[3]].ai[1];
				if (this.ai[0] == 5f)
				{
					if (justHit)
					{
						life = 0;
						HitEffect();
						active = false;
						if (Main.netMode != 1)
						{
							NetMessage.SendData(23, -1, -1, null, whoAmI);
						}
						NPC obj = Main.npc[(int)this.ai[3]];
						obj.ai[0] = 6f;
						obj.ai[1] = 0f;
						obj.netUpdate = true;
					}
				}
				else
				{
					flag3 = true;
					flag4 = true;
				}
			}
			else if (this.ai[0] == 5f && this.ai[1] >= 120f && this.ai[1] < 420f && justHit)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.ai[3] += 1f;
				velocity = Vector2.Zero;
				netUpdate = true;
				List<int> list = new List<int>();
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && Main.npc[i].type == 440 && Main.npc[i].ai[3] == (float)whoAmI)
					{
						list.Add(i);
					}
				}
				int num9 = 10;
				if (Main.expertMode)
				{
					num9 = 3;
				}
				foreach (int item in list)
				{
					NPC nPC = Main.npc[item];
					if (nPC.localAI[1] == localAI[1] && num9 > 0)
					{
						num9--;
						nPC.life = 0;
						nPC.HitEffect();
						nPC.active = false;
						if (Main.netMode != 1)
						{
							NetMessage.SendData(23, -1, -1, null, item);
						}
					}
					else if (num9 > 0)
					{
						num9--;
						nPC.life = 0;
						nPC.HitEffect();
						nPC.active = false;
					}
				}
				Main.projectile[(int)this.ai[2]].ai[1] = -1f;
				Main.projectile[(int)this.ai[2]].netUpdate = true;
			}
			Vector2 center = base.Center;
			Player player = Main.player[target];
			float num10 = 5600f;
			if (target < 0 || target == 255 || player.dead || !player.active || Vector2.Distance(player.Center, center) > num10)
			{
				TargetClosest(faceTarget: false);
				player = Main.player[target];
				netUpdate = true;
			}
			if (player.dead || !player.active || Vector2.Distance(player.Center, center) > num10)
			{
				life = 0;
				HitEffect();
				active = false;
				if (Main.netMode != 1)
				{
					NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
				}
				new List<int>().Add(whoAmI);
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j].active && Main.npc[j].type == 440 && Main.npc[j].ai[3] == (float)whoAmI)
					{
						Main.npc[j].life = 0;
						Main.npc[j].HitEffect();
						Main.npc[j].active = false;
						if (Main.netMode != 1)
						{
							NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
						}
					}
				}
			}
			float num11 = this.ai[3];
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 89);
				localAI[0] = 1f;
				alpha = 255;
				rotation = 0f;
				if (Main.netMode != 1)
				{
					this.ai[0] = -1f;
					netUpdate = true;
				}
			}
			if (this.ai[0] == -1f)
			{
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 420f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				else if (this.ai[1] > 360f)
				{
					velocity *= 0.95f;
					if (localAI[2] != 13f)
					{
						SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 105);
					}
					localAI[2] = 13f;
				}
				else if (this.ai[1] > 300f)
				{
					velocity = -Vector2.UnitY;
					localAI[2] = 10f;
				}
				else if (this.ai[1] > 120f)
				{
					localAI[2] = 1f;
				}
				else
				{
					localAI[2] = 0f;
				}
				flag3 = true;
				flag4 = true;
			}
			if (this.ai[0] == 0f)
			{
				if (this.ai[1] == 0f)
				{
					TargetClosest(faceTarget: false);
				}
				localAI[2] = 10f;
				int num12 = Math.Sign(player.Center.X - center.X);
				if (num12 != 0)
				{
					direction = (spriteDirection = num12);
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 40f && flag2)
				{
					int num13 = 0;
					if (flag)
					{
						switch ((int)this.ai[3])
						{
						case 0:
							num13 = 0;
							break;
						case 1:
							num13 = 1;
							break;
						case 2:
							num13 = 0;
							break;
						case 3:
							num13 = 5;
							break;
						case 4:
							num13 = 0;
							break;
						case 5:
							num13 = 3;
							break;
						case 6:
							num13 = 0;
							break;
						case 7:
							num13 = 5;
							break;
						case 8:
							num13 = 0;
							break;
						case 9:
							num13 = 2;
							break;
						case 10:
							num13 = 0;
							break;
						case 11:
							num13 = 3;
							break;
						case 12:
							num13 = 0;
							break;
						case 13:
							num13 = 4;
							this.ai[3] = -1f;
							break;
						default:
							this.ai[3] = -1f;
							break;
						}
					}
					else
					{
						switch ((int)this.ai[3])
						{
						case 0:
							num13 = 0;
							break;
						case 1:
							num13 = 1;
							break;
						case 2:
							num13 = 0;
							break;
						case 3:
							num13 = 2;
							break;
						case 4:
							num13 = 0;
							break;
						case 5:
							num13 = 3;
							break;
						case 6:
							num13 = 0;
							break;
						case 7:
							num13 = 1;
							break;
						case 8:
							num13 = 0;
							break;
						case 9:
							num13 = 2;
							break;
						case 10:
							num13 = 0;
							break;
						case 11:
							num13 = 4;
							this.ai[3] = -1f;
							break;
						default:
							this.ai[3] = -1f;
							break;
						}
					}
					int maxValue = 6;
					if (life < lifeMax / 3)
					{
						maxValue = 4;
					}
					if (life < lifeMax / 4)
					{
						maxValue = 3;
					}
					if (expertMode && flag && Main.rand.Next(maxValue) == 0 && num13 != 0 && num13 != 4 && num13 != 5 && CountNPCS(523) < 10)
					{
						num13 = 6;
					}
					if (num13 == 0)
					{
						float num14 = (float)Math.Ceiling((player.Center + new Vector2(0f, -100f) - center).Length() / 50f);
						if (num14 == 0f)
						{
							num14 = 1f;
						}
						List<int> list2 = new List<int>();
						int num15 = 0;
						list2.Add(whoAmI);
						for (int k = 0; k < 200; k++)
						{
							if (Main.npc[k].active && Main.npc[k].type == 440 && Main.npc[k].ai[3] == (float)whoAmI)
							{
								list2.Add(k);
							}
						}
						bool flag5 = list2.Count % 2 == 0;
						foreach (int item2 in list2)
						{
							NPC nPC2 = Main.npc[item2];
							Vector2 center2 = nPC2.Center;
							float num16 = (float)((num15 + flag5.ToInt() + 1) / 2) * (MathF.PI * 2f) * 0.4f / (float)list2.Count;
							if (num15 % 2 == 1)
							{
								num16 *= -1f;
							}
							if (list2.Count == 1)
							{
								num16 = 0f;
							}
							Vector2 vector = new Vector2(0f, -1f).RotatedBy(num16) * new Vector2(300f, 200f);
							Vector2 vector2 = player.Center + vector - center2;
							nPC2.ai[0] = 1f;
							nPC2.ai[1] = num14 * 2f;
							nPC2.velocity = vector2 / num14;
							if (whoAmI >= nPC2.whoAmI)
							{
								nPC2.position -= nPC2.velocity;
							}
							nPC2.netUpdate = true;
							num15++;
						}
					}
					switch (num13)
					{
					case 1:
						this.ai[0] = 3f;
						this.ai[1] = 0f;
						break;
					case 2:
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						break;
					case 3:
						this.ai[0] = 4f;
						this.ai[1] = 0f;
						break;
					case 4:
						this.ai[0] = 5f;
						this.ai[1] = 0f;
						break;
					}
					if (num13 == 5)
					{
						this.ai[0] = 7f;
						this.ai[1] = 0f;
					}
					if (num13 == 6)
					{
						this.ai[0] = 8f;
						this.ai[1] = 0f;
					}
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 1f)
			{
				flag3 = true;
				localAI[2] = 10f;
				if ((float)(int)this.ai[1] % 2f != 0f && this.ai[1] != 1f)
				{
					position -= velocity;
				}
				this.ai[1] -= 1f;
				if (this.ai[1] <= 0f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 2f)
			{
				localAI[2] = 11f;
				Vector2 vec = Vector2.Normalize(player.Center - center);
				if (vec.HasNaNs())
				{
					vec = new Vector2(direction, 0f);
				}
				if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num == 0)
				{
					if (Main.netMode != 1)
					{
						List<int> list3 = new List<int>();
						for (int l = 0; l < 200; l++)
						{
							if (Main.npc[l].active && Main.npc[l].type == 440 && Main.npc[l].ai[3] == (float)whoAmI)
							{
								list3.Add(l);
							}
						}
						foreach (int item3 in list3)
						{
							NPC nPC3 = Main.npc[item3];
							Vector2 center3 = nPC3.Center;
							int num17 = Math.Sign(player.Center.X - center3.X);
							if (num17 != 0)
							{
								nPC3.direction = (nPC3.spriteDirection = num17);
							}
							if (Main.netMode != 1)
							{
								vec = Vector2.Normalize(player.Center - center3 + player.velocity * 20f);
								if (vec.HasNaNs())
								{
									vec = new Vector2(direction, 0f);
								}
								Vector2 vector3 = center3 + new Vector2(direction * 30, 12f);
								for (int m = 0; m < 1; m++)
								{
									Vector2 spinninpoint = vec * (6f + (float)Main.rand.NextDouble() * 4f);
									spinninpoint = spinninpoint.RotatedByRandom(0.5235987901687622);
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector3.X, vector3.Y, spinninpoint.X, spinninpoint.Y, 468, 18, 0f, Main.myPlayer);
								}
							}
						}
					}
					if (Main.netMode != 1)
					{
						vec = Vector2.Normalize(player.Center - center + player.velocity * 20f);
						if (vec.HasNaNs())
						{
							vec = new Vector2(direction, 0f);
						}
						Vector2 vector4 = base.Center + new Vector2(direction * 30, 12f);
						for (int n = 0; n < 1; n++)
						{
							Vector2 vector5 = vec * 4f;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector4.X, vector4.Y, vector5.X, vector5.Y, 464, attackDamage_ForProjectiles, 0f, Main.myPlayer, 0f, 1f);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(4 + num))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 3f)
			{
				localAI[2] = 11f;
				Vector2 vec2 = Vector2.Normalize(player.Center - center);
				if (vec2.HasNaNs())
				{
					vec2 = new Vector2(direction, 0f);
				}
				if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num2 == 0)
				{
					if ((int)(this.ai[1] - 4f) / num2 == 2)
					{
						List<int> list4 = new List<int>();
						for (int num18 = 0; num18 < 200; num18++)
						{
							if (Main.npc[num18].active && Main.npc[num18].type == 440 && Main.npc[num18].ai[3] == (float)whoAmI)
							{
								list4.Add(num18);
							}
						}
						if (Main.netMode != 1)
						{
							foreach (int item4 in list4)
							{
								NPC nPC4 = Main.npc[item4];
								Vector2 center4 = nPC4.Center;
								int num19 = Math.Sign(player.Center.X - center4.X);
								if (num19 != 0)
								{
									nPC4.direction = (nPC4.spriteDirection = num19);
								}
								if (Main.netMode != 1)
								{
									vec2 = Vector2.Normalize(player.Center - center4 + player.velocity * 20f);
									if (vec2.HasNaNs())
									{
										vec2 = new Vector2(direction, 0f);
									}
									Vector2 vector6 = center4 + new Vector2(direction * 30, 12f);
									for (int num20 = 0; num20 < 1; num20++)
									{
										Vector2 spinninpoint2 = vec2 * (6f + (float)Main.rand.NextDouble() * 4f);
										spinninpoint2 = spinninpoint2.RotatedByRandom(0.5235987901687622);
										Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector6.X, vector6.Y, spinninpoint2.X, spinninpoint2.Y, 468, 18, 0f, Main.myPlayer);
									}
								}
							}
						}
					}
					int num21 = Math.Sign(player.Center.X - center.X);
					if (num21 != 0)
					{
						direction = (spriteDirection = num21);
					}
					if (Main.netMode != 1)
					{
						vec2 = Vector2.Normalize(player.Center - center + player.velocity * 20f);
						if (vec2.HasNaNs())
						{
							vec2 = new Vector2(direction, 0f);
						}
						Vector2 vector7 = base.Center + new Vector2(direction * 30, 12f);
						for (int num22 = 0; num22 < 1; num22++)
						{
							Vector2 spinninpoint3 = vec2 * (6f + (float)Main.rand.NextDouble() * 4f);
							spinninpoint3 = spinninpoint3.RotatedByRandom(0.5235987901687622);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector7.X, vector7.Y, spinninpoint3.X, spinninpoint3.Y, 467, attackDamage_ForProjectiles2, 0f, Main.myPlayer);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(4 + num2 * num3))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 4f)
			{
				if (flag2)
				{
					localAI[2] = 12f;
				}
				else
				{
					localAI[2] = 11f;
				}
				if (this.ai[1] == 20f && flag2 && Main.netMode != 1)
				{
					List<int> list5 = new List<int>();
					for (int num23 = 0; num23 < 200; num23++)
					{
						if (Main.npc[num23].active && Main.npc[num23].type == 440 && Main.npc[num23].ai[3] == (float)whoAmI)
						{
							list5.Add(num23);
						}
					}
					foreach (int item5 in list5)
					{
						NPC nPC5 = Main.npc[item5];
						Vector2 center5 = nPC5.Center;
						int num24 = Math.Sign(player.Center.X - center5.X);
						if (num24 != 0)
						{
							nPC5.direction = (nPC5.spriteDirection = num24);
						}
						if (Main.netMode != 1)
						{
							Vector2 vector8 = Vector2.Normalize(player.Center - center5 + player.velocity * 20f);
							if (vector8.HasNaNs())
							{
								vector8 = new Vector2(direction, 0f);
							}
							Vector2 vector9 = center5 + new Vector2(direction * 30, 12f);
							for (int num25 = 0; num25 < 1; num25++)
							{
								Vector2 spinninpoint4 = vector8 * (6f + (float)Main.rand.NextDouble() * 4f);
								spinninpoint4 = spinninpoint4.RotatedByRandom(0.5235987901687622);
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector9.X, vector9.Y, spinninpoint4.X, spinninpoint4.Y, 468, 18, 0f, Main.myPlayer);
							}
						}
					}
					if ((int)(this.ai[1] - 20f) % num4 == 0)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y - 100f, 0f, 0f, 465, attackDamage_ForProjectiles3, 0f, Main.myPlayer);
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(20 + num4))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 5f)
			{
				localAI[2] = 10f;
				if (Vector2.Normalize(player.Center - center).HasNaNs())
				{
					new Vector2(direction, 0f);
				}
				if (this.ai[1] >= 0f && this.ai[1] < 30f)
				{
					flag3 = true;
					flag4 = true;
					float num26 = (this.ai[1] - 0f) / 30f;
					alpha = (int)(num26 * 255f);
				}
				else if (this.ai[1] >= 30f && this.ai[1] < 90f)
				{
					if (this.ai[1] == 30f && Main.netMode != 1 && flag2)
					{
						localAI[1] += 1f;
						Vector2 spinningpoint = new Vector2(180f, 0f);
						List<int> list6 = new List<int>();
						for (int num27 = 0; num27 < 200; num27++)
						{
							if (Main.npc[num27].active && Main.npc[num27].type == 440 && Main.npc[num27].ai[3] == (float)whoAmI)
							{
								list6.Add(num27);
							}
						}
						int num28 = 6 - list6.Count;
						if (num28 > 2)
						{
							num28 = 2;
						}
						int num29 = list6.Count + num28 + 1;
						float[] array = new float[num29];
						for (int num30 = 0; num30 < array.Length; num30++)
						{
							array[num30] = Vector2.Distance(base.Center + spinningpoint.RotatedBy((float)num30 * (MathF.PI * 2f) / (float)num29 - MathF.PI / 2f), player.Center);
						}
						int num31 = 0;
						for (int num32 = 1; num32 < array.Length; num32++)
						{
							if (array[num31] > array[num32])
							{
								num31 = num32;
							}
						}
						num31 = ((num31 >= num29 / 2) ? (num31 - num29 / 2) : (num31 + num29 / 2));
						int num33 = num28;
						for (int num34 = 0; num34 < array.Length; num34++)
						{
							if (num31 != num34)
							{
								Vector2 center6 = base.Center + spinningpoint.RotatedBy((float)num34 * (MathF.PI * 2f) / (float)num29 - MathF.PI / 2f);
								if (num33-- > 0)
								{
									int num35 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)center6.X, (int)center6.Y + height / 2, 440, whoAmI);
									Main.npc[num35].ai[3] = whoAmI;
									Main.npc[num35].netUpdate = true;
									Main.npc[num35].localAI[1] = localAI[1];
								}
								else
								{
									int num36 = list6[-num33 - 1];
									Main.npc[num36].Center = center6;
									NetMessage.SendData(23, -1, -1, null, num36);
								}
							}
						}
						this.ai[2] = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, 0f, 0f, 490, 0, 0f, Main.myPlayer, 0f, whoAmI);
						base.Center += spinningpoint.RotatedBy((float)num31 * (MathF.PI * 2f) / (float)num29 - MathF.PI / 2f);
						netUpdate = true;
						list6.Clear();
					}
					flag3 = true;
					flag4 = true;
					alpha = 255;
					if (flag2)
					{
						Vector2 vector10 = Main.projectile[(int)this.ai[2]].Center;
						vector10 -= base.Center;
						if (vector10 == Vector2.Zero)
						{
							vector10 = -Vector2.UnitY;
						}
						vector10.Normalize();
						if (Math.Abs(vector10.Y) < 0.77f)
						{
							localAI[2] = 11f;
						}
						else if (vector10.Y < 0f)
						{
							localAI[2] = 12f;
						}
						else
						{
							localAI[2] = 10f;
						}
						int num37 = Math.Sign(vector10.X);
						if (num37 != 0)
						{
							direction = (spriteDirection = num37);
						}
					}
					else
					{
						Vector2 vector11 = Main.projectile[(int)Main.npc[(int)this.ai[3]].ai[2]].Center;
						vector11 -= base.Center;
						if (vector11 == Vector2.Zero)
						{
							vector11 = -Vector2.UnitY;
						}
						vector11.Normalize();
						if (Math.Abs(vector11.Y) < 0.77f)
						{
							localAI[2] = 11f;
						}
						else if (vector11.Y < 0f)
						{
							localAI[2] = 12f;
						}
						else
						{
							localAI[2] = 10f;
						}
						int num38 = Math.Sign(vector11.X);
						if (num38 != 0)
						{
							direction = (spriteDirection = num38);
						}
					}
				}
				else if (this.ai[1] >= 90f && this.ai[1] < 120f)
				{
					flag3 = true;
					flag4 = true;
					float num39 = (this.ai[1] - 90f) / 30f;
					alpha = 255 - (int)(num39 * 255f);
				}
				else if (this.ai[1] >= 120f && this.ai[1] < 420f)
				{
					flag4 = true;
					alpha = 0;
					if (flag2)
					{
						Vector2 vector12 = Main.projectile[(int)this.ai[2]].Center;
						vector12 -= base.Center;
						if (vector12 == Vector2.Zero)
						{
							vector12 = -Vector2.UnitY;
						}
						vector12.Normalize();
						if (Math.Abs(vector12.Y) < 0.77f)
						{
							localAI[2] = 11f;
						}
						else if (vector12.Y < 0f)
						{
							localAI[2] = 12f;
						}
						else
						{
							localAI[2] = 10f;
						}
						int num40 = Math.Sign(vector12.X);
						if (num40 != 0)
						{
							direction = (spriteDirection = num40);
						}
					}
					else
					{
						Vector2 vector13 = Main.projectile[(int)Main.npc[(int)this.ai[3]].ai[2]].Center;
						vector13 -= base.Center;
						if (vector13 == Vector2.Zero)
						{
							vector13 = -Vector2.UnitY;
						}
						vector13.Normalize();
						if (Math.Abs(vector13.Y) < 0.77f)
						{
							localAI[2] = 11f;
						}
						else if (vector13.Y < 0f)
						{
							localAI[2] = 12f;
						}
						else
						{
							localAI[2] = 10f;
						}
						int num41 = Math.Sign(vector13.X);
						if (num41 != 0)
						{
							direction = (spriteDirection = num41);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 420f)
				{
					flag4 = true;
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 6f)
			{
				localAI[2] = 13f;
				this.ai[1] += 1f;
				if (this.ai[1] >= 120f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 7f)
			{
				localAI[2] = 11f;
				Vector2 vec3 = Vector2.Normalize(player.Center - center);
				if (vec3.HasNaNs())
				{
					vec3 = new Vector2(direction, 0f);
				}
				if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num5 == 0)
				{
					if ((int)(this.ai[1] - 4f) / num5 == 2)
					{
						List<int> list7 = new List<int>();
						for (int num42 = 0; num42 < 200; num42++)
						{
							if (Main.npc[num42].active && Main.npc[num42].type == 440 && Main.npc[num42].ai[3] == (float)whoAmI)
							{
								list7.Add(num42);
							}
						}
						foreach (int item6 in list7)
						{
							NPC nPC6 = Main.npc[item6];
							Vector2 center7 = nPC6.Center;
							int num43 = Math.Sign(player.Center.X - center7.X);
							if (num43 != 0)
							{
								nPC6.direction = (nPC6.spriteDirection = num43);
							}
							if (Main.netMode != 1)
							{
								vec3 = Vector2.Normalize(player.Center - center7 + player.velocity * 20f);
								if (vec3.HasNaNs())
								{
									vec3 = new Vector2(direction, 0f);
								}
								Vector2 vector14 = center7 + new Vector2(direction * 30, 12f);
								for (int num44 = 0; (float)num44 < 5f; num44++)
								{
									Vector2 spinninpoint5 = vec3 * (6f + (float)Main.rand.NextDouble() * 4f);
									spinninpoint5 = spinninpoint5.RotatedByRandom(1.2566370964050293);
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector14.X, vector14.Y, spinninpoint5.X, spinninpoint5.Y, 468, 18, 0f, Main.myPlayer);
								}
							}
						}
					}
					int num45 = Math.Sign(player.Center.X - center.X);
					if (num45 != 0)
					{
						direction = (spriteDirection = num45);
					}
					if (Main.netMode != 1)
					{
						vec3 = Vector2.Normalize(player.Center - center + player.velocity * 20f);
						if (vec3.HasNaNs())
						{
							vec3 = new Vector2(direction, 0f);
						}
						Vector2 vector15 = base.Center + new Vector2(direction * 30, 12f);
						float num46 = 8f;
						float num47 = MathF.PI * 2f / 25f;
						for (int num48 = 0; (float)num48 < 5f; num48++)
						{
							Vector2 spinningpoint2 = vec3 * num46;
							spinningpoint2 = spinningpoint2.RotatedBy(num47 * (float)num48 - (MathF.PI * 2f / 5f - num47) / 2f);
							float ai = (Main.rand.NextFloat() - 0.5f) * 0.3f * (MathF.PI * 2f) / 60f;
							int num49 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector15.X, (int)vector15.Y + 7, 522, 0, 0f, ai, spinningpoint2.X, spinningpoint2.Y);
							Main.npc[num49].velocity = spinningpoint2;
							Main.npc[num49].netUpdate = true;
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(4 + num5 * num6))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 8f)
			{
				localAI[2] = 13f;
				if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num7 == 0)
				{
					List<int> list8 = new List<int>();
					for (int num50 = 0; num50 < 200; num50++)
					{
						if (Main.npc[num50].active && Main.npc[num50].type == 440 && Main.npc[num50].ai[3] == (float)whoAmI)
						{
							list8.Add(num50);
						}
					}
					int num51 = list8.Count + 1;
					if (num51 > 3)
					{
						num51 = 3;
					}
					int num52 = Math.Sign(player.Center.X - center.X);
					if (num52 != 0)
					{
						direction = (spriteDirection = num52);
					}
					if (Main.netMode != 1)
					{
						for (int num53 = 0; num53 < num51; num53++)
						{
							Point point = base.Center.ToTileCoordinates();
							Point point2 = Main.player[target].Center.ToTileCoordinates();
							Vector2 vector16 = Main.player[target].Center - base.Center;
							int num54 = 20;
							int num55 = 3;
							int num56 = 7;
							int num57 = 2;
							int num58 = 0;
							bool flag6 = false;
							if (vector16.Length() > 2000f)
							{
								flag6 = true;
							}
							while (!flag6 && num58 < 100)
							{
								num58++;
								int num59 = Main.rand.Next(point2.X - num54, point2.X + num54 + 1);
								int num60 = Main.rand.Next(point2.Y - num54, point2.Y + num54 + 1);
								if ((num60 < point2.Y - num56 || num60 > point2.Y + num56 || num59 < point2.X - num56 || num59 > point2.X + num56) && (num60 < point.Y - num55 || num60 > point.Y + num55 || num59 < point.X - num55 || num59 > point.X + num55) && !Main.tile[num59, num60].nactive())
								{
									bool flag7 = true;
									if (flag7 && Collision.SolidTiles(num59 - num57, num59 + num57, num60 - num57, num60 + num57))
									{
										flag7 = false;
									}
									if (flag7)
									{
										NewNPC(GetSpawnSourceForNPCFromNPCAI(), num59 * 16 + 8, num60 * 16 + 8, 523, 0, whoAmI);
										flag6 = true;
										break;
									}
								}
							}
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(4 + num7 * num8))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			if (!flag2)
			{
				this.ai[3] = num11;
			}
			dontTakeDamage = flag3;
			chaseable = !flag4;
		}

		private void AI_108_DivingFlyer()
		{
			//IL_0210: Unknown result type (might be due to invalid IL or missing references)
			//IL_07a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_07a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_07d0: Unknown result type (might be due to invalid IL or missing references)
			//IL_07d5: Unknown result type (might be due to invalid IL or missing references)
			//IL_080d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0812: Unknown result type (might be due to invalid IL or missing references)
			//IL_0827: Unknown result type (might be due to invalid IL or missing references)
			//IL_090e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0930: Unknown result type (might be due to invalid IL or missing references)
			//IL_0935: Unknown result type (might be due to invalid IL or missing references)
			//IL_0b8b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0bb1: Unknown result type (might be due to invalid IL or missing references)
			//IL_0bb6: Unknown result type (might be due to invalid IL or missing references)
			//IL_0bef: Unknown result type (might be due to invalid IL or missing references)
			//IL_0c15: Unknown result type (might be due to invalid IL or missing references)
			//IL_0c1a: Unknown result type (might be due to invalid IL or missing references)
			rotation = velocity.ToRotation();
			float num = 0.4f;
			float num2 = 10f;
			float num3 = 200f;
			float num4 = 750f;
			float num5 = 30f;
			float num6 = 30f;
			float num7 = 0.95f;
			int num8 = 50;
			float num9 = 14f;
			float num10 = 30f;
			float num11 = 100f;
			float num12 = 20f;
			float num13 = 0f;
			float num14 = 7f;
			bool flag = true;
			bool flag2 = true;
			int num15 = 120;
			bool flag3 = false;
			bool flag4 = false;
			float num16 = 0.05f;
			float num17 = 0f;
			bool flag5 = false;
			switch (type)
			{
			case 558:
			case 559:
			case 560:
				flag4 = true;
				num = 0.7f;
				if (type == 559)
				{
					num = 0.5f;
				}
				if (type == 560)
				{
					num = 0.2f;
				}
				num2 = 3f;
				num3 = 400f;
				num4 = 500f;
				num5 = 90f;
				num6 = 20f;
				num7 = 0.95f;
				num8 = 0;
				num9 = 8f;
				num10 = 30f;
				num11 = 150f;
				num12 = 60f;
				num13 = 0.05f;
				num14 = 6f;
				flag2 = false;
				flag5 = true;
				break;
			case 574:
			case 575:
				flag4 = true;
				num = 0.6f;
				if (type == 575)
				{
					num = 0.4f;
				}
				num2 = 4f;
				num3 = 400f;
				num4 = 500f;
				num5 = 90f;
				num6 = 30f;
				num7 = 0.95f;
				num8 = 3;
				num9 = 8f;
				num10 = 30f;
				num11 = 150f;
				num12 = 10f;
				num13 = 0.05f;
				num14 = 0f;
				num17 = -0.1f;
				flag3 = true;
				flag5 = true;
				break;
			}
			NPCUtils.TargetClosestOldOnesInvasion(this);
			NPCAimedTarget targetData = GetTargetData();
			if (flag5)
			{
				if (localAI[0] == 0f)
				{
					alpha = 255;
				}
				if (localAI[0] == 30f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
				}
				if (localAI[0] < 60f)
				{
					localAI[0] += 1f;
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					int num18 = (int)localAI[0] / 10;
					float num19 = base.Size.Length() / 2f;
					num19 /= 20f;
					int maxValue = 5;
					if (type == 576 || type == 577)
					{
						maxValue = 1;
					}
					for (int i = 0; i < num18; i++)
					{
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust = Dust.NewDustDirect(position, width, height, 27, velocity.X * 1f, 0f, 100);
							dust.scale = 0.55f;
							dust.fadeIn = 0.7f;
							dust.velocity *= 0.1f * num19;
							dust.velocity += velocity;
						}
					}
				}
			}
			if (flag4)
			{
				for (int j = 0; j < 200; j++)
				{
					if (j != whoAmI && Main.npc[j].active && Main.npc[j].type == type && Math.Abs(position.X - Main.npc[j].position.X) + Math.Abs(position.Y - Main.npc[j].position.Y) < (float)width)
					{
						if (position.X < Main.npc[j].position.X)
						{
							velocity.X -= num16;
						}
						else
						{
							velocity.X += num16;
						}
						if (position.Y < Main.npc[j].position.Y)
						{
							velocity.Y -= num16;
						}
						else
						{
							velocity.Y += num16;
						}
					}
				}
			}
			if (Math.Sign(velocity.X) != 0)
			{
				spriteDirection = -Math.Sign(velocity.X);
			}
			if (rotation < -MathF.PI / 2f)
			{
				rotation += MathF.PI;
			}
			if (rotation > MathF.PI / 2f)
			{
				rotation -= MathF.PI;
			}
			num13 *= num12;
			if (Main.expertMode)
			{
				num *= Main.GameModeInfo.KnockbackToEnemiesMultiplier;
			}
			SlotId val;
			if (ai[0] == 0f)
			{
				knockBackResist = num;
				float num20 = num2;
				Vector2 center = base.Center;
				Vector2 vector = targetData.Center - center;
				Vector2 vector2 = vector - Vector2.UnitY * num3;
				float num21 = vector.Length();
				vector = Vector2.Normalize(vector) * num20;
				vector2 = Vector2.Normalize(vector2) * num20;
				bool flag6 = Collision.CanHit(base.Center, 1, 1, targetData.Center, 1, 1);
				if (ai[3] >= (float)num15)
				{
					flag6 = true;
				}
				float num22 = 8f;
				flag6 = flag6 && vector.ToRotation() > MathF.PI / num22 && vector.ToRotation() < MathF.PI - MathF.PI / num22;
				if (num21 > num4 || !flag6)
				{
					velocity.X = (velocity.X * (num5 - 1f) + vector2.X) / num5;
					velocity.Y = (velocity.Y * (num5 - 1f) + vector2.Y) / num5;
					if (targetData.Center.Y < base.Center.Y)
					{
						velocity.Y -= 0.2f;
						if (velocity.Y < -10f)
						{
							velocity.Y = -10f;
						}
					}
					if (!flag6)
					{
						ai[3] += 1f;
						if (ai[3] == (float)num15)
						{
							netUpdate = true;
						}
					}
					else
					{
						ai[3] = 0f;
					}
				}
				else
				{
					ai[0] = 1f;
					ai[2] = vector.X;
					ai[3] = vector.Y;
					netUpdate = true;
				}
			}
			else if (ai[0] == 1f)
			{
				knockBackResist = 0f;
				velocity *= num7;
				velocity.Y += num17;
				ai[1] += 1f;
				if (ai[1] == num6)
				{
					if (type == 558 || type == 559 || type == 560)
					{
						float[] array = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_WyvernDiveDown, base.Center);
						array[1] = ((SlotId)(ref val)).ToFloat();
						if (Main.rand.Next(5) == 0)
						{
							float[] array2 = localAI;
							val = SoundEngine.PlayTrackedSound(SoundID.DD2_WyvernScream, base.Center);
							array2[2] = ((SlotId)(ref val)).ToFloat();
						}
					}
					else if (type == 574 || type == 575)
					{
						float[] array3 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldFlyerChargeScream, base.Center);
						array3[1] = ((SlotId)(ref val)).ToFloat();
						SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldIgnite, base.Center);
					}
				}
				if (ai[1] >= num6)
				{
					ai[0] = 2f;
					ai[1] = 0f;
					netUpdate = true;
					Vector2 vector3 = new Vector2(ai[2], ai[3]) + new Vector2(Main.rand.Next(-num8, num8 + 1), Main.rand.Next(-num8, num8 + 1)) * 0.04f;
					vector3.Normalize();
					vector3 *= num9;
					velocity = vector3;
				}
			}
			else if (ai[0] == 2f)
			{
				if (ai[1] >= 20f && (type == 574 || type == 575))
				{
					ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]));
					if (activeSound == null)
					{
						float[] array4 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldIgniteLoop, base.Center);
						array4[2] = ((SlotId)(ref val)).ToFloat();
					}
					else
					{
						activeSound.Position = base.Center;
					}
				}
				knockBackResist = 0f;
				float num23 = num10;
				ai[1] += 1f;
				bool flag7 = Vector2.Distance(base.Center, targetData.Center) > num11 && base.Center.Y > targetData.Center.Y;
				if (flag3)
				{
					flag7 = false;
				}
				if ((ai[1] >= num23 && flag7) || velocity.Length() < num14)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] = 0f;
					velocity /= 2f;
					netUpdate = true;
					if (flag)
					{
						ai[1] = 45f;
						ai[0] = 4f;
					}
				}
				else
				{
					Vector2 center2 = base.Center;
					Vector2 vector4 = targetData.Center - center2;
					vector4.Normalize();
					if (vector4.HasNaNs())
					{
						vector4 = new Vector2(direction, 0f);
					}
					velocity = (velocity * (num12 - 1f) + vector4 * (velocity.Length() + num13)) / num12;
				}
				if (flag2 && Collision.SolidCollision(position, width, height))
				{
					ai[0] = 3f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 4f)
			{
				ai[1] -= 3f;
				if (ai[1] <= 0f)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					netUpdate = true;
				}
				velocity *= 0.95f;
			}
			ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
			if (activeSound2 != null)
			{
				activeSound2.Position = base.Center;
			}
			else
			{
				float[] array5 = localAI;
				val = SlotId.Invalid;
				array5[1] = ((SlotId)(ref val)).ToFloat();
			}
			if (type == 558 || type == 559 || type == 560)
			{
				activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]));
				if (activeSound2 != null)
				{
					activeSound2.Position = base.Center;
				}
				else
				{
					float[] array6 = localAI;
					val = SlotId.Invalid;
					array6[2] = ((SlotId)(ref val)).ToFloat();
				}
			}
			if (flag2 && ai[0] != 3f && Vector2.Distance(base.Center, targetData.Center) < 64f)
			{
				ai[0] = 3f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] = 0f;
				netUpdate = true;
			}
			if (ai[0] != 3f)
			{
				return;
			}
			position = base.Center;
			width = (height = 192);
			position.X -= width / 2;
			position.Y -= height / 2;
			velocity = Vector2.Zero;
			damage = GetAttackDamage_ScaledByStrength(80f);
			alpha = 255;
			if (ai[1] == 0f && (type == 574 || type == 575))
			{
				for (int k = 0; k < 4; k++)
				{
					int num24 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num24].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int l = 0; l < 20; l++)
				{
					int num25 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num25].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num25].noGravity = true;
					Main.dust[num25].velocity *= 3f;
					num25 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num25].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 4f;
					Main.dust[num25].velocity *= 2f;
					Main.dust[num25].noGravity = true;
					Main.dust[num25].fadeIn = 2.5f;
				}
				for (int m = 0; m < 6; m++)
				{
					int num26 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num26].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num26].noGravity = true;
					Main.dust[num26].velocity *= 3f;
				}
				for (int n = 0; n < 12; n++)
				{
					int num27 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num27].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num27].noGravity = true;
					Main.dust[num27].velocity *= 3f;
				}
				for (int num28 = 0; num28 < 5; num28++)
				{
					int num29 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num29].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.gore[num29].velocity *= 0.3f;
					Main.gore[num29].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num29].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			ai[1] += 1f;
			if (ai[1] >= 3f)
			{
				SoundEngine.PlaySound(SoundID.Item14, position);
				life = 0;
				HitEffect();
				active = false;
			}
		}

		private void AI_109_DarkMage()
		{
			//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
			//IL_034a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0661: Unknown result type (might be due to invalid IL or missing references)
			bool flag = false;
			bool flag2 = false;
			bool flag3 = true;
			bool flag4 = false;
			int num = 4;
			int num2 = 3;
			int num3 = 0;
			float num4 = 0.2f;
			float num5 = 2f;
			float num6 = -0.2f;
			float num7 = -4f;
			bool flag5 = true;
			float num8 = 2f;
			float num9 = 0.1f;
			float num10 = 1f;
			float num11 = 0.04f;
			bool flag6 = false;
			float num12 = 0.96f;
			bool flag7 = true;
			NPCAimedTarget targetData = GetTargetData();
			if (type == 564 || type == 565)
			{
				flag5 = false;
				rotation = velocity.X * 0.04f;
				spriteDirection = ((direction > 0) ? 1 : (-1));
				num3 = 2;
				num6 = -0.05f;
				num7 = -0.4f;
				num4 = 0.05f;
				num5 = 0.2f;
				num10 = 0.5f;
				num11 = 0.02f;
				num8 = 0.5f;
				num9 = 0.1f;
				localAI[2] = 0f;
				DelegateMethods.v3_1 = new Vector3(0.3f, 0.05f, 0.45f) * 1.5f;
				Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.CastLightOpen);
				if (ai[0] < 0f)
				{
					ai[0] = MathHelper.Min(ai[0] + 1f, 0f);
				}
				if (ai[0] > 0f)
				{
					flag7 = false;
					flag6 = true;
					num12 = 0.9f;
					ai[0] -= 1f;
					if (ai[0] == 80f && ai[1] == 2f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DarkMageSummonSkeleton, base.Center);
					}
					if (ai[1] == 2f && ai[0] == 64f && Main.netMode != 1)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + new Vector2(direction * 24, -40f), Vector2.Zero, 673, 0, 0f, Main.myPlayer);
						DD2Event.RaiseGoblins(this, base.Center);
					}
					if (ai[1] == 0f && ai[0] == 32f)
					{
						Vector2 vector = (targetData.Center - (base.Center + new Vector2(direction * 10, -16f))).SafeNormalize(Vector2.UnitY) * 14f;
						direction = ((vector.X > 0f) ? 1 : (-1));
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + new Vector2(direction * 10, -16f), vector, 675, 40, 0f, Main.myPlayer);
						}
					}
					if (ai[0] == 126f && ai[1] == 1f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DarkMageCastHeal, base.Center);
					}
					if (ai[1] == 1f && Main.netMode != 1 && (ai[0] == 40f || ai[0] == 48f || ai[0] == 56f) && WorldUtils.Find(new Vector2(base.Center.X + (float)(direction * 240), base.Center.Y).ToTileCoordinates(), Searches.Chain(new Searches.Down(50), new Terraria.WorldBuilding.Conditions.IsSolid()), out var result))
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), result.ToWorldCoordinates(8f, 0f), Vector2.Zero, 674, 0, 0f, Main.myPlayer);
					}
					if (ai[0] <= 0f)
					{
						float num13 = ai[1];
						ai[1] += 1f;
						if (ai[1] >= 3f)
						{
							ai[1] = 0f;
						}
						ai[0] = -120f;
						if (num13 == 0f)
						{
							ai[0] = -20f;
						}
						netUpdate = true;
					}
				}
				if (ai[0] == 0f && localAI[3] >= 60f)
				{
					bool flag8 = false;
					Vector2 minimum = base.Center + new Vector2(-600f, -200f);
					Vector2 maximum = base.Center + new Vector2(600f, 200f);
					int num14 = 0;
					for (int i = 0; i < 200; i++)
					{
						NPC nPC = Main.npc[i];
						if (nPC.active && nPC.lifeMax != nPC.life && nPC.Center.Between(minimum, maximum) && ++num14 >= 2)
						{
							flag8 = true;
							break;
						}
					}
					if (!flag8)
					{
						ai[1] = 2f;
					}
					if (ai[1] == 2f && !DD2Event.CanRaiseGoblinsHere(base.Center))
					{
						ai[1] = 0f;
					}
					bool flag9 = true;
					if (ai[1] == 0f && (Distance(targetData.Center) >= 1000f || !Collision.CanHitLine(base.Center, 0, 0, targetData.Center, 0, 0)))
					{
						flag9 = false;
					}
					if (flag9)
					{
						switch ((int)ai[1])
						{
						case 0:
							ai[0] = 97f;
							break;
						case 1:
							ai[0] = 127f;
							break;
						case 2:
							ai[0] = 183f;
							break;
						}
						netUpdate = true;
						flag6 = true;
					}
				}
				if (localAI[3] == 0f)
				{
					alpha = 255;
				}
				if (localAI[3] == 30f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
				}
				if (localAI[3] < 60f)
				{
					localAI[3] += 1f;
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					int num15 = (int)localAI[3] / 10;
					float num16 = base.Size.Length() / 2f;
					num16 /= 20f;
					int maxValue = 5;
					if (type == 576 || type == 577)
					{
						maxValue = 1;
					}
					for (int j = 0; j < num15; j++)
					{
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust = Dust.NewDustDirect(position, width, height, 27, velocity.X * 1f, 0f, 100);
							dust.scale = 0.55f;
							dust.fadeIn = 0.7f;
							dust.velocity *= 0.1f * num16;
							dust.velocity += velocity;
						}
					}
				}
			}
			if (justHit)
			{
				localAI[2] = 0f;
			}
			if (!flag2)
			{
				if (localAI[2] >= 0f)
				{
					float num17 = 16f;
					bool flag10 = false;
					bool flag11 = false;
					if (position.X > localAI[0] - num17 && position.X < localAI[0] + num17)
					{
						flag10 = true;
					}
					else if ((velocity.X < 0f && direction > 0) || (velocity.X > 0f && direction < 0))
					{
						flag10 = true;
						num17 += 24f;
					}
					if (position.Y > localAI[1] - num17 && position.Y < localAI[1] + num17)
					{
						flag11 = true;
					}
					if (flag10 && flag11)
					{
						localAI[2] += 1f;
						if (localAI[2] >= 30f && num17 == 16f)
						{
							flag = true;
						}
						if (localAI[2] >= 60f)
						{
							localAI[2] = -180f;
							direction *= -1;
							velocity.X *= -1f;
							collideX = false;
						}
					}
					else
					{
						localAI[0] = position.X;
						localAI[1] = position.Y;
						localAI[2] = 0f;
					}
					if (flag7)
					{
						NPCUtils.TargetClosestOldOnesInvasion(this);
					}
				}
				else
				{
					localAI[2] += 1f;
					direction = ((targetData.Center.X > base.Center.X) ? 1 : (-1));
				}
			}
			int num18 = (int)((position.X + (float)(width / 2)) / 16f) + direction * 2;
			int num19 = (int)((position.Y + (float)height) / 16f);
			int num20 = (int)base.Bottom.Y / 16;
			int num21 = (int)base.Bottom.X / 16;
			if (flag6)
			{
				velocity *= num12;
				return;
			}
			for (int k = num19; k < num19 + num; k++)
			{
				if (Main.tile[num18, k] == null)
				{
					Main.tile[num18, k] = new Tile();
				}
				if ((Main.tile[num18, k].nactive() && Main.tileSolid[Main.tile[num18, k].type]) || Main.tile[num18, k].liquid > 0)
				{
					if (k <= num19 + 1)
					{
						flag4 = true;
					}
					flag3 = false;
					break;
				}
			}
			for (int l = num20; l < num20 + num3; l++)
			{
				if (Main.tile[num21, l] == null)
				{
					Main.tile[num21, l] = new Tile();
				}
				if ((Main.tile[num21, l].nactive() && Main.tileSolid[Main.tile[num21, l].type]) || Main.tile[num21, l].liquid > 0)
				{
					flag4 = true;
					flag3 = false;
					break;
				}
			}
			if (flag5)
			{
				for (int m = num19 - num2; m < num19; m++)
				{
					if (Main.tile[num18, m] == null)
					{
						Main.tile[num18, m] = new Tile();
					}
					if ((Main.tile[num18, m].nactive() && Main.tileSolid[Main.tile[num18, m].type]) || Main.tile[num18, m].liquid > 0)
					{
						flag4 = false;
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				flag4 = false;
				flag3 = true;
			}
			if (flag3)
			{
				velocity.Y += num4;
				if (velocity.Y > num5)
				{
					velocity.Y = num5;
				}
			}
			else
			{
				if ((directionY < 0 && velocity.Y > 0f) || flag4)
				{
					velocity.Y += num6;
				}
				if (velocity.Y < num7)
				{
					velocity.Y = num7;
				}
			}
			if (collideX)
			{
				velocity.X = oldVelocity.X * -0.4f;
				if (direction == -1 && velocity.X > 0f && velocity.X < 1f)
				{
					velocity.X = 1f;
				}
				if (direction == 1 && velocity.X < 0f && velocity.X > -1f)
				{
					velocity.X = -1f;
				}
			}
			if (collideY)
			{
				velocity.Y = oldVelocity.Y * -0.25f;
				if (velocity.Y > 0f && velocity.Y < 1f)
				{
					velocity.Y = 1f;
				}
				if (velocity.Y < 0f && velocity.Y > -1f)
				{
					velocity.Y = -1f;
				}
			}
			if (direction == -1 && velocity.X > 0f - num8)
			{
				velocity.X -= num9;
				if (velocity.X > num8)
				{
					velocity.X -= num9;
				}
				else if (velocity.X > 0f)
				{
					velocity.X += num9 / 2f;
				}
				if (velocity.X < 0f - num8)
				{
					velocity.X = 0f - num8;
				}
			}
			else if (direction == 1 && velocity.X < num8)
			{
				velocity.X += num9;
				if (velocity.X < 0f - num8)
				{
					velocity.X += num9;
				}
				else if (velocity.X < 0f)
				{
					velocity.X -= num9 / 2f;
				}
				if (velocity.X > num8)
				{
					velocity.X = num8;
				}
			}
			if (directionY == -1 && velocity.Y > 0f - num10)
			{
				velocity.Y -= num11;
				if (velocity.Y > num10)
				{
					velocity.Y -= num11 * 1.25f;
				}
				else if (velocity.Y > 0f)
				{
					velocity.Y += num11 * 0.75f;
				}
				if (velocity.Y < 0f - num10)
				{
					velocity.Y = 0f - num8;
				}
			}
			else if (directionY == 1 && velocity.Y < num10)
			{
				velocity.Y += num11;
				if (velocity.Y < 0f - num10)
				{
					velocity.Y += num11 * 1.25f;
				}
				else if (velocity.Y < 0f)
				{
					velocity.Y -= num11 * 0.75f;
				}
				if (velocity.Y > num10)
				{
					velocity.Y = num10;
				}
			}
		}

		private void AI_111_DD2LightningBug()
		{
			//IL_02f6: Unknown result type (might be due to invalid IL or missing references)
			bool flag = true;
			float num = 7f;
			float num2 = 60f;
			float num3 = 60f;
			float num4 = 1f;
			float num5 = 0.96f;
			int num6 = 30;
			int num7 = 20;
			float num8 = 200f;
			int num9 = 40;
			int num10 = 438;
			float num11 = 10f;
			float num12 = 100f;
			bool flag2 = false;
			float num13 = 0.05f;
			Vector2 center = base.Center;
			NPCUtils.TargetClosestOldOnesInvasion(this);
			NPCAimedTarget targetData = GetTargetData();
			bool flag3 = false;
			int num14 = type;
			if (num14 == 578)
			{
				num = 4f;
				num2 = 20f;
				num3 = 20f;
				flag3 = true;
				flag2 = true;
				num13 = 0.1f;
				num10 = 682;
				num9 = 50;
				num11 = 10f;
				num12 = 50f;
				num6 = 5;
				num7 = 30;
				center += new Vector2(-spriteDirection * 20, 10f);
				position += netOffset;
				if (Main.rand.Next(15) == 0)
				{
					Vector2 vector = position;
					if (direction == -1)
					{
						vector.X += width / 2;
					}
					Dust dust = Dust.NewDustDirect(vector, width / 2, height, 272);
					dust.scale = 0.65f;
					dust.velocity.Y -= 0.8f;
					if (dust.velocity.X * (float)direction > 0f)
					{
						dust.velocity.X *= -1f;
					}
					if (dust.velocity.Y > 0f)
					{
						dust.velocity *= -0.5f;
					}
				}
				if (Main.rand.Next(80) == 0)
				{
					Vector2 vector2 = (Main.rand.NextFloat() * (MathF.PI * 2f)).ToRotationVector2();
					Dust dust2 = Dust.NewDustPerfect(base.Center, 272, vector2);
					dust2.velocity *= 1.1f;
					dust2.noGravity = true;
					dust2.customData = this;
					Dust dust3 = Dust.NewDustPerfect(base.Center, 272, vector2);
					dust3.velocity *= 1.5f;
					dust3.noGravity = true;
					dust3.customData = this;
				}
				position -= netOffset;
			}
			if (flag3)
			{
				if (localAI[1] == 0f)
				{
					alpha = 255;
				}
				if (localAI[1] == 30f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
				}
				if (localAI[1] < 60f)
				{
					localAI[1] += 1f;
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					int num15 = (int)localAI[1] / 10;
					float num16 = base.Size.Length() / 2f;
					num16 /= 20f;
					int maxValue = 5;
					if (type == 576 || type == 577)
					{
						maxValue = 1;
					}
					for (int i = 0; i < num15; i++)
					{
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust4 = Dust.NewDustDirect(position, width, height, 27, velocity.X * 1f, 0f, 100);
							dust4.scale = 0.55f;
							dust4.fadeIn = 0.7f;
							dust4.velocity *= 0.1f * num16;
							dust4.velocity += velocity;
						}
					}
				}
			}
			if (flag2)
			{
				for (int j = 0; j < 200; j++)
				{
					if (j != whoAmI && Main.npc[j].active && Main.npc[j].type == type && Math.Abs(position.X - Main.npc[j].position.X) + Math.Abs(position.Y - Main.npc[j].position.Y) < (float)width)
					{
						if (position.X < Main.npc[j].position.X)
						{
							velocity.X -= num13;
						}
						else
						{
							velocity.X += num13;
						}
						if (position.Y < Main.npc[j].position.Y)
						{
							velocity.Y -= num13;
						}
						else
						{
							velocity.Y += num13;
						}
					}
				}
			}
			rotation = Math.Abs(velocity.X) * (float)direction * 0.1f;
			spriteDirection = direction;
			Vector2 vector3 = center;
			Vector2 vector4 = targetData.Center - vector3;
			Vector2 vector5 = vector4.SafeNormalize(Vector2.UnitY) * num;
			bool flag4 = Collision.CanHit(base.Center, 1, 1, targetData.Center, 1, 1);
			if (localAI[0] < 0f)
			{
				localAI[0] += 1f;
			}
			if (!flag)
			{
				velocity = (velocity * (num2 - 1f) + vector5) / num2;
				EncourageDespawn(10);
			}
			else if (vector4.Length() > num8 || !flag4)
			{
				velocity = (velocity * (num3 - 1f) + vector5) / num3;
			}
			else if (vector4.Y < num12)
			{
				velocity.Y -= 0.03f;
			}
			else if (localAI[0] >= 0f)
			{
				velocity *= num5;
				if (velocity.Length() < num4 && Main.netMode != 1)
				{
					localAI[0] += 1f;
					if (localAI[0] >= (float)num6)
					{
						localAI[0] = -num7;
						direction = (spriteDirection = ((vector5.X > 0f) ? 1 : (-1)));
						vector5 = vector4 + Utils.RandomVector2(Main.rand, -25f, 25f);
						vector5.X *= 1f + (float)Main.rand.Next(-20, 21) * 0.005f;
						vector5.Y *= 1f + (float)Main.rand.Next(-20, 21) * 0.005f;
						vector5 = vector5.SafeNormalize(Vector2.UnitY) * num11;
						vector5.X *= 1f + (float)Main.rand.Next(-20, 21) * (1f / 160f);
						vector5.Y *= 1f + (float)Main.rand.Next(-20, 21) * (1f / 160f);
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector3, vector5, num10, num9, 0f, Main.myPlayer);
					}
				}
			}
			if (!flag)
			{
				return;
			}
			bool flag5 = false;
			if (targetData.Center.Y < base.Center.Y)
			{
				flag5 = true;
			}
			if (!flag5)
			{
				Point point = base.Center.ToTileCoordinates();
				if (WorldGen.InWorld(point.X, point.Y, 2))
				{
					Tile tile = Main.tile[point.X, point.Y];
					if (tile != null && tile.active() && WorldGen.SolidTile(tile))
					{
						flag5 = true;
					}
				}
			}
			if (flag5)
			{
				velocity.Y -= 0.2f;
				if (velocity.Y < -10f)
				{
					velocity.Y = -10f;
				}
			}
		}

		public void ReflectProjectiles(Rectangle myRect)
		{
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].CanBeReflected() && CanReflectProjectile(Main.projectile[i]))
				{
					ReflectProjectile(Main.projectile[i]);
				}
			}
		}

		public bool CanReflectProjectile(Projectile proj)
		{
			bool result = proj.Hitbox.Intersects(base.Hitbox);
			int num = type;
			if (num == 618)
			{
				BloodNautilus_GetMouthPositionAndRotation(out var _, out var _);
			}
			return result;
		}

		public void BloodNautilus_GetMouthPositionAndRotation(out Vector2 mouthPosition, out Vector2 mouthDirection)
		{
			float num = rotation + 0.47123894f * (float)spriteDirection;
			if (spriteDirection == -1)
			{
				num += MathF.PI;
			}
			mouthDirection = num.ToRotationVector2();
			mouthPosition = base.Center + mouthDirection * 50f;
		}

		public void ReflectProjectile(Projectile proj)
		{
			SoundEngine.PlaySound(SoundID.Item150, proj.position);
			for (int i = 0; i < 3; i++)
			{
				int num = Dust.NewDust(proj.position, proj.width, proj.height, 31);
				Main.dust[num].velocity *= 0.3f;
			}
			proj.reflected = true;
			proj.hostile = true;
			proj.friendly = false;
			Vector2 vector = Main.player[proj.owner].Center - proj.Center;
			vector.Normalize();
			vector *= proj.oldVelocity.Length();
			proj.velocity = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
			proj.velocity.Normalize();
			proj.velocity *= vector.Length();
			proj.velocity += vector * 20f;
			proj.velocity.Normalize();
			proj.velocity *= vector.Length();
			proj.damage /= 2;
			proj.damage /= 2;
			proj.penetrate = 1;
		}

		public int GetShootingFrame(float circleY)
		{
			int num = -4;
			if (circleY < -0.3f)
			{
				num = 1;
			}
			if (circleY < -0.1f)
			{
				num = 0;
			}
			if (circleY > 0.1f)
			{
				num = 2;
			}
			if (circleY > 0.3f)
			{
				num = 3;
			}
			if (type == 228 || type == 229 || type == 209 || type == 22 || type == 368)
			{
				if (num == -4)
				{
					num = 1;
				}
				if (circleY >= -0.1f)
				{
					num++;
				}
			}
			return num;
		}

		public Tuple<Vector2, float> GetSwingStats(int swingMax, int swingCurrent, int aimDir, int itemWidth, int itemHeight)
		{
			Vector2 zero = Vector2.Zero;
			if ((double)swingCurrent < (double)swingMax * 0.333)
			{
				float num = 10f;
				if (itemWidth > 32)
				{
					num = 14f;
				}
				if (itemWidth >= 52)
				{
					num = 24f;
				}
				if (itemWidth >= 64)
				{
					num = 28f;
				}
				if (itemWidth >= 92)
				{
					num = 38f;
				}
				zero.X = base.Center.X + ((float)itemWidth * 0.5f - num) * (float)aimDir;
				zero.Y = position.Y + 24f;
			}
			else if ((double)swingCurrent < (double)swingMax * 0.666)
			{
				float num2 = 10f;
				if (itemWidth > 32)
				{
					num2 = 18f;
				}
				if (itemWidth >= 52)
				{
					num2 = 24f;
				}
				if (itemWidth >= 64)
				{
					num2 = 28f;
				}
				if (itemWidth >= 92)
				{
					num2 = 38f;
				}
				zero.X = base.Center.X + ((float)itemWidth * 0.5f - num2) * (float)aimDir;
				num2 = 10f;
				if (itemHeight > 32)
				{
					num2 = 8f;
				}
				if (itemHeight > 52)
				{
					num2 = 12f;
				}
				if (itemHeight > 64)
				{
					num2 = 14f;
				}
				zero.Y = position.Y + num2;
			}
			else
			{
				float num3 = 6f;
				if (itemWidth > 32)
				{
					num3 = 14f;
				}
				if (itemWidth >= 48)
				{
					num3 = 18f;
				}
				if (itemWidth >= 52)
				{
					num3 = 24f;
				}
				if (itemWidth >= 64)
				{
					num3 = 28f;
				}
				if (itemWidth >= 92)
				{
					num3 = 38f;
				}
				zero.X = base.Center.X - ((float)itemWidth * 0.5f - num3) * (float)aimDir;
				num3 = 10f;
				if (itemHeight > 32)
				{
					num3 = 10f;
				}
				if (itemHeight > 52)
				{
					num3 = 12f;
				}
				if (itemHeight > 64)
				{
					num3 = 14f;
				}
				zero.Y = position.Y + num3;
			}
			float item = ((float)swingCurrent / (float)swingMax - 0.5f) * (float)(-aimDir) * 3.5f - (float)aimDir * 0.3f;
			return Tuple.Create(zero, item);
		}

		public void TweakSwingStats(int swingMax, int swingCurrent, int aimDir, ref Rectangle itemRectangle)
		{
			if ((double)swingCurrent < (double)swingMax * 0.333)
			{
				if (aimDir == -1)
				{
					itemRectangle.X -= (int)((double)itemRectangle.Width * 1.4 - (double)itemRectangle.Width);
				}
				itemRectangle.Width = (int)((double)itemRectangle.Width * 1.4);
				itemRectangle.Y += (int)((double)itemRectangle.Height * 0.5);
				itemRectangle.Height = (int)((double)itemRectangle.Height * 1.1);
			}
			else if (!((double)swingCurrent < (double)swingMax * 0.666))
			{
				if (aimDir == 1)
				{
					itemRectangle.X -= (int)((double)itemRectangle.Width * 1.2);
				}
				itemRectangle.Width *= 2;
				itemRectangle.Y -= (int)((double)itemRectangle.Height * 1.4 - (double)itemRectangle.Height);
				itemRectangle.Height = (int)((double)itemRectangle.Height * 1.4);
			}
		}

		public bool UsesPartyHat()
		{
			if (type == 441 || type == 37 || type == 633)
			{
				return false;
			}
			if (type == 20 && townNpcVariationIndex == 1)
			{
				return false;
			}
			if (ForcePartyHatOn)
			{
				return true;
			}
			if (IsABestiaryIconDummy)
			{
				return false;
			}
			if (frame.Height > 0 && townNPC)
			{
				return BirthdayParty.PartyIsUp;
			}
			return false;
		}

		public PartyHatColor GetPartyHatColor()
		{
			if (!UsesPartyHat() || string.IsNullOrEmpty(GivenOrTypeName))
			{
				return PartyHatColor.None;
			}
			int num = GivenOrTypeName.Length + GivenOrTypeName[0];
			int num2 = Main.moonPhase;
			if (Main.dayTime)
			{
				num2--;
			}
			num += whoAmI;
			num += num2 * (whoAmI % 2 == 0).ToDirectionInt();
			if (num < 0)
			{
				num += 5;
			}
			num %= 5;
			if (num == 0)
			{
				num++;
			}
			return (PartyHatColor)num;
		}

		public void SetFrameSize()
		{
			Main.instance.LoadNPC(type);
			if (setFrameSize)
			{
				frame = new Rectangle(0, 0, TextureAssets.Npc[type].Width(), TextureAssets.Npc[type].Height() / Main.npcFrameCount[type]);
				setFrameSize = false;
			}
		}

		public void FindFrame()
		{
			position += netOffset;
			int num = 1;
			if (!Main.dedServ)
			{
				if (!TextureAssets.Npc[type].get_IsLoaded())
				{
					return;
				}
				num = TextureAssets.Npc[type].Height() / Main.npcFrameCount[type];
			}
			int num2 = 0;
			if (aiAction == 0)
			{
				num2 = ((velocity.Y < 0f) ? 2 : ((velocity.Y > 0f) ? 3 : ((velocity.X != 0f) ? 1 : 0)));
			}
			else if (aiAction == 1)
			{
				num2 = 4;
			}
			switch (type)
			{
			case 668:
			{
				int y2 = frame.Y;
				int num144 = y2;
				frame.Width = 180;
				if (ai[0] == 1f)
				{
					spriteDirection = direction;
					int num145 = 12;
					int num146 = 17;
					if (y2 < num145 || y2 > num146)
					{
						y2 = num145;
						frameCounter = 0.0;
						if (!IsABestiaryIconDummy && y2 != num144)
						{
							SoundEngine.PlaySound(SoundID.DeerclopsScream, base.Center);
						}
					}
					frameCounter += 1.0;
					int sequenceFrame = (int)frameCounter / 4;
					y2 = FindFrame_Deerclops_GetAttack1Frame(sequenceFrame);
				}
				else if (ai[0] == 2f)
				{
					spriteDirection = direction;
					int num147 = 12;
					int num148 = 18;
					if (y2 < num147 || y2 > num148)
					{
						y2 = num147;
						frameCounter = 0.0;
						if (!IsABestiaryIconDummy && y2 != num144)
						{
							SoundEngine.PlaySound(SoundID.DeerclopsScream, base.Center);
						}
					}
					frameCounter += 1.0;
					int sequenceFrame2 = (int)frameCounter / 4;
					y2 = FindFrame_Deerclops_GetAttack2Frame(sequenceFrame2);
					spriteDirection = direction;
				}
				else if (ai[0] == 3f || ai[0] == 5f || ai[0] == 7f || ai[0] == 8f)
				{
					spriteDirection = direction;
					int num149 = 19;
					int num150 = 24;
					if (y2 < num149 || y2 > num150)
					{
						y2 = num149;
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					int sequenceFrame3 = (int)frameCounter / 4;
					y2 = FindFrame_Deerclops_GetAttack3Frame(sequenceFrame3);
					if (y2 == 21)
					{
						spriteDirection = direction;
					}
				}
				else if (ai[0] == 4f)
				{
					spriteDirection = direction;
					int num151 = 12;
					int num152 = 17;
					if (y2 < num151 || y2 > num152)
					{
						y2 = num151;
						frameCounter = 0.0;
						if (!IsABestiaryIconDummy && y2 != num144)
						{
							SoundEngine.PlaySound(SoundID.DeerclopsScream, base.Center);
						}
					}
					frameCounter += 1.0;
					int sequenceFrame4 = (int)frameCounter / 4;
					y2 = FindFrame_Deerclops_GetAttack1Frame(sequenceFrame4);
				}
				else
				{
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					if (velocity.Y > 0f || localAI[0] == 1f)
					{
						frameCounter = 0.0;
						y2 = 1;
					}
					else if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						y2 = 0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X);
						int num153 = 10;
						int num154 = 15;
						if (frameCounter >= (double)(num153 * num154) || frameCounter < 0.0)
						{
							frameCounter = 0.0;
						}
						y2 = 2 + (int)(frameCounter / (double)num154);
						if (num144 != y2 && !IsABestiaryIconDummy && (y2 == 4 || y2 == 9))
						{
							SoundEngine.PlaySound(SoundID.DeerclopsStep, base.Bottom);
						}
					}
				}
				frame.Y = y2;
				break;
			}
			case 657:
			{
				bool flag = life <= lifeMax / 2;
				frame.Width = 180;
				int num9 = frame.Y / num;
				if ((flag && noGravity) || velocity.Y < 0f)
				{
					if (num9 < 20 || num9 > 23)
					{
						if (num9 < 4 || num9 > 7)
						{
							num9 = 4;
							frameCounter = -1.0;
						}
						if ((frameCounter += 1.0) >= 4.0)
						{
							frameCounter = 0.0;
							num9++;
							if (num9 >= 7)
							{
								num9 = ((!flag) ? 7 : 22);
							}
						}
					}
					else if ((frameCounter += 1.0) >= 5.0)
					{
						frameCounter = 0.0;
						num9++;
						if (num9 >= 24)
						{
							num9 = 20;
						}
					}
					frame.Y = num9 * num;
				}
				else if (velocity.Y > 0f)
				{
					if (num9 < 8 || num9 > 10)
					{
						num9 = 8;
						frameCounter = -1.0;
					}
					if ((frameCounter += 1.0) >= 8.0)
					{
						frameCounter = 0.0;
						num9++;
						if (num9 >= 10)
						{
							num9 = 10;
						}
					}
					frame.Y = num9 * num;
				}
				else
				{
					if (velocity.Y != 0f)
					{
						break;
					}
					if (ai[0] == 5f)
					{
						frameCounter = 0.0;
						num9 = ((int)ai[1] / 3 % 3) switch
						{
							1 => 14, 
							2 => 15, 
							_ => 13, 
						};
					}
					else if (ai[0] == 4f)
					{
						frameCounter = 0.0;
						switch ((int)ai[1] / 15)
						{
						default:
							num9 = 12;
							break;
						case 1:
							num9 = 11;
							break;
						case 2:
						case 3:
							num9 = 10;
							break;
						}
					}
					else
					{
						bool flag2 = num9 >= 10 && num9 <= 12;
						int num10 = 10;
						if (flag2)
						{
							num10 = 6;
						}
						if (!flag2 && num9 >= 4)
						{
							num9 = 0;
							frameCounter = -1.0;
						}
						if ((frameCounter += 1.0) >= (double)num10)
						{
							frameCounter = 0.0;
							num9++;
							if ((!flag2 || num9 == 13) && num9 >= 4)
							{
								num9 = 0;
							}
						}
					}
					frame.Y = num9 * num;
				}
				break;
			}
			case 604:
			case 605:
			{
				spriteDirection = direction;
				int num155 = 2;
				int num156 = 4;
				if ((frameCounter += 1.0) >= (double)(num156 * num155))
				{
					frameCounter = 0.0;
				}
				if (velocity.Y == 0f)
				{
					frame.Y = num * ((int)frameCounter / num155);
				}
				else
				{
					frame.Y = num * (4 + (int)frameCounter / num155);
				}
				break;
			}
			case 669:
			{
				spriteDirection = direction;
				int num186 = 2;
				int num187 = 4;
				if ((frameCounter += 1.0) >= (double)(num187 * num186))
				{
					frameCounter = 0.0;
				}
				if (velocity.Y == 0f)
				{
					frame.Y = num * ((int)frameCounter / num186);
				}
				else
				{
					frame.Y = num * (4 + (int)frameCounter / num186);
				}
				break;
			}
			case 618:
				if ((frameCounter += 1.0) >= 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 619:
				if ((frameCounter += 1.0) >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 636:
				frame.Y = (AI_120_HallowBoss_IsInPhase2() ? num : 0);
				break;
			case 568:
			case 569:
				if (ai[0] > 0f)
				{
					int num188 = frame.Y / num;
					spriteDirection = direction;
					if (num188 < 5 || num188 > 16)
					{
						frameCounter = 0.0;
					}
					num188 = 7;
					frameCounter += 1.0;
					int num189 = 0;
					double num190 = frameCounter;
					int num17 = num189 + 1;
					num189 = num17;
					if (num190 >= (double)(5 * num17))
					{
						num188 = 8;
					}
					double num191 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num191 >= (double)(5 * num17))
					{
						num188 = 9;
					}
					double num192 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num192 >= (double)(5 * num17))
					{
						num188 = 10;
					}
					double num193 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num193 >= (double)(5 * num17))
					{
						num188 = 7;
					}
					double num194 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num194 >= (double)(5 * num17))
					{
						num188 = 8;
					}
					double num195 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num195 >= (double)(5 * num17))
					{
						num188 = 9;
					}
					double num196 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num196 >= (double)(5 * num17))
					{
						num188 = 10;
					}
					double num197 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num197 >= (double)(5 * num17))
					{
						num188 = 7;
					}
					double num198 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num198 >= (double)(5 * num17))
					{
						num188 = 8;
					}
					double num199 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num199 >= (double)(5 * num17))
					{
						num188 = 9;
					}
					double num200 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num200 >= (double)(5 * num17))
					{
						num188 = 10;
					}
					double num201 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num201 >= (double)(5 * num17))
					{
						num188 = 7;
					}
					double num202 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num202 >= (double)(5 * num17))
					{
						num188 = 8;
					}
					double num203 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num203 >= (double)(5 * num17))
					{
						num188 = 9;
					}
					double num204 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num204 >= (double)(5 * num17))
					{
						num188 = 10;
					}
					double num205 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num205 >= (double)(5 * num17))
					{
						num188 = 7;
					}
					double num206 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num206 >= (double)(5 * num17))
					{
						num188 = 8;
					}
					double num207 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num207 >= (double)(5 * num17))
					{
						num188 = 9;
					}
					double num208 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num208 >= (double)(5 * num17))
					{
						num188 = 10;
					}
					double num209 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num209 >= (double)(5 * num17))
					{
						num188 = 7;
					}
					double num210 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num210 >= (double)(5 * num17))
					{
						num188 = 8;
					}
					double num211 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num211 >= (double)(5 * num17))
					{
						num188 = 9;
					}
					double num212 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num212 >= (double)(5 * num17))
					{
						num188 = 10;
					}
					double num213 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num213 >= (double)(5 * num17))
					{
						num188 = 11;
					}
					double num214 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num214 >= (double)(5 * num17))
					{
						num188 = 12;
					}
					double num215 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num215 >= (double)(5 * num17))
					{
						num188 = 13;
					}
					double num216 = frameCounter;
					num17 = num189 + 1;
					num189 = num17;
					if (num216 >= (double)(5 * num17))
					{
						num188 = 14;
					}
					if (frameCounter >= 270.0)
					{
						num188 = 14;
						frameCounter -= 10.0;
					}
					frame.Y = num * num188;
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 6;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 56.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 8.0);
				break;
			case 551:
			{
				int num11 = frame.Y / num;
				if (ai[0] == 4f)
				{
					float num12 = 60f;
					int num13 = 10;
					int num14 = 6 * num13;
					if (num11 < 5)
					{
						frameCounter = 0.0;
					}
					num11 = 5;
					frameCounter = (int)ai[1];
					int num15 = 0;
					double num16 = frameCounter;
					int num17 = num15 + 1;
					num15 = num17;
					if (num16 >= (double)(5 * num17))
					{
						num11 = 6;
					}
					num15 = 0;
					if (frameCounter >= (double)(num12 - 6f))
					{
						num11 = 7;
					}
					if (frameCounter >= (double)(num12 - 3f))
					{
						num11 = 8;
					}
					if (frameCounter >= (double)num12)
					{
						num11 = 9 + (int)frameCounter / 3 % 2;
					}
					num15 = 0;
					if (frameCounter >= (double)(num12 + (float)num14 + 3f))
					{
						num11 = 8;
					}
					double num18 = frameCounter;
					float num19 = num12 + (float)num14 + 3f;
					num17 = num15 + 1;
					num15 = num17;
					if (num18 >= (double)(num19 + (float)(5 * num17)))
					{
						num11 = 7;
					}
					double num20 = frameCounter;
					float num21 = num12 + (float)num14 + 3f;
					num17 = num15 + 1;
					num15 = num17;
					if (num20 >= (double)(num21 + (float)(5 * num17)))
					{
						num11 = 0;
					}
				}
				else if (ai[0] == 3f)
				{
					float num22 = 40f;
					float num23 = 80f;
					float num24 = num22 + num23;
					float num25 = 25f;
					if (num11 < 5)
					{
						frameCounter = 0.0;
					}
					num11 = 5;
					frameCounter = (int)ai[1];
					int num26 = 0;
					double num27 = frameCounter;
					int num17 = num26 + 1;
					num26 = num17;
					if (num27 >= (double)(5 * num17))
					{
						num11 = 6;
					}
					num26 = 0;
					if (frameCounter >= (double)(num22 - 6f))
					{
						num11 = 7;
					}
					if (frameCounter >= (double)(num22 - 3f))
					{
						num11 = 8;
					}
					if (frameCounter >= (double)num22)
					{
						num11 = 9 + (int)frameCounter / 3 % 2;
					}
					num26 = 0;
					if (frameCounter >= (double)(num24 - num25 + 3f))
					{
						num11 = 8;
					}
					double num28 = frameCounter;
					float num29 = num24 - num25 + 3f;
					num17 = num26 + 1;
					num26 = num17;
					if (num28 >= (double)(num29 + (float)(5 * num17)))
					{
						num11 = 7;
					}
					double num30 = frameCounter;
					float num31 = num24 - num25 + 3f;
					num17 = num26 + 1;
					num26 = num17;
					if (num30 >= (double)(num31 + (float)(5 * num17)))
					{
						num11 = 0;
					}
				}
				else if (ai[0] == 5f)
				{
					num11 = 3;
				}
				else if (ai[0] == 6f)
				{
					if (num11 > 4)
					{
						frameCounter = 0.0;
					}
					num11 = 1;
					frameCounter = (int)ai[1];
					int num32 = 0;
					double num33 = frameCounter;
					int num17 = num32 + 1;
					num32 = num17;
					if (num33 >= (double)(8 * num17))
					{
						num11 = 2;
					}
					double num34 = frameCounter;
					num17 = num32 + 1;
					num32 = num17;
					if (num34 >= (double)(8 * num17))
					{
						num11 = 3;
					}
					double num35 = frameCounter;
					num17 = num32 + 1;
					num32 = num17;
					if (num35 >= (double)(8 * num17))
					{
						num11 = 4;
					}
					double num36 = frameCounter;
					num17 = num32 + 1;
					num32 = num17;
					if (num36 >= (double)(8 * num17))
					{
						num11 = 3;
					}
					double num37 = frameCounter;
					num17 = num32 + 1;
					num32 = num17;
					if (num37 >= (double)(8 * num17))
					{
						num11 = 4;
					}
					double num38 = frameCounter;
					num17 = num32 + 1;
					num32 = num17;
					if (num38 >= (double)(8 * num17))
					{
						num11 = 3;
					}
					double num39 = frameCounter;
					num17 = num32 + 1;
					num32 = num17;
					if (num39 >= (double)(8 * num17))
					{
						num11 = 2;
					}
					double num40 = frameCounter;
					num17 = num32 + 1;
					num32 = num17;
					if (num40 >= (double)(8 * num17))
					{
						num11 = 1;
					}
					double num41 = frameCounter;
					num17 = num32 + 1;
					num32 = num17;
					if (num41 >= (double)(8 * num17))
					{
						num11 = 0;
					}
				}
				else
				{
					num11 = 0;
				}
				frame.Y = num * num11;
				break;
			}
			case 552:
			case 553:
			case 554:
				if (ai[0] > 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 10 || frame.Y > num * 13 || ai[1] == 29f)
					{
						frame.Y = num * 10;
						frameCounter = 0.0;
					}
					if ((frameCounter += 1.0) >= 6.0 && frame.Y < num * 13)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 9;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 64.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 8.0);
				break;
			case 572:
			case 573:
				if (ai[0] > 0f && ai[1] == 0f)
				{
					spriteDirection = direction;
					if (frame.Y != num * 8 || frameCounter > 2.0)
					{
						frame.Y = num * 8;
						frameCounter = 0.0;
					}
					if (frameCounter == 0.0)
					{
						frameCounter = 1.0;
						EmoteBubble.NewBubble(3, new WorldUIAnchor(this), 60);
					}
					break;
				}
				if (ai[1] == 1f)
				{
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
					{
						frameCounter = 0.0;
						frame.Y = num * 17;
						break;
					}
					if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						frame.Y = num * 8;
						break;
					}
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 64.0 || frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = num * ((int)(frameCounter / 8.0) + 8);
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 16;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 64.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 8.0);
				break;
			case 566:
			case 567:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 64.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 8.0);
				break;
			case 576:
			case 577:
			{
				int num76 = frame.Y;
				frame.Width = 80;
				if (ai[0] > 0f && ai[1] == 0f)
				{
					spriteDirection = direction;
					if (num76 < 11 || num76 > 20)
					{
						num76 = 11;
						frameCounter = 0.0;
					}
					int num77 = 4;
					if (num76 == 13 || num76 == 19)
					{
						num77 = 8;
					}
					if (num76 == 14 || num76 == 18)
					{
						num77 = 2;
					}
					if ((frameCounter += 1.0) >= (double)num77 && num76 < 20)
					{
						frameCounter = 0.0;
						num76++;
					}
				}
				else if (ai[0] > 0f && ai[1] == 2f)
				{
					spriteDirection = direction;
					if (num76 < 37 || num76 > 47)
					{
						num76 = 39;
						frameCounter = 0.0;
					}
					int num78 = 5;
					if (num76 == 42)
					{
						num78 = 6;
					}
					if (num76 == 45)
					{
						num78 = 8;
					}
					if (num76 == 46)
					{
						num78 = 4;
					}
					if (num76 == 47)
					{
						num78 = 26;
					}
					if (num76 == 37 || num76 == 38)
					{
						num78 = 7;
					}
					bool flag7 = true;
					if (num76 == 46 && velocity.Y != 0f)
					{
						flag7 = false;
					}
					if (num76 == 38)
					{
						flag7 = false;
					}
					if (flag7)
					{
						frameCounter += 1.0;
					}
					if (frameCounter >= (double)num78)
					{
						if (num76 < 47)
						{
							frameCounter = 0.0;
							num76++;
						}
						else
						{
							num76 = 37;
							frameCounter = 0.0;
						}
					}
				}
				else if (ai[0] > 0f && ai[1] == 1f)
				{
					spriteDirection = direction;
					if (num76 < 21 || num76 > 38)
					{
						num76 = 21;
						frameCounter = 0.0;
					}
					int num79 = 5;
					if ((frameCounter += 1.0) >= (double)num79 && num76 < 38)
					{
						frameCounter = 0.0;
						num76++;
					}
				}
				else
				{
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					if (velocity.Y != 0f)
					{
						frameCounter = 0.0;
						num76 = 43;
					}
					else if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						num76 = 0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X);
						if (frameCounter >= 60.0 || frameCounter < 0.0)
						{
							frameCounter = 0.0;
						}
						num76 = 1 + (int)(frameCounter / 6.0);
					}
				}
				frame.Y = num76;
				break;
			}
			case 570:
			case 571:
				if (ai[1] > 0f && ai[0] > 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 10 || frame.Y > num * 15 || ai[1] == 59f)
					{
						frame.Y = num * 10;
						frameCounter = 0.0;
					}
					int num232 = 5;
					if (frame.Y == num * 14)
					{
						num232 = 35;
					}
					if ((frameCounter += 1.0) >= (double)num232 && frame.Y < num * 15)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 9;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 64.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 8.0 + 2.0);
				break;
			case 561:
			case 562:
			case 563:
				if (ai[1] > 0f && ai[0] > 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 10 || frame.Y > num * 13 || ai[1] == 89f)
					{
						frame.Y = num * 10;
						frameCounter = 0.0;
					}
					if ((frameCounter += 1.0) >= 6.0 && frame.Y < num * 13)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 9;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 64.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 8.0);
				break;
			case 555:
			case 556:
			case 557:
				if (ai[1] > 0f && ai[0] > 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 10 || frame.Y > num * 16 || ai[1] == 41f)
					{
						frame.Y = num * 10;
						frameCounter = 0.0;
					}
					if ((frameCounter += 1.0) >= 6.0 && frame.Y < num * 16)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 64.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * ((int)(frameCounter / 8.0) + 2);
				break;
			case 558:
			case 559:
			case 560:
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				float num45 = velocity.ToRotation();
				if (velocity.X < 0f)
				{
					num45 += MathF.PI;
				}
				if (ai[0] != 2f)
				{
					num45 = velocity.X * 0.1f;
				}
				rotation = num45;
				if (ai[0] == 2f)
				{
					frame.Y = num * 4;
				}
				else if ((frameCounter += 1.0) >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
				break;
			}
			case 578:
				rotation = velocity.X * 0.1f;
				if ((frameCounter += 1.0) >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
				break;
			case 574:
			case 575:
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				float num230 = velocity.ToRotation();
				if (velocity.X < 0f)
				{
					num230 += MathF.PI;
				}
				rotation = rotation.AngleTowards(num230, 0.02f);
				if (ai[0] != 0f)
				{
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
					}
					int num231 = 4;
					if (frame.Y >= num * 5)
					{
						num231 = 8;
					}
					Vector2 vector3 = base.Center + new Vector2(56 * spriteDirection, -30f).RotatedBy(rotation);
					if ((frameCounter += 1.0) >= (double)num231 && frame.Y < num * 9)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y == num * 9)
						{
							for (int k = 0; k < 8; k++)
							{
								Dust dust2 = Dust.NewDustDirect(vector3, 0, 0, 6, 0f, 0f, 100);
								Dust dust = dust2;
								dust.velocity *= 3f;
								dust2.scale = 0.6f;
								dust2.fadeIn = 1.2f;
								dust2.noGravity = true;
								dust2.noLight = true;
							}
						}
					}
					if (frame.Y < num * 9 || !(ai[0] < 3f))
					{
						break;
					}
					Vector2 value = vector3;
					Vector2 value2 = vector3 + (oldPos[3] - position);
					int maxValue = 5;
					if (frameCounter > 60.0)
					{
						maxValue = 4;
					}
					if (frameCounter > 180.0)
					{
						maxValue = 3;
					}
					if (frameCounter > 300.0)
					{
						maxValue = 2;
					}
					if (frameCounter > 600.0)
					{
						maxValue = 1;
					}
					for (int l = 0; l < 2; l++)
					{
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust3 = Dust.NewDustDirect(Vector2.Lerp(value2, value, (float)l / 10f + 0.1f), 0, 0, 6, 0f, 0f, 50);
							dust3.scale = 0.3f;
							dust3.fadeIn = 1.5f;
							dust3.noGravity = true;
							dust3.noLight = true;
						}
					}
				}
				else if ((frameCounter += 1.0) >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
				break;
			}
			case 549:
				spriteDirection = 1;
				rotation = 0f;
				if ((frameCounter += 1.0) >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 594:
				spriteDirection = 1;
				frame.Y = (int)ai[2];
				frame.Width = 32;
				break;
			case 564:
			case 565:
			{
				int y = frame.Y;
				frame.Width = 80;
				frame.Height = 80;
				if (ai[0] > 0f && ai[1] == 0f)
				{
					spriteDirection = direction;
					if (y < 5 || y > 13)
					{
						frameCounter = 0.0;
					}
					y = 5;
					frameCounter += 1.0;
					int num87 = 0;
					double num88 = frameCounter;
					int num17 = num87 + 1;
					num87 = num17;
					if (num88 >= (double)(7 * num17))
					{
						y = 6;
					}
					double num89 = frameCounter;
					num17 = num87 + 1;
					num87 = num17;
					if (num89 >= (double)(7 * num17))
					{
						y = 7;
					}
					double num90 = frameCounter;
					num17 = num87 + 1;
					num87 = num17;
					if (num90 >= (double)(7 * num17))
					{
						y = 5;
					}
					double num91 = frameCounter;
					num17 = num87 + 1;
					num87 = num17;
					if (num91 >= (double)(7 * num17))
					{
						y = 6;
					}
					double num92 = frameCounter;
					num17 = num87 + 1;
					num87 = num17;
					if (num92 >= (double)(7 * num17))
					{
						y = 7;
					}
					double num93 = frameCounter;
					num17 = num87 + 1;
					num87 = num17;
					if (num93 >= (double)(7 * num17))
					{
						y = 5;
					}
					double num94 = frameCounter;
					num17 = num87 + 1;
					num87 = num17;
					if (num94 >= (double)(7 * num17))
					{
						y = 6;
					}
					double num95 = frameCounter;
					num17 = num87 + 1;
					num87 = num17;
					if (num95 >= (double)(7 * num17))
					{
						y = 7;
					}
					double num96 = frameCounter;
					num17 = num87 + 1;
					num87 = num17;
					if (num96 >= (double)(7 * num17))
					{
						y = 8;
					}
					double num97 = frameCounter;
					num17 = num87 + 1;
					num87 = num17;
					if (num97 >= (double)(7 * num17))
					{
						y = 9;
					}
					double num98 = frameCounter;
					num17 = num87 + 1;
					num87 = num17;
					if (num98 >= (double)(7 * num17))
					{
						y = 10;
					}
					double num99 = frameCounter;
					num17 = num87 + 1;
					num87 = num17;
					if (num99 >= (double)(7 * num17))
					{
						y = 11;
					}
					double num100 = frameCounter;
					num17 = num87 + 1;
					num87 = num17;
					if (num100 >= (double)(7 * num17))
					{
						y = 12;
					}
					double num101 = frameCounter;
					num17 = num87 + 1;
					num87 = num17;
					if (num101 >= (double)(7 * num17))
					{
						y = 5;
						frameCounter = 0.0;
					}
				}
				else if (ai[0] > 0f && ai[1] == 1f)
				{
					spriteDirection = direction;
					if (y < 13 || y > 25)
					{
						frameCounter = 0.0;
					}
					y = 13;
					frameCounter += 1.0;
					int num102 = 0;
					double num103 = frameCounter;
					int num17 = num102 + 1;
					num102 = num17;
					if (num103 >= (double)(8 * num17))
					{
						y = 14;
					}
					double num104 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num104 >= (double)(8 * num17))
					{
						y = 15;
					}
					double num105 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num105 >= (double)(8 * num17))
					{
						y = 16;
					}
					double num106 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num106 >= (double)(8 * num17))
					{
						y = 17;
					}
					double num107 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num107 >= (double)(8 * num17))
					{
						y = 18;
					}
					double num108 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num108 >= (double)(8 * num17))
					{
						y = 19;
					}
					double num109 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num109 >= (double)(8 * num17))
					{
						y = 20;
					}
					double num110 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num110 >= (double)(8 * num17))
					{
						y = 18;
					}
					double num111 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num111 >= (double)(8 * num17))
					{
						y = 19;
					}
					double num112 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num112 >= (double)(8 * num17))
					{
						y = 20;
					}
					double num113 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num113 >= (double)(8 * num17))
					{
						y = 21;
					}
					double num114 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num114 >= (double)(8 * num17))
					{
						y = 22;
					}
					double num115 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num115 >= (double)(8 * num17))
					{
						y = 23;
					}
					double num116 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num116 >= (double)(8 * num17))
					{
						y = 24;
					}
					double num117 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num117 >= (double)(8 * num17))
					{
						y = 25;
					}
					double num118 = frameCounter;
					num17 = num102 + 1;
					num102 = num17;
					if (num118 >= (double)(8 * num17))
					{
						y = 14;
						frameCounter = 0.0;
					}
				}
				else if (ai[0] > 0f && ai[1] == 2f)
				{
					spriteDirection = direction;
					if (y < 26 || y > 40)
					{
						frameCounter = 0.0;
					}
					y = 26;
					frameCounter += 1.0;
					int num119 = 0;
					double num120 = frameCounter;
					int num17 = num119 + 1;
					num119 = num17;
					if (num120 >= (double)(8 * num17))
					{
						y = 27;
					}
					double num121 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num121 >= (double)(8 * num17))
					{
						y = 28;
					}
					double num122 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num122 >= (double)(8 * num17))
					{
						y = 29;
					}
					double num123 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num123 >= (double)(8 * num17))
					{
						y = 26;
					}
					double num124 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num124 >= (double)(8 * num17))
					{
						y = 27;
					}
					double num125 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num125 >= (double)(8 * num17))
					{
						y = 28;
					}
					double num126 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num126 >= (double)(8 * num17))
					{
						y = 29;
					}
					double num127 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num127 >= (double)(8 * num17))
					{
						y = 26;
					}
					double num128 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num128 >= (double)(8 * num17))
					{
						y = 27;
					}
					double num129 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num129 >= (double)(8 * num17))
					{
						y = 28;
					}
					double num130 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num130 >= (double)(8 * num17))
					{
						y = 29;
					}
					double num131 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num131 >= (double)(8 * num17))
					{
						y = 30;
					}
					double num132 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num132 >= (double)(8 * num17))
					{
						y = 31;
					}
					double num133 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num133 >= (double)(8 * num17))
					{
						y = 32;
					}
					double num134 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num134 >= (double)(8 * num17))
					{
						y = 33;
					}
					double num135 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num135 >= (double)(8 * num17))
					{
						y = 34;
					}
					double num136 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num136 >= (double)(8 * num17))
					{
						y = 35;
					}
					double num137 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num137 >= (double)(8 * num17))
					{
						y = 36;
					}
					double num138 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num138 >= (double)(8 * num17))
					{
						y = 37;
					}
					double num139 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num139 >= (double)(8 * num17))
					{
						y = 38;
					}
					double num140 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num140 >= (double)(8 * num17))
					{
						y = 39;
					}
					double num141 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num141 >= (double)(8 * num17))
					{
						y = 40;
					}
					double num142 = frameCounter;
					num17 = num119 + 1;
					num119 = num17;
					if (num142 >= (double)(8 * num17))
					{
						y = 26;
						frameCounter = 0.0;
					}
				}
				else
				{
					frameCounter = frameCounter + (double)(velocity.Length() * 0.1f) + 1.0;
					if (frameCounter >= 40.0 || frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					y = (int)(frameCounter / 8.0);
				}
				frame.Y = y;
				break;
			}
			case 620:
				if (ai[1] > 0f && ai[0] > 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 14 || frame.Y > num * 20 || ai[1] == 59f)
					{
						frame.Y = num * 14;
						frameCounter = 0.0;
					}
					int num222 = 5;
					if (frame.Y == num * 17 || frame.Y == num * 16)
					{
						num222 = 3;
					}
					if ((frameCounter += 1.0) >= (double)num222 && frame.Y < num * 20)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (ai[1] > 0f && frame.Y == num * 18)
						{
							frame.Y = num * 16;
						}
					}
					break;
				}
				if (wet)
				{
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					if (spriteDirection != direction)
					{
						rotation *= -1f;
						spriteDirection = direction;
					}
					float num223 = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
					if (Math.Abs(rotation - num223) >= MathF.PI)
					{
						if (num223 < rotation)
						{
							rotation -= MathF.PI * 2f;
						}
						else
						{
							rotation += MathF.PI * 2f;
						}
					}
					rotation = (rotation * 4f + num223) / 5f;
					frameCounter += Math.Abs(velocity.Length());
					frameCounter += 1.0;
					if (frameCounter > 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 13)
					{
						frame.Y = num * 8;
					}
					else if (frame.Y / num < 8)
					{
						frame.Y = num * 13;
					}
					break;
				}
				if ((double)rotation > 3.14)
				{
					rotation -= 6.28f;
				}
				if ((double)rotation > -0.01 && (double)rotation < 0.01)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.9f;
				}
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X);
					frameCounter += 1.0;
					if (frameCounter > 9.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 7)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 17:
			case 18:
			case 19:
			case 20:
			case 21:
			case 22:
			case 26:
			case 27:
			case 28:
			case 31:
			case 37:
			case 38:
			case 44:
			case 54:
			case 73:
			case 77:
			case 78:
			case 79:
			case 80:
			case 104:
			case 107:
			case 108:
			case 120:
			case 124:
			case 140:
			case 142:
			case 159:
			case 160:
			case 162:
			case 167:
			case 178:
			case 181:
			case 185:
			case 196:
			case 197:
			case 198:
			case 201:
			case 202:
			case 203:
			case 207:
			case 208:
			case 209:
			case 212:
			case 213:
			case 227:
			case 228:
			case 229:
			case 287:
			case 294:
			case 295:
			case 296:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 322:
			case 323:
			case 324:
			case 326:
			case 338:
			case 339:
			case 340:
			case 353:
			case 368:
			case 369:
			case 441:
			case 453:
			case 460:
			case 462:
			case 463:
			case 489:
			case 534:
			case 550:
			case 588:
			case 630:
			case 632:
			case 633:
			case 635:
			case 637:
			case 638:
			case 656:
			case 663:
			case 670:
			case 678:
			case 679:
			case 680:
			case 681:
			case 682:
			case 683:
			case 684:
			{
				int num236 = (isLikeATownNPC ? NPCID.Sets.ExtraFramesCount[type] : 0);
				bool flag11 = NPCID.Sets.IsTownSlime[type];
				if (false && !Main.dedServ && TownNPCProfiles.Instance.GetProfile(type, out var profile))
				{
					Asset<Texture2D> textureNPCShouldUse = profile.GetTextureNPCShouldUse(this);
					if (textureNPCShouldUse.get_IsLoaded())
					{
						num = textureNPCShouldUse.Height() / Main.npcFrameCount[type];
						frame.Width = textureNPCShouldUse.Width();
						frame.Height = num;
					}
				}
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (NPCID.Sets.IsTownSlime[type])
					{
						spriteDirection *= -1;
					}
					int num237 = Main.npcFrameCount[type] - NPCID.Sets.AttackFrameCount[type];
					if (ai[0] == 23f)
					{
						frameCounter += 1.0;
						int num238 = frame.Y / num;
						int num17 = num237 - num238;
						if ((uint)(num17 - 1) > 1u && (uint)(num17 - 4) > 1u && num238 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num239 = 0;
						num239 = ((!(frameCounter < 6.0)) ? (num237 - 4) : (num237 - 5));
						if (ai[1] < 6f)
						{
							num239 = num237 - 5;
						}
						frame.Y = num * num239;
					}
					else if (ai[0] >= 20f && ai[0] <= 22f)
					{
						int num240 = frame.Y / num;
						switch ((int)ai[0])
						{
						case 20:
							if (flag11)
							{
								if (ai[1] > 30f && (num240 < 8 || num240 > 13))
								{
									num240 = 8;
								}
								if (num240 > 0)
								{
									frameCounter += 1.0;
								}
								if (frameCounter >= 12.0)
								{
									frameCounter = 0.0;
									num240++;
									if (num240 > 13 && ai[1] > 30f)
									{
										num240 = 8;
									}
									if (num240 > 13)
									{
										num240 = 0;
									}
								}
							}
							if (type == 656)
							{
								if (ai[1] > 30f && (num240 < 7 || num240 > 9))
								{
									num240 = 7;
								}
								if (num240 > 0)
								{
									frameCounter += 1.0;
								}
								if (frameCounter > 4.0)
								{
									frameCounter = 0.0;
									num240++;
									if (num240 > 8 && ai[1] > 30f)
									{
										num240 = 8;
									}
									if (num240 > 9)
									{
										num240 = 0;
									}
								}
							}
							if (type == 637)
							{
								if (ai[1] > 30f && (num240 < 10 || num240 > 16))
								{
									num240 = 10;
								}
								if (num240 > 0)
								{
									frameCounter += 1.0;
								}
								if (frameCounter > 4.0)
								{
									frameCounter = 0.0;
									num240++;
									if (num240 > 13 && ai[1] > 30f)
									{
										num240 = 13;
									}
									if (num240 > 16)
									{
										num240 = 0;
									}
								}
							}
							if (type != 638)
							{
								break;
							}
							if (ai[1] > 30f && (num240 < 23 || num240 > 27))
							{
								num240 = 23;
							}
							if (num240 > 0)
							{
								frameCounter += 1.0;
							}
							if (frameCounter > 4.0)
							{
								frameCounter = 0.0;
								num240++;
								if (num240 > 26 && ai[1] > 30f)
								{
									num240 = 24;
								}
								if (num240 > 27)
								{
									num240 = 0;
								}
							}
							break;
						case 21:
							if (type == 656)
							{
								if (ai[1] > 30f && (num240 < 10 || num240 > 16))
								{
									num240 = 10;
								}
								if (num240 > 0)
								{
									frameCounter += 1.0;
								}
								if (frameCounter > 4.0)
								{
									frameCounter = 0.0;
									num240++;
									if (num240 > 13 && ai[1] > 30f)
									{
										num240 = 13;
									}
									if (num240 > 16)
									{
										num240 = 0;
									}
								}
							}
							if (type == 637)
							{
								if (ai[1] > 30f && (num240 < 17 || num240 > 21))
								{
									num240 = 17;
								}
								if (num240 > 0)
								{
									frameCounter += 1.0;
								}
								if (frameCounter > 4.0)
								{
									frameCounter = 0.0;
									num240++;
									if (num240 > 19 && ai[1] > 30f)
									{
										num240 = 19;
									}
									if (num240 > 21)
									{
										num240 = 0;
									}
								}
							}
							if (type != 638)
							{
								break;
							}
							if (ai[1] > 30f && (num240 < 17 || num240 > 22))
							{
								num240 = 17;
							}
							if (num240 > 0)
							{
								frameCounter += 1.0;
							}
							if (frameCounter > 4.0)
							{
								frameCounter = 0.0;
								num240++;
								if (num240 > 21 && ai[1] > 30f)
								{
									num240 = 18;
								}
								if (num240 > 22)
								{
									num240 = 0;
								}
							}
							break;
						case 22:
							if (type == 656)
							{
								int num241 = Main.npcFrameCount[type];
								if (ai[1] > 40f && (num240 < 17 || num240 >= num241))
								{
									num240 = 17;
								}
								if (num240 > 0)
								{
									frameCounter += 1.0;
								}
								if (frameCounter > 4.0)
								{
									frameCounter = 0.0;
									num240++;
									if (num240 > 20 && ai[1] > 40f)
									{
										num240 = 19;
									}
									if (num240 >= num241)
									{
										num240 = 0;
									}
								}
							}
							if (type != 637)
							{
								break;
							}
							if (ai[1] > 30f && (num240 < 17 || num240 > 27))
							{
								num240 = 17;
							}
							if (num240 > 0)
							{
								frameCounter += 1.0;
							}
							if (frameCounter > 4.0)
							{
								frameCounter = 0.0;
								num240++;
								if (num240 > 27)
								{
									num240 = ((!(ai[1] <= 30f)) ? 22 : 20);
								}
								else if (ai[1] <= 30f && num240 == 22)
								{
									num240 = 0;
								}
								else if (ai[1] > 30f && num240 > 19 && num240 < 22)
								{
									num240 = 22;
								}
							}
							break;
						}
						frame.Y = num240 * num;
					}
					else if (ai[0] == 2f)
					{
						frameCounter += 1.0;
						if (frame.Y / num == num237 - 1 && frameCounter >= 5.0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						else if (frame.Y / num == 0 && frameCounter >= 40.0)
						{
							frame.Y = num * (num237 - 1);
							frameCounter = 0.0;
						}
						else if (frame.Y != 0 && frame.Y != num * (num237 - 1))
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
					}
					else if (ai[0] == 11f)
					{
						frameCounter += 1.0;
						if (frame.Y / num == num237 - 1 && frameCounter >= 50.0)
						{
							if (frameCounter == 50.0)
							{
								int num242 = Main.rand.Next(4);
								for (int m = 0; m < 3 + num242; m++)
								{
									int num243 = Dust.NewDust(base.Center + Vector2.UnitX * -direction * 8f - Vector2.One * 5f + Vector2.UnitY * 8f, 3, 6, 216, -direction, 1f);
									Dust dust = Main.dust[num243];
									dust.velocity /= 2f;
									Main.dust[num243].scale = 0.8f;
								}
								if (Main.rand.Next(30) == 0)
								{
									int num244 = Gore.NewGore(base.Center + Vector2.UnitX * -direction * 8f, Vector2.Zero, Main.rand.Next(580, 583));
									Gore gore = Main.gore[num244];
									gore.velocity /= 2f;
									Main.gore[num244].velocity.Y = Math.Abs(Main.gore[num244].velocity.Y);
									Main.gore[num244].velocity.X = (0f - Math.Abs(Main.gore[num244].velocity.X)) * (float)direction;
								}
							}
							if (frameCounter >= 100.0 && Main.rand.Next(20) == 0)
							{
								frame.Y = 0;
								frameCounter = 0.0;
							}
						}
						else if (frame.Y / num == 0 && frameCounter >= 20.0)
						{
							frame.Y = num * (num237 - 1);
							frameCounter = 0.0;
							EmoteBubble.NewBubble(89, new WorldUIAnchor(this), 90);
						}
						else if (frame.Y != 0 && frame.Y != num * (num237 - 1))
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
					}
					else if (ai[0] == 5f)
					{
						frame.Y = num * (num237 - 3);
						if (type == 637)
						{
							frame.Y = num * 19;
						}
						frameCounter = 0.0;
					}
					else if (ai[0] == 6f)
					{
						frameCounter += 1.0;
						int num245 = frame.Y / num;
						int num17 = num237 - num245;
						if ((uint)(num17 - 1) > 1u && (uint)(num17 - 4) > 1u && num245 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num246 = 0;
						num246 = ((!(frameCounter < 10.0)) ? ((frameCounter < 16.0) ? (num237 - 5) : ((frameCounter < 46.0) ? (num237 - 4) : ((frameCounter < 60.0) ? (num237 - 5) : ((!(frameCounter < 66.0)) ? ((frameCounter < 72.0) ? (num237 - 5) : ((frameCounter < 102.0) ? (num237 - 4) : ((frameCounter < 108.0) ? (num237 - 5) : ((!(frameCounter < 114.0)) ? ((frameCounter < 120.0) ? (num237 - 5) : ((frameCounter < 150.0) ? (num237 - 4) : ((frameCounter < 156.0) ? (num237 - 5) : ((!(frameCounter < 162.0)) ? ((frameCounter < 168.0) ? (num237 - 5) : ((frameCounter < 198.0) ? (num237 - 4) : ((frameCounter < 204.0) ? (num237 - 5) : ((!(frameCounter < 210.0)) ? ((frameCounter < 216.0) ? (num237 - 5) : ((frameCounter < 246.0) ? (num237 - 4) : ((frameCounter < 252.0) ? (num237 - 5) : ((!(frameCounter < 258.0)) ? ((frameCounter < 264.0) ? (num237 - 5) : ((frameCounter < 294.0) ? (num237 - 4) : ((frameCounter < 300.0) ? (num237 - 5) : 0))) : 0)))) : 0)))) : 0)))) : 0)))) : 0)))) : 0);
						if (num246 == num237 - 4 && num245 == num237 - 5)
						{
							Vector2 vector4 = base.Center + new Vector2(10 * direction, -4f);
							for (int n = 0; n < 8; n++)
							{
								int num247 = Main.rand.Next(139, 143);
								int num248 = Dust.NewDust(vector4, 0, 0, num247, velocity.X + (float)direction, velocity.Y - 2.5f, 0, default(Color), 1.2f);
								Main.dust[num248].velocity.X += (float)direction * 1.5f;
								Dust dust = Main.dust[num248];
								dust.position -= new Vector2(4f);
								dust = Main.dust[num248];
								dust.velocity *= 2f;
								Main.dust[num248].scale = 0.7f + Main.rand.NextFloat() * 0.3f;
							}
						}
						frame.Y = num * num246;
						if (frameCounter >= 300.0)
						{
							frameCounter = 0.0;
						}
					}
					else if ((ai[0] == 7f || ai[0] == 19f) && !NPCID.Sets.IsTownPet[type])
					{
						frameCounter += 1.0;
						int num249 = frame.Y / num;
						int num17 = num237 - num249;
						if ((uint)(num17 - 1) > 1u && (uint)(num17 - 4) > 1u && num249 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num250 = 0;
						if (frameCounter < 16.0)
						{
							num250 = 0;
						}
						else if (frameCounter == 16.0)
						{
							EmoteBubble.NewBubbleNPC(new WorldUIAnchor(this), 112);
						}
						else if (frameCounter < 128.0)
						{
							num250 = ((frameCounter % 16.0 < 8.0) ? (num237 - 2) : 0);
						}
						else if (frameCounter < 160.0)
						{
							num250 = 0;
						}
						else if (frameCounter != 160.0)
						{
							num250 = ((frameCounter < 220.0) ? ((frameCounter % 12.0 < 6.0) ? (num237 - 2) : 0) : 0);
						}
						else
						{
							EmoteBubble.NewBubbleNPC(new WorldUIAnchor(this), 60);
						}
						frame.Y = num * num250;
						if (frameCounter >= 220.0)
						{
							frameCounter = 0.0;
						}
					}
					else if (ai[0] == 9f)
					{
						frameCounter += 1.0;
						int num251 = frame.Y / num;
						int num17 = num237 - num251;
						if ((uint)(num17 - 1) > 1u && (uint)(num17 - 4) > 1u && num251 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num252 = 0;
						num252 = ((!(frameCounter < 10.0)) ? ((!(frameCounter < 16.0)) ? (num237 - 4) : (num237 - 5)) : 0);
						if (ai[1] < 16f)
						{
							num252 = num237 - 5;
						}
						if (ai[1] < 10f)
						{
							num252 = 0;
						}
						frame.Y = num * num252;
					}
					else if (ai[0] == 18f)
					{
						frameCounter += 1.0;
						int num253 = frame.Y / num;
						int num17 = num237 - num253;
						if ((uint)(num17 - 1) > 1u && (uint)(num17 - 4) > 1u && num253 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num254 = 0;
						if (frameCounter < 10.0)
						{
							num254 = 0;
						}
						else if (frameCounter < 16.0)
						{
							num254 = num237 - 1;
						}
						else
						{
							num254 = num237 - 2;
						}
						if (ai[1] < 16f)
						{
							num254 = num237 - 1;
						}
						if (ai[1] < 10f)
						{
							num254 = 0;
						}
						num254 = Main.npcFrameCount[type] - 2;
						frame.Y = num * num254;
					}
					else if (ai[0] == 10f || ai[0] == 13f)
					{
						frameCounter += 1.0;
						int num255 = frame.Y / num;
						int num17 = num255 - num237;
						if ((uint)num17 > 3u && num255 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num256 = 10;
						int num257 = 6;
						if (type == 633)
						{
							num256 = 0;
							num257 = 2;
						}
						int num258 = 0;
						num258 = ((!(frameCounter < (double)num256)) ? ((frameCounter < (double)(num256 + num257)) ? num237 : ((frameCounter < (double)(num256 + num257 * 2)) ? (num237 + 1) : ((frameCounter < (double)(num256 + num257 * 3)) ? (num237 + 2) : ((frameCounter < (double)(num256 + num257 * 4)) ? (num237 + 3) : 0)))) : 0);
						frame.Y = num * num258;
					}
					else if (ai[0] == 15f)
					{
						frameCounter += 1.0;
						int num259 = frame.Y / num;
						int num17 = num259 - num237;
						if ((uint)num17 > 3u && num259 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						float num260 = ai[1] / (float)NPCID.Sets.AttackTime[type];
						int num261 = 0;
						num261 = ((num260 > 0.65f) ? num237 : ((num260 > 0.5f) ? (num237 + 1) : ((num260 > 0.35f) ? (num237 + 2) : ((num260 > 0f) ? (num237 + 3) : 0))));
						frame.Y = num * num261;
					}
					else if (ai[0] == 25f)
					{
						frame.Y = num;
					}
					else if (ai[0] == 12f)
					{
						frameCounter += 1.0;
						int num262 = frame.Y / num;
						int num17 = num262 - num237;
						if ((uint)num17 > 4u && num262 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num263 = num237 + GetShootingFrame(ai[2]);
						frame.Y = num * num263;
					}
					else if (ai[0] == 14f || ai[0] == 24f)
					{
						frameCounter += 1.0;
						int num264 = frame.Y / num;
						int num17 = num264 - num237;
						if ((uint)num17 > 1u && num264 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num265 = 12;
						int num266 = ((frameCounter % (double)num265 * 2.0 < (double)num265) ? num237 : (num237 + 1));
						frame.Y = num * num266;
						if (ai[0] == 24f)
						{
							if (frameCounter == 60.0)
							{
								EmoteBubble.NewBubble(87, new WorldUIAnchor(this), 60);
							}
							if (frameCounter == 150.0)
							{
								EmoteBubble.NewBubble(3, new WorldUIAnchor(this), 90);
							}
							if (frameCounter >= 240.0)
							{
								frame.Y = 0;
							}
						}
					}
					else if (ai[0] == 1001f)
					{
						frame.Y = num * (num237 - 1);
						frameCounter = 0.0;
					}
					else if (CanTalk && (ai[0] == 3f || ai[0] == 4f))
					{
						frameCounter += 1.0;
						int num267 = frame.Y / num;
						int num17 = num237 - num267;
						if ((uint)(num17 - 1) > 1u && (uint)(num17 - 4) > 1u && num267 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						bool flag12 = ai[0] == 3f;
						int num268 = 0;
						int num269 = 0;
						int num270 = -1;
						int num271 = -1;
						if (frameCounter < 10.0)
						{
							num268 = 0;
						}
						else if (frameCounter < 16.0)
						{
							num268 = num237 - 5;
						}
						else if (frameCounter < 46.0)
						{
							num268 = num237 - 4;
						}
						else if (frameCounter < 60.0)
						{
							num268 = num237 - 5;
						}
						else if (frameCounter < 216.0)
						{
							num268 = 0;
						}
						else if (frameCounter == 216.0 && Main.netMode != 1)
						{
							num270 = 70;
						}
						else if (frameCounter < 286.0)
						{
							num268 = ((frameCounter % 12.0 < 6.0) ? (num237 - 2) : 0);
						}
						else if (frameCounter < 320.0)
						{
							num268 = 0;
						}
						else if (frameCounter != 320.0 || Main.netMode == 1)
						{
							num268 = ((frameCounter < 420.0) ? ((frameCounter % 16.0 < 8.0) ? (num237 - 2) : 0) : 0);
						}
						else
						{
							num270 = 100;
						}
						if (frameCounter < 70.0)
						{
							num269 = 0;
						}
						else if (frameCounter != 70.0 || Main.netMode == 1)
						{
							num269 = ((frameCounter < 160.0) ? ((frameCounter % 16.0 < 8.0) ? (num237 - 2) : 0) : ((frameCounter < 166.0) ? (num237 - 5) : ((frameCounter < 186.0) ? (num237 - 4) : ((frameCounter < 200.0) ? (num237 - 5) : ((!(frameCounter < 320.0)) ? ((frameCounter < 326.0) ? (num237 - 1) : 0) : 0)))));
						}
						else
						{
							num271 = 90;
						}
						if (flag12)
						{
							NPC nPC = Main.npc[(int)ai[2]];
							if (num270 != -1)
							{
								EmoteBubble.NewBubbleNPC(new WorldUIAnchor(this), num270, new WorldUIAnchor(nPC));
							}
							if (num271 != -1 && nPC.CanTalk)
							{
								EmoteBubble.NewBubbleNPC(new WorldUIAnchor(nPC), num271, new WorldUIAnchor(this));
							}
						}
						frame.Y = num * (flag12 ? num268 : num269);
						if (frameCounter >= 420.0)
						{
							frameCounter = 0.0;
						}
					}
					else if (CanTalk && (ai[0] == 16f || ai[0] == 17f))
					{
						frameCounter += 1.0;
						int num272 = frame.Y / num;
						int num17 = num237 - num272;
						if ((uint)(num17 - 1) > 1u && (uint)(num17 - 4) > 1u && num272 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						bool flag13 = ai[0] == 16f;
						int num273 = 0;
						int num274 = -1;
						if (frameCounter < 10.0)
						{
							num273 = 0;
						}
						else if (frameCounter < 16.0)
						{
							num273 = num237 - 5;
						}
						else if (frameCounter < 22.0)
						{
							num273 = num237 - 4;
						}
						else if (frameCounter < 28.0)
						{
							num273 = num237 - 5;
						}
						else if (frameCounter < 34.0)
						{
							num273 = num237 - 4;
						}
						else if (frameCounter < 40.0)
						{
							num273 = num237 - 5;
						}
						else if (frameCounter == 40.0 && Main.netMode != 1)
						{
							num274 = 45;
						}
						else if (frameCounter < 70.0)
						{
							num273 = num237 - 4;
						}
						else if (frameCounter < 76.0)
						{
							num273 = num237 - 5;
						}
						else if (frameCounter < 82.0)
						{
							num273 = num237 - 4;
						}
						else if (frameCounter < 88.0)
						{
							num273 = num237 - 5;
						}
						else if (frameCounter < 94.0)
						{
							num273 = num237 - 4;
						}
						else if (frameCounter < 100.0)
						{
							num273 = num237 - 5;
						}
						else if (frameCounter == 100.0 && Main.netMode != 1)
						{
							num274 = 45;
						}
						else if (frameCounter < 130.0)
						{
							num273 = num237 - 4;
						}
						else if (frameCounter < 136.0)
						{
							num273 = num237 - 5;
						}
						else if (frameCounter < 142.0)
						{
							num273 = num237 - 4;
						}
						else if (frameCounter < 148.0)
						{
							num273 = num237 - 5;
						}
						else if (frameCounter < 154.0)
						{
							num273 = num237 - 4;
						}
						else if (frameCounter < 160.0)
						{
							num273 = num237 - 5;
						}
						else if (frameCounter != 160.0 || Main.netMode == 1)
						{
							num273 = ((frameCounter < 220.0) ? (num237 - 4) : ((frameCounter < 226.0) ? (num237 - 5) : 0));
						}
						else
						{
							num274 = 75;
						}
						if (flag13 && num274 != -1)
						{
							int num275 = (int)localAI[2];
							int num276 = (int)localAI[3];
							int num277 = (int)Main.npc[(int)ai[2]].localAI[3];
							int num278 = (int)Main.npc[(int)ai[2]].localAI[2];
							int num279 = 3 - num275 - num276;
							int num280 = 0;
							if (frameCounter == 40.0)
							{
								num280 = 1;
							}
							if (frameCounter == 100.0)
							{
								num280 = 2;
							}
							if (frameCounter == 160.0)
							{
								num280 = 3;
							}
							int num281 = 3 - num280;
							int num282 = -1;
							int num283 = 0;
							while (num282 < 0)
							{
								num17 = num283 + 1;
								num283 = num17;
								if (num17 >= 100)
								{
									break;
								}
								num282 = Main.rand.Next(2);
								if (num282 == 0 && num278 >= num276)
								{
									num282 = -1;
								}
								if (num282 == 1 && num277 >= num275)
								{
									num282 = -1;
								}
								if (num282 == -1 && num281 <= num279)
								{
									num282 = 2;
								}
							}
							if (num282 == 0)
							{
								Main.npc[(int)ai[2]].localAI[3] += 1f;
								num277++;
							}
							if (num282 == 1)
							{
								Main.npc[(int)ai[2]].localAI[2] += 1f;
								num278++;
							}
							int num284 = Utils.SelectRandom<int>(Main.rand, 38, 37, 36);
							int num285 = num284;
							switch (num282)
							{
							case 0:
								switch (num284)
								{
								case 38:
									num285 = 37;
									break;
								case 37:
									num285 = 36;
									break;
								case 36:
									num285 = 38;
									break;
								}
								break;
							case 1:
								switch (num284)
								{
								case 38:
									num285 = 36;
									break;
								case 37:
									num285 = 38;
									break;
								case 36:
									num285 = 37;
									break;
								}
								break;
							}
							if (num281 == 0)
							{
								if (num277 >= 2)
								{
									num284 -= 3;
								}
								if (num278 >= 2)
								{
									num285 -= 3;
								}
							}
							EmoteBubble.NewBubble(num284, new WorldUIAnchor(this), num274);
							EmoteBubble.NewBubble(num285, new WorldUIAnchor(Main.npc[(int)ai[2]]), num274);
						}
						frame.Y = num * (flag13 ? num273 : num273);
						if (frameCounter >= 420.0)
						{
							frameCounter = 0.0;
						}
					}
					else if (velocity.X == 0f)
					{
						if (type == 638)
						{
							int num286 = frame.Y / num;
							if (num286 > 7)
							{
								num286 = 0;
							}
							frameCounter += 1.0;
							if (frameCounter > 4.0)
							{
								frameCounter = 0.0;
								num286++;
								if (num286 > 7)
								{
									num286 = 0;
								}
							}
							frame.Y = num286 * num;
						}
						else if (type == 140 || type == 489)
						{
							frame.Y = num;
							frameCounter = 0.0;
						}
						else
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
					}
					else
					{
						int num287 = 6;
						if (type == 632)
						{
							num287 = 12;
						}
						if (type == 534)
						{
							num287 = 12;
						}
						if (type == 638)
						{
							num287 = 12;
						}
						if (type == 656)
						{
							num287 = 12;
						}
						if (flag11)
						{
							num287 = 12;
						}
						if (type == 489)
						{
							num287 = 8;
							frameCounter += Math.Abs(velocity.X) * 1f;
							frameCounter += 0.5;
						}
						else
						{
							frameCounter += Math.Abs(velocity.X) * 2f;
							frameCounter += 1.0;
						}
						if (type == 462)
						{
							num287 = 9;
						}
						int num288 = num * 2;
						if (type == 638)
						{
							num288 = num * 9;
						}
						if (type == 656)
						{
							num288 = num;
						}
						if (flag11)
						{
							num288 = num;
						}
						if (frame.Y < num288)
						{
							frame.Y = num288;
						}
						if (frameCounter > (double)num287)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type] - num236)
						{
							frame.Y = num288;
						}
					}
					break;
				}
				if (type == 462)
				{
					frameCounter = 0.0;
					if (velocity.Y < 0f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = num * 2;
					}
					break;
				}
				if (flag11)
				{
					spriteDirection = -direction;
					int num289 = frame.Y / num;
					if (velocity.Y < 0f)
					{
						if (num289 < 2 || num289 > 3)
						{
							num289 = 2;
							frameCounter = -1.0;
						}
						if ((frameCounter += 1.0) >= 4.0)
						{
							frameCounter = 0.0;
							num289++;
							if (num289 >= 3)
							{
								num289 = 3;
							}
						}
						frame.Y = num289 * num;
					}
					else if (velocity.Y > 0f)
					{
						if (num289 < 3 || num289 > 6)
						{
							num289 = 3;
							frameCounter = -1.0;
						}
						if ((frameCounter += 1.0) >= 4.0)
						{
							frameCounter = 0.0;
							num289++;
							if (num289 >= 6)
							{
								num289 = 6;
							}
						}
						frame.Y = num289 * num;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				if (type == 489 || type == 21 || type == 31 || type == 294 || type == 326 || type == 295 || type == 296 || type == 44 || type == 77 || type == 120 || type == 140 || type == 159 || type == 167 || type == 197 || type == 201 || type == 202)
				{
					frame.Y = 0;
				}
				if (type == 638)
				{
					frame.Y = num * 8;
				}
				break;
			}
			case 494:
			case 495:
				if (ai[2] > 0f)
				{
					if (ai[2] < 7f)
					{
						frame.Y = num * 5;
					}
					else if (ai[2] < 14f)
					{
						frame.Y = num * 6;
					}
					else if (ai[2] < 20f)
					{
						frame.Y = num * 7;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					if (velocity.Y < 0f)
					{
						frame.Y = num * 2;
					}
					else
					{
						frame.Y = num * 3;
					}
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter < 8.0)
				{
					frame.Y = 0;
					break;
				}
				if (frameCounter < 16.0)
				{
					frame.Y = num;
					break;
				}
				if (frameCounter < 24.0)
				{
					frame.Y = num * 2;
					break;
				}
				if (frameCounter < 32.0)
				{
					frame.Y = num * 3;
					break;
				}
				if (frameCounter < 39.0)
				{
					frame.Y = num * 4;
					break;
				}
				frame.Y = num * 4;
				frameCounter = 0.0;
				break;
			case 541:
				if (ai[0] > 0f)
				{
					float num220 = ai[0];
					if (num220 < 6f)
					{
						frame.Y = num * 4;
					}
					else if (num220 < 105f)
					{
						frame.Y = num * (int)(num220 / 8f % 4f + 5f);
					}
					else if (num220 < 114f)
					{
						frame.Y = num * 9;
					}
					else if (num220 < 135f)
					{
						frame.Y = num * (int)((num220 - 99f - 15f) / 7f + 10f);
					}
					else
					{
						frame.Y = num;
					}
				}
				else
				{
					frameCounter = frameCounter + (double)(velocity.Length() * 0.1f) + 1.0;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
				break;
			case 612:
			case 613:
			{
				if (IsABestiaryIconDummy)
				{
					frameCounter += 1.0;
					if (frameCounter > 50.0)
					{
						frameCounter = 0.0;
						frame.Y = 0;
					}
					frame.Y = (int)Utils.WrappedLerp(0f, 4f, (float)frameCounter / 50f) * num;
					break;
				}
				bool flag5 = true;
				if (frame.Y == 0 && Main.rand.Next(180) != 0)
				{
					flag5 = false;
				}
				if (flag5)
				{
					frameCounter += 1.0;
				}
				if (velocity.X != 0f)
				{
					spriteDirection = Math.Sign(velocity.X);
				}
				int num68 = 10;
				bool flag6 = Math.Abs(velocity.X) > 1f;
				if (ai[1] == 1f)
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
				}
				if (Math.Abs(velocity.Y) > 0.1f || flag6)
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
				}
				else if (frame.Y == 0)
				{
					num68 = 2;
				}
				if (frame.Y == num * 4)
				{
					num68 = 60;
					if (!flag6)
					{
						num68 = 2;
					}
				}
				if (frameCounter >= (double)num68)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= 5)
					{
						frame.Y = 0;
					}
				}
				break;
			}
			case 583:
			case 584:
			case 585:
				rotation = velocity.X * 0.1f;
				if ((frameCounter += 1.0) >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
				break;
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						if (ai[1] < 12f)
						{
							frame.Y = num * 8;
						}
						else if (ai[1] < 34f)
						{
							frame.Y = num * 9;
						}
						else
						{
							frame.Y = num * 8;
						}
						frameCounter = 0.0;
						break;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 7)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 10;
				}
				break;
			case 524:
			case 525:
			case 526:
			case 527:
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y <= num)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X);
					frameCounter += 1.0;
					if (frameCounter > 9.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
				break;
			case 528:
			case 529:
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X);
					frameCounter += 1.0;
					if (frameCounter > 9.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 1)
					{
						frame.Y = num;
					}
				}
				else
				{
					frame.Y = num * (Main.npcFrameCount[type] - 1);
					frameCounter = 0.0;
				}
				break;
			case 533:
				if (velocity.Y == 0f && direction != 0)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 48.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = (int)(frameCounter / 6.0) * num;
				if (ai[1] > 0f)
				{
					frame.Y += num * 8;
				}
				break;
			case 496:
			case 497:
				if (ai[0] == 0f)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0.0;
					}
					frameCounter += Math.Abs(velocity.X) * 1.1f;
					if (frameCounter < 6.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 3;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 1f)
				{
					frameCounter = 0.0;
					if (ai[1] < 10f)
					{
						frame.Y = num * 4;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 5;
					}
					else
					{
						frame.Y = num * 6;
					}
				}
				else if (ai[0] == 5f)
				{
					frameCounter = 0.0;
					if (ai[1] < 10f)
					{
						frame.Y = num * 10;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 11;
					}
					else
					{
						frame.Y = num * 3;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 7;
				}
				break;
			case 508:
			case 532:
			case 580:
			case 582:
				if (velocity.Y != 0f)
				{
					frame.Y = num;
					break;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					break;
				}
				if (direction < 0 && velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				if (direction > 0 && velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (frame.Y / num < 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += 1f + Math.Abs(velocity.X) / 2f;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 2;
				}
				break;
			case 509:
			case 581:
				if ((velocity.X > 0f && direction > 0) || (velocity.X < 0f && direction < 0))
				{
					spriteDirection = direction;
				}
				if ((frameCounter += 1.0) >= 3.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 415:
				if (ai[2] < 0f)
				{
					if (frame.Y / num != 8 && frame.Y / num != 9 && frame.Y / num != 0)
					{
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					int num163 = 0;
					int num164 = 18;
					int num165 = 4;
					if (frameCounter > (double)(num164 - num165 * 2))
					{
						num163 = 8 + (int)frameCounter / 4 % 2;
					}
					if (frameCounter > (double)(num164 + num165 * 6))
					{
						num163 = 0;
						frameCounter = 0.0;
					}
					frame.Y = num * num163;
				}
				else if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 2)
					{
						frame.Y = num * 2;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 416:
				if (IsABestiaryIconDummy)
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y < num * 2 || frame.Y > num * 7)
					{
						frame.Y = num * 2;
					}
				}
				else if (Main.netMode != 2 && !Main.dedServ)
				{
					int num63 = (int)ai[0];
					if (Main.npc[num63].active && Main.npc[num63].type == 415 && TextureAssets.Npc[415].get_IsLoaded())
					{
						frame.Y = Main.npc[num63].frame.Y / (TextureAssets.Npc[415].Height() / Main.npcFrameCount[415]) * num;
					}
				}
				break;
			case 417:
				if (ai[0] == 0f)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0.0;
					}
					frameCounter += Math.Abs(velocity.X) * 1.1f;
					frame.Y = (int)(frameCounter / 6.0) * num;
					if (frameCounter >= 48.0)
					{
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 1f)
				{
					frameCounter = 0.0;
					frame.Y = num * (9 + (int)(ai[1] / 6f));
				}
				else if (ai[0] == 5f)
				{
					frameCounter = 0.0;
					frame.Y = num * (13 - (int)(ai[1] / 6f));
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 14;
				}
				break;
			case 518:
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
				break;
			case 419:
				if (ai[2] < 0f)
				{
					int num61 = 1;
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (frame.Y / num >= 9)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
					}
					if (frame.Y / num < 2)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					if (frameCounter >= (double)(num61 * 4 + 6))
					{
						frameCounter = 8.0;
					}
					if (frameCounter < 6.0)
					{
						frame.Y = num * (int)(2.0 + frameCounter / 3.0);
					}
					else
					{
						frame.Y = num * (int)(4.0 + (frameCounter - 6.0) / (double)num61);
					}
				}
				else if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 9;
					}
					if (frame.Y / num < 9)
					{
						frame.Y = num * 9;
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
				break;
			case 425:
				if (direction != 0)
				{
					spriteDirection = -direction;
				}
				if (ai[2] == 1f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 3.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 12 || frame.Y < num * 10)
					{
						frame.Y = num * 10;
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 9 || frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
				}
				break;
			case 427:
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 2.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 9 || frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 5 || frame.Y < num)
					{
						frame.Y = num;
					}
				}
				break;
			case 426:
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (ai[1] >= 45f)
				{
					if (velocity.Y == 0f)
					{
						frame.Y = num * 8;
						break;
					}
					frameCounter += 1.0;
					if (frameCounter >= 2.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 15 || frame.Y < num * 12)
					{
						frame.Y = num * 12;
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 2.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 12 || frame.Y < num * 9)
					{
						frame.Y = num * 9;
					}
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 10.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 7 || frame.Y < num)
					{
						frame.Y = num;
					}
				}
				break;
			case 429:
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
				break;
			case 428:
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					if ((frameCounter += 1.0) > 10.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 1)
					{
						frame.Y = 0;
					}
				}
				else if (frame.Y / num != 4)
				{
					if (frameCounter > 0.0)
					{
						frameCounter = 0.0;
					}
					if ((frameCounter -= 1.0) < -10.0 || velocity.Y > 0.6f)
					{
						frame.Y = num * 4;
						frameCounter = 0.0;
					}
				}
				break;
			case 423:
				if (ai[2] == 1f)
				{
					int num233 = 2;
					if (ai[1] >= 30f && ai[1] < 45f)
					{
						num233 = 3;
					}
					frame.Y = num233 * num;
					break;
				}
				if (velocity.Y != 0f)
				{
					frame.Y = num;
					break;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					break;
				}
				if (velocity.X != 0f)
				{
					spriteDirection = Math.Sign(0f - velocity.X);
				}
				if (frame.Y / num < 4)
				{
					frame.Y = num * 4;
				}
				frameCounter += 1f + Math.Abs(velocity.X) / 2f;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 4;
				}
				break;
			case 421:
				if (ai[0] == 5f)
				{
					frameCounter += 1.0;
				}
				if ((frameCounter += 1.0) >= 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 424:
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = -direction;
					}
					if (ai[2] > 0f)
					{
						frame.Y = num * ((ai[1] > 90f) ? (Main.npcFrameCount[type] - 2) : (Main.npcFrameCount[type] - 1));
						frameCounter = 0.0;
						break;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X * 1.3f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 2)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 420:
				if ((frameCounter += 1.0) >= 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 411:
				if (ai[1] >= 120f && ai[1] < 240f)
				{
					spriteDirection = -direction;
					frame.Y = num * (Main.npcFrameCount[type] - 1);
					frameCounter = 0.0;
				}
				else if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = -direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 1)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
				break;
			case 409:
				if (velocity.Y == 0f && ai[1] <= 30f && ai[1] > 0f)
				{
					frame.Y = num * (Main.npcFrameCount[type] - 1);
					frameCounter = 0.0;
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if ((frameCounter += 1.0) >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type] - 2)
					{
						frame.Y = 0;
					}
				}
				break;
			case 410:
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 10.0)
				{
					frameCounter -= 10.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 407:
				if ((frameCounter += 1.0) >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 405:
			case 406:
				if ((frameCounter += 1.0) >= 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 516:
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					frame.Y = num * Main.rand.Next(3);
					frameCounter += Main.rand.Next(3);
				}
				frameCounter += 1.0;
				if (frameCounter > 3.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 3)
					{
						frame.Y = 0;
					}
				}
				break;
			case 418:
				if (ai[0] == 0f || ai[0] == 1f || ai[0] == -1f)
				{
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 4)
					{
						frame.Y = 0;
					}
				}
				else if (ai[0] == 2f)
				{
					if (ai[1] < 10f)
					{
						frame.Y = num * 5;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 7;
					}
				}
				else if (ai[0] == -2f)
				{
					frameCounter += 1.0;
					if (frameCounter > 12.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 7)
					{
						frame.Y = num * 5;
					}
				}
				break;
			case 1:
			case 16:
			case 59:
			case 71:
			case 81:
			case 138:
			case 147:
			case 183:
			case 184:
			case 204:
			case 225:
			case 302:
			case 304:
			case 333:
			case 334:
			case 335:
			case 336:
			case 535:
			case 537:
			case 658:
			case 659:
			case 667:
			case 676:
				if (type == 302 || type == 304)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (num2 > 0)
				{
					frameCounter += 1.0;
				}
				if (num2 == 4)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 488:
			{
				int num180 = (int)localAI[1];
				if (Framing.GetTileSafely((int)ai[0], (int)ai[1]).frameX >= 36)
				{
					num180 *= -1;
				}
				if (localAI[0] > 24f)
				{
					localAI[0] = 24f;
				}
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
				int num181 = ((num180 == -1) ? 4 : 6);
				int num182 = (int)localAI[0] / num181;
				if (localAI[0] % (float)num181 != 0f)
				{
					num182++;
				}
				if (num182 != 0 && num180 == 1)
				{
					num182 += 5;
				}
				frame.Y = num182 * num;
				break;
			}
			case 430:
			case 431:
			case 432:
			case 433:
			case 434:
			case 435:
			case 436:
			case 591:
				if (ai[2] > 0f)
				{
					if (ai[2] < 5f)
					{
						frame.Y = num * 3;
					}
					else if (ai[2] < 10f)
					{
						frame.Y = num * 4;
					}
					else if (ai[2] < 15f)
					{
						frame.Y = num * 5;
					}
					else
					{
						frame.Y = num * 6;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter < 8.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 16.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 32.0)
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 454:
			{
				int num160 = (int)(frameCounter / 2.0);
				frame.Y = num * num160;
				break;
			}
			case 377:
			case 446:
				if (IsABestiaryIconDummy)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num)
					{
						frame.Y = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = 0;
				}
				spriteDirection = direction;
				break;
			case 378:
			{
				if (velocity.Y != 0f && frame.Y < num * 2)
				{
					frame.Y += num * 2;
				}
				if (velocity.Y == 0f && frame.Y > num * 2)
				{
					frame.Y -= num * 2;
				}
				frameCounter += 1.0;
				int num229 = 6;
				if (frameCounter >= (double)num229)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (velocity.Y != 0f && frame.Y >= num * 4)
					{
						frame.Y = num * 2;
					}
					if (velocity.Y == 0f && frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
				break;
			}
			case 376:
				frameCounter += 1.0;
				if (frameCounter > 30.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
				break;
			case 589:
			{
				int num72 = frame.Y / num;
				frameCounter += 1.0;
				if (velocity.Y != 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
				}
				if (num72 >= 12)
				{
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y >= num * Main.npcFrameCount[type])
						{
							frame.Y = 0;
						}
					}
				}
				else if (num72 >= 11)
				{
					if (frameCounter > (double)Main.rand.Next(40, 140))
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
				}
				else if (num72 >= 8)
				{
					if (!(frameCounter > 3.0))
					{
						break;
					}
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y == num * 9)
					{
						Vector2 vector = position;
						vector.Y += height - 6;
						if (direction == 1)
						{
							vector.X += 30f;
						}
						else
						{
							vector.X -= 22f;
						}
						for (int j = 0; j < 4; j++)
						{
							Dust.NewDust(vector, 1, 1, 32);
						}
					}
				}
				else if (num72 >= 7)
				{
					if (frameCounter > (double)Main.rand.Next(30, 90))
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
				}
				else if (num72 >= 4)
				{
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
				}
				else if (num72 >= 1)
				{
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y >= num * 4 && Main.rand.Next(3) != 0)
						{
							frame.Y = 0;
						}
					}
				}
				else if (frameCounter > (double)Main.rand.Next(90, 450))
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				break;
			}
			case 375:
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
				break;
			case 374:
				localAI[0] = -2f;
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y >= num * 4)
						{
							frame.Y = num;
						}
					}
					break;
				}
				rotation += (float)direction * 0.1f;
				frameCounter += 1.0;
				if (frameCounter > 3.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 4)
					{
						frame.Y = num;
					}
				}
				break;
			case 492:
				frame.Y = num * (int)ai[2];
				break;
			case 473:
			case 474:
			case 475:
			case 476:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (ai[0] == 0f || ai[0] == 7f)
				{
					rotation = 0f;
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else if (ai[0] == 1f)
				{
					rotation = 0f;
					frameCounter = 0.0;
					int num80 = 6;
					if (ai[1] < (float)num80)
					{
						frame.Y = num;
					}
					else if (ai[1] < (float)(num80 * 2))
					{
						frame.Y = num * 2;
					}
					else if (ai[1] < (float)(num80 * 3))
					{
						frame.Y = num * 3;
					}
					else if (ai[1] < (float)(num80 * 4))
					{
						frame.Y = num * 4;
					}
					else if (ai[1] < (float)(num80 * 5))
					{
						frame.Y = num * 5;
					}
					else
					{
						frame.Y = num * 6;
					}
				}
				else if (ai[0] == 8f)
				{
					rotation = 0f;
					frameCounter += 1.0;
					if (frameCounter >= 24.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = num * Math.Min(6, Math.Max(3, 3 + (int)frameCounter / 6));
				}
				else if (ai[0] == 2f || ai[0] == 6f)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						int num81 = 6;
						frameCounter += 1.0;
						if (frame.Y < num * 7)
						{
							frame.Y = num * 12;
						}
						if (frame.Y < num * 10)
						{
							if (frameCounter > 8.0)
							{
								frame.Y += num;
								frameCounter = 0.0;
								if (frame.Y == num * 10)
								{
									frameCounter = num81 * 2;
								}
							}
						}
						else if (frameCounter < (double)num81)
						{
							frame.Y = num * 12;
						}
						else if (frameCounter < (double)(num81 * 2))
						{
							frame.Y = num * 11;
						}
						else if (frameCounter < (double)(num81 * 3))
						{
							frame.Y = num * 10;
						}
						else
						{
							frame.Y = num * 11;
							if (frameCounter >= (double)(num81 * 4 - 1))
							{
								frameCounter = 0.0;
							}
						}
					}
					else
					{
						frame.Y = num * 13;
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 3f)
				{
					rotation = 0f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						if (frame.Y > num * 7)
						{
							frame.Y -= num;
						}
					}
				}
				else if (ai[0] == 4f || ai[0] == 5f)
				{
					if (ai[0] == 4f && ai[2] == 1f)
					{
						rotation = 0f;
					}
					frame.Y = num * 13;
					frameCounter = 0.0;
				}
				else
				{
					if (ai[0] != 4.1f)
					{
						break;
					}
					rotation = 0f;
					if (frame.Y > num * 6)
					{
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					int num82 = 4;
					if (frameCounter < (double)num82)
					{
						frame.Y = num * 6;
						break;
					}
					if (frameCounter < (double)(num82 * 2))
					{
						frame.Y = num * 5;
						break;
					}
					if (frameCounter < (double)(num82 * 3))
					{
						frame.Y = num * 4;
						break;
					}
					if (frameCounter < (double)(num82 * 4))
					{
						frame.Y = num * 3;
						break;
					}
					if (frameCounter < (double)(num82 * 5))
					{
						frame.Y = num * 4;
						break;
					}
					frame.Y = num * 5;
					if (frameCounter >= (double)(num82 * 6 - 1))
					{
						frameCounter = 0.0;
					}
				}
				break;
			case 477:
				frameCounter += velocity.Length() / 4f;
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y / num > 5)
				{
					frame.Y = 0;
				}
				break;
			case 479:
			{
				frameCounter += 1.0;
				int num62 = 4;
				if (frameCounter < (double)num62)
				{
					frame.Y = 0;
				}
				else if (frameCounter < (double)(num62 * 2))
				{
					frame.Y = num;
				}
				else if (frameCounter < (double)(num62 * 3))
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < (double)(num62 * 4 - 1))
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			}
			case 472:
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				rotation = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= 6)
				{
					frame.Y = 0;
				}
				break;
			case 449:
			case 450:
			case 451:
			case 452:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						int num176 = 0;
						int num177 = Main.npcFrameCount[type] - 5;
						int num178 = 5;
						int num179 = 7;
						num176 = ((ai[1] >= 50f) ? 1 : ((ai[1] >= (float)(50 - num179)) ? 2 : ((ai[1] >= (float)(50 - num179 * 2)) ? 3 : ((ai[1] >= (float)(50 - num179 * 3)) ? 4 : 0))));
						frame.Y = num * (num177 + num176);
						frameCounter = 0.0;
						break;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= 15)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 481:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						int num69 = 0;
						if (ai[1] < 22f)
						{
							num69 = -14;
						}
						else if (ai[1] < 28f)
						{
							num69 = 3;
						}
						else if (ai[1] < 34f)
						{
							num69 = 2;
						}
						else if (ai[1] < 40f)
						{
							num69 = 1;
						}
						frame.Y = num * (15 + num69);
						frameCounter = 0.0;
					}
					else if (velocity.X == 0f)
					{
						frame.Y = num;
					}
					else
					{
						if (frame.Y < num * 2)
						{
							frame.Y = num * 2;
						}
						frameCounter += Math.Abs(velocity.X) * 2f;
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= 15)
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			case 468:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						int num44 = 0;
						if (ai[1] < 22f)
						{
							num44 = -15;
						}
						else if (ai[1] < 28f)
						{
							num44 = 3;
						}
						else if (ai[1] < 34f)
						{
							num44 = 2;
						}
						else if (ai[1] < 40f)
						{
							num44 = 1;
						}
						frame.Y = num * (15 + num44);
						frameCounter = 0.0;
					}
					else if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
					else
					{
						if (frame.Y < num * 2)
						{
							frame.Y = num * 2;
						}
						frameCounter += Math.Abs(velocity.X) * 2f;
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= 15)
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 379:
			case 380:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * ((int)ai[2] - 1 + 2);
						frameCounter = 0.0;
						break;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						break;
					}
					if (frame.Y < num * 7)
					{
						frame.Y = num * 7;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 7;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 381:
			case 382:
			case 383:
			case 385:
			case 389:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					if (type == 389 || type == 385)
					{
						frameCounter += (double)Math.Abs(velocity.X) * 1.2;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X) * 2f;
					}
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 387:
				if (ai[0] > 0f)
				{
					frameCounter += 1.0;
					if (ai[0] >= 20f)
					{
						frameCounter += 1.0;
					}
					if (ai[0] >= 40f)
					{
						frameCounter += 1.0;
					}
					if (frameCounter >= 10.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y >= num * 2)
						{
							frame.Y = 0;
						}
					}
					break;
				}
				frameCounter += 1.0;
				if (frameCounter >= 15.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
				break;
			case 386:
				if (ai[2] > 0f)
				{
					int num71 = (int)ai[2] / 12;
					frame.Y = num * (9 + num71 % 2);
				}
				else if (velocity.Y == 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= 9)
					{
						frame.Y = num * 2;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 388:
			{
				frameCounter += 1.0;
				int num64 = 6;
				if (frameCounter >= (double)num64)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
				break;
			}
			case 391:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = -1;
					}
					if (direction == -1)
					{
						spriteDirection = 1;
					}
					if (frame.Y < num)
					{
						frame.Y = num;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			case 390:
				if (IsABestiaryIconDummy)
				{
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						localAI[3] += 1f;
						if (localAI[3] >= (float)Main.npcFrameCount[391])
						{
							localAI[3] = 0f;
						}
					}
				}
				if (direction != 0)
				{
					spriteDirection = -direction;
				}
				if (ai[2] > 0f)
				{
					frame.Y = num * ((int)ai[2] - 1);
				}
				else
				{
					frame.Y = num * 2;
				}
				break;
			case 393:
			{
				int num170 = 0;
				Vector2 vector2 = ai[2].ToRotationVector2();
				num170 = ((vector2.Y > Math.Abs(vector2.X) * 2f) ? 4 : ((vector2.Y > Math.Abs(vector2.X) * 1.5f) ? ((vector2.X > 0f) ? 5 : 3) : ((Math.Abs(vector2.X) > vector2.Y * 2f) ? ((vector2.X > 0f) ? 8 : 0) : ((!(Math.Abs(vector2.X) > vector2.Y * 1.5f)) ? ((vector2.X > 0f) ? 6 : 2) : ((!(vector2.X > 0f)) ? 1 : 7)))));
				frame.Y = num * num170;
				float num171 = 280f;
				float num172 = 140f;
				if (ai[3] >= num171 && ai[3] < num171 + num172 && (int)ai[3] % 6 <= 2)
				{
					frame.Y += num * 9;
				}
				break;
			}
			case 394:
			{
				int num166 = (int)ai[3] - 300;
				if (num166 >= 120)
				{
					num166 -= 120;
					if (num166 >= 160)
					{
						frame.Y = num * (7 - (num166 - 160) / 5);
					}
					else if (num166 >= 20)
					{
						frame.Y = num * (num166 / 4 % 4);
					}
					else
					{
						frame.Y = num * (4 + num166 / 5);
					}
				}
				else
				{
					frame.Y = num * 4;
				}
				break;
			}
			case 395:
			{
				float num157 = 20f;
				float num158 = 240f;
				bool flag9 = ai[3] >= num157 && ai[3] < num157 + num158;
				frameCounter += 1.0;
				if (frameCounter >= 66.0)
				{
					frameCounter = 0.0;
				}
				if (flag9)
				{
					frameCounter += 1.0;
					if (frameCounter >= 54.0 || frameCounter < 36.0)
					{
						frameCounter = 36.0;
					}
				}
				int num159 = (int)frameCounter % 66;
				num159 /= 6;
				frame.Y = num * num159;
				break;
			}
			case 392:
			{
				float num84 = 20f;
				float num85 = 240f;
				bool flag8 = ai[3] >= num84 && ai[3] < num84 + num85;
				frameCounter += 1.0;
				if (flag8)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 12.0)
				{
					frameCounter = 0.0;
				}
				int num86 = (int)frameCounter % 12;
				num86 /= 3;
				frame.Y = num * num86;
				break;
			}
			case 399:
				frameCounter = (frameCounter + 0.25) % 4.0 + (double)((ai[0] != 0f) ? 4 : 0);
				frame.Y = num * (int)frameCounter;
				break;
			case 520:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
					frameCounter += Math.Abs(velocity.X) * 1f;
					if (frameCounter > 6.0)
					{
						if (Math.Abs(velocity.X) < 0.2f)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						else
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 398:
			{
				if (ai[0] <= 0f)
				{
					frame.Y = 0;
					break;
				}
				if (frame.Y == 0)
				{
					Gore.NewGore(position + new Vector2(-10f, -15f), velocity, 619);
					Gore.NewGore(position + new Vector2(10f, -15f), velocity, 620);
					Gore.NewGore(position + new Vector2(-10f, 15f), velocity, 621);
					Gore.NewGore(position + new Vector2(10f, 15f), velocity, 622);
					for (int i = 0; i < 50; i++)
					{
						frame.Y = num;
						Dust.NewDust(position, width, height, 209);
					}
				}
				frameCounter += 1.0;
				if (frameCounter >= 30.0)
				{
					frameCounter = 6.0;
				}
				int num67 = (int)frameCounter % 30;
				num67 /= 6;
				frame.Y = num * num67;
				break;
			}
			case 397:
			{
				int num48 = (int)frameCounter / 7;
				frame.Y = num * num48;
				break;
			}
			case 400:
			{
				frameCounter += 1.0;
				if (ai[0] == 0f || ai[0] == 3f)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 16.0)
				{
					frameCounter = 0.0;
				}
				int num49 = (int)frameCounter % 16;
				num49 /= 4;
				frame.Y = num * num49;
				break;
			}
			case 437:
			{
				frameCounter += 1.0;
				if (frameCounter >= 20.0)
				{
					frameCounter = 0.0;
				}
				int num42 = (int)frameCounter % 20;
				num42 /= 5;
				frame.Y = num * num42;
				break;
			}
			case 438:
			{
				frameCounter += 1.0;
				if (ai[1] == 1f)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 49.0)
				{
					frameCounter = 0.0;
				}
				int num235 = (int)frameCounter % 49;
				num235 /= 7;
				if (num235 >= 4)
				{
					num235 = 6 - num235;
				}
				frame.Y = num * num235;
				break;
			}
			case 439:
			case 440:
			{
				int num43 = (int)localAI[2];
				if (IsABestiaryIconDummy)
				{
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y < num * 4 || frame.Y > num * 6)
					{
						frame.Y = num * 4;
					}
				}
				else
				{
					switch (num43)
					{
					case 0:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
							frame.Y = 0;
						}
						else if (frame.Y != 0)
						{
							frame.Y = ((int)frameCounter / 5 + 4) * num;
						}
						break;
					case 10:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
						}
						frame.Y = ((int)frameCounter / 5 + 4) * num;
						break;
					case 1:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
							frame.Y = num;
						}
						else if (frame.Y != num)
						{
							frame.Y = ((int)frameCounter / 5 + 10) * num;
						}
						break;
					case 11:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
						}
						frame.Y = ((int)frameCounter / 5 + 10) * num;
						break;
					case 2:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
							frame.Y = num * 2;
						}
						else if (frame.Y != num * 2)
						{
							frame.Y = ((int)frameCounter / 5 + 7) * num;
						}
						break;
					case 12:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
						}
						frame.Y = ((int)frameCounter / 5 + 7) * num;
						break;
					case 13:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
						}
						frame.Y = ((int)frameCounter / 5 + 13) * num;
						break;
					}
				}
				frameCounter += 1.0;
				break;
			}
			case 521:
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				rotation = (float)Math.Atan2(velocity.Y * (float)spriteDirection, velocity.X * (float)spriteDirection) + velocity.X * 0.1f;
				if ((frameCounter += 1.0) >= 5.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 523:
				if ((frameCounter += 1.0) >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 371:
			case 372:
			case 373:
				frame.Y = num;
				break;
			case 370:
			{
				if (ai[0] == 0f || ai[0] == 5f)
				{
					int num73 = 5;
					if (ai[0] == 5f)
					{
						num73 = 4;
					}
					frameCounter += 1.0;
					if (frameCounter > (double)num73)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y >= num * 6)
					{
						frame.Y = 0;
					}
				}
				if (ai[0] == 1f || ai[0] == 6f)
				{
					if (ai[2] < 10f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 7;
					}
				}
				if (ai[0] == 2f || ai[0] == 7f)
				{
					if (ai[2] < 10f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 7;
					}
				}
				if (ai[0] == 3f || ai[0] == 8f || ai[0] == -1f)
				{
					int num74 = 90;
					if (ai[2] < (float)(num74 - 30) || ai[2] > (float)(num74 - 10))
					{
						frameCounter += 1.0;
						if (frameCounter > 5.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
						}
						if (frame.Y >= num * 6)
						{
							frame.Y = 0;
						}
					}
					else
					{
						frame.Y = num * 6;
						if (ai[2] > (float)(num74 - 20) && ai[2] < (float)(num74 - 15))
						{
							frame.Y = num * 7;
						}
					}
				}
				if (ai[0] != 4f && ai[0] != 9f)
				{
					break;
				}
				int num75 = 180;
				if (ai[2] < (float)(num75 - 60) || ai[2] > (float)(num75 - 20))
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y >= num * 6)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frame.Y = num * 6;
					if (ai[2] > (float)(num75 - 50) && ai[2] < (float)(num75 - 25))
					{
						frame.Y = num * 7;
					}
				}
				break;
			}
			case 359:
			case 360:
			case 655:
			{
				if (velocity.Y > 1f)
				{
					frameCounter += 1.0;
					int num65 = 6;
					if (frameCounter < (double)num65)
					{
						frame.Y = num * 4;
						break;
					}
					frame.Y = num * 5;
					if (frameCounter >= (double)(num65 * 2 - 1))
					{
						frameCounter = 0.0;
					}
					break;
				}
				frameCounter += 1.0;
				int num66 = 10;
				if (frameCounter < (double)num66)
				{
					frame.Y = 0;
					break;
				}
				if (frameCounter < (double)(num66 * 2))
				{
					frame.Y = num;
					break;
				}
				if (frameCounter < (double)(num66 * 3))
				{
					frame.Y = num * 2;
					break;
				}
				if (frameCounter < (double)(num66 * 4))
				{
					frame.Y = num * 3;
					break;
				}
				if (frameCounter < (double)(num66 * 5))
				{
					frame.Y = num * 2;
					break;
				}
				frame.Y = num;
				if (frameCounter >= (double)(num66 * 6 - 1))
				{
					frameCounter = 0.0;
				}
				break;
			}
			case 327:
				if (ai[3] == 0f)
				{
					if (frame.Y > num * 5)
					{
						frameCounter += 1.0;
					}
					else if (frame.Y > 0)
					{
						frameCounter -= 1.0;
					}
				}
				else if (ai[3] == 1f)
				{
					if (frame.Y > num * 10)
					{
						frameCounter += 1.0;
					}
					else if (frame.Y > num * 4)
					{
						frameCounter -= 1.0;
					}
					else if (frame.Y < num * 4)
					{
						frameCounter += 1.0;
					}
				}
				else if (ai[3] == 2f)
				{
					if (frame.Y < num * 2)
					{
						frameCounter -= 1.0;
					}
					else if (frame.Y > num * 8)
					{
						frameCounter -= 1.0;
					}
					else if (frame.Y < num * 8)
					{
						frameCounter += 1.0;
					}
				}
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 11)
					{
						frame.Y = 0;
					}
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 6.0;
					frame.Y -= num;
					if (frame.Y < 0)
					{
						frame.Y = num * 11;
					}
				}
				break;
			case 347:
				frameCounter += 1.0;
				if (frameCounter > 1.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 3)
				{
					frame.Y = 0;
				}
				break;
			case 346:
				if (ai[0] == 1f)
				{
					spriteDirection = direction;
					frameCounter += 1.0;
					if (frameCounter > 2.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 8)
					{
						frame.Y = num * 6;
					}
					if (frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
					break;
				}
				if (velocity.X == 0f)
				{
					ref int y3 = ref frame.Y;
					y3 = y3;
					frameCounter = 0.0;
					break;
				}
				spriteDirection = direction;
				frameCounter += 1.0;
				frameCounter += Math.Abs(velocity.X) / 2f;
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 5)
				{
					frame.Y = num;
				}
				if (frame.Y < num)
				{
					frame.Y = num;
				}
				break;
			case 352:
				frameCounter += 1.0;
				if (frameCounter > 3.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 5)
				{
					frame.Y = 0;
				}
				break;
			case 345:
				if (ai[0] == 0f)
				{
					if (ai[3] >= 0f)
					{
						frame.Y = 0;
					}
					else if (velocity.X < 0f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = num * 2;
					}
				}
				else if (ai[0] == 1f)
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 4)
					{
						frame.Y = num * 3;
					}
					if (frame.Y < num * 3)
					{
						frame.Y = num * 3;
					}
				}
				else if (ai[0] == 2f)
				{
					frame.Y = num * 5;
				}
				break;
			case 344:
				if (velocity.X == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 9)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter += Math.Max(1f, Math.Abs(velocity.X) * 0.75f);
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 9)
					{
						frame.Y = 0;
					}
				}
				break;
			case 325:
				if (velocity.X == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 4)
					{
						frame.Y = 0;
					}
					break;
				}
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y < num * 5)
				{
					frame.Y = num * 5;
				}
				if (frame.Y > num * 9)
				{
					frame.Y = num * 5;
				}
				break;
			case 490:
				rotation = velocity.X * 0.15f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 266:
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (ai[0] >= 0f)
				{
					if (frame.Y > num * 3)
					{
						frame.Y = 0;
					}
					break;
				}
				if (frame.Y < num * 4)
				{
					frame.Y = num * 4;
				}
				if (frame.Y > num * 7)
				{
					frame.Y = num * 4;
				}
				break;
			case 262:
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (life > lifeMax / 2)
				{
					if (frame.Y > num * 3)
					{
						frame.Y = 0;
					}
					break;
				}
				if (frame.Y < num * 4)
				{
					frame.Y = num * 4;
				}
				if (frame.Y > num * 7)
				{
					frame.Y = num * 4;
				}
				break;
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y < -3f)
				{
					frame.Y = num * 5;
				}
				else if (velocity.Y <= 0f)
				{
					frame.Y = 0;
				}
				else if (velocity.Y < 2f)
				{
					frame.Y = num * 3;
				}
				else
				{
					frame.Y = num;
				}
				rotation = velocity.X * 0.1f;
				break;
			case 263:
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					if (frame.Y > 0)
					{
						frameCounter += 1.0;
						if (frameCounter > 4.0)
						{
							frameCounter = 0.0;
							frame.Y -= num;
						}
					}
				}
				else if (frame.Y < 2)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
				}
				break;
			case 244:
				frameCounter += 1.0;
				if (num2 > 0)
				{
					frameCounter += 1.0;
				}
				if (num2 == 4)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 289:
				frameCounter += 1.0;
				if (frameCounter < 4.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 8.0)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = num * 2;
					frameCounter = 0.0;
					if (frameCounter > 12.0)
					{
						frameCounter = 0.0;
					}
				}
				if (ai[3] == 1f)
				{
					frame.Y += num * 3;
				}
				break;
			case 288:
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 355:
			case 358:
			case 654:
				spriteDirection = direction;
				frameCounter += 1.0;
				if (frameCounter < 4.0)
				{
					frame.Y = 0;
				}
				else
				{
					frame.Y = num;
					if (frameCounter >= 7.0)
					{
						frameCounter = 0.0;
					}
				}
				if (localAI[2] <= 0f)
				{
					frame.Y += num * 2;
				}
				break;
			case 677:
				spriteDirection = direction;
				frameCounter += 1.0;
				if ((frameCounter += 1.0) >= 6.0)
				{
					frameCounter = 0.0;
					if (++frame.Y >= 5)
					{
						frame.Y = 0;
					}
				}
				break;
			case 595:
			case 596:
			case 597:
			case 598:
			case 599:
			case 600:
			case 601:
			{
				spriteDirection = direction;
				int num218 = 3;
				if ((frameCounter += 1.0) >= (double)(Main.npcFrameCount[type] * num218))
				{
					frameCounter = 0.0;
				}
				frame.Y = num * ((int)frameCounter / num218);
				break;
			}
			case 356:
			case 444:
			case 653:
			case 661:
			{
				int num183 = 7;
				rotation = velocity.X * 0.3f;
				spriteDirection = direction;
				frameCounter = frameCounter + 1.0 + (double)((Math.Abs(velocity.X) + Math.Abs(velocity.Y)) / 2f);
				if (frameCounter < (double)num183)
				{
					frame.Y = 0;
				}
				else if (frameCounter < (double)(num183 * 2))
				{
					frame.Y = num;
				}
				else if (frameCounter < (double)(num183 * 3))
				{
					frame.Y = num * 2;
				}
				else
				{
					frame.Y = num;
					if (frameCounter >= (double)(num183 * 4 - 1))
					{
						frameCounter = 0.0;
					}
				}
				if (type != 444 && type != 653 && type != 661)
				{
					frame.Y += (int)((float)(num * 3) * (ai[2] - 1f));
				}
				break;
			}
			case 357:
			case 448:
			case 484:
			case 606:
			{
				localAI[0] = -2f;
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (velocity.X == 0f)
					{
						frame.Y = num;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += 1.0;
						if (frameCounter > 12.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
							if (frame.Y > num)
							{
								frame.Y = 0;
							}
						}
					}
				}
				else
				{
					rotation += (float)direction * 0.1f;
					frame.Y = num;
				}
				int i3 = (int)base.Center.X / 16;
				int j3 = (int)position.Y / 16;
				Tile tileSafely2 = Framing.GetTileSafely(i3, j3);
				if (tileSafely2 != null)
				{
					if (tileSafely2.slope() == 0)
					{
						j3++;
						tileSafely2 = Framing.GetTileSafely(i3, j3);
					}
					if (tileSafely2.slope() == 1)
					{
						rotation = 0.785f;
						localAI[0] = 0f;
					}
					else if (tileSafely2.slope() == 2)
					{
						rotation = -0.785f;
						localAI[0] = 0f;
					}
				}
				break;
			}
			case 485:
			case 486:
			case 487:
			{
				spriteDirection = direction;
				localAI[0] = -2f;
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (velocity.X == 0f)
					{
						frame.Y = num;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X * 5f);
						if (frameCounter > 10.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
							if (frame.Y > num * 3)
							{
								frame.Y = 0;
							}
						}
					}
				}
				else
				{
					rotation += (float)direction * 0.1f;
					frame.Y = num;
				}
				int i2 = (int)base.Center.X / 16;
				int j2 = (int)position.Y / 16;
				Tile tileSafely = Framing.GetTileSafely(i2, j2);
				if (tileSafely != null)
				{
					if (tileSafely.slope() == 0)
					{
						j2++;
						tileSafely = Framing.GetTileSafely(i2, j2);
					}
					if (tileSafely.slope() == 1)
					{
						rotation = 0.785f;
						localAI[0] = 0f;
					}
					else if (tileSafely.slope() == 2)
					{
						rotation = -0.785f;
						localAI[0] = 0f;
					}
				}
				break;
			}
			case 250:
			case 264:
			case 268:
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 245:
				if (ai[0] == 0f)
				{
					if (ai[1] < -16f)
					{
						frame.Y = 0;
					}
					else if (ai[1] < -12f)
					{
						frame.Y = num;
					}
					else if (ai[1] < -8f)
					{
						frame.Y = num * 2;
					}
					else if (ai[1] < -4f)
					{
						frame.Y = num * 3;
					}
					else if (ai[1] < 0f)
					{
						frame.Y = num * 4;
					}
					else
					{
						frame.Y = 0;
					}
				}
				else if (ai[0] == 1f)
				{
					frame.Y = 1;
				}
				break;
			case 246:
				if (ai[0] == 0f)
				{
					if (localAI[0] == 1f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = 0;
					}
				}
				else if (ai[0] == 1f)
				{
					if (localAI[0] == 1f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = 0;
					}
					if (localAI[1] == -1f)
					{
						frame.Y += num * 4;
					}
					if (localAI[1] == 1f)
					{
						frame.Y += num * 2;
					}
				}
				break;
			case 249:
				if (localAI[0] == 1f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = 0;
				}
				if ((frameCounter += 1.0) >= 16.0)
				{
					frameCounter = 0.0;
				}
				break;
			case 141:
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					frame.Y = num * 2;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num)
				{
					frame.Y = 0;
				}
				break;
			case 243:
				if (frameCounter < 0.0)
				{
					if (velocity.Y == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter < -12.0)
						{
							if (frame.Y > num * 9)
							{
								frame.Y = num * 11;
							}
						}
						else if (frameCounter < -6.0)
						{
							if (frame.Y > num * 9)
							{
								frame.Y = num * 12;
							}
						}
						else if (frameCounter < 0.0)
						{
							frameCounter = 0.0;
							if (frame.Y > num * 9)
							{
								frame.Y = num * 11;
							}
						}
					}
					else
					{
						frameCounter = -18.0;
						if (velocity.Y < 0f)
						{
							frame.Y = num * 14;
						}
						else
						{
							frame.Y = num * 13;
						}
					}
					break;
				}
				spriteDirection = direction;
				frameCounter += Math.Abs(velocity.X * 1.1f);
				if (frameCounter >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 9)
					{
						frame.Y = 0;
					}
				}
				if (velocity.Y < -2f || velocity.Y > 5f)
				{
					frameCounter = -18.0;
				}
				break;
			case 222:
				frameCounter += 1.0;
				if (localAI[0] == 1f)
				{
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
					break;
				}
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y < num * 4)
				{
					frame.Y = num * 4;
				}
				if (frame.Y >= num * 12)
				{
					frame.Y = num * 4;
				}
				break;
			case 164:
			case 236:
			case 239:
			case 530:
				if (velocity.Y != 0f)
				{
					frameCounter = 0.0;
					if (velocity.Y < 0f)
					{
						frame.Y = num * 4;
					}
					else
					{
						frame.Y = 0;
					}
					break;
				}
				spriteDirection = direction;
				frameCounter += Math.Abs(velocity.X) * 1.1f;
				while (frameCounter >= 6.0)
				{
					frameCounter -= 6.0;
					frame.Y += num;
					if (frame.Y > num * 3)
					{
						frame.Y = 0;
					}
				}
				break;
			case 165:
			case 237:
			case 238:
			case 240:
			case 531:
			{
				float num217 = 0.5f;
				if (type == 531)
				{
					num217 = 0.4f;
				}
				frameCounter += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * num217;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 3;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			}
			case 195:
				if (ai[0] < 3f)
				{
					frame.Y = 0;
				}
				else if (ai[0] < 6f)
				{
					frame.Y = num;
				}
				else if (ai[0] < 9f)
				{
					frame.Y = num * 2;
				}
				else if (ai[0] < 12f)
				{
					frame.Y = num * 3;
				}
				else if (ai[0] < 15f)
				{
					frame.Y = num * 4;
				}
				else
				{
					frame.Y = num * 5;
				}
				break;
			case 174:
				if (IsABestiaryIconDummy)
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 4)
					{
						frame.Y = 0;
					}
				}
				else if (velocity.Y == 0f)
				{
					frame.Y = 0;
				}
				else if ((double)velocity.Y < -1.5)
				{
					frame.Y = num;
				}
				else if ((double)velocity.Y > 1.5)
				{
					frame.Y = num * 3;
				}
				else
				{
					frame.Y = num * 2;
				}
				break;
			case 177:
				if (velocity.Y == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 10.0)
					{
						frameCounter = 30.0;
						frame.Y = 0;
					}
					else
					{
						frame.Y = num;
					}
				}
				else if (velocity.Y < 0f)
				{
					frame.Y = num * 2;
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
				}
				break;
			case 163:
				if (velocity.Y != 0f)
				{
					frameCounter = -12.0;
					if (velocity.Y < 0f)
					{
						frame.Y = num * 5;
					}
					else
					{
						frame.Y = num * 6;
					}
					break;
				}
				spriteDirection = direction;
				frameCounter += Math.Abs(velocity.X) * 1.1f;
				if (frameCounter < -6.0)
				{
					frame.Y = num * 6;
				}
				else if (frameCounter < 0.0)
				{
					frame.Y = num * 7;
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 3;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 143:
				if (velocity.Y > 0f)
				{
					frameCounter += 1.0;
				}
				else if (velocity.Y < 0f)
				{
					frameCounter -= 1.0;
				}
				if (frameCounter < 6.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 3;
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				if (frameCounter > 17.0)
				{
					frameCounter = 17.0;
				}
				break;
			case 144:
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					localAI[3] += 1f;
					if (localAI[3] < 6f)
					{
						frame.Y = 0;
					}
					else if (localAI[3] < 12f)
					{
						frame.Y = num;
					}
					if (localAI[3] >= 11f)
					{
						localAI[3] = 0f;
					}
					break;
				}
				if (velocity.Y > 0f)
				{
					frameCounter += 1.0;
				}
				else if (velocity.Y < 0f)
				{
					frameCounter -= 1.0;
				}
				if (frameCounter < 6.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 3;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 4;
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				if (frameCounter > 17.0)
				{
					frameCounter = 17.0;
				}
				break;
			case 145:
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					if (ai[2] < 4f)
					{
						frame.Y = 0;
					}
					else if (ai[2] < 8f)
					{
						frame.Y = num;
					}
					else if (ai[2] < 12f)
					{
						frame.Y = num * 2;
					}
					else if (ai[2] < 16f)
					{
						frame.Y = num * 3;
					}
					break;
				}
				if (velocity.Y > 0f)
				{
					frameCounter += 1.0;
				}
				else if (velocity.Y < 0f)
				{
					frameCounter -= 1.0;
				}
				if (frameCounter < 6.0)
				{
					frame.Y = num * 4;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 5;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 6;
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				if (frameCounter > 17.0)
				{
					frameCounter = 17.0;
				}
				break;
			case 50:
				if (velocity.Y != 0f)
				{
					if (frame.Y < num * 4)
					{
						frame.Y = num * 4;
						frameCounter = 0.0;
					}
					if ((frameCounter += 1.0) >= 4.0)
					{
						frame.Y = num * 5;
					}
					break;
				}
				if (frame.Y >= num * 5)
				{
					frame.Y = num * 4;
					frameCounter = 0.0;
				}
				frameCounter += 1.0;
				if (num2 > 0)
				{
					frameCounter += 1.0;
				}
				if (num2 == 4)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
				break;
			case 170:
			case 171:
			case 180:
				spriteDirection = direction;
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 14)
				{
					frame.Y = 0;
				}
				break;
			case 135:
				if (ai[2] == 0f)
				{
					frame.Y = 0;
				}
				else
				{
					frame.Y = num;
				}
				break;
			case 85:
			case 341:
			case 629:
				if (ai[0] == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					int num173 = 3;
					if (velocity.Y == 0f)
					{
						frameCounter -= 1.0;
					}
					else
					{
						frameCounter += 1.0;
					}
					if (frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					if (frameCounter > (double)(num173 * 4))
					{
						frameCounter = num173 * 4;
					}
					if (frameCounter < (double)num173)
					{
						frame.Y = num;
					}
					else if (frameCounter < (double)(num173 * 2))
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < (double)(num173 * 3))
					{
						frame.Y = num * 3;
					}
					else if (frameCounter < (double)(num173 * 4))
					{
						frame.Y = num * 4;
					}
					else if (frameCounter < (double)(num173 * 5))
					{
						frame.Y = num * 5;
					}
					else if (frameCounter < (double)(num173 * 6))
					{
						frame.Y = num * 4;
					}
					else if (frameCounter < (double)(num173 * 7))
					{
						frame.Y = num * 3;
					}
					else
					{
						frame.Y = num * 2;
						if (frameCounter >= (double)(num173 * 8))
						{
							frameCounter = num173;
						}
					}
				}
				if (ai[3] == 2f || (IsABestiaryIconDummy && type == 85))
				{
					frame.Y += num * 6;
				}
				else if (ai[3] == 3f)
				{
					frame.Y += num * 12;
				}
				break;
			case 113:
			case 114:
				if (ai[2] == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 12.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				else
				{
					frame.Y = 0;
					frameCounter = -60.0;
				}
				break;
			case 61:
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.1f;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				int num167 = 5;
				int num168 = 5;
				frameCounter += 1.0;
				if (frameCounter >= (double)(num167 * num168))
				{
					frameCounter = 0.0;
				}
				int num169 = (int)(frameCounter / (double)num167);
				frame.Y = (num169 + 1) * num;
				break;
			}
			case 252:
			case 301:
				if (type == 301)
				{
					if (velocity.Y == 0f)
					{
						spriteDirection = -direction;
					}
					else
					{
						if ((double)velocity.X > 0.5)
						{
							spriteDirection = -1;
						}
						if ((double)velocity.X < -0.5)
						{
							spriteDirection = 1;
						}
					}
				}
				else
				{
					if ((double)velocity.X > 0.5)
					{
						spriteDirection = 1;
					}
					if ((double)velocity.X < -0.5)
					{
						spriteDirection = -1;
					}
				}
				rotation = velocity.X * 0.1f;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y > num * 4 || frame.Y == 0)
				{
					frame.Y = num;
				}
				break;
			case 122:
				spriteDirection = direction;
				rotation = velocity.X * 0.05f;
				if (ai[3] > 0f)
				{
					int num143 = (int)(ai[3] / 8f);
					frameCounter = 0.0;
					frame.Y = (num143 + 3) * num;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 3)
				{
					frame.Y = 0;
				}
				break;
			case 74:
			case 297:
			case 298:
			case 442:
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.1f;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = num * 4;
					frameCounter = 0.0;
					break;
				}
				int num83 = Main.npcFrameCount[type] - 1;
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * num83)
				{
					frame.Y = 0;
				}
				break;
			}
			case 671:
			case 672:
			case 673:
			case 674:
			case 675:
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.1f;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				int num70 = Main.npcFrameCount[type];
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y >= num * num70)
				{
					frame.Y = num;
				}
				break;
			}
			case 611:
				spriteDirection = -direction;
				rotation = velocity.X * 0.1f;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					int num57 = frame.Y / num;
					if (num57 < 0 || num57 >= 8)
					{
						frame.Y = 0;
					}
					if ((int)frameCounter % 40 != 0 || Main.rand.Next(80) == 0)
					{
						frameCounter += 1.0;
					}
					if ((frameCounter + 1.0) % 40.0 == 39.0)
					{
						frameCounter = 40 * Main.rand.Next(3);
					}
					int num58 = (int)frameCounter % 40 / 10;
					int num59 = (int)frameCounter / 40;
					int num60 = 0;
					switch (num59)
					{
					case 0:
						if (num58 == 3)
						{
							num58 = 1;
						}
						num60 = num58;
						break;
					case 1:
						if (num58 == 3)
						{
							num58 = 1;
						}
						num60 = 0;
						if (num58 != 0)
						{
							num60 = 2 + num58;
						}
						break;
					case 2:
						num60 = 0;
						if (num58 != 0)
						{
							num60 = 4 + num58;
						}
						break;
					}
					frame.Y = num * num60;
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter >= 5.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type] || frame.Y < num * 8)
					{
						frame.Y = num * 8;
					}
				}
				break;
			case 362:
			case 364:
			case 608:
				spriteDirection = direction;
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 10)
				{
					frame.Y = num * 3;
				}
				if (frame.Y < num * 3)
				{
					frame.Y = num * 3;
				}
				break;
			case 363:
			case 365:
			case 609:
				spriteDirection = direction;
				if (wet)
				{
					frameCounter += 1.0;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 2)
					{
						frame.Y = num;
					}
					if (frame.Y < num)
					{
						frame.Y = num;
					}
					rotation = 0f;
				}
				else if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = num;
					frameCounter = 0.0;
					rotation = 0f;
				}
				else
				{
					rotation = velocity.X * 0.1f;
					frameCounter += 1.0;
					if (frameCounter >= 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = num * 11;
					}
					if (frame.Y < num * 11)
					{
						frame.Y = num * 11;
					}
				}
				break;
			case 602:
				spriteDirection = direction;
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 10)
				{
					frame.Y = num * 3;
				}
				if (frame.Y < num * 3)
				{
					frame.Y = num * 3;
				}
				break;
			case 603:
				spriteDirection = direction;
				if (wet)
				{
					frameCounter += 1.0;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 2)
					{
						frame.Y = num;
					}
					if (frame.Y < num)
					{
						frame.Y = num;
					}
					rotation = 0f;
				}
				else if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = num;
					frameCounter = 0.0;
					rotation = 0f;
				}
				else
				{
					rotation = velocity.X * 0.1f;
					frameCounter += 1.0;
					if (frameCounter >= 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = num * 11;
					}
					if (frame.Y < num * 11)
					{
						frame.Y = num * 11;
					}
				}
				break;
			case 62:
			case 66:
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.1f;
				int num225 = 5;
				int num226 = 5;
				frameCounter += 1.0;
				if (frameCounter >= (double)(num225 * num226))
				{
					frameCounter = 0.0;
				}
				int num227 = (int)(frameCounter / (double)num225);
				frame.Y = num227 * num;
				break;
			}
			case 156:
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.1f;
				frameCounter += 1.0;
				if (frameCounter >= 20.0)
				{
					frameCounter = 0.0;
				}
				int num221 = (int)frameCounter / 4;
				frame.Y = num221 * num;
				break;
			}
			case 63:
			case 64:
			case 103:
			case 242:
			case 256:
				if ((type == 63 || type == 64 || type == 103 || type == 242) && ai[1] == 1f)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 6)
					{
						frame.Y = num * 4;
					}
					if (frame.Y < num * 4)
					{
						frame.Y = num * 4;
					}
					return;
				}
				frameCounter += 1.0;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
					break;
				}
				if (frameCounter < 12.0)
				{
					frame.Y = num;
					break;
				}
				if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
					break;
				}
				frame.Y = num * 3;
				if (frameCounter >= 23.0)
				{
					frameCounter = 0.0;
				}
				break;
			case 221:
				if (localAI[2] == 1f)
				{
					if (localAI[0] == 1f)
					{
						frame.Y = 0;
						localAI[0] = 0f;
					}
					frameCounter += 1.0;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = num * Main.npcFrameCount[type] - num;
					}
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter >= 13.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 2:
			case 23:
			case 121:
			case 169:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 317:
			case 318:
			case 660:
			{
				if (type == 23)
				{
					int num161 = Dust.NewDust(new Vector2(position.X - velocity.X, position.Y - velocity.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num161].noGravity = true;
					Main.dust[num161].velocity.X *= 0.3f;
					Main.dust[num161].velocity.Y *= 0.3f;
				}
				if ((type == 121 || type == 660) && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					frame.Y = num * 2;
				}
				if (type == 2 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 317 || type == 318)
				{
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					}
					if (velocity.X < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
					}
				}
				else if (type == 2 || type == 121 || type == 660)
				{
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					if (velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					rotation = velocity.X * 0.1f;
				}
				frameCounter += 1.0;
				float num162 = 8f;
				if (type == 660)
				{
					num162 = 6f;
				}
				if (frameCounter >= (double)num162)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			}
			case 133:
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
				}
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = 0;
				}
				if (frameCounter >= 16.0)
				{
					frame.Y = 0;
					frameCounter = 0.0;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					frame.Y += num * 2;
				}
				break;
			case 116:
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
				}
				frameCounter += 1.0;
				if (frameCounter >= 5.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 75:
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				else
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 157:
			{
				spriteDirection = direction;
				frameCounter += 1.0;
				if (!wet)
				{
					frameCounter += 1.0;
				}
				int num56 = 5;
				if (frameCounter < (double)num56)
				{
					frame.Y = 0;
				}
				else if (frameCounter < (double)(num56 * 2))
				{
					frame.Y = num;
				}
				else if (frameCounter < (double)(num56 * 3))
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < (double)(num56 * 4))
				{
					frame.Y = num;
				}
				else if (frameCounter < (double)(num56 * 5))
				{
					frame.Y = num * 3;
				}
				else if (frameCounter < (double)(num56 * 6))
				{
					frame.Y = num * 4;
				}
				else if (frameCounter < (double)(num56 * 7))
				{
					frame.Y = num * 5;
				}
				else if (frameCounter < (double)(num56 * 8))
				{
					frame.Y = num * 4;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			}
			case 55:
			case 57:
			case 58:
			case 102:
			case 241:
			case 465:
			case 592:
			case 607:
				spriteDirection = direction;
				frameCounter += 1.0;
				if (wet)
				{
					if (frameCounter < 6.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 3;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num * 4;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 5;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 615:
				spriteDirection = direction;
				if (!wet && ai[2] == 1f)
				{
					frame.Y = 4 * num;
					break;
				}
				if (!wet)
				{
					frameCounter += 1.0;
				}
				if ((frameCounter += 1.0) >= (double)(7 * (Main.npcFrameCount[type] - 1)))
				{
					frameCounter = 0.0;
				}
				frame.Y = (int)(frameCounter / 7.0) * num;
				break;
			case 69:
				if (ai[0] < 190f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num >= Main.npcFrameCount[type] - 1)
						{
							frame.Y = 0;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * (Main.npcFrameCount[type] - 1);
				}
				break;
			case 155:
			{
				int num224 = frame.Y / num;
				if (IsABestiaryIconDummy && num224 < 3)
				{
					num224 = 3;
				}
				if (velocity.Y < 0f)
				{
					num224 = 10;
				}
				else if (velocity.Y > 0f)
				{
					num224 = 11;
				}
				else if (velocity.X == 0f)
				{
					num224 = 0;
					frameCounter = 0.0;
				}
				else if (((direction > 0 && velocity.X < 0f) || (direction < 0 && velocity.X > 0f)) && Math.Abs(velocity.X) < 4f)
				{
					spriteDirection = direction;
					if (num224 > 2)
					{
						num224 = 0;
						frameCounter = 0.0;
					}
					if (num224 < 2)
					{
						frameCounter += 1.0;
						if (frameCounter > 5.0)
						{
							frameCounter = 0.0;
							num224++;
						}
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				else
				{
					spriteDirection = ((!(velocity.X < 0f)) ? 1 : (-1));
					frameCounter += Math.Abs(velocity.X) * 0.4f;
					if (num224 == 10 || num224 == 11)
					{
						num224 = 12;
						frameCounter = 0.0;
					}
					else if (frameCounter > 8.0)
					{
						frameCounter -= 8.0;
						num224++;
						if (num224 > 9)
						{
							num224 = 3;
						}
					}
				}
				frame.Y = num224 * num;
				break;
			}
			case 329:
				if (velocity.Y > 0f)
				{
					frame.Y = num * 3;
					frameCounter = 0.0;
					break;
				}
				if (velocity.Y < 0f)
				{
					frame.Y = num * 2;
					frameCounter = 0.0;
					break;
				}
				spriteDirection = direction;
				frameCounter += Math.Abs(velocity.X) * 0.4f;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					if (frame.Y > num * 9)
					{
						frame.Y = num * 2;
					}
				}
				break;
			case 86:
				if (velocity.Y == 0f || wet)
				{
					if (velocity.X < -2f)
					{
						spriteDirection = -1;
					}
					else if (velocity.X > 2f)
					{
						spriteDirection = 1;
					}
					else
					{
						spriteDirection = direction;
					}
				}
				if (velocity.Y != 0f)
				{
					frame.Y = num * 15;
					frameCounter = 0.0;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				if (Math.Abs(velocity.X) < 3f)
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num >= 9)
						{
							frame.Y = num;
						}
						if (frame.Y / num <= 0)
						{
							frame.Y = num;
						}
					}
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 10.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= 15)
					{
						frame.Y = num * 9;
					}
					if (frame.Y / num <= 8)
					{
						frame.Y = num * 9;
					}
				}
				break;
			case 315:
				if (velocity.Y == 0f || wet)
				{
					if (velocity.X < -1f)
					{
						spriteDirection = -1;
					}
					else if (velocity.X > 1f)
					{
						spriteDirection = 1;
					}
					else
					{
						spriteDirection = direction;
					}
				}
				if (velocity.Y != 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 8.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num > 10)
					{
						frame.Y = num;
					}
				}
				break;
			case 127:
				if (IsMechQueenUp)
				{
					if (ai[1] == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter >= 12.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
							if (frame.Y / num >= 5)
							{
								frame.Y = num * 3;
							}
						}
					}
					else
					{
						frameCounter = 0.0;
						frame.Y = num * 5;
					}
				}
				else if (ai[1] == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 12.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num >= 2)
						{
							frame.Y = 0;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
				}
				break;
			case 129:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 2.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 130:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 67:
			case 217:
			case 218:
			case 219:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 220:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 10.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 109:
				if (velocity.Y == 0f && ((velocity.X <= 0f && direction < 0) || (velocity.X >= 0f && direction > 0)))
				{
					spriteDirection = direction;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 7.0)
				{
					frameCounter -= 7.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 83:
			case 84:
			case 179:
				if (ai[0] == 2f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 72:
				frameCounter += 1.0;
				if (frameCounter >= 3.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 65:
				spriteDirection = direction;
				frameCounter += 1.0;
				if (wet && type == 65)
				{
					if (frameCounter < 6.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 3;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				break;
			case 542:
			case 543:
			case 544:
			case 545:
				spriteDirection = direction;
				frameCounter += 1.0;
				if (frameCounter >= 16.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 4.0);
				break;
			case 224:
			case 587:
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
					rotation = velocity.Y * 0.2f;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (0f - velocity.Y) * 0.2f;
				}
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 4)
				{
					frame.Y = 0;
				}
				break;
			case 150:
			case 151:
			case 152:
			case 158:
			case 226:
				if (type == 151)
				{
					int num46 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num46].noGravity = true;
				}
				if (type == 150 && Main.rand.Next(10) == 0)
				{
					int num47 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 67, velocity.X * 0.5f, velocity.Y * 0.5f, 90, default(Color), 1.5f);
					Main.dust[num47].noGravity = true;
					Dust dust = Main.dust[num47];
					dust.velocity *= 0.2f;
					Main.dust[num47].noLight = true;
				}
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 4)
				{
					frame.Y = 0;
				}
				break;
			case 48:
			case 49:
			case 51:
			case 60:
			case 82:
			case 93:
			case 137:
			case 182:
			case 210:
			case 211:
			case 253:
			case 316:
			case 634:
			case 662:
			case 664:
			{
				if (type == 60)
				{
					int num290 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num290].noGravity = true;
				}
				if (type == 634 && Main.rand.Next(10) == 0)
				{
					int num291 = Dust.NewDust(position, width, height, 165, velocity.X, velocity.Y, 50);
					Dust dust = Main.dust[num291];
					dust.velocity *= 0.1f;
					Main.dust[num291].noGravity = true;
				}
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
				if (type == 210 || type == 211)
				{
					frameCounter += 1.0;
					rotation = velocity.X * 0.2f;
				}
				frameCounter += 1.0;
				int num292 = 6;
				int num293 = Main.npcFrameCount[type];
				if (type == 49 || type == 51 || type == 60 || type == 634)
				{
					num293--;
				}
				if (type == 48)
				{
					num292 = 5;
				}
				if (frameCounter >= (double)num292)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * num293)
				{
					frame.Y = 0;
				}
				break;
			}
			case 330:
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.15f;
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 42:
			case 231:
			case 232:
			case 233:
			case 234:
			case 235:
				frameCounter += 1.0;
				if (frameCounter < 2.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 4.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 8.0)
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 205:
				frameCounter += 0.5;
				if (frameCounter < 2.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 4.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 8.0)
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 176:
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num)
				{
					frame.Y = 0;
				}
				break;
			case 43:
			case 56:
			case 175:
				frameCounter += 1.0;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num;
				}
				if (frameCounter == 23.0)
				{
					frameCounter = 0.0;
				}
				break;
			case 115:
				frameCounter += 1.0;
				if (frameCounter < 3.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 15.0)
				{
					frame.Y = num;
				}
				if (frameCounter == 15.0)
				{
					frameCounter = 0.0;
				}
				break;
			case 101:
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num * 2;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 2)
				{
					frame.Y = 0;
				}
				break;
			case 199:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (frame.Y < num * 3)
				{
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
				}
				else
				{
					if (velocity.Y != 0f)
					{
						break;
					}
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter > 12.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y > num * 7)
						{
							frame.Y = num * 3;
						}
					}
				}
				break;
			case 467:
				if (ai[0] == 1f || IsABestiaryIconDummy)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						if (frame.Y < num * 6)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						else if (IsABestiaryIconDummy)
						{
							frame.Y = 0;
						}
					}
					break;
				}
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					if (frame.Y > num * 3)
					{
						frame.Y = num * 3;
					}
					if (frame.Y > 0)
					{
						frame.Y -= num;
						frameCounter = 0.0;
					}
				}
				break;
			case 480:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] < 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 3.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y >= Main.npcFrameCount[type] * num)
						{
							frame.Y = num * 21;
						}
						else if (frame.Y < num * 21)
						{
							frame.Y = num * 21;
						}
					}
					else if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 4.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num > 7)
						{
							frame.Y = 0;
						}
					}
					else
					{
						frameCounter += 1f + Math.Abs(velocity.X);
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type] - 4)
						{
							frame.Y = num * 10;
						}
						else if (frame.Y / num < 10)
						{
							frame.Y = num * 10;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
				}
				break;
			case 483:
				if (ai[0] == -1f)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 21)
					{
						frame.Y = num * 21;
					}
					else if (frame.Y < num * 13)
					{
						frame.Y = num * 13;
					}
					rotation += velocity.X * 0.2f;
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 11)
					{
						frame.Y = 0;
					}
					rotation = velocity.X * 0.1f;
				}
				break;
			case 482:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] < 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 3.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y >= Main.npcFrameCount[type] * num)
						{
							frame.Y = num * 11;
						}
						else if (frame.Y < num * 11)
						{
							frame.Y = num * 11;
						}
					}
					else if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						frame.Y = 0;
					}
					else
					{
						frameCounter += 0.2f + Math.Abs(velocity.X);
						if (frameCounter > 8.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type] - 10)
						{
							frame.Y = num * 2;
						}
						else if (frame.Y / num < 2)
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 631:
			{
				int num51 = 100;
				int num52 = 32;
				int num53 = 8;
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
					if (ai[2] != 0f && ai[2] < (float)num51)
					{
						float num54 = ai[2] - (float)(num51 - num52);
						float amount = num54 / (float)num52;
						Player player = Main.player[target];
						bool flag3 = player != null && ((player.Center.X < base.Center.X) ? (direction == -1) : (direction == 1));
						bool flag4 = player?.Hitbox.Intersects(base.Hitbox) ?? false;
						if (player != null && flag3 && !flag4 && Collision.CanHit(player, this))
						{
							frame.Y = (int)MathHelper.Lerp(15f, Main.npcFrameCount[type], amount) * num;
						}
						else if (flag3 && flag4)
						{
							frame.Y = (int)MathHelper.Lerp(10f, 15f, amount) * num;
						}
						else
						{
							frame.Y = 0;
						}
					}
					else if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						frame.Y = 0;
					}
					else
					{
						frameCounter += 0.2f + Math.Abs(velocity.X);
						if (frameCounter > 8.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y >= num53 * num)
						{
							frame.Y = num;
						}
						else if (frame.Y / num < 1)
						{
							frame.Y = num;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			}
			case 461:
				if (wet)
				{
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					if (spriteDirection != direction)
					{
						rotation *= -1f;
						spriteDirection = direction;
					}
					float num234 = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
					if ((double)Math.Abs(rotation - num234) >= 3.14)
					{
						if (num234 < rotation)
						{
							rotation -= 6.28f;
						}
						else
						{
							rotation += 6.28f;
						}
					}
					rotation = (rotation * 4f + num234) / 5f;
					frameCounter += Math.Abs(velocity.Length());
					frameCounter += 1.0;
					if (frameCounter > 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 20)
					{
						frame.Y = num * 16;
					}
					else if (frame.Y / num < 16)
					{
						frame.Y = num * 19;
					}
					break;
				}
				if ((double)rotation > 3.14)
				{
					rotation -= 6.28f;
				}
				if ((double)rotation > -0.01 && (double)rotation < 0.01)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.9f;
				}
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 15)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 586:
			{
				if (wet)
				{
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
					frameCounter += Math.Abs(velocity.Length());
					frameCounter += 1.0;
					if (frameCounter > 60.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 1)
					{
						frame.Y = 0;
					}
					else if (frame.Y / num < 0)
					{
						frame.Y = 0;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.X == 0f)
				{
					frame.Y = num;
					frameCounter = 0.0;
					break;
				}
				int num228 = 6;
				num228 = 8;
				frameCounter += Math.Abs(velocity.X) * 1f;
				frameCounter += 0.5;
				if (frameCounter > (double)num228)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			}
			case 466:
				if (!IsABestiaryIconDummy && ai[2] <= 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] == 0f)
					{
						frame.Y = 0;
					}
					else if (ai[2] < -8f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = num * 2;
					}
				}
				else if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y / num < 4)
					{
						frame.Y = num * 4;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 7.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 17)
					{
						frame.Y = num * 4;
					}
					if (frame.Y / num < 4)
					{
						frame.Y = num * 4;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 3;
				}
				break;
			case 471:
			{
				bool flag10 = false;
				if (ai[3] < 0f)
				{
					flag10 = true;
				}
				if (flag10)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					frameCounter += Math.Abs(velocity.Length()) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter < 6.0)
					{
						frame.Y = num * 17;
						break;
					}
					if (frameCounter < 12.0)
					{
						frame.Y = num * 18;
						break;
					}
					if (frameCounter < 18.0)
					{
						frame.Y = num * 19;
						break;
					}
					if (frameCounter < 23.0)
					{
						frame.Y = num * 18;
						break;
					}
					frame.Y = num * 18;
					frameCounter = 0.0;
				}
				else if (ai[3] == 1f)
				{
					frame.Y = num * 16;
					frameCounter = 0.0;
				}
				else if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 7.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 15)
					{
						frame.Y = num * 2;
					}
					if (frame.Y / num < 2)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			}
			case 166:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frameCounter += 2.0;
						if (frameCounter > 7.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num > 5)
						{
							frame.Y = 0;
						}
						break;
					}
					frameCounter += Math.Abs(velocity.X);
					frameCounter += 1.0;
					if (frameCounter > 9.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 12)
					{
						frame.Y = num * 7;
					}
					if (frame.Y / num < 7)
					{
						frame.Y = num * 7;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 6;
				}
				break;
			case 469:
				if (ai[2] == 1f)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
					frameCounter += Math.Abs(velocity.Length());
					if (frameCounter > 11.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 5)
					{
						frame.Y = num * 2;
					}
					if (frame.Y / num < 2)
					{
						frame.Y = num * 2;
					}
					break;
				}
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						frame.Y = 0;
						break;
					}
					frameCounter += Math.Abs(velocity.X);
					frameCounter += 1.0;
					if (frameCounter > 9.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 11)
					{
						frame.Y = num * 6;
					}
					if (frame.Y / num < 6)
					{
						frame.Y = num * 6;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 351:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					if (velocity.Y < 0f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = num;
					}
					frameCounter = 0.0;
				}
				break;
			case 343:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					if (velocity.Y < 0f)
					{
						frame.Y = 0;
					}
					else
					{
						frame.Y = num;
					}
					frameCounter = 0.0;
				}
				break;
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						if (type == 140)
						{
							frame.Y = num;
							frameCounter = 0.0;
						}
						else
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			case 230:
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 10.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
					if (velocity.Y > 4f)
					{
						rotation -= velocity.Y * 0.01f;
					}
				}
				break;
			case 593:
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 10.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
					if (velocity.Y > 4f)
					{
						rotation -= velocity.Y * 0.01f;
					}
				}
				break;
			case 290:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						if (ai[1] < 10f)
						{
							frame.Y = num * 11;
						}
						else if (ai[1] < 20f)
						{
							frame.Y = num * 10;
						}
						else
						{
							frame.Y = num * 9;
						}
						break;
					}
					if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						frame.Y = 0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 8)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 110:
			case 214:
			case 215:
			case 216:
			case 293:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * (int)ai[2];
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 6;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			case 206:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * (int)ai[2];
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 6;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			case 350:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * ((int)ai[2] - 1);
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 7)
					{
						frame.Y = num * 7;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X * 1.3f;
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 7;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 5;
				}
				break;
			case 111:
			case 291:
			case 292:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * ((int)ai[2] - 1);
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 7)
					{
						frame.Y = num * 7;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X * 1.3f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 7;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 6;
				}
				break;
			case 257:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter < 8.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 16.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 32.0)
				{
					frame.Y = num * 3;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 258:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter += 1.0;
					if (frameCounter > 1.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 5 || frame.Y < num * 3)
					{
						frame.Y = num * 3;
					}
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter < 8.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 16.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 2;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				break;
			case 348:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 7)
				{
					frame.Y = num;
				}
				break;
			case 349:
				frameCounter += 1.0;
				if (frameCounter > 3.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 7)
				{
					frame.Y = 0;
				}
				break;
			case 3:
			case 52:
			case 53:
			case 132:
			case 161:
			case 186:
			case 187:
			case 188:
			case 189:
			case 200:
			case 223:
			case 251:
			case 254:
			case 255:
			case 319:
			case 320:
			case 321:
			case 331:
			case 332:
			case 342:
			case 536:
			case 590:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter < 8.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 16.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 32.0)
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 148:
			case 149:
			case 168:
			case 470:
			{
				int num50 = 0;
				if (localAI[0] == 2f)
				{
					num50 = 3;
				}
				if (localAI[0] == 3f)
				{
					num50 = 6;
				}
				if (localAI[0] == 4f)
				{
					num50 = 9;
				}
				num50 *= num;
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = num50;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					if (frameCounter < 6.0)
					{
						frame.Y = num50;
						break;
					}
					if (frameCounter < 12.0)
					{
						frame.Y = num + num50;
						break;
					}
					if (frameCounter < 15.0)
					{
						frame.Y = num * 2 + num50;
						break;
					}
					frameCounter = 0.0;
					frame.Y = num * 2 + num50;
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 2 + num50;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 2 + num50;
				}
				break;
			}
			case 299:
			case 538:
			case 539:
			case 639:
			case 640:
			case 641:
			case 642:
			case 643:
			case 644:
			case 645:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 1)
					{
						frame.Y = num;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
				}
				break;
			case 300:
			case 447:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 8.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num > 1)
						{
							frame.Y = 0;
						}
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				break;
			case 610:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 8.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num > 1)
						{
							frame.Y = 0;
						}
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				break;
			case 361:
			case 445:
			case 687:
				spriteDirection = direction;
				if (wet)
				{
					frameCounter = 0.0;
					if (velocity.X > 0.25f || velocity.X < -0.25f)
					{
						frame.Y = num * 10;
					}
					else if (velocity.X > 0.15f || velocity.X < -0.15f)
					{
						frame.Y = num * 11;
					}
					else
					{
						frame.Y = num * 12;
					}
				}
				else if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 6.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
						}
						if (frame.Y > num * 5)
						{
							frame.Y = 0;
						}
						break;
					}
					frameCounter += 1.0;
					int num219 = 6;
					if (frameCounter < (double)num219)
					{
						frame.Y = 0;
						break;
					}
					if (frameCounter < (double)(num219 * 2))
					{
						frame.Y = num * 6;
						break;
					}
					if (frameCounter < (double)(num219 * 3))
					{
						frame.Y = num * 8;
						break;
					}
					frame.Y = num * 9;
					if (frameCounter >= (double)(num219 * 4 - 1))
					{
						frameCounter = 0.0;
					}
				}
				else if (velocity.Y > 0f)
				{
					frame.Y = num * 9;
				}
				else
				{
					frame.Y = num * 8;
				}
				break;
			case 616:
			case 617:
			{
				int num184 = 8;
				int num185 = 5;
				if (velocity.X == 0f)
				{
					num185 = 10;
				}
				spriteDirection = direction;
				if (wet)
				{
					frameCounter++;
					if (frameCounter > (double)num185)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y > num * 13)
						{
							frame.Y = num * 8;
						}
					}
					break;
				}
				frameCounter++;
				if (frameCounter > (double)num184)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 7)
					{
						frame.Y = 0;
					}
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				if (velocity.Y != 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
				}
				break;
			}
			case 625:
			{
				int num174 = 7;
				int num175 = 4;
				if (velocity.X == 0f)
				{
					num175 = 8;
				}
				spriteDirection = direction;
				if (wet)
				{
					if (frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
					frameCounter++;
					if (frameCounter > (double)num175)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y > num * 11)
						{
							frame.Y = num * 6;
						}
					}
					break;
				}
				if (frame.Y > num * 5)
				{
					frame.Y = 0;
				}
				frameCounter++;
				if (frameCounter > (double)num174)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 5)
					{
						frame.Y = 0;
					}
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			}
			case 626:
			case 627:
				if (velocity.X != 0f)
				{
					spriteDirection = ((!(velocity.X < 0f)) ? 1 : (-1));
				}
				if (IsABestiaryIconDummy)
				{
					frameCounter++;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 5)
					{
						frame.Y = 0;
					}
				}
				else if (!wet)
				{
					frame.Y = 0;
				}
				else if (velocity.Length() > 0.15f)
				{
					frame.Y = num * 3;
				}
				else if (velocity.Length() > 0.05f)
				{
					frame.Y = num * 2;
				}
				else if (velocity.Length() > 0.025f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = 0;
				}
				break;
			case 366:
			case 367:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 46:
			case 47:
			case 303:
			case 337:
			case 443:
			case 464:
			case 540:
			case 614:
			case 646:
			case 647:
			case 648:
			case 649:
			case 650:
			case 651:
			case 652:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 6;
				}
				break;
			case 4:
			case 125:
			case 126:
				frameCounter += 1.0;
				if (frameCounter < 7.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 14.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 21.0)
				{
					frame.Y = num * 2;
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				if (ai[0] > 1f)
				{
					frame.Y += num * 3;
				}
				break;
			case 5:
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 94:
				frameCounter += 1.0;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
					break;
				}
				if (frameCounter < 12.0)
				{
					frame.Y = num;
					break;
				}
				if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
					break;
				}
				frame.Y = num;
				if (frameCounter >= 23.0)
				{
					frameCounter = 0.0;
				}
				break;
			case 6:
			case 173:
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 24:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (ai[1] > 0f)
				{
					if (frame.Y < 4)
					{
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					if (frameCounter <= 4.0)
					{
						frame.Y = num * 4;
						break;
					}
					if (frameCounter <= 8.0)
					{
						frame.Y = num * 5;
						break;
					}
					if (frameCounter <= 12.0)
					{
						frame.Y = num * 6;
						break;
					}
					if (frameCounter <= 16.0)
					{
						frame.Y = num * 7;
						break;
					}
					if (frameCounter <= 20.0)
					{
						frame.Y = num * 8;
						break;
					}
					frame.Y = num * 9;
					frameCounter = 100.0;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter <= 4.0)
				{
					frame.Y = 0;
					break;
				}
				if (frameCounter <= 8.0)
				{
					frame.Y = num;
					break;
				}
				if (frameCounter <= 12.0)
				{
					frame.Y = num * 2;
					break;
				}
				frame.Y = num * 3;
				if (frameCounter >= 16.0)
				{
					frameCounter = 0.0;
				}
				break;
			case 29:
			case 32:
			case 45:
			case 172:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				frame.Y = 0;
				if (velocity.Y != 0f)
				{
					frame.Y += num * 2;
				}
				else if (ai[1] > 0f)
				{
					frame.Y += num;
				}
				break;
			case 34:
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 624:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
					frame.Y = 9 * num;
					break;
				}
				if (velocity.Y > 0f)
				{
					frameCounter = 0.0;
					frame.Y = 10 * num;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter > 8.0)
				{
					int num55 = frame.Y / num;
					frameCounter -= 8.0;
					num55++;
					if (num55 > 8)
					{
						num55 = 1;
					}
					frame.Y = num55 * num;
				}
				break;
			case 628:
				spriteDirection = ((!(Main.WindForVisuals > 0f)) ? 1 : (-1));
				if (IsABestiaryIconDummy)
				{
					int num3 = frame.Y / num;
					int num4 = 5;
					spriteDirection = 1;
					frameCounter++;
					if (frameCounter > (double)num4)
					{
						frameCounter -= num4;
						num3++;
						if (num3 > 5)
						{
							num3 = 0;
						}
						frame.Y = num3 * num;
					}
				}
				else if (ai[0] == 0f)
				{
					int num5 = frame.Y / num;
					int num6 = 8;
					if (num5 == 6)
					{
						frameCounter += 1f + 0.5f * Math.Abs(Main.WindForVisuals);
						if (frameCounter > (double)num6)
						{
							frameCounter -= num6;
							num5 = 0;
							frame.Y = num5 * num;
						}
						break;
					}
					if (num5 > 5)
					{
						num5 = 6;
						frameCounter = 0.0;
						frame.Y = num5 * num;
						break;
					}
					frameCounter += 1f + 0.5f * Math.Abs(Main.WindForVisuals);
					if (frameCounter > (double)num6)
					{
						frameCounter -= num6;
						num5++;
						if (num5 > 5)
						{
							num5 = 0;
						}
						frame.Y = num5 * num;
					}
				}
				else if (localAI[0] == 0f)
				{
					frameCounter++;
					if (!(frameCounter > 4.0))
					{
						break;
					}
					frameCounter = 0.0;
					int num7 = frame.Y / num;
					if (num7 == 6)
					{
						num7 = 7;
					}
					else if (num7 < 7)
					{
						num7 = 6;
					}
					else
					{
						num7++;
						if (num7 > 10)
						{
							num7 = 7;
						}
					}
					frame.Y = num7 * num;
				}
				else if (localAI[0] == 1f)
				{
					int num8 = frame.Y / num;
					num8 = (int)MathHelper.Lerp(7f, 20f, (float)frameCounter / 80f);
					if (num8 > 19)
					{
						num8 = 19;
					}
					if (num8 > 16)
					{
						num8 -= 9;
					}
					frameCounter++;
					if (frameCounter > 80.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = num8 * num;
				}
				break;
			}
			if (aiStyle == 39 && type != 417)
			{
				if (ai[0] == 0f)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0.0;
					}
					frameCounter += Math.Abs(velocity.X) * 1.1f;
					if (frameCounter < 6.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 3;
					}
					else if (frameCounter < 32.0)
					{
						frame.Y = num * 4;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 1f)
				{
					frameCounter = 0.0;
					if (ai[1] < 10f)
					{
						frame.Y = num * 5;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 7;
					}
				}
				else if (ai[0] == 5f)
				{
					frameCounter = 0.0;
					if (ai[1] < 10f)
					{
						frame.Y = num * 7;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 5;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 7;
				}
			}
			position -= netOffset;
		}

		private static int FindFrame_FromSequence(int sequenceFrame, int[] frames)
		{
			int num = sequenceFrame;
			if (num >= frames.Length)
			{
				num = frames.Length - 1;
			}
			return frames[num];
		}

		private static int FindFrame_Deerclops_GetAttack1Frame(int sequenceFrame)
		{
			return FindFrame_FromSequence(sequenceFrame, _deerclopsAttack1Frames);
		}

		private static int FindFrame_Deerclops_GetAttack2Frame(int sequenceFrame)
		{
			return FindFrame_FromSequence(sequenceFrame, _deerclopsAttack2Frames);
		}

		private static int FindFrame_Deerclops_GetAttack3Frame(int sequenceFrame)
		{
			return FindFrame_FromSequence(sequenceFrame, _deerclopsAttack3Frames);
		}

		public void SimpleFlyMovement(Vector2 desiredVelocity, float moveSpeed)
		{
			if (velocity.X < desiredVelocity.X)
			{
				velocity.X += moveSpeed;
				if (velocity.X < 0f && desiredVelocity.X > 0f)
				{
					velocity.X += moveSpeed;
				}
			}
			else if (velocity.X > desiredVelocity.X)
			{
				velocity.X -= moveSpeed;
				if (velocity.X > 0f && desiredVelocity.X < 0f)
				{
					velocity.X -= moveSpeed;
				}
			}
			if (velocity.Y < desiredVelocity.Y)
			{
				velocity.Y += moveSpeed;
				if (velocity.Y < 0f && desiredVelocity.Y > 0f)
				{
					velocity.Y += moveSpeed;
				}
			}
			else if (velocity.Y > desiredVelocity.Y)
			{
				velocity.Y -= moveSpeed;
				if (velocity.Y > 0f && desiredVelocity.Y < 0f)
				{
					velocity.Y -= moveSpeed;
				}
			}
		}

		public void HealEffect(int healAmount, bool broadcast = true)
		{
			HealEffect(new Rectangle((int)position.X, (int)position.Y, width, height), healAmount, broadcast);
		}

		public static void HealEffect(Rectangle r, int healAmount, bool broadcast = true)
		{
			if (broadcast && Main.netMode == 2)
			{
				NetMessage.SendData(81, -1, -1, null, (int)CombatText.HealLife.PackedValue, r.Center.X, r.Center.Y, healAmount);
			}
			else
			{
				CombatText.NewText(r, CombatText.HealLife, healAmount);
			}
		}

		public int FindClosestPlayer()
		{
			float distanceToPlayer;
			return FindClosestPlayer(out distanceToPlayer);
		}

		public int FindClosestPlayer(out float distanceToPlayer)
		{
			Vector2 center = base.Center;
			float num = float.MaxValue;
			int num2 = -1;
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (player.active && !player.dead && !player.ghost)
				{
					float num3 = Vector2.DistanceSquared(center, player.Center);
					if (num3 < num)
					{
						num = num3;
						num2 = i;
					}
				}
			}
			if (num2 < 0)
			{
				for (int j = 0; j < 255; j++)
				{
					Player player = Main.player[j];
					if (player.active)
					{
						float num4 = Vector2.DistanceSquared(center, player.Center);
						if (num4 < num)
						{
							num = num4;
							num2 = j;
						}
					}
				}
			}
			distanceToPlayer = (float)Math.Sqrt(num);
			return num2;
		}

		public void BigMimicSpawnSmoke()
		{
			if (Main.netMode == 2)
			{
				NetMessage.SendData(51, -1, -1, null, whoAmI, 4f);
				return;
			}
			for (int i = 0; i < 20; i++)
			{
				int num = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
				Main.dust[num].velocity *= 2f;
				Main.dust[num].noGravity = true;
			}
			for (int j = 0; j < 3; j++)
			{
				for (int k = 0; k < 2; k++)
				{
					int num2 = Gore.NewGore(new Vector2(position.X + (float)(width * j) * 0.45f - 20f, position.Y + (float)(height * k) * 0.5f + 10f), new Vector2(0f, 0f), 99, 1.1f);
					Main.gore[num2].velocity *= 0.3f;
				}
			}
		}

		public static bool BigMimicSummonCheck(int x, int y, Player user)
		{
			if (Main.netMode == 1 || !Main.hardMode)
			{
				return false;
			}
			int num = Chest.FindChest(x, y);
			if (num < 0)
			{
				return false;
			}
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			for (int i = 0; i < 40; i++)
			{
				ushort num5 = Main.tile[Main.chest[num].x, Main.chest[num].y].type;
				int num6 = Main.tile[Main.chest[num].x, Main.chest[num].y].frameX / 36;
				if (TileID.Sets.BasicChest[num5] && (num5 != 21 || num6 < 5 || num6 > 6) && Main.chest[num].item[i] != null && Main.chest[num].item[i].type > 0)
				{
					if (Main.chest[num].item[i].type == 3092)
					{
						num2 += Main.chest[num].item[i].stack;
					}
					else if (Main.chest[num].item[i].type == 3091)
					{
						num3 += Main.chest[num].item[i].stack;
					}
					else
					{
						num4++;
					}
				}
			}
			if (num4 == 0 && num2 + num3 == 1)
			{
				if (num2 != 1)
				{
					_ = 1;
				}
				if (TileID.Sets.BasicChest[Main.tile[x, y].type])
				{
					if (Main.tile[x, y].frameX % 36 != 0)
					{
						x--;
					}
					if (Main.tile[x, y].frameY % 36 != 0)
					{
						y--;
					}
					int number = Chest.FindChest(x, y);
					for (int j = 0; j < 40; j++)
					{
						Main.chest[num].item[j] = new Item();
					}
					Chest.DestroyChest(x, y);
					for (int k = x; k <= x + 1; k++)
					{
						for (int l = y; l <= y + 1; l++)
						{
							if (TileID.Sets.BasicChest[Main.tile[k, l].type])
							{
								Main.tile[k, l].ClearTile();
							}
						}
					}
					int number2 = 1;
					if (Main.tile[x, y].type == 467)
					{
						number2 = 5;
					}
					NetMessage.SendData(34, -1, -1, null, number2, x, y, 0f, number);
					NetMessage.SendTileSquare(-1, x, y, 3);
				}
				int num7 = 475;
				if (num3 == 1)
				{
					num7 = ((!WorldGen.crimson) ? 473 : 474);
				}
				int num8 = NewNPC(user.GetNPCSource_TileInteraction(x, y), x * 16 + 16, y * 16 + 32, num7);
				Main.npc[num8].whoAmI = num8;
				NetMessage.SendData(23, -1, -1, null, num8);
				Main.npc[num8].BigMimicSpawnSmoke();
			}
			return false;
		}

		public bool ShouldFaceTarget(ref NPCUtils.TargetSearchResults searchResults, NPCUtils.TargetType? overrideTargetType = null)
		{
			NPCUtils.TargetType nearestTargetType = searchResults.NearestTargetType;
			if (overrideTargetType.HasValue)
			{
				nearestTargetType = overrideTargetType.Value;
			}
			switch (nearestTargetType)
			{
			case NPCUtils.TargetType.NPC:
			case NPCUtils.TargetType.TankPet:
				return true;
			case NPCUtils.TargetType.Player:
			{
				bool flag = true;
				Player nearestTankOwner = searchResults.NearestTankOwner;
				if (nearestTankOwner.dead || (nearestTankOwner.npcTypeNoAggro[type] && direction != 0))
				{
					flag = false;
				}
				if (!flag)
				{
					break;
				}
				float num = (float)(nearestTankOwner.width + nearestTankOwner.height + width + height) / 4f + 800f;
				if (nearestTankOwner.itemAnimation == 0 && nearestTankOwner.aggro < 0 && searchResults.NearestTankDistance > num)
				{
					if (oldTarget >= 0)
					{
						return oldTarget >= 255;
					}
					return true;
				}
				return true;
			}
			}
			return false;
		}

		public void FaceTarget()
		{
			direction = ((!((float)targetRect.Center.X < base.Center.X)) ? 1 : (-1));
			directionY = ((!((float)targetRect.Center.Y < base.Center.Y)) ? 1 : (-1));
		}

		public void TargetClosestUpgraded(bool faceTarget = true, Vector2? checkPosition = null)
		{
			int num = -1;
			int num2 = -1;
			int num3 = -1;
			Vector2 center = base.Center;
			if (checkPosition.HasValue)
			{
				center = checkPosition.Value;
			}
			bool flag = direction == 0;
			float num4 = 9999999f;
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (!player.active || player.dead || player.ghost)
				{
					continue;
				}
				float num5 = Vector2.Distance(center, player.Center);
				num5 -= (float)player.aggro;
				bool flag2 = player.npcTypeNoAggro[type];
				if (flag2 && !flag)
				{
					num5 += 1000f;
				}
				if (num5 < num4)
				{
					num = i;
					num2 = -1;
					num4 = num5;
				}
				if (player.tankPet >= 0 && !flag2)
				{
					num5 = Vector2.Distance(center, Main.projectile[player.tankPet].Center);
					num5 -= 200f;
					if (num5 < num4 && num5 < 200f && Collision.CanHit(base.Center, 0, 0, Main.projectile[player.tankPet].Center, 0, 0))
					{
						num2 = player.tankPet;
						num4 = num5;
					}
				}
			}
			for (int j = 0; j < 200; j++)
			{
				NPC nPC = Main.npc[j];
				if (nPC.active && nPC.type == 548)
				{
					float num6 = Vector2.Distance(center, nPC.Center);
					if (num4 > num6)
					{
						num3 = j;
						num = -1;
						num2 = -1;
						num4 = num6;
					}
				}
			}
			if (num4 == 9999999f)
			{
				return;
			}
			if (num3 >= 0)
			{
				target = Main.npc[num3].WhoAmIToTargettingIndex;
				targetRect = Main.npc[num3].Hitbox;
				direction = ((!((float)targetRect.Center.X < base.Center.X)) ? 1 : (-1));
				directionY = ((!((float)targetRect.Center.Y < base.Center.Y)) ? 1 : (-1));
				return;
			}
			if (num2 >= 0)
			{
				target = Main.projectile[num2].owner;
				targetRect = Main.projectile[num2].Hitbox;
				direction = ((!((float)targetRect.Center.X < base.Center.X)) ? 1 : (-1));
				directionY = ((!((float)targetRect.Center.Y < base.Center.Y)) ? 1 : (-1));
				return;
			}
			if (num < 0 || num >= 255)
			{
				num = 0;
			}
			Player player2 = Main.player[num];
			targetRect = player2.Hitbox;
			target = num;
			if (player2.dead || (player2.npcTypeNoAggro[type] && !flag))
			{
				faceTarget = false;
			}
			if (faceTarget)
			{
				float num7 = (float)(player2.width + player2.height + width + height) / 4f + 800f;
				float num8 = num4 - (float)player2.aggro;
				if (player2.itemAnimation != 0 || player2.aggro >= 0 || !(num8 > num7) || oldTarget < 0 || oldTarget >= 255)
				{
					direction = ((!((float)targetRect.Center.X < base.Center.X)) ? 1 : (-1));
					directionY = ((!((float)targetRect.Center.Y < base.Center.Y)) ? 1 : (-1));
				}
			}
		}

		public void TargetClosest(bool faceTarget = true)
		{
			float distance = 0f;
			float realDist = 0f;
			bool t = false;
			int tankTarget = -1;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].dead && !Main.player[i].ghost)
				{
					TryTrackingTarget(ref distance, ref realDist, ref t, ref tankTarget, i);
				}
			}
			SetTargetTrackingValues(faceTarget, realDist, tankTarget);
		}

		public void TargetClosest_WOF(bool faceTarget = true)
		{
			float distance = 0f;
			float realDist = 0f;
			bool t = false;
			int tankTarget = -1;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].dead && !Main.player[i].ghost && Main.player[i].gross)
				{
					TryTrackingTarget(ref distance, ref realDist, ref t, ref tankTarget, i);
				}
			}
			SetTargetTrackingValues(faceTarget, realDist, tankTarget);
		}

		private void TryTrackingTarget(ref float distance, ref float realDist, ref bool t, ref int tankTarget, int j)
		{
			float num = Math.Abs(Main.player[j].position.X + (float)(Main.player[j].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.player[j].position.Y + (float)(Main.player[j].height / 2) - position.Y + (float)(height / 2));
			num -= (float)Main.player[j].aggro;
			if (Main.player[j].npcTypeNoAggro[type] && direction != 0)
			{
				num += 1000f;
			}
			if (!t || num < distance)
			{
				t = true;
				tankTarget = -1;
				realDist = Math.Abs(Main.player[j].position.X + (float)(Main.player[j].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.player[j].position.Y + (float)(Main.player[j].height / 2) - position.Y + (float)(height / 2));
				distance = num;
				target = j;
			}
			if (Main.player[j].tankPet >= 0 && !Main.player[j].npcTypeNoAggro[type])
			{
				int tankPet = Main.player[j].tankPet;
				float num2 = Math.Abs(Main.projectile[tankPet].position.X + (float)(Main.projectile[tankPet].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.projectile[tankPet].position.Y + (float)(Main.projectile[tankPet].height / 2) - position.Y + (float)(height / 2));
				num2 -= 200f;
				if (num2 < distance && num2 < 200f && Collision.CanHit(base.Center, 1, 1, Main.projectile[tankPet].Center, 1, 1))
				{
					tankTarget = tankPet;
				}
			}
		}

		private void SetTargetTrackingValues(bool faceTarget, float realDist, int tankTarget)
		{
			if (tankTarget >= 0)
			{
				targetRect = new Rectangle((int)Main.projectile[tankTarget].position.X, (int)Main.projectile[tankTarget].position.Y, Main.projectile[tankTarget].width, Main.projectile[tankTarget].height);
				direction = 1;
				if ((float)(targetRect.X + targetRect.Width / 2) < position.X + (float)(width / 2))
				{
					direction = -1;
				}
				directionY = 1;
				if ((float)(targetRect.Y + targetRect.Height / 2) < position.Y + (float)(height / 2))
				{
					directionY = -1;
				}
			}
			else
			{
				if (target < 0 || target >= 255)
				{
					target = 0;
				}
				targetRect = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
				if (Main.player[target].dead)
				{
					faceTarget = false;
				}
				if (Main.player[target].npcTypeNoAggro[type] && direction != 0)
				{
					faceTarget = false;
				}
				if (faceTarget)
				{
					_ = Main.player[target].aggro;
					_ = (Main.player[target].height + Main.player[target].width + height + width) / 4;
					bool flag = oldTarget >= 0 && oldTarget <= 254;
					bool num = Main.player[target].itemAnimation == 0 && Main.player[target].aggro < 0;
					bool flag2 = !boss;
					if (!(num && flag && flag2))
					{
						direction = 1;
						if ((float)(targetRect.X + targetRect.Width / 2) < position.X + (float)(width / 2))
						{
							direction = -1;
						}
						directionY = 1;
						if ((float)(targetRect.Y + targetRect.Height / 2) < position.Y + (float)(height / 2))
						{
							directionY = -1;
						}
					}
				}
			}
			if (confused)
			{
				direction *= -1;
			}
			if ((direction != oldDirection || directionY != oldDirectionY || target != oldTarget) && !collideX && !collideY)
			{
				netUpdate = true;
			}
		}

		public bool DoesntDespawnToInactivity()
		{
			switch (type)
			{
			case 8:
			case 9:
			case 11:
			case 12:
			case 14:
			case 15:
			case 36:
			case 40:
			case 41:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 96:
			case 97:
			case 99:
			case 100:
			case 113:
			case 114:
			case 115:
			case 118:
			case 119:
			case 128:
			case 129:
			case 130:
			case 131:
			case 134:
			case 135:
			case 136:
			case 246:
			case 247:
			case 248:
			case 249:
			case 263:
			case 267:
			case 328:
			case 379:
			case 380:
			case 392:
			case 393:
			case 394:
			case 396:
			case 397:
			case 398:
			case 400:
			case 422:
			case 437:
			case 438:
			case 439:
			case 440:
			case 488:
			case 492:
			case 493:
			case 507:
			case 517:
			case 548:
			case 549:
			case 551:
			case 564:
			case 565:
			case 668:
				return true;
			case 139:
				if (npcsFoundForCheckActive[134])
				{
					return true;
				}
				break;
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 559:
			case 560:
			case 561:
			case 562:
			case 563:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
				if (npcsFoundForCheckActive[548])
				{
					return true;
				}
				break;
			}
			return false;
		}

		public void CheckActive()
		{
			if (!active || DoesntDespawnToInactivity())
			{
				return;
			}
			if (townNPC)
			{
				AddIntoPlayersTownNPCSlots();
				return;
			}
			bool flag = false;
			Rectangle rectangle = new Rectangle((int)(position.X + (float)(width / 2) - (float)activeRangeX), (int)(position.Y + (float)(height / 2) - (float)activeRangeY), activeRangeX * 2, activeRangeY * 2);
			Rectangle rectangle2 = new Rectangle((int)((double)(position.X + (float)(width / 2)) - (double)sWidth * 0.5 - (double)width), (int)((double)(position.Y + (float)(height / 2)) - (double)sHeight * 0.5 - (double)height), sWidth + width * 2, sHeight + height * 2);
			for (int i = 0; i < 255; i++)
			{
				if (!Main.player[i].active)
				{
					continue;
				}
				Rectangle hitbox = Main.player[i].Hitbox;
				if (rectangle.Intersects(hitbox))
				{
					flag = true;
					if (type != 25 && type != 30 && type != 33 && releaseOwner == 255 && lifeMax > 0)
					{
						if (Main.slimeRain && Main.slimeRainNPC[type])
						{
							Main.player[i].nearbyActiveNPCs += npcSlots * Main.slimeRainNPCSlots;
						}
						else
						{
							Main.player[i].nearbyActiveNPCs += npcSlots;
						}
					}
				}
				if (rectangle2.Intersects(hitbox))
				{
					timeLeft = activeTime;
					despawnEncouraged = false;
					if (i == Main.myPlayer && (type == 604 || type == 605))
					{
						LadyBugLuck(i, type == 605);
					}
				}
				if (boss)
				{
					flag = true;
				}
				switch (type)
				{
				case 7:
				case 10:
				case 13:
				case 35:
				case 36:
				case 39:
				case 87:
				case 127:
				case 128:
				case 129:
				case 130:
				case 131:
				case 392:
				case 393:
				case 394:
				case 491:
				case 492:
					flag = true;
					break;
				case 399:
					if (ai[0] == 2f || ai[0] == 1f)
					{
						timeLeft = activeTime;
					}
					flag = true;
					break;
				case 583:
				case 584:
				case 585:
					if (!Main.dayTime && ai[2] == 0f)
					{
						flag = true;
						timeLeft = activeTime;
					}
					break;
				}
			}
			timeLeft--;
			if (timeLeft <= 0)
			{
				flag = false;
			}
			if (!flag && Main.netMode != 1)
			{
				noSpawnCycle = true;
				active = false;
				if (Main.netMode == 2)
				{
					netSkip = -1;
					life = 0;
					NetMessage.SendData(23, -1, -1, null, whoAmI);
				}
				if (extraValue > 0)
				{
					RevengeManager.CacheEnemy(this);
				}
				CheckActive_WormSegments();
			}
		}

		private void CheckActive_WormSegments()
		{
			if (aiStyle != 6)
			{
				return;
			}
			int num = (int)ai[0];
			while (num != whoAmI && num > 0 && num < 200)
			{
				NPC nPC = Main.npc[num];
				if (nPC.active && nPC.aiStyle == 6)
				{
					nPC.active = false;
					if (Main.netMode == 2)
					{
						nPC.life = 0;
						nPC.netSkip = -1;
						NetMessage.SendData(23, -1, -1, null, num);
					}
					num = (int)nPC.ai[0];
					continue;
				}
				break;
			}
		}

		private void AddIntoPlayersTownNPCSlots()
		{
			Rectangle rectangle = new Rectangle((int)(position.X + (float)(width / 2) - (float)townRangeX), (int)(position.Y + (float)(height / 2) - (float)townRangeY), townRangeX * 2, townRangeY * 2);
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && rectangle.Intersects(Main.player[i].Hitbox))
				{
					Main.player[i].townNPCs += npcSlots;
				}
			}
		}

		public void checkDead()
		{
			if (!active || (realLife >= 0 && realLife != whoAmI) || life > 0)
			{
				return;
			}
			if (type == 604 || type == 605)
			{
				LadyBugKilled(base.Center, type == 605);
			}
			if (type == 397 || type == 396)
			{
				if (ai[0] != -2f)
				{
					ai[0] = -2f;
					life = lifeMax;
					netUpdate = true;
					dontTakeDamage = true;
					if (Main.netMode != 1)
					{
						int num = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 400);
						Main.npc[num].ai[3] = ai[3];
						Main.npc[num].netUpdate = true;
					}
				}
				return;
			}
			if (type == 398 && ai[0] != 2f)
			{
				ai[0] = 2f;
				life = lifeMax;
				netUpdate = true;
				dontTakeDamage = true;
				return;
			}
			if ((type == 517 || type == 422 || type == 507 || type == 493) && ai[2] != 1f)
			{
				ai[2] = 1f;
				ai[1] = 0f;
				life = lifeMax;
				dontTakeDamage = true;
				netUpdate = true;
				return;
			}
			if (type == 548 && ai[1] != 1f)
			{
				ai[1] = 1f;
				ai[0] = 0f;
				life = lifeMax;
				dontTakeDamageFromHostiles = true;
				netUpdate = true;
				return;
			}
			if (Main.netMode != 1 && Main.getGoodWorld && (type == 42 || type == 176 || (type >= 231 && type <= 235)))
			{
				StingerExplosion();
			}
			if (Main.netMode != 1 && Main.getGoodWorld)
			{
				if (type == 13)
				{
					int num2 = NewNPC(GetSpawnSourceForNaturalSpawn(), (int)base.Center.X, (int)(position.Y + (float)height), -12);
					if (Main.netMode == 2 && num2 < 200)
					{
						NetMessage.SendData(23, -1, -1, null, num2);
					}
				}
				if (type == 36)
				{
					int num3 = 3;
					for (int i = 0; i < num3; i++)
					{
						int num4 = 1000;
						for (int j = 0; j < num4; j++)
						{
							int num5 = (int)(base.Center.X / 16f) + Main.rand.Next(-50, 51);
							int k;
							for (k = (int)(base.Center.Y / 16f) + Main.rand.Next(-50, 51); k < Main.maxTilesY - 200 && !WorldGen.SolidTile(num5, k); k++)
							{
							}
							k--;
							if (!WorldGen.SolidTile(num5, k))
							{
								int num6 = NewNPC(GetSpawnSourceForNaturalSpawn(), num5 * 16 + 8, k * 16, 32);
								if (Main.netMode == 2 && num6 < 200)
								{
									NetMessage.SendData(23, -1, -1, null, num6);
								}
								break;
							}
						}
					}
				}
			}
			noSpawnCycle = true;
			if (townNPC && type != 37 && type != 453)
			{
				if (Main.netMode != 2)
				{
					NPCLuck();
				}
				bool flag = true;
				NetworkText fullNetName = GetFullNetName();
				int num7 = 19;
				if (type == 369 || type == 663 || NPCID.Sets.IsTownPet[type])
				{
					num7 = 36;
					flag = false;
				}
				NetworkText networkText = NetworkText.FromKey(Lang.misc[num7].Key, fullNetName);
				if (flag)
				{
					for (int l = 0; l < 255; l++)
					{
						Player player = Main.player[l];
						if (player != null && player.active && player.difficulty != 2)
						{
							flag = false;
							break;
						}
					}
				}
				if (flag)
				{
					DropTombstoneTownNPC(networkText);
				}
				if (Main.netMode == 0)
				{
					Main.NewText(networkText.ToString(), byte.MaxValue, 25, 25);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(networkText, new Color(255, 25, 25));
				}
			}
			if (Main.netMode != 1 && !Main.IsItDay() && type == 54 && !AnyNPCs(35))
			{
				for (int m = 0; m < 255; m++)
				{
					if (Main.player[m].active && !Main.player[m].dead && Main.player[m].killClothier)
					{
						SpawnSkeletron(m);
						break;
					}
				}
			}
			if (townNPC && Main.netMode != 1 && homeless && WorldGen.prioritizedTownNPCType == type)
			{
				WorldGen.prioritizedTownNPCType = 0;
			}
			LegacySoundStyle legacySoundStyle = DeathSound;
			if (type == 229 && IsShimmerVariant)
			{
				legacySoundStyle = SoundID.NPCDeath6;
			}
			if (legacySoundStyle != null)
			{
				SoundEngine.PlaySound(legacySoundStyle, position);
			}
			if (type == 13 || type == 14 || type == 15)
			{
				DropEoWLoot();
			}
			else if (type == 134)
			{
				Vector2 vector = position;
				Vector2 center = Main.player[target].Center;
				float num8 = 100000000f;
				Vector2 vector2 = position;
				for (int n = 0; n < 200; n++)
				{
					if (Main.npc[n].active && (Main.npc[n].type == 134 || Main.npc[n].type == 135 || Main.npc[n].type == 136))
					{
						float num9 = Math.Abs(Main.npc[n].Center.X - center.X) + Math.Abs(Main.npc[n].Center.Y - center.Y);
						if (num9 < num8)
						{
							num8 = num9;
							vector2 = Main.npc[n].position;
						}
					}
				}
				position = vector2;
				NPCLoot();
				position = vector;
			}
			else
			{
				NPCLoot();
			}
			active = false;
			if (Main.getGoodWorld && Main.netMode != 1 && type == 631)
			{
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center, Vector2.Zero, 99, 70, 10f, Main.myPlayer);
			}
			DD2Event.CheckProgress(type);
			CheckProgressFrostMoon();
			CheckProgressPumpkinMoon();
			int nPCInvasionGroup = GetNPCInvasionGroup(type);
			if (nPCInvasionGroup <= 0 || nPCInvasionGroup != Main.invasionType)
			{
				return;
			}
			int num10 = 1;
			switch (type)
			{
			case 216:
				num10 = 5;
				break;
			case 395:
				num10 = 10;
				break;
			case 491:
				num10 = 10;
				break;
			case 471:
				num10 = 10;
				break;
			case 472:
				num10 = 0;
				break;
			case 387:
				num10 = 0;
				break;
			}
			if (num10 > 0)
			{
				Main.invasionSize -= num10;
				if (Main.invasionSize < 0)
				{
					Main.invasionSize = 0;
				}
				if (Main.netMode != 1)
				{
					Main.ReportInvasionProgress(Main.invasionSizeStart - Main.invasionSize, Main.invasionSizeStart, nPCInvasionGroup + 3, 0);
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(78, -1, -1, null, Main.invasionProgress, Main.invasionProgressMax, Main.invasionProgressIcon);
				}
			}
		}

		public void DropTombstoneTownNPC(NetworkText deathText)
		{
			if (Main.netMode != 1)
			{
				float num = 0.1f;
				if (Main.rand.Next(2) == 0)
				{
					num = -0.1f;
				}
				float num2;
				for (num2 = (float)Main.rand.Next(-35, 36) * 0.1f; num2 < 2f && num2 > -2f; num2 += (float)Main.rand.Next(-30, 31) * 0.1f)
				{
				}
				int num3 = Main.rand.Next(6);
				if (type != 17 && type != 441)
				{
					num3 = ((num3 != 0) ? (num3 + 200) : 43);
				}
				else
				{
					num3 = Main.rand.Next(5);
					num3 += 527;
				}
				int num4 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), position.X + (float)(width / 2), position.Y + (float)(height / 2), (float)Main.rand.Next(10, 30) * num + num2, (float)Main.rand.Next(-40, -20) * 0.1f, num3, 0, 0f, Main.myPlayer);
				Main.projectile[num4].miscText = deathText.ToString();
			}
		}

		public static int GetNPCInvasionGroup(int npcID)
		{
			int result = 0;
			switch (npcID)
			{
			case 26:
			case 27:
			case 28:
			case 29:
			case 111:
			case 471:
			case 472:
				result = 1;
				break;
			case 143:
			case 144:
			case 145:
				result = 2;
				break;
			case 212:
			case 213:
			case 214:
			case 215:
			case 216:
			case 491:
				result = 3;
				break;
			case 381:
			case 382:
			case 383:
			case 385:
			case 386:
			case 387:
			case 388:
			case 389:
			case 390:
			case 391:
			case 395:
				result = 4;
				break;
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
				result = -1;
				break;
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 325:
			case 326:
			case 327:
			case 329:
			case 330:
				result = -2;
				break;
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 559:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
				result = -3;
				break;
			}
			return result;
		}

		private void DropEoWLoot(bool fromCheckDead = true)
		{
			bool flag = true;
			for (int i = 0; i < 200; i++)
			{
				if (i != whoAmI && Main.npc[i].active && (Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15))
				{
					flag = false;
					break;
				}
			}
			if (flag)
			{
				boss = true;
				NPCLoot();
			}
			else
			{
				NPCLoot();
			}
		}

		private float GetMoonEventPointScalar()
		{
			if (Main.masterMode)
			{
				return 2.5f;
			}
			if (Main.expertMode)
			{
				return 2f;
			}
			return 1f;
		}

		private void CheckProgressFrostMoon()
		{
			if (!Main.snowMoon)
			{
				return;
			}
			int num = 0;
			NetworkText networkText = NetworkText.Empty;
			num = MoonEventRequiredPointsPerWaveLookup[waveNumber];
			switch (waveNumber)
			{
			case 1:
				networkText = Lang.GetInvasionWaveText(2, 338, 350);
				break;
			case 2:
				networkText = Lang.GetInvasionWaveText(3, 338, 350, 342, 348);
				break;
			case 3:
				networkText = Lang.GetInvasionWaveText(4, 344, 338, 350, 342);
				break;
			case 4:
				networkText = Lang.GetInvasionWaveText(5, 344, 338, 350, 348);
				break;
			case 5:
				networkText = Lang.GetInvasionWaveText(6, 344, 350, 348, 347);
				break;
			case 6:
				networkText = Lang.GetInvasionWaveText(7, 346, 342, 350, 338);
				break;
			case 7:
				networkText = Lang.GetInvasionWaveText(8, 346, 347, 350, 348, 351);
				break;
			case 8:
				networkText = Lang.GetInvasionWaveText(9, 346, 344, 348, 347, 342);
				break;
			case 9:
				networkText = Lang.GetInvasionWaveText(10, 346, 344, 351, 338, 347);
				break;
			case 10:
				networkText = Lang.GetInvasionWaveText(11, 345, 352, 338, 342);
				break;
			case 11:
				networkText = Lang.GetInvasionWaveText(12, 345, 344, 342, 343, 338);
				break;
			case 12:
				networkText = Lang.GetInvasionWaveText(13, 345, 346, 342, 352, 343, 347);
				break;
			case 13:
				networkText = Lang.GetInvasionWaveText(14, 345, 346, 344, 343, 351);
				break;
			case 14:
				networkText = Lang.GetInvasionWaveText(15, 345, 346, 344, 343, 347);
				break;
			case 15:
				networkText = Lang.GetInvasionWaveText(16, 345, 346, 344, 343, 352);
				break;
			case 16:
				networkText = Lang.GetInvasionWaveText(17, 345, 346, 344, 343, 351, 347);
				break;
			case 17:
				networkText = Lang.GetInvasionWaveText(18, 345, 346, 344, 343, 348, 351);
				break;
			case 18:
				networkText = Lang.GetInvasionWaveText(19, 345, 346, 344, 343);
				break;
			case 19:
				networkText = Lang.GetInvasionWaveText(-1, 345, 346, 344);
				break;
			}
			float num2 = 0f;
			switch (type)
			{
			case 338:
			case 339:
			case 340:
				num2 = 1f;
				break;
			case 341:
				num2 = 20f;
				break;
			case 342:
				num2 = 2f;
				break;
			case 343:
				num2 = 18f;
				break;
			case 344:
				num2 = 50f;
				break;
			case 345:
				num2 = 150f;
				break;
			case 346:
				num2 = 100f;
				break;
			case 347:
				num2 = 8f;
				break;
			case 348:
			case 349:
				num2 = 4f;
				break;
			case 350:
				num2 = 3f;
				break;
			case 351:
				num2 = 10f;
				break;
			case 352:
				num2 = 5f;
				break;
			}
			num2 *= GetMoonEventPointScalar();
			float num3 = waveKills;
			waveKills += num2;
			totalInvasionPoints += num2;
			if (waveKills >= (float)num && num != 0)
			{
				waveKills = 0f;
				waveNumber++;
				num = MoonEventRequiredPointsPerWaveLookup[waveNumber];
				if (networkText != NetworkText.Empty)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(networkText.ToString(), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(networkText, new Color(175, 75, 255));
					}
					if (waveNumber == 15)
					{
						AchievementsHelper.NotifyProgressionEvent(14);
					}
				}
			}
			if (waveKills != num3 && num2 != 0f)
			{
				if (Main.netMode != 1)
				{
					Main.ReportInvasionProgress((int)waveKills, num, 1, waveNumber);
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(78, -1, -1, null, Main.invasionProgress, Main.invasionProgressMax, 1f, waveNumber);
				}
			}
		}

		private void CheckProgressPumpkinMoon()
		{
			if (!Main.pumpkinMoon)
			{
				return;
			}
			int num = 0;
			NetworkText networkText = NetworkText.Empty;
			num = MoonEventRequiredPointsPerWaveLookup[waveNumber];
			switch (waveNumber)
			{
			case 1:
				networkText = Lang.GetInvasionWaveText(2, 326, 305);
				break;
			case 2:
				networkText = Lang.GetInvasionWaveText(3, 329, 326);
				break;
			case 3:
				networkText = Lang.GetInvasionWaveText(4, 330, 326, 305);
				break;
			case 4:
				networkText = Lang.GetInvasionWaveText(5, 315, 329);
				break;
			case 5:
				networkText = Lang.GetInvasionWaveText(6, 325, 326, 305);
				break;
			case 6:
				networkText = Lang.GetInvasionWaveText(7, 325, 330, 329);
				break;
			case 7:
				networkText = Lang.GetInvasionWaveText(8, 315, 330, 329);
				break;
			case 8:
				networkText = Lang.GetInvasionWaveText(9, 325, 330, 329, 326, 305);
				break;
			case 9:
				networkText = Lang.GetInvasionWaveText(10, 327, 329, 326);
				break;
			case 10:
				networkText = Lang.GetInvasionWaveText(11, 325, 330, 326);
				break;
			case 11:
				networkText = Lang.GetInvasionWaveText(12, 327, 330);
				break;
			case 12:
				networkText = Lang.GetInvasionWaveText(13, 325, 315, 330, 329, 326);
				break;
			case 13:
				networkText = Lang.GetInvasionWaveText(14, 327, 325, 315, 330, 329, 326, 305);
				break;
			case 14:
				networkText = Lang.GetInvasionWaveText(15, 327, 325, 330, 326, 305);
				break;
			case 15:
				networkText = Lang.GetInvasionWaveText(16, 327, 315, 330, 329, 326);
				break;
			case 16:
				networkText = Lang.GetInvasionWaveText(17, 327, 325, 315, 330, 329);
				break;
			case 17:
				networkText = Lang.GetInvasionWaveText(18, 327, 325, 315, 330);
				break;
			case 18:
				networkText = Lang.GetInvasionWaveText(19, 327, 325, 315);
				break;
			case 19:
				networkText = Lang.GetInvasionWaveText(-1, 327, 325);
				break;
			}
			float num2 = 0f;
			switch (type)
			{
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
				num2 = 1f;
				break;
			case 315:
				num2 = 50f;
				break;
			case 325:
				num2 = 75f;
				break;
			case 326:
				num2 = 2f;
				break;
			case 327:
				num2 = 150f;
				break;
			case 329:
				num2 = 5f;
				break;
			case 330:
				num2 = 10f;
				break;
			}
			num2 *= GetMoonEventPointScalar();
			float num3 = waveKills;
			waveKills += num2;
			totalInvasionPoints += num2;
			if (waveKills >= (float)num && num != 0)
			{
				waveKills = 0f;
				waveNumber++;
				num = MoonEventRequiredPointsPerWaveLookup[waveNumber];
				if (networkText != NetworkText.Empty)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(networkText.ToString(), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(networkText, new Color(175, 75, 255));
					}
					if (waveNumber == 15)
					{
						AchievementsHelper.NotifyProgressionEvent(15);
					}
				}
			}
			if (waveKills != num3 && num2 != 0f)
			{
				if (Main.netMode != 1)
				{
					Main.ReportInvasionProgress((int)waveKills, num, 2, waveNumber);
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(78, -1, -1, null, Main.invasionProgress, Main.invasionProgressMax, 2f, waveNumber);
				}
			}
		}

		public static void ResetKillCount()
		{
			for (int i = 0; i < 688; i++)
			{
				killCount[i] = 0;
			}
		}

		public bool AnyInteractions()
		{
			if (Main.netMode == 0)
			{
				if (playerInteraction[Main.myPlayer])
				{
					return true;
				}
			}
			else
			{
				for (int i = 0; i < 255; i++)
				{
					if (playerInteraction[i])
					{
						return true;
					}
				}
			}
			return false;
		}

		public bool IsDamageDodgeable()
		{
			switch (type)
			{
			case 21:
			case 68:
				return ai[1] != 2f;
			case 636:
				return !Main.dayTime;
			default:
				return true;
			}
		}

		public static void SetEventFlagCleared(ref bool eventFlag, int gameEventId)
		{
			bool flag = eventFlag;
			eventFlag = true;
			if (eventFlag != flag)
			{
				OnGameEventClearedForTheFirstTime(gameEventId);
			}
		}

		public static void OnGameEventClearedForTheFirstTime(int gameEventId)
		{
			switch (gameEventId)
			{
			default:
				LanternNight.NextNightIsLanternNight = true;
				break;
			case 10:
				LanternNight.NextNightIsLanternNight = true;
				CreditsRollEvent.TryStartingCreditsRoll();
				break;
			case 16:
			case 17:
			case 18:
				LanternNight.NextNightIsLanternNight = true;
				if (Main.netMode != 1 && Main.hardMode && downedMechBoss1 && downedMechBoss2 && downedMechBoss3)
				{
					WorldGen.GeneratePlanteraBulbOnAllMechsDefeated();
				}
				break;
			case 4:
			case 21:
			case 22:
				break;
			}
		}

		public void NPCLoot()
		{
			if (Main.netMode == 1 || type >= 688 || (Main.getGoodWorld && !downedBoss3 && (type == 31 || type == 294 || type == 296 || type == 295 || type == 32 || type == 34 || type == 71)))
			{
				return;
			}
			Player closestPlayer = Main.player[Player.FindClosest(position, width, height)];
			if (0 == 0)
			{
				CountKillForAchievements();
				if (GetWereThereAnyInteractions())
				{
					if (IsNPCValidForBestiaryKillCredit())
					{
						Main.BestiaryTracker.Kills.RegisterKill(this);
					}
					CountKillForBannersAndDropThem();
				}
			}
			if ((type == 23 && Main.hardMode) || (SpawnedFromStatue && NPCID.Sets.NoEarlymodeLootWhenSpawnedFromStatue[type] && !Main.hardMode) || (SpawnedFromStatue && NPCID.Sets.StatueSpawnedDropRarity[type] != -1f && (Main.rand.NextFloat() >= NPCID.Sets.StatueSpawnedDropRarity[type] || !AnyInteractions())))
			{
				return;
			}
			bool num = downedMechBoss1 && downedMechBoss2 && downedMechBoss3;
			DoDeathEvents_BeforeLoot(closestPlayer);
			NPCLoot_DropItems(closestPlayer);
			DoDeathEvents(closestPlayer);
			if (!num && downedMechBoss1 && downedMechBoss2 && downedMechBoss3 && Main.hardMode)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[32].Value, 50, byte.MaxValue, 130);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key), new Color(50, 255, 130));
				}
			}
			NPCLoot_DropMoney(closestPlayer);
			NPCLoot_DropHeals(closestPlayer);
		}

		public bool IsNPCValidForBestiaryKillCredit()
		{
			int num = type;
			if ((uint)(num - 13) <= 2u)
			{
				return boss;
			}
			return true;
		}

		private void DoDeathEvents_BeforeLoot(Player closestPlayer)
		{
			int num = type;
			if ((uint)(num - 125) <= 1u && AnyNPCs((type == 125) ? 126 : 125))
			{
				value = 0f;
				boss = false;
			}
		}

		private void NPCLoot_DropItems(Player closestPlayer)
		{
			DropAttemptInfo dropAttemptInfo = default(DropAttemptInfo);
			dropAttemptInfo.player = closestPlayer;
			dropAttemptInfo.npc = this;
			dropAttemptInfo.IsExpertMode = Main.expertMode;
			dropAttemptInfo.IsMasterMode = Main.masterMode;
			dropAttemptInfo.IsInSimulation = false;
			dropAttemptInfo.rng = Main.rand;
			DropAttemptInfo info = dropAttemptInfo;
			Main.ItemDropSolver.TryDropping(info);
		}

		public static void ResetBadgerHatTime()
		{
			EoCKilledToday = false;
			WoFKilledToday = false;
		}

		private void DoDeathEvents_DropBossPotionsAndHearts()
		{
			int stack = Main.rand.Next(5, 16);
			int num = 28;
			if (type == 113)
			{
				num = 188;
			}
			else if (type == 35)
			{
				num = 188;
			}
			else if (type == 668)
			{
				num = 188;
			}
			else if (type == 222)
			{
				num = 1134;
			}
			else if (type == 657)
			{
				num = 499;
			}
			else if (type > 113 && type < 222)
			{
				num = 499;
			}
			else if (type == 636)
			{
				num = 499;
			}
			else if (type == 245 || type == 262)
			{
				num = 499;
			}
			else if (type == 370)
			{
				num = 499;
			}
			else if (type == 395)
			{
				num = 499;
			}
			else if (type == 439)
			{
				num = 499;
			}
			else if (type == 398)
			{
				num = 3544;
			}
			Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, num, stack);
			int num2 = Main.rand.Next(5) + 5;
			for (int i = 0; i < num2; i++)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
			}
			if (type == 4)
			{
				EoCKilledToday = true;
			}
			else if (type == 113)
			{
				WoFKilledToday = true;
			}
			if (EoCKilledToday && WoFKilledToday)
			{
				ResetBadgerHatTime();
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 5004);
			}
		}

		private void DoDeathEvents_CelebrateBossDeath()
		{
			if (type == 125 || type == 126)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Plural", Language.GetTextValue("Enemies.TheTwins")), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Plural", NetworkText.FromKey("Enemies.TheTwins")), new Color(175, 75, 255));
				}
			}
			else if (type == 398)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Single", Language.GetTextValue("Enemies.MoonLord")), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Single", NetworkText.FromKey("Enemies.MoonLord")), new Color(175, 75, 255));
				}
			}
			else if (Main.netMode == 0)
			{
				Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Single", TypeName), 175, 75);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Single", GetTypeNetName()), new Color(175, 75, 255));
			}
		}

		private void CreateBrickBoxForWallOfFlesh()
		{
			int num = (int)(position.X + (float)(width / 2)) / 16;
			int num2 = (int)(position.Y + (float)(height / 2)) / 16;
			int num3 = width / 2 / 16 + 1;
			for (int i = num - num3; i <= num + num3; i++)
			{
				for (int j = num2 - num3; j <= num2 + num3; j++)
				{
					if ((i == num - num3 || i == num + num3 || j == num2 - num3 || j == num2 + num3) && !Main.tile[i, j].active())
					{
						Main.tile[i, j].type = (ushort)(WorldGen.crimson ? 347 : 140);
						Main.tile[i, j].active(active: true);
					}
					Main.tile[i, j].lava(lava: false);
					Main.tile[i, j].liquid = 0;
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j);
					}
					else
					{
						WorldGen.SquareTileFrame(i, j);
					}
				}
			}
		}

		private void DoDeathEvents_SummonDungeonSpirit(Player closestPlayer)
		{
			if (lifeMax > 100 && type != 288 && value > 0f && HasPlayerTarget && Main.hardMode && downedPlantBoss && Main.player[target].ZoneDungeon)
			{
				int range = 13;
				if (Main.expertMode)
				{
					range = 9;
				}
				if (closestPlayer.RollLuck(range) == 0 && Main.wallDungeon[Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16].wall])
				{
					NewNPC(GetSpawnSource_NPCHurt(), (int)base.Center.X, (int)base.Center.Y, 288);
				}
			}
		}

		private void DoDeathEvents_AdvanceSlimeRain(Player closestPlayer)
		{
			if (Main.slimeRain && Main.slimeRainNPC[type] && !AnyNPCs(50))
			{
				int num = 150;
				if (downedSlimeKing)
				{
					num /= 2;
				}
				Main.slimeRainKillCount++;
				if (Main.slimeRainKillCount >= num)
				{
					SpawnOnPlayer(closestPlayer.whoAmI, 50);
					Main.slimeRainKillCount = -num / 2;
				}
			}
		}

		private void NPCLoot_DropHeals(Player closestPlayer)
		{
			NPCLoot_DropCommonLifeAndMana(closestPlayer);
			switch (type)
			{
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 329:
			case 330:
				if (closestPlayer.RollLuck(4) == 0)
				{
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 326:
				if (closestPlayer.RollLuck(6) == 0)
				{
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 315:
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
				break;
			case 341:
			{
				int num2 = Main.rand.Next(5, 11);
				for (int j = 0; j < num2; j++)
				{
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			}
			case 338:
			case 339:
			case 340:
				if (closestPlayer.RollLuck(5) == 0)
				{
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 342:
				if (Main.rand.Next(3) != 0)
				{
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 325:
			case 327:
			case 344:
			case 345:
			case 346:
			{
				int num = Main.rand.Next(6) + 6;
				for (int i = 0; i < num; i++)
				{
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			}
			case 267:
				if (Main.rand.Next(2) == 0 && closestPlayer.statLife < closestPlayer.statLifeMax2)
				{
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 13:
			case 14:
			case 15:
				if (Main.rand.Next(4) == 0 && closestPlayer.statLife < closestPlayer.statLifeMax2)
				{
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 116:
			case 117:
			case 118:
			case 119:
				if (!Main.expertMode || Main.rand.Next(5) == 0)
				{
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 139:
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			}
		}

		private void DoDeathEvents(Player closestPlayer)
		{
			DoDeathEvents_AdvanceSlimeRain(closestPlayer);
			DoDeathEvents_SummonDungeonSpirit(closestPlayer);
			if (Main.remixWorld && !downedSlimeKing && type == 1 && !AnyNPCs(50) && Main.rand.Next(200) == 0)
			{
				SpawnOnPlayer(closestPlayer.whoAmI, 50);
			}
			switch (type)
			{
			case 216:
				SpawnBoss((int)position.X, (int)position.Y, 662, target);
				break;
			case 327:
				if (Main.pumpkinMoon)
				{
					SetEventFlagCleared(ref downedHalloweenKing, 5);
				}
				break;
			case 325:
				if (Main.pumpkinMoon)
				{
					SetEventFlagCleared(ref downedHalloweenTree, 4);
				}
				break;
			case 344:
				if (Main.snowMoon)
				{
					SetEventFlagCleared(ref downedChristmasTree, 21);
				}
				break;
			case 345:
				if (Main.snowMoon)
				{
					SetEventFlagCleared(ref downedChristmasIceQueen, 20);
				}
				break;
			case 346:
				if (Main.snowMoon)
				{
					SetEventFlagCleared(ref downedChristmasSantank, 22);
				}
				break;
			case 552:
			case 553:
			case 554:
				if (DD2Event.Ongoing)
				{
					DD2Event.AnnounceGoblinDeath(this);
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(GetItemSource_Loot(), position, base.Size, 3822);
					}
				}
				break;
			case 555:
			case 556:
			case 557:
			case 558:
			case 559:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
				if (DD2Event.ShouldDropCrystals())
				{
					Item.NewItem(GetItemSource_Loot(), position, base.Size, 3822);
				}
				break;
			case 412:
			case 413:
			case 414:
			case 415:
			case 416:
			case 417:
			case 418:
			case 419:
			case 518:
				if (ShieldStrengthTowerSolar > 0)
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(517));
				}
				break;
			case 425:
			case 426:
			case 427:
			case 429:
				if (ShieldStrengthTowerVortex > 0)
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(422));
				}
				break;
			case 420:
			case 421:
			case 423:
			case 424:
				if (ShieldStrengthTowerNebula > 0)
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(507));
				}
				break;
			case 402:
			case 405:
			case 407:
			case 409:
			case 411:
				if (ShieldStrengthTowerStardust > 0)
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(493));
				}
				break;
			case 517:
				downedTowerSolar = true;
				TowerActiveSolar = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			case 422:
				downedTowerVortex = true;
				TowerActiveVortex = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			case 507:
				downedTowerNebula = true;
				TowerActiveNebula = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			case 493:
				downedTowerStardust = true;
				TowerActiveStardust = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			case 245:
				SetEventFlagCleared(ref downedGolemBoss, 6);
				break;
			case 370:
				SetEventFlagCleared(ref downedFishron, 7);
				break;
			case 636:
				SetEventFlagCleared(ref downedEmpressOfLight, 23);
				break;
			case 668:
				SetEventFlagCleared(ref downedDeerclops, 25);
				break;
			case 657:
				SetEventFlagCleared(ref downedQueenSlime, 24);
				break;
			case 22:
				if (Collision.LavaCollision(position, width, height))
				{
					SpawnWOF(position);
				}
				break;
			case 614:
			{
				int num2 = 175;
				if (SpawnedFromStatue)
				{
					num2 = 0;
				}
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, 0f, 0f, 281, num2, 0f, Main.myPlayer, -2f, releaseOwner + 1);
				break;
			}
			case 109:
				if (!downedClown)
				{
					downedClown = true;
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7);
					}
				}
				break;
			case 222:
				SetEventFlagCleared(ref downedQueenBee, 8);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
				break;
			case 439:
				SetEventFlagCleared(ref downedAncientCultist, 9);
				WorldGen.TriggerLunarApocalypse();
				break;
			case 398:
				SetEventFlagCleared(ref downedMoonlord, 10);
				LunarApocalypseIsUp = false;
				break;
			case 50:
				if (Main.slimeRain)
				{
					Main.StopSlimeRain();
					AchievementsHelper.NotifyProgressionEvent(16);
				}
				if (Main.netMode != 1 && !unlockedSlimeBlueSpawn)
				{
					unlockedSlimeBlueSpawn = true;
					ViolentlySpawnNerdySlime();
				}
				SetEventFlagCleared(ref downedSlimeKing, 11);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
				break;
			case 125:
			case 126:
				if (boss)
				{
					SetEventFlagCleared(ref downedMechBoss2, 17);
					downedMechBossAny = true;
				}
				break;
			case 262:
			{
				bool num3 = downedPlantBoss;
				SetEventFlagCleared(ref downedPlantBoss, 12);
				if (!num3)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Lang.misc[33].Value, 50, byte.MaxValue, 130);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[33].Key), new Color(50, 255, 130));
					}
				}
				break;
			}
			case 4:
				SetEventFlagCleared(ref downedBoss1, 13);
				break;
			case 13:
			case 14:
			case 15:
			case 266:
				if (boss)
				{
					if (!downedBoss2 || Main.rand.Next(2) == 0)
					{
						WorldGen.spawnMeteor = true;
					}
					SetEventFlagCleared(ref downedBoss2, 14);
				}
				break;
			case 35:
				if (boss)
				{
					SetEventFlagCleared(ref downedBoss3, 15);
				}
				break;
			case 127:
				if (boss)
				{
					SetEventFlagCleared(ref downedMechBoss3, 18);
					downedMechBossAny = true;
				}
				break;
			case 134:
				if (boss)
				{
					SetEventFlagCleared(ref downedMechBoss1, 16);
					downedMechBossAny = true;
				}
				break;
			case 113:
			{
				if (Main.netMode == 1)
				{
					break;
				}
				CreateBrickBoxForWallOfFlesh();
				bool eventFlag = Main.hardMode;
				WorldGen.StartHardmode();
				if (downedMechBoss1 && downedMechBoss2 && downedMechBoss3 && !eventFlag)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Lang.misc[32].Value, 50, byte.MaxValue, 130);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key), new Color(50, 255, 130));
					}
				}
				SetEventFlagCleared(ref eventFlag, 19);
				break;
			}
			case 661:
				if (Main.netMode != 1 && GetWereThereAnyInteractions())
				{
					int num = 636;
					if (!AnyNPCs(num))
					{
						Vector2 vector = base.Center + new Vector2(0f, -200f) + Main.rand.NextVector2Circular(50f, 50f);
						SpawnBoss((int)vector.X, (int)vector.Y, num, closestPlayer.whoAmI);
					}
				}
				break;
			}
			if (boss)
			{
				DoDeathEvents_DropBossPotionsAndHearts();
				DoDeathEvents_CelebrateBossDeath();
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
		}

		private void ViolentlySpawnNerdySlime()
		{
			int num = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X - 10, (int)base.Center.Y, 670);
			NPC obj = Main.npc[num];
			Vector2 movementVector = (obj.velocity = new Vector2(Main.rand.NextFloatDirection() * 3f, -10f));
			obj.netUpdate = true;
			ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.TownSlimeTransform, new ParticleOrchestraSettings
			{
				PositionInWorld = base.Center,
				MovementVector = movementVector,
				UniqueInfoPiece = 0
			});
		}

		private void NPCLoot_DropCommonLifeAndMana(Player closestPlayer)
		{
			if (type != 16 && type != 81 && type != 121 && closestPlayer.RollLuck(6) == 0 && lifeMax > 1 && damage > 0)
			{
				if (Main.rand.Next(2) == 0 && closestPlayer.statMana < closestPlayer.statManaMax2)
				{
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 184);
				}
				else if (Main.rand.Next(2) == 0 && closestPlayer.statLife < closestPlayer.statLifeMax2)
				{
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
				}
			}
			if (type != 16 && type != 81 && type != 121 && closestPlayer.RollLuck(2) == 0 && lifeMax > 1 && damage > 0 && closestPlayer.statMana < closestPlayer.statManaMax2)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 184);
			}
		}

		private void NPCLoot_DropMoney(Player closestPlayer)
		{
			float num = 0f;
			float luck = closestPlayer.luck;
			int num2 = 1;
			if (Main.rand.NextFloat() < Math.Abs(luck))
			{
				num2 = 2;
			}
			for (int i = 0; i < num2; i++)
			{
				float num3 = value;
				if (midas)
				{
					num3 *= 1f + (float)Main.rand.Next(10, 51) * 0.01f;
				}
				num3 *= 1f + (float)Main.rand.Next(-20, 76) * 0.01f;
				if (Main.rand.Next(2) == 0)
				{
					num3 *= 1f + (float)Main.rand.Next(5, 11) * 0.01f;
				}
				if (Main.rand.Next(4) == 0)
				{
					num3 *= 1f + (float)Main.rand.Next(10, 21) * 0.01f;
				}
				if (Main.rand.Next(8) == 0)
				{
					num3 *= 1f + (float)Main.rand.Next(15, 31) * 0.01f;
				}
				if (Main.rand.Next(16) == 0)
				{
					num3 *= 1f + (float)Main.rand.Next(20, 41) * 0.01f;
				}
				if (Main.rand.Next(32) == 0)
				{
					num3 *= 1f + (float)Main.rand.Next(25, 51) * 0.01f;
				}
				if (Main.rand.Next(64) == 0)
				{
					num3 *= 1f + (float)Main.rand.Next(50, 101) * 0.01f;
				}
				if (Main.bloodMoon)
				{
					num3 *= 1f + (float)Main.rand.Next(101) * 0.01f;
				}
				if (i == 0)
				{
					num = num3;
				}
				else if (luck < 0f)
				{
					if (num3 < num)
					{
						num = num3;
					}
				}
				else if (num3 > num)
				{
					num = num3;
				}
			}
			num += (float)extraValue;
			while ((int)num > 0)
			{
				if (num > 1000000f)
				{
					int num4 = (int)(num / 1000000f);
					if (num4 > 50 && Main.rand.Next(5) == 0)
					{
						num4 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num4 /= Main.rand.Next(3) + 1;
					}
					int num5 = num4;
					while (num5 > 999)
					{
						num5 -= 999;
						Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 74, 999);
					}
					num -= (float)(1000000 * num4);
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 74, num5);
				}
				else if (num > 10000f)
				{
					int num6 = (int)(num / 10000f);
					if (num6 > 50 && Main.rand.Next(5) == 0)
					{
						num6 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num6 /= Main.rand.Next(3) + 1;
					}
					num -= (float)(10000 * num6);
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 73, num6);
				}
				else if (num > 100f)
				{
					int num7 = (int)(num / 100f);
					if (num7 > 50 && Main.rand.Next(5) == 0)
					{
						num7 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num7 /= Main.rand.Next(3) + 1;
					}
					num -= (float)(100 * num7);
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 72, num7);
				}
				else
				{
					int num8 = (int)num;
					if (num8 > 50 && Main.rand.Next(5) == 0)
					{
						num8 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num8 /= Main.rand.Next(4) + 1;
					}
					if (num8 < 1)
					{
						num8 = 1;
					}
					num -= (float)num8;
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 71, num8);
				}
			}
		}

		public static int GetStackForSlimeItemDrop(int item)
		{
			int num = 1;
			if (item == 8)
			{
				num = Main.rand.Next(5, 11);
			}
			else if (item == 166)
			{
				num = Main.rand.Next(2, 7);
			}
			else if (item == 965)
			{
				num = Main.rand.Next(20, 46);
			}
			else if ((item >= 11 && item <= 14) || (item >= 699 && item <= 702))
			{
				num = Main.rand.Next(3, 9);
				if (Main.rand.Next(2) == 0)
				{
					num += 5;
				}
			}
			else
			{
				switch (item)
				{
				case 71:
					num = Main.rand.Next(50, 100);
					break;
				case 72:
					num = Main.rand.Next(20, 100);
					break;
				case 73:
					num = Main.rand.Next(1, 3);
					break;
				}
			}
			return num;
		}

		public bool ExcludedFromDeathTally()
		{
			if (netID < 0)
			{
				if (netID != -5)
				{
					return netID == -1;
				}
				return true;
			}
			if (!NPCID.Sets.ProjectileNPC[netID])
			{
				return NPCID.Sets.PositiveNPCTypesExcludedFromDeathTally[netID];
			}
			return true;
		}

		private void CountKillForBannersAndDropThem()
		{
			int num = Item.NPCtoBanner(BannerID());
			if (num <= 0 || ExcludedFromDeathTally())
			{
				return;
			}
			killCount[num]++;
			if (Main.netMode == 2)
			{
				NetMessage.SendData(83, -1, -1, null, num);
			}
			int num2 = ItemID.Sets.KillsToBanner[Item.BannerToItem(num)];
			if (killCount[num] % num2 == 0 && num > 0)
			{
				int num3 = Item.BannerToNPC(num);
				int num4 = lastInteraction;
				if (!Main.player[num4].active || Main.player[num4].dead)
				{
					num4 = FindClosestPlayer();
				}
				NetworkText networkText = NetworkText.FromKey("Game.EnemiesDefeatedAnnouncement", killCount[num], NetworkText.FromKey(Lang.GetNPCName(num3).Key));
				if (num4 >= 0 && num4 < 255)
				{
					networkText = NetworkText.FromKey("Game.EnemiesDefeatedByAnnouncement", Main.player[num4].name, killCount[num], NetworkText.FromKey(Lang.GetNPCName(num3).Key));
				}
				if (Main.netMode == 0)
				{
					Main.NewText(networkText.ToString(), 250, 250, 0);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(networkText, new Color(250, 250, 0));
				}
				int num5 = Item.BannerToItem(num);
				Vector2 vector = position;
				if (num4 >= 0 && num4 < 255)
				{
					vector = Main.player[num4].position;
				}
				Item.NewItem(GetItemSource_Loot(), (int)vector.X, (int)vector.Y, width, height, num5);
			}
		}

		public bool GetWereThereAnyInteractions()
		{
			bool flag = false;
			if (realLife >= 0)
			{
				return Main.npc[realLife].AnyInteractions();
			}
			return AnyInteractions();
		}

		private void CountKillForAchievements()
		{
			switch (type)
			{
			case 125:
			case 126:
				if (!AnyNPCs((type == 126) ? 125 : 126))
				{
					AchievementsHelper.NotifyNPCKilled(this);
					AchievementsHelper.CheckMechaMayhem(type);
				}
				break;
			case 127:
			case 134:
				AchievementsHelper.CheckMechaMayhem(type);
				AchievementsHelper.NotifyNPCKilled(this);
				break;
			case 13:
			case 14:
			case 15:
				if (boss)
				{
					AchievementsHelper.NotifyNPCKilled(this);
				}
				break;
			default:
				AchievementsHelper.NotifyNPCKilled(this);
				break;
			}
		}

		public static void CatchNPC(int i, int who = -1)
		{
			if (!Main.npc[i].active)
			{
				return;
			}
			if (who == -1)
			{
				who = Main.myPlayer;
			}
			if (Main.netMode == 1)
			{
				Main.npc[i].active = false;
				NetMessage.SendData(70, -1, -1, null, i, who);
			}
			else if (Main.npc[i].catchItem > 0)
			{
				if (Main.npc[i].SpawnedFromStatue || Main.npc[i].type == 687)
				{
					Vector2 vector = Main.npc[i].Center - new Vector2(20f);
					Utils.PoofOfSmoke(vector);
					Main.npc[i].active = false;
					NetMessage.SendData(23, -1, -1, null, i);
					NetMessage.SendData(106, -1, -1, null, (int)vector.X, vector.Y);
				}
				else
				{
					new Item().SetDefaults(Main.npc[i].catchItem);
					Item.NewItem(GetSpawnSource_NPCCatch(who), (int)Main.player[who].Center.X, (int)Main.player[who].Center.Y, 0, 0, Main.npc[i].catchItem, 1, noBroadcast: false, 0, noGrabDelay: true);
					Main.npc[i].active = false;
					NetMessage.SendData(23, -1, -1, null, i);
				}
			}
		}

		public void DropItemInstanced(Vector2 Position, Vector2 HitboxSize, int itemType, int itemStack = 1, bool interactionRequired = true)
		{
			if (itemType <= 0)
			{
				return;
			}
			if (Main.netMode == 2)
			{
				int num = Item.NewItem(GetItemSource_Loot(), (int)Position.X, (int)Position.Y, (int)HitboxSize.X, (int)HitboxSize.Y, itemType, itemStack, noBroadcast: true);
				Main.timeItemSlotCannotBeReusedFor[num] = 54000;
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && (playerInteraction[i] || !interactionRequired))
					{
						NetMessage.SendData(90, i, -1, null, num);
					}
				}
				Main.item[num].active = false;
			}
			else if (Main.netMode == 0)
			{
				Item.NewItem(GetItemSource_Loot(), (int)Position.X, (int)Position.Y, (int)HitboxSize.X, (int)HitboxSize.Y, itemType, itemStack);
			}
			value = 0f;
		}

		public void PlayerInteraction(int player)
		{
			bool flag = false;
			if ((realLife < 0) ? (lastInteraction == player) : (Main.npc[realLife].lastInteraction == player))
			{
				return;
			}
			if (type == 13 || type == 14 || type == 15)
			{
				for (int i = 0; i < 200; i++)
				{
					if (i != whoAmI && Main.npc[i].active && (Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15))
					{
						Main.npc[i].ApplyInteraction(player);
					}
				}
			}
			if (type == 134 || type == 135 || type == 136)
			{
				for (int j = 0; j < 200; j++)
				{
					if (j != whoAmI && Main.npc[j].active && (Main.npc[j].type == 134 || Main.npc[j].type == 135 || Main.npc[j].type == 136))
					{
						Main.npc[j].ApplyInteraction(player);
					}
				}
			}
			if (type == 35 || type == 36)
			{
				for (int k = 0; k < 200; k++)
				{
					if (k != whoAmI && Main.npc[k].active && (Main.npc[k].type == 35 || Main.npc[k].type == 36))
					{
						Main.npc[k].ApplyInteraction(player);
					}
				}
			}
			if (type == 113 || type == 114)
			{
				for (int l = 0; l < 200; l++)
				{
					if (l != whoAmI && Main.npc[l].active && (Main.npc[l].type == 113 || Main.npc[l].type == 114))
					{
						Main.npc[l].ApplyInteraction(player);
					}
				}
			}
			if (type >= 127 && type <= 131)
			{
				for (int m = 0; m < 200; m++)
				{
					if (m != whoAmI && Main.npc[m].active && Main.npc[m].type >= 127 && Main.npc[m].type <= 131)
					{
						Main.npc[m].ApplyInteraction(player);
					}
				}
			}
			if (type >= 245 && type <= 249)
			{
				for (int n = 0; n < 200; n++)
				{
					if (n != whoAmI && Main.npc[n].active && Main.npc[n].type >= 245 && Main.npc[n].type <= 249)
					{
						Main.npc[n].ApplyInteraction(player);
					}
				}
			}
			if ((type == 396 || type == 397) && Main.npc[(int)ai[3]].active && Main.npc[(int)ai[3]].type == 398)
			{
				Main.npc[(int)ai[3]].ApplyInteraction(player);
			}
			if ((type == 393 || type == 394) && Main.npc[(int)ai[0]].active && Main.npc[(int)ai[0]].type == 395)
			{
				Main.npc[(int)ai[0]].ApplyInteraction(player);
			}
			if (type == 492 && Main.npc[(int)ai[0]].active && Main.npc[(int)ai[0]].type == 491)
			{
				Main.npc[(int)ai[0]].ApplyInteraction(player);
			}
			if (type == 125 || type == 126)
			{
				for (int num = 0; num < 200; num++)
				{
					if (num != whoAmI && Main.npc[num].active && (Main.npc[num].type == 125 || Main.npc[num].type == 126))
					{
						Main.npc[num].ApplyInteraction(player);
					}
				}
			}
			ApplyInteraction(player);
		}

		public void ApplyInteraction(int player)
		{
			if (realLife >= 0)
			{
				Main.npc[realLife].playerInteraction[player] = true;
			}
			else
			{
				playerInteraction[player] = true;
			}
			if (player < 255)
			{
				if (realLife >= 0)
				{
					Main.npc[realLife].lastInteraction = player;
				}
				else
				{
					lastInteraction = player;
				}
			}
		}

		public static bool CanReleaseNPCs(int who)
		{
			float num = 0.7f;
			if (Main.netMode != 1)
			{
				num += 0.05f;
			}
			int num2 = 0;
			int num3 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					num3++;
					if (Main.npc[i].releaseOwner == who)
					{
						num2++;
					}
				}
			}
			int num4 = 0;
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active)
				{
					num4++;
				}
			}
			int num5 = (int)(200f * num / (float)num4);
			if ((float)num3 < 200f * num && num2 < num5)
			{
				return true;
			}
			return false;
		}

		public static int ReleaseNPC(int x, int y, int Type, int Style, int who)
		{
			int num = -1;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(71, -1, -1, null, x, y, Type, Style);
			}
			else if (Type >= 0 && Type < 688 && (Main.npcCatchable[Type] || who == Main.myPlayer) && CanReleaseNPCs(who))
			{
				switch (Type)
				{
				case 583:
				case 584:
				case 585:
					num = NewNPC(GetSpawnSource_NPCRelease(who), x, y, Type);
					Main.npc[num].releaseOwner = (short)who;
					Main.npc[num].ai[2] = 2f;
					Main.npc[num].TargetClosest();
					Main.npc[num].ai[3] = 0f;
					Main.npc[num].netUpdate = true;
					break;
				case 356:
					num = NewNPC(GetSpawnSource_NPCRelease(who), x, y, Type);
					Main.npc[num].ai[2] = Style;
					Main.npc[num].releaseOwner = (short)who;
					break;
				case 148:
				{
					int num3 = Type + Main.rand.Next(2);
					num = NewNPC(GetSpawnSource_NPCRelease(who), x, y, num3);
					Main.npc[num].releaseOwner = (short)who;
					break;
				}
				case 614:
				{
					num = NewNPC(GetSpawnSource_NPCRelease(who), x, y, Type);
					Main.npc[num].releaseOwner = (short)who;
					int num2 = Main.player[who].direction;
					if (Style > 2)
					{
						Style -= 2;
						Main.npc[num].SpawnedFromStatue = true;
					}
					if (Style == 1)
					{
						num2 = 1;
					}
					if (Style == 2)
					{
						num2 = -1;
					}
					Main.npc[num].direction = num2;
					Main.npc[num].spriteDirection = num2;
					Main.npc[num].netUpdate = true;
					break;
				}
				default:
					num = NewNPC(GetSpawnSource_NPCRelease(who), x, y, Type);
					Main.npc[num].releaseOwner = (short)who;
					break;
				}
			}
			return num;
		}

		public static void SlimeRainSpawns(int plr)
		{
			int logicCheckScreenHeight = Main.LogicCheckScreenHeight;
			int logicCheckScreenWidth = Main.LogicCheckScreenWidth;
			float num = 15f;
			Player player = Main.player[plr];
			if ((double)player.position.Y > Main.worldSurface * 16.0 + (double)(logicCheckScreenHeight / 2) || player.nearbyActiveNPCs > num)
			{
				return;
			}
			float num2 = player.nearbyActiveNPCs / num;
			int num3 = 45 + (int)(450f * num2);
			if (Main.expertMode)
			{
				num3 = (int)((double)num3 * 0.85);
			}
			if (Main.GameModeInfo.IsJourneyMode)
			{
				CreativePowers.SpawnRateSliderPerPlayerPower power = CreativePowerManager.Instance.GetPower<CreativePowers.SpawnRateSliderPerPlayerPower>();
				if (power != null && power.GetIsUnlocked())
				{
					if (power.GetShouldDisableSpawnsFor(plr))
					{
						return;
					}
					if (power.GetRemappedSliderValueFor(plr, out var num4))
					{
						num3 = (int)((float)num3 / num4);
					}
				}
			}
			if (Main.rand.Next(num3) != 0)
			{
				return;
			}
			int num5 = (int)(player.Center.X - (float)logicCheckScreenWidth);
			int maxValue = num5 + logicCheckScreenWidth * 2;
			int minValue = (int)((double)player.Center.Y - (double)logicCheckScreenHeight * 1.5);
			int maxValue2 = (int)((double)player.Center.Y - (double)logicCheckScreenHeight * 0.75);
			int num6 = Main.rand.Next(num5, maxValue);
			int num7 = Main.rand.Next(minValue, maxValue2);
			num6 /= 16;
			num7 /= 16;
			if (num6 < 10 || num6 > Main.maxTilesX + 10 || (double)num7 < Main.worldSurface * 0.3 || (double)num7 > Main.worldSurface || Collision.SolidTiles(num6 - 3, num6 + 3, num7 - 5, num7 + 2) || Main.wallHouse[Main.tile[num6, num7].wall])
			{
				return;
			}
			int num8 = NewNPC(GetSpawnSourceForNaturalSpawn(), num6 * 16 + 8, num7 * 16, 1);
			if (Main.rand.Next(200) == 0)
			{
				Main.npc[num8].SetDefaults(-4);
			}
			else if (Main.expertMode)
			{
				if (Main.rand.Next(7) == 0)
				{
					Main.npc[num8].SetDefaults(-7);
				}
				else if (Main.rand.Next(3) == 0)
				{
					Main.npc[num8].SetDefaults(-3);
				}
			}
			else if (Main.rand.Next(10) == 0)
			{
				Main.npc[num8].SetDefaults(-7);
			}
			else if (Main.rand.Next(5) < 2)
			{
				Main.npc[num8].SetDefaults(-3);
			}
		}

		public static bool Spawning_SandstoneCheck(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 10))
			{
				return false;
			}
			int num = 0;
			for (int i = 0; i < 8; i++)
			{
				Tile tile = Main.tile[x, y + i];
				if (!tile.active() || !TileID.Sets.Conversion.Sand[tile.type])
				{
					break;
				}
				num++;
				for (int j = 1; j <= 4; j++)
				{
					tile = Main.tile[x + j, y + i];
					if (!tile.active() || !TileID.Sets.Conversion.Sand[tile.type])
					{
						break;
					}
					num++;
				}
				for (int k = 1; k <= 4; k++)
				{
					tile = Main.tile[x - k, y + i];
					if (!tile.active() || !TileID.Sets.Conversion.Sand[tile.type])
					{
						break;
					}
					num++;
				}
			}
			if (Main.remixWorld)
			{
				return num >= 10;
			}
			return num >= 40;
		}

		public static bool Spawning_FlyingAntlionCheck(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 10))
			{
				return false;
			}
			for (int i = 0; i < 50; i++)
			{
				if (y - i < 10)
				{
					return true;
				}
				Tile tile = Main.tile[x, y - i];
				if (!WallID.Sets.Conversion.HardenedSand[tile.wall] && !WallID.Sets.Conversion.Sandstone[tile.wall])
				{
					return false;
				}
			}
			return true;
		}

		private static int RollDragonflyType(int tileType = 2)
		{
			if (tileType == 53)
			{
				return Main.rand.NextFromList(new short[3] { 595, 598, 600 });
			}
			return Main.rand.NextFromList(new short[3] { 596, 597, 599 });
		}

		public static void ResetRemixHax()
		{
			Main.dayTime = dayTimeHax;
			Main.raining = rainingHax;
			Main.cloudAlpha = cloudAlphaHax;
		}

		public static void SetRemixHax()
		{
			dayTimeHax = Main.dayTime;
			rainingHax = Main.raining;
			cloudAlphaHax = Main.cloudAlpha;
		}

		public static void SpawnNPC()
		{
			if (noSpawnCycle)
			{
				noSpawnCycle = false;
				return;
			}
			bool tooWindyForButterflies = TooWindyForButterflies;
			bool flag = (double)Main.windSpeedTarget < -0.4 || (double)Main.windSpeedTarget > 0.4;
			RevengeManager.CheckRespawns();
			bool flag2 = false;
			bool flag3 = false;
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					num4++;
				}
			}
			float num5 = 0f;
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active)
				{
					switch (Main.npc[j].type)
					{
					case 315:
					case 325:
					case 327:
					case 328:
					case 344:
					case 345:
					case 346:
						num5 += Main.npc[j].npcSlots;
						break;
					}
				}
			}
			float num6 = (int)((float)defaultMaxSpawns * (2f + 0.3f * (float)num4));
			for (int k = 0; k < 255; k++)
			{
				if (!Main.player[k].active || Main.player[k].dead)
				{
					continue;
				}
				flag3 = false;
				if (Main.player[k].isNearNPC(398, MoonLordFightingDistance))
				{
					continue;
				}
				if (Main.slimeRain)
				{
					SlimeRainSpawns(k);
				}
				bool flag4 = false;
				bool flag5 = false;
				bool flag6 = false;
				bool flag7 = false;
				bool flag8 = false;
				bool flag9 = false;
				bool flag10 = false;
				bool flag11 = false;
				bool flag12 = false;
				bool flag13 = false;
				bool flag14 = downedPlantBoss && Main.hardMode;
				bool isItAHappyWindyDay = Main.IsItAHappyWindyDay;
				if (Main.player[k].active && Main.invasionType > 0 && Main.invasionDelay == 0 && Main.invasionSize > 0 && ((double)Main.player[k].position.Y < Main.worldSurface * 16.0 + (double)sHeight || Main.remixWorld))
				{
					int num7 = 3000;
					if ((double)Main.player[k].position.X > Main.invasionX * 16.0 - (double)num7 && (double)Main.player[k].position.X < Main.invasionX * 16.0 + (double)num7)
					{
						flag6 = true;
					}
					else if (Main.invasionX >= (double)(Main.maxTilesX / 2 - 5) && Main.invasionX <= (double)(Main.maxTilesX / 2 + 5))
					{
						for (int l = 0; l < 200; l++)
						{
							if (Main.npc[l].townNPC && Math.Abs(Main.player[k].position.X - Main.npc[l].Center.X) < (float)num7)
							{
								if (Main.rand.Next(3) != 0)
								{
									flag6 = true;
								}
								break;
							}
						}
					}
				}
				if (Main.player[k].ZoneTowerSolar || Main.player[k].ZoneTowerNebula || Main.player[k].ZoneTowerVortex || Main.player[k].ZoneTowerStardust)
				{
					flag6 = true;
				}
				int num8 = (int)(Main.player[k].position.X + (float)(Main.player[k].width / 2)) / 16;
				int num9 = (int)(Main.player[k].position.Y + (float)(Main.player[k].height / 2)) / 16;
				if (Main.wallHouse[Main.tile[num8, num9].wall])
				{
					flag5 = true;
				}
				if (Main.tile[num8, num9].wall == 87)
				{
					flag4 = true;
				}
				flag2 = false;
				spawnRate = defaultSpawnRate;
				maxSpawns = defaultMaxSpawns;
				if (Main.hardMode)
				{
					spawnRate = (int)((double)defaultSpawnRate * 0.9);
					maxSpawns = defaultMaxSpawns + 1;
				}
				if (Main.player[k].position.Y > (float)(Main.UnderworldLayer * 16))
				{
					maxSpawns = (int)((float)maxSpawns * 2f);
				}
				else if ((double)Main.player[k].position.Y > Main.rockLayer * 16.0 + (double)sHeight)
				{
					if (Main.remixWorld)
					{
						if (Main.hardMode)
						{
							spawnRate = (int)((double)spawnRate * 0.45);
							maxSpawns = (int)((float)maxSpawns * 1.8f);
						}
						else
						{
							spawnRate = (int)((double)spawnRate * 0.5);
							maxSpawns = (int)((float)maxSpawns * 1.7f);
						}
					}
					else
					{
						spawnRate = (int)((double)spawnRate * 0.4);
						maxSpawns = (int)((float)maxSpawns * 1.9f);
					}
				}
				else if ((double)Main.player[k].position.Y > Main.worldSurface * 16.0 + (double)sHeight)
				{
					if (Main.remixWorld)
					{
						spawnRate = (int)((double)spawnRate * 0.4);
						maxSpawns = (int)((float)maxSpawns * 1.9f);
					}
					else if (Main.hardMode)
					{
						spawnRate = (int)((double)spawnRate * 0.45);
						maxSpawns = (int)((float)maxSpawns * 1.8f);
					}
					else
					{
						spawnRate = (int)((double)spawnRate * 0.5);
						maxSpawns = (int)((float)maxSpawns * 1.7f);
					}
				}
				else if (Main.remixWorld)
				{
					if (!Main.dayTime)
					{
						spawnRate = (int)((double)spawnRate * 0.6);
						maxSpawns = (int)((float)maxSpawns * 1.3f);
					}
				}
				else if (!Main.dayTime)
				{
					spawnRate = (int)((double)spawnRate * 0.6);
					maxSpawns = (int)((float)maxSpawns * 1.3f);
					if (Main.bloodMoon)
					{
						spawnRate = (int)((double)spawnRate * 0.3);
						maxSpawns = (int)((float)maxSpawns * 1.8f);
					}
					if ((Main.pumpkinMoon || Main.snowMoon) && (double)Main.player[k].position.Y < Main.worldSurface * 16.0)
					{
						spawnRate = (int)((double)spawnRate * 0.2);
						maxSpawns *= 2;
					}
				}
				else if (Main.dayTime && Main.eclipse)
				{
					spawnRate = (int)((double)spawnRate * 0.2);
					maxSpawns = (int)((float)maxSpawns * 1.9f);
				}
				if (Main.remixWorld)
				{
					if (!Main.dayTime)
					{
						if (Main.bloodMoon)
						{
							spawnRate = (int)((double)spawnRate * 0.3);
							maxSpawns = (int)((float)maxSpawns * 1.8f);
							if ((double)Main.player[k].position.Y > Main.rockLayer * 16.0 + (double)sHeight)
							{
								spawnRate = (int)((double)spawnRate * 0.6);
							}
						}
						if (Main.pumpkinMoon || Main.snowMoon)
						{
							spawnRate = (int)((double)spawnRate * 0.2);
							maxSpawns *= 2;
							if ((double)Main.player[k].position.Y > Main.rockLayer * 16.0 + (double)sHeight)
							{
								spawnRate = (int)((double)spawnRate * 0.6);
							}
						}
					}
					else if (Main.dayTime && Main.eclipse)
					{
						spawnRate = (int)((double)spawnRate * 0.2);
						maxSpawns = (int)((float)maxSpawns * 1.9f);
					}
				}
				if (Main.player[k].ZoneSnow && (double)(Main.player[k].position.Y / 16f) < Main.worldSurface)
				{
					maxSpawns = (int)((float)maxSpawns + (float)maxSpawns * Main.cloudAlpha);
					spawnRate = (int)((float)spawnRate * (1f - Main.cloudAlpha + 1f) / 2f);
				}
				if (Main.drunkWorld && Main.tile[num8, num9].wall == 86)
				{
					spawnRate = (int)((double)spawnRate * 0.3);
					maxSpawns = (int)((float)maxSpawns * 1.8f);
				}
				if (Main.player[k].ZoneDungeon)
				{
					spawnRate = (int)((double)spawnRate * 0.3);
					maxSpawns = (int)((float)maxSpawns * 1.8f);
				}
				else if (Main.player[k].ZoneSandstorm)
				{
					spawnRate = (int)((float)spawnRate * (Main.hardMode ? 0.4f : 0.9f));
					maxSpawns = (int)((float)maxSpawns * (Main.hardMode ? 1.5f : 1.2f));
				}
				else if (Main.player[k].ZoneUndergroundDesert)
				{
					spawnRate = (int)((float)spawnRate * 0.2f);
					maxSpawns = (int)((float)maxSpawns * 3f);
				}
				else if (Main.player[k].ZoneJungle)
				{
					if (Main.player[k].townNPCs == 0f)
					{
						spawnRate = (int)((double)spawnRate * 0.4);
						maxSpawns = (int)((float)maxSpawns * 1.5f);
					}
					else if (Main.player[k].townNPCs == 1f)
					{
						spawnRate = (int)((double)spawnRate * 0.55);
						maxSpawns = (int)((double)maxSpawns * 1.4);
					}
					else if (Main.player[k].townNPCs == 2f)
					{
						spawnRate = (int)((double)spawnRate * 0.7);
						maxSpawns = (int)((float)maxSpawns * 1.3f);
					}
					else
					{
						spawnRate = (int)((double)spawnRate * 0.85);
						maxSpawns = (int)((float)maxSpawns * 1.2f);
					}
				}
				else if (Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson)
				{
					spawnRate = (int)((double)spawnRate * 0.65);
					maxSpawns = (int)((float)maxSpawns * 1.3f);
				}
				else if (Main.player[k].ZoneMeteor)
				{
					spawnRate = (int)((double)spawnRate * 0.4);
					maxSpawns = (int)((float)maxSpawns * 1.1f);
				}
				if (flag4)
				{
					spawnRate = (int)((float)spawnRate * 0.8f);
					maxSpawns = (int)((float)maxSpawns * 1.2f);
					if (Main.remixWorld)
					{
						spawnRate = (int)((double)spawnRate * 0.4);
						maxSpawns = (int)((float)maxSpawns * 1.5f);
					}
				}
				if (Main.remixWorld && (Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson) && (double)(Main.player[k].position.Y / 16f) < Main.worldSurface)
				{
					spawnRate = (int)((double)spawnRate * 0.5);
					maxSpawns *= 2;
				}
				if (Main.player[k].ZoneHallow && (double)Main.player[k].position.Y > Main.rockLayer * 16.0 + (double)sHeight)
				{
					spawnRate = (int)((double)spawnRate * 0.65);
					maxSpawns = (int)((float)maxSpawns * 1.3f);
				}
				if (Main.wofNPCIndex >= 0 && Main.player[k].position.Y > (float)(Main.UnderworldLayer * 16))
				{
					maxSpawns = (int)((float)maxSpawns * 0.3f);
					spawnRate *= 3;
				}
				if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.2)
				{
					spawnRate = (int)((float)spawnRate * 0.6f);
				}
				else if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.4)
				{
					spawnRate = (int)((float)spawnRate * 0.7f);
				}
				else if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.6)
				{
					spawnRate = (int)((float)spawnRate * 0.8f);
				}
				else if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.8)
				{
					spawnRate = (int)((float)spawnRate * 0.9f);
				}
				if ((double)(Main.player[k].position.Y / 16f) > (Main.worldSurface + Main.rockLayer) / 2.0 || Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson)
				{
					if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.2)
					{
						spawnRate = (int)((float)spawnRate * 0.7f);
					}
					else if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.4)
					{
						spawnRate = (int)((float)spawnRate * 0.9f);
					}
				}
				int maxValue = 65;
				if (Main.remixWorld && (double)(Main.player[k].position.Y / 16f) < Main.worldSurface && (Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson))
				{
					maxValue = 25;
					spawnRate = (int)((double)spawnRate * 0.8);
					maxSpawns *= 2;
				}
				if (Main.player[k].invis)
				{
					spawnRate = (int)((float)spawnRate * 1.2f);
					maxSpawns = (int)((float)maxSpawns * 0.8f);
				}
				if (Main.player[k].calmed)
				{
					spawnRate = (int)((float)spawnRate * 1.65f);
					maxSpawns = (int)((float)maxSpawns * 0.6f);
				}
				if (Main.player[k].sunflower)
				{
					spawnRate = (int)((float)spawnRate * 1.2f);
					maxSpawns = (int)((float)maxSpawns * 0.8f);
				}
				if (Main.player[k].anglerSetSpawnReduction)
				{
					spawnRate = (int)((float)spawnRate * 1.3f);
					maxSpawns = (int)((float)maxSpawns * 0.7f);
				}
				if (Main.player[k].enemySpawns)
				{
					spawnRate = (int)((double)spawnRate * 0.5);
					maxSpawns = (int)((float)maxSpawns * 2f);
				}
				if (Main.player[k].ZoneWaterCandle || Main.player[k].inventory[Main.player[k].selectedItem].type == 148)
				{
					if (!Main.player[k].ZonePeaceCandle && Main.player[k].inventory[Main.player[k].selectedItem].type != 3117)
					{
						spawnRate = (int)((double)spawnRate * 0.75);
						maxSpawns = (int)((float)maxSpawns * 1.5f);
					}
				}
				else if (Main.player[k].ZonePeaceCandle || Main.player[k].inventory[Main.player[k].selectedItem].type == 3117)
				{
					spawnRate = (int)((double)spawnRate * 1.3);
					maxSpawns = (int)((float)maxSpawns * 0.7f);
				}
				if (Main.player[k].ZoneShadowCandle || Main.player[k].inventory[Main.player[k].selectedItem].type == 5322)
				{
					Main.player[k].townNPCs = 0f;
				}
				if (Main.player[k].ZoneWaterCandle && (double)(Main.player[k].position.Y / 16f) < Main.worldSurface * 0.3499999940395355)
				{
					spawnRate = (int)((double)spawnRate * 0.5);
				}
				if (Main.player[k].isNearFairy())
				{
					spawnRate = (int)((float)spawnRate * 1.2f);
					maxSpawns = (int)((float)maxSpawns * 0.8f);
				}
				if ((double)spawnRate < (double)defaultSpawnRate * 0.1)
				{
					spawnRate = (int)((double)defaultSpawnRate * 0.1);
				}
				if (maxSpawns > defaultMaxSpawns * 3)
				{
					maxSpawns = defaultMaxSpawns * 3;
				}
				if (Main.getGoodWorld)
				{
					spawnRate = (int)((float)spawnRate * 0.8f);
					maxSpawns = (int)((float)maxSpawns * 1.2f);
				}
				if (Main.GameModeInfo.IsJourneyMode)
				{
					CreativePowers.SpawnRateSliderPerPlayerPower power = CreativePowerManager.Instance.GetPower<CreativePowers.SpawnRateSliderPerPlayerPower>();
					if (power != null && power.GetIsUnlocked())
					{
						if (power.GetShouldDisableSpawnsFor(k))
						{
							continue;
						}
						if (power.GetRemappedSliderValueFor(k, out var num10))
						{
							spawnRate = (int)((float)spawnRate / num10);
							maxSpawns = (int)((float)maxSpawns * num10);
						}
					}
				}
				if ((Main.pumpkinMoon || Main.snowMoon) && (Main.remixWorld || (double)Main.player[k].position.Y < Main.worldSurface * 16.0))
				{
					maxSpawns = (int)((double)defaultMaxSpawns * (2.0 + 0.3 * (double)num4));
					spawnRate = 20;
				}
				if (DD2Event.Ongoing && Main.player[k].ZoneOldOneArmy)
				{
					maxSpawns = defaultMaxSpawns;
					spawnRate = defaultSpawnRate;
				}
				if (flag6)
				{
					maxSpawns = (int)((double)defaultMaxSpawns * (2.0 + 0.3 * (double)num4));
					spawnRate = 20;
				}
				if (Main.player[k].ZoneDungeon && !downedBoss3)
				{
					spawnRate = 10;
				}
				if (!flag6 && ((!Main.bloodMoon && !Main.pumpkinMoon && !Main.snowMoon) || Main.dayTime) && (!Main.eclipse || !Main.dayTime) && !Main.player[k].ZoneDungeon && !Main.player[k].ZoneCorrupt && !Main.player[k].ZoneCrimson && !Main.player[k].ZoneMeteor && !Main.player[k].ZoneOldOneArmy)
				{
					if (Main.player[k].Center.Y / 16f > (float)Main.UnderworldLayer && (!Main.remixWorld || !((double)(Main.player[k].Center.X / 16f) > (double)Main.maxTilesX * 0.39 + 50.0) || !((double)(Main.player[k].Center.X / 16f) < (double)Main.maxTilesX * 0.61)))
					{
						if (Main.player[k].townNPCs == 1f)
						{
							if (Main.rand.Next(2) == 0)
							{
								flag5 = true;
							}
							if (Main.rand.Next(10) == 0)
							{
								flag12 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.5);
							}
							else
							{
								spawnRate = (int)((double)(float)spawnRate * 1.25);
							}
						}
						else if (Main.player[k].townNPCs == 2f)
						{
							if (Main.rand.Next(4) != 0)
							{
								flag5 = true;
							}
							if (Main.rand.Next(5) == 0)
							{
								flag12 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.5);
							}
							else
							{
								spawnRate = (int)((double)(float)spawnRate * 1.5);
							}
						}
						else if (Main.player[k].townNPCs >= 3f)
						{
							if (Main.rand.Next(10) != 0)
							{
								flag5 = true;
							}
							if (Main.rand.Next(3) == 0)
							{
								flag12 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.5);
							}
							else
							{
								spawnRate = (int)((float)spawnRate * 2f);
							}
						}
					}
					else if (Main.player[k].townNPCs == 1f)
					{
						flag5 = true;
						if (Main.player[k].ZoneGraveyard)
						{
							spawnRate = (int)((double)(float)spawnRate * 1.66);
							if (Main.rand.Next(9) == 1)
							{
								flag12 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.6);
							}
						}
						else if (Main.rand.Next(3) == 1)
						{
							flag12 = true;
							maxSpawns = (int)((double)(float)maxSpawns * 0.6);
						}
						else
						{
							spawnRate = (int)((float)spawnRate * 2f);
						}
					}
					else if (Main.player[k].townNPCs == 2f)
					{
						flag5 = true;
						if (Main.player[k].ZoneGraveyard)
						{
							spawnRate = (int)((double)(float)spawnRate * 2.33);
							if (Main.rand.Next(6) == 1)
							{
								flag12 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.6);
							}
						}
						else if (Main.rand.Next(3) != 0)
						{
							flag12 = true;
							maxSpawns = (int)((double)(float)maxSpawns * 0.6);
						}
						else
						{
							spawnRate = (int)((float)spawnRate * 3f);
						}
					}
					else if (Main.player[k].townNPCs >= 3f)
					{
						flag5 = true;
						if (Main.player[k].ZoneGraveyard)
						{
							spawnRate = (int)((float)spawnRate * 3f);
							if (Main.rand.Next(3) == 1)
							{
								flag12 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.6);
							}
						}
						else
						{
							if (!Main.expertMode || Main.rand.Next(30) != 0)
							{
								flag12 = true;
							}
							maxSpawns = (int)((double)(float)maxSpawns * 0.6);
						}
					}
				}
				bool flag15 = false;
				if (Main.player[k].active && !Main.player[k].dead && Main.player[k].nearbyActiveNPCs < (float)maxSpawns && Main.rand.Next(spawnRate) == 0)
				{
					bool flag16 = Main.player[k].ZoneTowerNebula || Main.player[k].ZoneTowerSolar || Main.player[k].ZoneTowerStardust || Main.player[k].ZoneTowerVortex;
					spawnRangeX = (int)((double)(sWidth / 16) * 0.7);
					spawnRangeY = (int)((double)(sHeight / 16) * 0.7);
					safeRangeX = (int)((double)(sWidth / 16) * 0.52);
					safeRangeY = (int)((double)(sHeight / 16) * 0.52);
					if (Main.player[k].inventory[Main.player[k].selectedItem].type == 1254 || Main.player[k].inventory[Main.player[k].selectedItem].type == 1299 || Main.player[k].scope)
					{
						float num11 = 1.5f;
						if (Main.player[k].inventory[Main.player[k].selectedItem].type == 1254 && Main.player[k].scope)
						{
							num11 = 1.25f;
						}
						else if (Main.player[k].inventory[Main.player[k].selectedItem].type == 1254)
						{
							num11 = 1.5f;
						}
						else if (Main.player[k].inventory[Main.player[k].selectedItem].type == 1299)
						{
							num11 = 1.5f;
						}
						else if (Main.player[k].scope)
						{
							num11 = 2f;
						}
						spawnRangeX += (int)((double)(sWidth / 16) * 0.5 / (double)num11);
						spawnRangeY += (int)((double)(sHeight / 16) * 0.5 / (double)num11);
						safeRangeX += (int)((double)(sWidth / 16) * 0.5 / (double)num11);
						safeRangeY += (int)((double)(sHeight / 16) * 0.5 / (double)num11);
					}
					int num12 = (int)(Main.player[k].position.X / 16f) - spawnRangeX;
					int num13 = (int)(Main.player[k].position.X / 16f) + spawnRangeX;
					int num14 = (int)(Main.player[k].position.Y / 16f) - spawnRangeY;
					int num15 = (int)(Main.player[k].position.Y / 16f) + spawnRangeY;
					int num16 = (int)(Main.player[k].position.X / 16f) - safeRangeX;
					int num17 = (int)(Main.player[k].position.X / 16f) + safeRangeX;
					int num18 = (int)(Main.player[k].position.Y / 16f) - safeRangeY;
					int num19 = (int)(Main.player[k].position.Y / 16f) + safeRangeY;
					if (num12 < 0)
					{
						num12 = 0;
					}
					if (num13 > Main.maxTilesX)
					{
						num13 = Main.maxTilesX;
					}
					if (num14 < 0)
					{
						num14 = 0;
					}
					if (num15 > Main.maxTilesY)
					{
						num15 = Main.maxTilesY;
					}
					for (int m = 0; m < 50; m++)
					{
						int num20 = Main.rand.Next(num12, num13);
						int num21 = Main.rand.Next(num14, num15);
						if (!Main.tile[num20, num21].nactive() || !Main.tileSolid[Main.tile[num20, num21].type])
						{
							if (!flag16 && Main.wallHouse[Main.tile[num20, num21].wall])
							{
								continue;
							}
							if (!flag6 && (double)num21 < Main.worldSurface * 0.3499999940395355 && !flag12 && ((double)num20 < (double)Main.maxTilesX * 0.45 || (double)num20 > (double)Main.maxTilesX * 0.55 || Main.hardMode))
							{
								num3 = Main.tile[num20, num21].type;
								num = num20;
								num2 = num21;
								flag2 = true;
								flag3 = true;
							}
							else if (!flag6 && (double)num21 < Main.worldSurface * 0.44999998807907104 && !flag12 && Main.hardMode && Main.rand.Next(10) == 0)
							{
								num3 = Main.tile[num20, num21].type;
								num = num20;
								num2 = num21;
								flag2 = true;
								flag3 = true;
							}
							else
							{
								for (int n = num21; n < Main.maxTilesY && n < num15; n++)
								{
									if (Main.tile[num20, n].nactive() && Main.tileSolid[Main.tile[num20, n].type])
									{
										if (num20 < num16 || num20 > num17 || n < num18 || n > num19)
										{
											num3 = Main.tile[num20, n].type;
											num = num20;
											num2 = n;
											flag2 = true;
										}
										break;
									}
								}
							}
							if (Main.player[k].ZoneShadowCandle)
							{
								flag5 = false;
							}
							else if (!flag3 && Main.player[k].afkCounter >= AFKTimeNeededForNoWorms)
							{
								flag5 = true;
							}
							if (flag2)
							{
								int num22 = num - spawnSpaceX / 2;
								int num23 = num + spawnSpaceX / 2;
								int num24 = num2 - spawnSpaceY;
								int num25 = num2;
								if (num22 < 0)
								{
									flag2 = false;
								}
								if (num23 > Main.maxTilesX)
								{
									flag2 = false;
								}
								if (num24 < 0)
								{
									flag2 = false;
								}
								if (num25 > Main.maxTilesY)
								{
									flag2 = false;
								}
								if (flag2)
								{
									for (int num26 = num22; num26 < num23; num26++)
									{
										for (int num27 = num24; num27 < num25; num27++)
										{
											if (Main.tile[num26, num27].nactive() && Main.tileSolid[Main.tile[num26, num27].type])
											{
												flag2 = false;
												break;
											}
											if (Main.tile[num26, num27].lava())
											{
												flag2 = false;
												break;
											}
										}
									}
								}
								if (num >= num16 && num <= num17)
								{
									flag15 = true;
								}
							}
						}
						if (flag2 || flag2)
						{
							break;
						}
					}
				}
				if (flag2)
				{
					Rectangle rectangle = new Rectangle(num * 16, num2 * 16, 16, 16);
					for (int num28 = 0; num28 < 255; num28++)
					{
						if (Main.player[num28].active)
						{
							Rectangle rectangle2 = new Rectangle((int)(Main.player[num28].position.X + (float)(Main.player[num28].width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(Main.player[num28].position.Y + (float)(Main.player[num28].height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
							if (rectangle.Intersects(rectangle2))
							{
								flag2 = false;
							}
						}
					}
				}
				if (flag2)
				{
					if (Main.player[k].ZoneDungeon && (!Main.tileDungeon[Main.tile[num, num2].type] || Main.tile[num, num2 - 1].wall == 0))
					{
						flag2 = false;
					}
					if (Main.tile[num, num2 - 1].liquid > 0 && Main.tile[num, num2 - 2].liquid > 0 && !Main.tile[num, num2 - 1].lava())
					{
						if (Main.tile[num, num2 - 1].shimmer())
						{
							flag2 = false;
						}
						if (Main.tile[num, num2 - 1].honey())
						{
							flag8 = true;
						}
						else
						{
							flag7 = true;
						}
					}
					int num29 = (int)Main.player[k].Center.X / 16;
					int num30 = (int)(Main.player[k].Bottom.Y + 8f) / 16;
					if (Main.tile[num, num2].type == 367)
					{
						flag10 = true;
					}
					else if (Main.tile[num, num2].type == 368)
					{
						flag9 = true;
					}
					else if (Main.tile[num29, num30].type == 367)
					{
						flag10 = true;
					}
					else if (Main.tile[num29, num30].type == 368)
					{
						flag9 = true;
					}
					else
					{
						int num31 = Main.rand.Next(20, 31);
						int num32 = Main.rand.Next(1, 4);
						if (num - num31 < 0)
						{
							num31 = num;
						}
						if (num2 - num31 < 0)
						{
							num31 = num2;
						}
						if (num + num31 >= Main.maxTilesX)
						{
							num31 = Main.maxTilesX - num - 1;
						}
						if (num2 + num31 >= Main.maxTilesY)
						{
							num31 = Main.maxTilesY - num2 - 1;
						}
						for (int num33 = num - num31; num33 <= num + num31; num33 += num32)
						{
							int num34 = Main.rand.Next(1, 4);
							for (int num35 = num2 - num31; num35 <= num2 + num31; num35 += num34)
							{
								if (Main.tile[num33, num35].type == 367)
								{
									flag10 = true;
								}
								if (Main.tile[num33, num35].type == 368)
								{
									flag9 = true;
								}
							}
						}
						num31 = Main.rand.Next(30, 61);
						num32 = Main.rand.Next(3, 7);
						if (num29 - num31 < 0)
						{
							num31 = num29;
						}
						if (num30 - num31 < 0)
						{
							num31 = num30;
						}
						if (num29 + num31 >= Main.maxTilesX)
						{
							num31 = Main.maxTilesX - num29 - 2;
						}
						if (num30 + num31 >= Main.maxTilesY)
						{
							num31 = Main.maxTilesY - num30 - 2;
						}
						for (int num36 = num29 - num31; num36 <= num29 + num31; num36 += num32)
						{
							int num37 = Main.rand.Next(3, 7);
							for (int num38 = num30 - num31; num38 <= num30 + num31; num38 += num37)
							{
								if (Main.tile[num36, num38].type == 367)
								{
									flag10 = true;
								}
								if (Main.tile[num36, num38].type == 368)
								{
									flag9 = true;
								}
							}
						}
					}
					if (flag8)
					{
						flag2 = false;
					}
					if ((num3 == 477 || num3 == 492) && !Main.bloodMoon && !Main.eclipse && Main.invasionType <= 0 && !Main.pumpkinMoon && !Main.snowMoon && !Main.slimeRain && Main.rand.Next(100) < 10)
					{
						flag2 = false;
					}
				}
				if (!flag2)
				{
					continue;
				}
				bool flag17 = (double)num2 <= Main.rockLayer;
				if (Main.remixWorld)
				{
					flag17 = (double)num2 > Main.rockLayer && num2 < Main.maxTilesY - 190;
				}
				bool flag18 = (double)num2 > Main.rockLayer && num2 < Main.UnderworldLayer;
				if (Main.dontStarveWorld)
				{
					flag18 = num2 < Main.UnderworldLayer;
				}
				if (flag18 && !Main.player[k].ZoneDungeon && !flag6)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num39 = Main.rand.Next(5, 15);
						if (num - num39 >= 0 && num + num39 < Main.maxTilesX)
						{
							for (int num40 = num - num39; num40 < num + num39; num40++)
							{
								for (int num41 = num2 - num39; num41 < num2 + num39; num41++)
								{
									if (Main.tile[num40, num41].wall == 62)
									{
										flag11 = true;
									}
								}
							}
						}
					}
					else
					{
						int num42 = (int)Main.player[k].position.X / 16;
						int num43 = (int)Main.player[k].position.Y / 16;
						if (Main.tile[num42, num43].wall == 62)
						{
							flag11 = true;
						}
					}
				}
				if ((double)num2 < Main.rockLayer && num2 > 200 && !Main.player[k].ZoneDungeon && !flag6)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num44 = Main.rand.Next(5, 15);
						if (num - num44 >= 0 && num + num44 < Main.maxTilesX)
						{
							for (int num45 = num - num44; num45 < num + num44; num45++)
							{
								for (int num46 = num2 - num44; num46 < num2 + num44; num46++)
								{
									if (WallID.Sets.Conversion.Sandstone[Main.tile[num45, num46].wall] || WallID.Sets.Conversion.HardenedSand[Main.tile[num45, num46].wall])
									{
										flag13 = true;
									}
								}
							}
						}
					}
					else
					{
						int num47 = (int)Main.player[k].position.X / 16;
						int num48 = (int)Main.player[k].position.Y / 16;
						if (WallID.Sets.Conversion.Sandstone[Main.tile[num47, num48].wall] || WallID.Sets.Conversion.HardenedSand[Main.tile[num47, num48].wall])
						{
							flag13 = true;
						}
					}
				}
				flag2 = false;
				int num49 = Main.tile[num, num2].type;
				int num50 = Main.tile[num, num2 - 1].wall;
				if (Main.tile[num, num2 - 2].wall == 244 || Main.tile[num, num2].wall == 244)
				{
					num50 = 244;
				}
				bool flag19 = (float)new Point(num8 - num, num9 - num2).X * Main.windSpeedTarget > 0f;
				bool flag20 = (double)num2 <= Main.worldSurface;
				bool flag21 = (double)num2 >= Main.rockLayer;
				bool flag22 = ((num < WorldGen.oceanDistance || num > Main.maxTilesX - WorldGen.oceanDistance) && Main.tileSand[num49] && (double)num2 < Main.rockLayer) || (num3 == 53 && WorldGen.oceanDepths(num, num2));
				bool flag23 = (double)num2 <= Main.worldSurface && (num < WorldGen.beachDistance || num > Main.maxTilesX - WorldGen.beachDistance);
				int range = 10;
				if (Main.remixWorld)
				{
					flag21 = (((double)num2 > Main.worldSurface && (double)num2 < Main.rockLayer) ? true : false);
					if ((double)num2 < Main.worldSurface + 5.0)
					{
						Main.raining = false;
						Main.cloudAlpha = 0f;
						Main.dayTime = false;
					}
					range = 5;
					if (Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson)
					{
						flag22 = false;
						flag23 = false;
					}
					if ((double)num < (double)Main.maxTilesX * 0.43 || (double)num > (double)Main.maxTilesX * 0.57)
					{
						if ((double)num2 > Main.rockLayer - 200.0 && num2 < Main.maxTilesY - 200 && Main.rand.Next(2) == 0)
						{
							flag22 = true;
						}
						if ((double)num2 > Main.rockLayer - 200.0 && num2 < Main.maxTilesY - 200 && Main.rand.Next(2) == 0)
						{
							flag23 = true;
						}
					}
					if ((double)num2 > Main.rockLayer - 20.0)
					{
						if (num2 < Main.maxTilesY - 190 && Main.rand.Next(3) != 0)
						{
							flag20 = true;
							Main.dayTime = false;
							if (Main.rand.Next(2) == 0)
							{
								Main.dayTime = true;
							}
						}
						else if ((Main.bloodMoon || (Main.eclipse && Main.dayTime)) && (double)num > (double)Main.maxTilesX * 0.38 + 50.0 && (double)num < (double)Main.maxTilesX * 0.62)
						{
							flag20 = true;
						}
					}
				}
				num49 = SpawnNPC_TryFindingProperGroundTileType(num49, num, num2);
				int newNPC = 200;
				int cattailX;
				int cattailY;
				if (Main.player[k].ZoneTowerNebula)
				{
					bool flag24 = true;
					int num51 = 0;
					while (flag24)
					{
						num51 = Utils.SelectRandom<int>(Main.rand, 424, 424, 424, 423, 423, 423, 421, 421, 421, 420, 420);
						flag24 = false;
						if (num51 == 424 && CountNPCS(num51) >= 3)
						{
							flag24 = true;
						}
						if (num51 == 423 && CountNPCS(num51) >= 3)
						{
							flag24 = true;
						}
						if (num51 == 420 && CountNPCS(num51) >= 3)
						{
							flag24 = true;
						}
					}
					if (num51 != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, num51, 1);
					}
				}
				else if (Main.player[k].ZoneTowerVortex)
				{
					bool flag25 = true;
					int num52 = 0;
					while (flag25)
					{
						num52 = Utils.SelectRandom<int>(Main.rand, 429, 429, 429, 429, 427, 427, 425, 425, 426);
						flag25 = false;
						if (num52 == 425 && CountNPCS(num52) >= 3)
						{
							flag25 = true;
						}
						if (num52 == 426 && CountNPCS(num52) >= 3)
						{
							flag25 = true;
						}
						if (num52 == 429 && CountNPCS(num52) >= 4)
						{
							flag25 = true;
						}
					}
					if (num52 != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, num52, 1);
					}
				}
				else if (Main.player[k].ZoneTowerStardust)
				{
					int num53 = Utils.SelectRandom<int>(Main.rand, 411, 411, 411, 409, 409, 407, 402, 405);
					if (num53 != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, num53, 1);
					}
				}
				else if (Main.player[k].ZoneTowerSolar)
				{
					bool flag26 = true;
					int num54 = 0;
					while (flag26)
					{
						num54 = Utils.SelectRandom<int>(Main.rand, 518, 419, 418, 412, 417, 416, 415);
						flag26 = false;
						if (num54 == 418 && Main.rand.Next(2) == 0)
						{
							num54 = Utils.SelectRandom<int>(Main.rand, 415, 416, 419, 417);
						}
						if (num54 == 518 && CountNPCS(num54) >= 2)
						{
							flag26 = true;
						}
						if (num54 == 412 && CountNPCS(num54) >= 1)
						{
							flag26 = true;
						}
					}
					if (num54 != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, num54, 1);
					}
				}
				else if (flag3)
				{
					int maxValue2 = 8;
					int maxValue3 = 30;
					bool flag27 = (float)Math.Abs(num - Main.maxTilesX / 2) / (float)(Main.maxTilesX / 2) > 0.33f && (Main.wallLight[Main.tile[num8, num9].wall] || Main.tile[num8, num9].wall == 73);
					if (flag27 && AnyDanger())
					{
						flag27 = false;
					}
					if (Main.player[k].ZoneWaterCandle)
					{
						maxValue2 = 3;
						maxValue3 = 10;
					}
					if (flag6 && Main.invasionType == 4)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 388);
					}
					else if (flag27 && Main.hardMode && downedGolemBoss && ((!downedMartians && Main.rand.Next(maxValue2) == 0) || Main.rand.Next(maxValue3) == 0) && !AnyNPCs(399))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 399);
					}
					else if (flag27 && Main.hardMode && downedGolemBoss && ((!downedMartians && Main.rand.Next(maxValue2) == 0) || Main.rand.Next(maxValue3) == 0) && !AnyNPCs(399) && (Main.player[k].inventory[Main.player[k].selectedItem].type == 148 || Main.player[k].ZoneWaterCandle))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 399);
					}
					else if (Main.hardMode && !AnyNPCs(87) && !flag5 && Main.rand.Next(10) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 87, 1);
					}
					else if (Main.hardMode && !AnyNPCs(87) && !flag5 && Main.rand.Next(10) == 0 && (Main.player[k].inventory[Main.player[k].selectedItem].type == 148 || Main.player[k].ZoneWaterCandle))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 87, 1);
					}
					else if (!unlockedSlimePurpleSpawn && Main.player[k].RollLuck(25) == 0 && !AnyNPCs(686))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 686);
					}
					else
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 48);
					}
				}
				else if (flag6)
				{
					if (Main.invasionType == 1)
					{
						if (Main.hardMode && !AnyNPCs(471) && Main.rand.Next(30) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 471);
						}
						else if (Main.rand.Next(9) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 29);
						}
						else if (Main.rand.Next(5) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 26);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 111);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 27);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 28);
						}
					}
					else if (Main.invasionType == 2)
					{
						if (Main.rand.Next(7) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 145);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 143);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 144);
						}
					}
					else if (Main.invasionType == 3)
					{
						if (Main.invasionSize < Main.invasionSizeStart / 2 && Main.rand.Next(20) == 0 && !AnyNPCs(491) && !Collision.SolidTiles(num - 20, num + 20, num2 - 40, num2 - 10))
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, (num2 - 10) * 16, 491);
						}
						else if (Main.rand.Next(30) == 0 && !AnyNPCs(216))
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 216);
						}
						else if (Main.rand.Next(11) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 215);
						}
						else if (Main.rand.Next(9) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 252);
						}
						else if (Main.rand.Next(7) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 214);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 213);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 212);
						}
					}
					else if (Main.invasionType == 4)
					{
						int num55 = 0;
						int num56 = Main.rand.Next(7);
						bool flag28 = (float)(Main.invasionSizeStart - Main.invasionSize) / (float)Main.invasionSizeStart >= 0.3f && !AnyNPCs(395);
						if (Main.rand.Next(45) == 0 && flag28)
						{
							num55 = 395;
						}
						else if (num56 >= 6)
						{
							if (Main.rand.Next(20) == 0 && flag28)
							{
								num55 = 395;
							}
							else
							{
								int num57 = Main.rand.Next(2);
								if (num57 == 0)
								{
									num55 = 390;
								}
								if (num57 == 1)
								{
									num55 = 386;
								}
							}
						}
						else if (num56 >= 4)
						{
							int num58 = Main.rand.Next(5);
							num55 = ((num58 < 2) ? 382 : ((num58 >= 4) ? 388 : 381));
						}
						else
						{
							int num59 = Main.rand.Next(4);
							if (num59 == 3)
							{
								if (!AnyNPCs(520))
								{
									num55 = 520;
								}
								else
								{
									num59 = Main.rand.Next(3);
								}
							}
							if (num59 == 0)
							{
								num55 = 385;
							}
							if (num59 == 1)
							{
								num55 = 389;
							}
							if (num59 == 2)
							{
								num55 = 383;
							}
						}
						if (num55 != 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, num55, 1);
						}
					}
				}
				else if (num50 == 244 && !Main.remixWorld)
				{
					if (flag7)
					{
						if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 592);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 55);
						}
					}
					else if ((double)num2 > Main.worldSurface)
					{
						if (Main.rand.Next(3) == 0)
						{
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 447);
							}
							else
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 300);
							}
						}
						else if (Main.rand.Next(2) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 359);
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 448);
						}
						else if (Main.rand.Next(3) != 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 357);
						}
					}
					else if (Main.player[k].RollLuck(2) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 624);
						Main.npc[newNPC].timeLeft *= 10;
					}
					else if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 443);
					}
					else if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 539);
					}
					else if (Main.halloween && Main.rand.Next(3) != 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 303);
					}
					else if (Main.xMas && Main.rand.Next(3) != 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 337);
					}
					else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 540);
					}
					else if (Main.rand.Next(3) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Utils.SelectRandom(Main.rand, new short[2] { 299, 538 }));
					}
					else
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 46);
					}
				}
				else if (!savedBartender && DD2Event.ReadyToFindBartender && !AnyNPCs(579) && Main.rand.Next(80) == 0 && !flag7)
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 579);
				}
				else if (Main.tile[num, num2].wall == 62 || flag11)
				{
					bool flag29 = flag21 && num2 < Main.maxTilesY - 210;
					if (Main.dontStarveWorld)
					{
						flag29 = num2 < Main.maxTilesY - 210;
					}
					if (Main.tile[num, num2].wall == 62 && Main.rand.Next(8) == 0 && !flag7 && flag29 && !savedStylist && !AnyNPCs(354))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 354);
					}
					else if (Main.hardMode && Main.rand.Next(10) != 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 163);
					}
					else
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 164);
					}
				}
				else if ((WallID.Sets.Conversion.HardenedSand[Main.tile[num, num2].wall] || WallID.Sets.Conversion.Sandstone[Main.tile[num, num2].wall] || flag13) && WorldGen.checkUnderground(num, num2))
				{
					float num60 = 1.15f;
					if ((double)num2 > (Main.rockLayer * 2.0 + (double)Main.maxTilesY) / 3.0)
					{
						num60 *= 0.5f;
					}
					else if ((double)num2 > Main.rockLayer)
					{
						num60 *= 0.85f;
					}
					if (Main.rand.Next(20) == 0 && !flag7 && !savedGolfer && !AnyNPCs(589))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 589);
					}
					else if (Main.hardMode && Main.rand.Next((int)(45f * num60)) == 0 && !flag5 && (double)num2 > Main.worldSurface + 100.0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 510);
					}
					else if (Main.rand.Next((int)(45f * num60)) == 0 && !flag5 && (double)num2 > Main.worldSurface + 100.0 && CountNPCS(513) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 513);
					}
					else if (Main.hardMode && Main.rand.Next(5) != 0)
					{
						List<int> list = new List<int>();
						if (Main.player[k].ZoneCorrupt)
						{
							list.Add(525);
							list.Add(525);
						}
						if (Main.player[k].ZoneCrimson)
						{
							list.Add(526);
							list.Add(526);
						}
						if (Main.player[k].ZoneHallow)
						{
							list.Add(527);
							list.Add(527);
						}
						if (list.Count == 0)
						{
							list.Add(524);
							list.Add(524);
						}
						if (Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson)
						{
							list.Add(533);
							list.Add(529);
						}
						else
						{
							list.Add(530);
							list.Add(528);
						}
						list.Add(532);
						int num61 = Utils.SelectRandom(Main.rand, list.ToArray());
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, num61);
						list.Clear();
					}
					else
					{
						int num62 = Utils.SelectRandom<int>(Main.rand, 69, 580, 580, 580, 581);
						if (Main.rand.Next(15) == 0)
						{
							num62 = 537;
						}
						else if (Main.rand.Next(10) == 0)
						{
							switch (num62)
							{
							case 580:
								num62 = 508;
								break;
							case 581:
								num62 = 509;
								break;
							}
						}
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, num62);
					}
				}
				else if (Main.hardMode && flag7 && Main.player[k].ZoneJungle && Main.rand.Next(3) != 0)
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 157);
				}
				else if (Main.hardMode && flag7 && Main.player[k].ZoneCrimson && Main.rand.Next(3) != 0)
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 242);
				}
				else if (Main.hardMode && flag7 && Main.player[k].ZoneCrimson && Main.rand.Next(3) != 0)
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 241);
				}
				else if ((!flag12 || (!savedAngler && !AnyNPCs(376))) && flag7 && flag22)
				{
					bool flag30 = false;
					if (!savedAngler && !AnyNPCs(376) && ((double)num2 < Main.worldSurface - 10.0 || Main.remixWorld))
					{
						int num63 = -1;
						for (int num64 = num2 - 1; num64 > num2 - 50; num64--)
						{
							if (Main.tile[num, num64].liquid == 0 && !WorldGen.SolidTile(num, num64) && !WorldGen.SolidTile(num, num64 + 1) && !WorldGen.SolidTile(num, num64 + 2))
							{
								num63 = num64 + 2;
								break;
							}
						}
						if (num63 > num2)
						{
							num63 = num2;
						}
						if (num63 > 0 && !flag15)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num63 * 16, 376);
							flag30 = true;
						}
					}
					if (!flag30 && !flag15)
					{
						int num65 = -1;
						int num66 = -1;
						if (((double)num2 < Main.worldSurface || Main.remixWorld) && num2 > 50)
						{
							for (int num67 = num2 - 1; num67 > num2 - 50; num67--)
							{
								if (Main.tile[num, num67].liquid == 0 && !WorldGen.SolidTile(num, num67) && !WorldGen.SolidTile(num, num67 + 1) && !WorldGen.SolidTile(num, num67 + 2))
								{
									num65 = num67 + 2;
									if (!WorldGen.SolidTile(num, num65 + 1) && !WorldGen.SolidTile(num, num65 + 2) && !Main.wallHouse[Main.tile[num, num65 + 2].wall])
									{
										num66 = num65 + 2;
									}
									if (Main.wallHouse[Main.tile[num, num65].wall])
									{
										num65 = -1;
									}
									break;
								}
							}
							if (num65 > num2)
							{
								num65 = num2;
							}
							if (num66 > num2)
							{
								num66 = num2;
							}
						}
						if (num65 > 0 && !flag15 && Main.rand.Next(10) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num65 * 16, 602);
						}
						else if (Main.rand.Next(10) == 0)
						{
							int num68 = Main.rand.Next(3);
							if (num68 == 0 && num65 > 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num65 * 16, 625);
							}
							else if (num68 == 1 && num66 > 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num66 * 16, 615);
							}
							else if (num68 == 2)
							{
								int num69 = num2;
								if (num66 > 0)
								{
									num69 = num66;
								}
								if (Main.player[k].RollLuck(goldCritterChance) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num69 * 16, 627);
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num69 * 16, 626);
								}
							}
						}
						else if (Main.rand.Next(40) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 220);
						}
						else if (Main.rand.Next(18) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 221);
						}
						else if (Main.rand.Next(8) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 65);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 67);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 64);
						}
					}
				}
				else if (!flag7 && !savedAngler && !AnyNPCs(376) && (num < WorldGen.beachDistance || num > Main.maxTilesX - WorldGen.beachDistance) && Main.tileSand[num49] && ((double)num2 < Main.worldSurface || Main.remixWorld))
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 376);
				}
				else if (!flag12 && flag7 && ((flag21 && Main.rand.Next(2) == 0) || num49 == 60))
				{
					bool flag31 = false;
					if (num49 == 60 && flag20 && num2 > 50 && Main.rand.Next(3) == 0 && Main.dayTime)
					{
						int num70 = -1;
						for (int num71 = num2 - 1; num71 > num2 - 50; num71--)
						{
							if (Main.tile[num, num71].liquid == 0 && !WorldGen.SolidTile(num, num71) && !WorldGen.SolidTile(num, num71 + 1) && !WorldGen.SolidTile(num, num71 + 2))
							{
								num70 = num71 + 2;
								break;
							}
						}
						if (num70 > num2)
						{
							num70 = num2;
						}
						if (num70 > 0 && !flag15)
						{
							flag31 = true;
							if (Main.rand.Next(4) == 0)
							{
								flag31 = true;
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num70 * 16, 617);
							}
							else if (!flag && Main.cloudAlpha == 0f)
							{
								flag31 = true;
								int num72 = Main.rand.Next(1, 4);
								for (int num73 = 0; num73 < num72; num73++)
								{
									if (Main.player[k].RollLuck(goldCritterChance) == 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num70 * 16 - 16, 613);
									}
									else
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num70 * 16 - 16, 612);
									}
								}
							}
						}
					}
					if (!flag31)
					{
						if (Main.hardMode && Main.rand.Next(3) > 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 102);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 58);
						}
					}
				}
				else if (!flag12 && flag7 && (double)num2 > Main.worldSurface && Main.rand.Next(3) == 0)
				{
					if (Main.hardMode && Main.rand.Next(3) > 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 103);
					}
					else
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 63);
					}
				}
				else if (flag7 && Main.rand.Next(4) == 0 && ((num > WorldGen.oceanDistance && num < Main.maxTilesX - WorldGen.oceanDistance) || (double)num2 > Main.worldSurface + 50.0))
				{
					if (Main.player[k].ZoneCorrupt)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 57);
					}
					else if (Main.player[k].ZoneCrimson)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 465);
					}
					else if ((double)num2 < Main.worldSurface && num2 > 50 && Main.rand.Next(3) != 0 && Main.dayTime)
					{
						int num74 = -1;
						for (int num75 = num2 - 1; num75 > num2 - 50; num75--)
						{
							if (Main.tile[num, num75].liquid == 0 && !WorldGen.SolidTile(num, num75) && !WorldGen.SolidTile(num, num75 + 1) && !WorldGen.SolidTile(num, num75 + 2))
							{
								num74 = num75 + 2;
								break;
							}
						}
						if (num74 > num2)
						{
							num74 = num2;
						}
						if (num74 > 0 && !flag15)
						{
							if (Main.rand.Next(5) == 0 && (num3 == 2 || num3 == 477))
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num74 * 16, 616);
							}
							else if (num3 == 53)
							{
								if (Main.rand.Next(2) == 0 && !flag && Main.cloudAlpha == 0f)
								{
									int num76 = Main.rand.Next(1, 4);
									for (int num77 = 0; num77 < num76; num77++)
									{
										if (Main.player[k].RollLuck(goldCritterChance) == 0)
										{
											NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num74 * 16 - 16, 613);
										}
										else
										{
											NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num74 * 16 - 16, 612);
										}
									}
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num74 * 16, 608);
								}
							}
							else if (Main.rand.Next(2) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num74 * 16, 362);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num74 * 16, 364);
							}
						}
						else if (num3 == 53 && num > WorldGen.beachDistance && num < Main.maxTilesX - WorldGen.beachDistance)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num74 * 16, 607);
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 592);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 55);
						}
					}
					else if (num3 == 53 && num > WorldGen.beachDistance && num < Main.maxTilesX - WorldGen.beachDistance)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 607);
					}
					else if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 592);
					}
					else
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 55);
					}
				}
				else if (downedGoblins && Main.player[k].RollLuck(20) == 0 && !flag7 && flag21 && num2 < Main.maxTilesY - 210 && !savedGoblin && !AnyNPCs(105))
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 105);
				}
				else if (Main.hardMode && Main.player[k].RollLuck(20) == 0 && !flag7 && flag21 && num2 < Main.maxTilesY - 210 && !savedWizard && !AnyNPCs(106))
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 106);
				}
				else if (downedBoss3 && Main.player[k].RollLuck(20) == 0 && !flag7 && flag21 && num2 < Main.maxTilesY - 210 && !unlockedSlimeOldSpawn && !AnyNPCs(685))
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 685);
				}
				else if (flag12)
				{
					if (Main.player[k].ZoneGraveyard)
					{
						if (!flag7)
						{
							if (Main.rand.Next(2) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 606);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 610);
							}
						}
					}
					else if (!flag15 && flag23)
					{
						if (flag7)
						{
							int num78 = -1;
							int num79 = -1;
							if (((double)num2 < Main.worldSurface || Main.remixWorld) && num2 > 50)
							{
								for (int num80 = num2 - 1; num80 > num2 - 50; num80--)
								{
									if (Main.tile[num, num80].liquid == 0 && !WorldGen.SolidTile(num, num80) && !WorldGen.SolidTile(num, num80 + 1) && !WorldGen.SolidTile(num, num80 + 2))
									{
										num78 = num80 + 2;
										if (!WorldGen.SolidTile(num, num78 + 1) && !WorldGen.SolidTile(num, num78 + 2))
										{
											num79 = num78 + 2;
										}
										break;
									}
								}
								if (num78 > num2)
								{
									num78 = num2;
								}
								if (num79 > num2)
								{
									num79 = num2;
								}
							}
							if (Main.rand.Next(2) == 0)
							{
								int num81 = Main.rand.Next(3);
								if (num81 == 0 && num78 > 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num78 * 16, 625);
								}
								else if (num81 == 1 && num79 > 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num79 * 16, 615);
								}
								else if (num81 == 2)
								{
									int num82 = num2;
									if (num79 > 0)
									{
										num82 = num79;
									}
									if (Main.player[k].RollLuck(goldCritterChance) == 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num82 * 16, 627);
									}
									else
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num82 * 16, 626);
									}
								}
							}
							else if (num78 > 0 && !flag15)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num78 * 16, 602);
							}
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 602);
						}
					}
					else if ((num49 == 2 || num49 == 477 || num49 == 53) && !tooWindyForButterflies && Main.raining && Main.dayTime && Main.rand.Next(2) == 0 && ((double)num2 <= Main.worldSurface || Main.remixWorld) && FindCattailTop(num, num2, out cattailX, out cattailY))
					{
						if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8, cattailY * 16, 601);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8, cattailY * 16, RollDragonflyType(num49));
						}
						if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8 - 16, cattailY * 16, RollDragonflyType(num49));
						}
						if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8 + 16, cattailY * 16, RollDragonflyType(num49));
						}
					}
					else if (flag7)
					{
						if (flag20 && num2 > 50 && Main.rand.Next(3) != 0 && Main.dayTime)
						{
							int num83 = -1;
							for (int num84 = num2 - 1; num84 > num2 - 50; num84--)
							{
								if (Main.tile[num, num84].liquid == 0 && !WorldGen.SolidTile(num, num84) && !WorldGen.SolidTile(num, num84 + 1) && !WorldGen.SolidTile(num, num84 + 2))
								{
									num83 = num84 + 2;
									break;
								}
							}
							if (num83 > num2)
							{
								num83 = num2;
							}
							if (num83 > 0 && !flag15)
							{
								switch (num3)
								{
								case 60:
									if (Main.rand.Next(3) != 0 && !flag && Main.cloudAlpha == 0f)
									{
										int num87 = Main.rand.Next(1, 4);
										for (int num88 = 0; num88 < num87; num88++)
										{
											if (Main.player[k].RollLuck(goldCritterChance) == 0)
											{
												NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num83 * 16 - 16, 613);
											}
											else
											{
												NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num83 * 16 - 16, 612);
											}
										}
									}
									else
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num83 * 16, 617);
									}
									break;
								case 53:
									if (Main.rand.Next(3) != 0 && !flag && Main.cloudAlpha == 0f)
									{
										int num85 = Main.rand.Next(1, 4);
										for (int num86 = 0; num86 < num85; num86++)
										{
											if (Main.player[k].RollLuck(goldCritterChance) == 0)
											{
												NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num83 * 16 - 16, 613);
											}
											else
											{
												NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num83 * 16 - 16, 612);
											}
										}
									}
									else
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num83 * 16, 608);
									}
									break;
								default:
									if (Main.rand.Next(5) == 0 && (num3 == 2 || num3 == 477))
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num83 * 16, 616);
									}
									else if (Main.rand.Next(2) == 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num83 * 16, 362);
									}
									else
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num83 * 16, 364);
									}
									break;
								}
							}
							else if (num3 == 53 && num > WorldGen.beachDistance && num < Main.maxTilesX - WorldGen.beachDistance)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 607);
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 592);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 55);
							}
						}
						else if (num3 == 53 && num > WorldGen.beachDistance && num < Main.maxTilesX - WorldGen.beachDistance)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 607);
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 592);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 55);
						}
					}
					else if (num49 == 147 || num49 == 161)
					{
						if (Main.rand.Next(2) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 148);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 149);
						}
					}
					else if (num49 == 60)
					{
						if (Main.dayTime && Main.rand.Next(3) != 0)
						{
							switch (Main.rand.Next(5))
							{
							case 0:
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 671);
								break;
							case 1:
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 672);
								break;
							case 2:
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 673);
								break;
							case 3:
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 674);
								break;
							default:
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 675);
								break;
							}
						}
						else
						{
							SpawnNPC_SpawnFrog(num, num2, k);
						}
					}
					else if (num49 == 53)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(366, 368));
					}
					else
					{
						if (num49 != 2 && num49 != 477 && num49 != 109 && num49 != 492 && !((double)num2 > Main.worldSurface))
						{
							if (Main.remixWorld)
							{
								ResetRemixHax();
							}
							break;
						}
						bool flag32 = flag20;
						if (Main.raining && num2 <= Main.UnderworldLayer)
						{
							if (flag21 && Main.rand.Next(5) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, SpawnNPC_GetGemSquirrelToSpawn());
							}
							else if (flag21 && Main.rand.Next(5) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, SpawnNPC_GetGemBunnyToSpawn());
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 448);
							}
							else if (Main.rand.Next(3) != 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 357);
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 593);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 230);
							}
						}
						else if (!Main.dayTime && Main.numClouds <= 55 && Main.cloudBGActive == 0f && Star.starfallBoost > 3f && flag32 && Main.player[k].RollLuck(2) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 484);
						}
						else if (!tooWindyForButterflies && !Main.dayTime && Main.rand.Next(fireFlyFriendly) == 0 && flag32)
						{
							int num89 = 355;
							if (num49 == 109)
							{
								num89 = 358;
							}
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, num89);
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 - 16, num2 * 16, num89);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + 16, num2 * 16, num89);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16 - 16, num89);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16 + 16, num89);
							}
						}
						else if (Main.cloudAlpha == 0f && !Main.dayTime && Main.rand.Next(5) == 0 && flag32)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 611);
						}
						else if (Main.dayTime && Main.time < 18000.0 && Main.rand.Next(3) != 0 && flag32)
						{
							int num90 = Main.rand.Next(4);
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 442);
							}
							else
							{
								switch (num90)
								{
								case 0:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 297);
									break;
								case 1:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 298);
									break;
								default:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 74);
									break;
								}
							}
						}
						else if (!tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(stinkBugChance) == 0 && flag32)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 669);
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 - 16, num2 * 16, 669);
							}
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + 16, num2 * 16, 669);
							}
						}
						else if (!tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(butterflyChance) == 0 && flag32)
						{
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 444);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 356);
							}
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 - 16, num2 * 16, 356);
							}
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + 16, num2 * 16, 356);
							}
						}
						else if (tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(butterflyChance / 2) == 0 && flag32)
						{
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 605);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 604);
							}
							if (Main.rand.Next(3) != 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 604);
							}
							if (Main.rand.Next(2) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 604);
							}
							if (Main.rand.Next(3) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 604);
							}
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 604);
							}
						}
						else if (Main.rand.Next(2) == 0 && flag32)
						{
							int num91 = Main.rand.Next(4);
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 442);
							}
							else
							{
								switch (num91)
								{
								case 0:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 297);
									break;
								case 1:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 298);
									break;
								default:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 74);
									break;
								}
							}
						}
						else if (num2 > Main.UnderworldLayer)
						{
							if (Main.remixWorld && (double)(Main.player[k].Center.X / 16f) > (double)Main.maxTilesX * 0.39 + 50.0 && (double)(Main.player[k].Center.X / 16f) < (double)Main.maxTilesX * 0.61 && Main.rand.Next(2) == 0)
							{
								if (Main.rand.Next(2) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, SpawnNPC_GetGemSquirrelToSpawn());
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, SpawnNPC_GetGemBunnyToSpawn());
								}
							}
							else
							{
								newNPC = SpawnNPC_SpawnLavaBaitCritters(num, num2);
							}
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 443);
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0 && flag32)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 539);
						}
						else if (Main.halloween && Main.rand.Next(3) != 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 303);
						}
						else if (Main.xMas && Main.rand.Next(3) != 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 337);
						}
						else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 540);
						}
						else if (Main.rand.Next(3) == 0)
						{
							if (Main.remixWorld)
							{
								if ((double)num2 < Main.rockLayer && (double)num2 > Main.worldSurface)
								{
									if (Main.rand.Next(5) == 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, SpawnNPC_GetGemSquirrelToSpawn());
									}
								}
								else if (flag32)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Utils.SelectRandom(Main.rand, new short[2] { 299, 538 }));
								}
							}
							else if ((double)num2 >= Main.rockLayer && num2 <= Main.UnderworldLayer)
							{
								if (Main.rand.Next(5) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, SpawnNPC_GetGemSquirrelToSpawn());
								}
							}
							else if (flag32)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Utils.SelectRandom(Main.rand, new short[2] { 299, 538 }));
							}
						}
						else if (Main.remixWorld)
						{
							if ((double)num2 < Main.rockLayer && (double)num2 > Main.worldSurface)
							{
								if ((double)num2 >= Main.rockLayer && num2 <= Main.UnderworldLayer)
								{
									if (Main.rand.Next(5) == 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, SpawnNPC_GetGemBunnyToSpawn());
									}
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 46);
								}
							}
						}
						else if ((double)num2 >= Main.rockLayer && num2 <= Main.UnderworldLayer)
						{
							if (Main.rand.Next(5) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, SpawnNPC_GetGemBunnyToSpawn());
							}
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 46);
						}
					}
				}
				else if (Main.player[k].ZoneDungeon)
				{
					int num92 = 0;
					if (Main.tile[num, num2].wall == 94 || Main.tile[num, num2].wall == 96 || Main.tile[num, num2].wall == 98)
					{
						num92 = 1;
					}
					if (Main.tile[num, num2].wall == 95 || Main.tile[num, num2].wall == 97 || Main.tile[num, num2].wall == 99)
					{
						num92 = 2;
					}
					if (Main.player[k].RollLuck(7) == 0)
					{
						num92 = Main.rand.Next(3);
					}
					bool flag33 = !downedBoss3;
					if (Main.drunkWorld && Main.player[k].position.Y / 16f < (float)(Main.dungeonY + 40))
					{
						flag33 = false;
					}
					if (flag33)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 68);
					}
					else if (downedBoss3 && !savedMech && Main.rand.Next(5) == 0 && !flag7 && !AnyNPCs(123) && (double)num2 > (Main.worldSurface * 4.0 + Main.rockLayer) / 5.0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 123);
					}
					else if (flag14 && Main.rand.Next(30) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 287);
					}
					else if (flag14 && num92 == 0 && Main.rand.Next(15) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 293);
					}
					else if (flag14 && num92 == 1 && Main.rand.Next(15) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 291);
					}
					else if (flag14 && num92 == 2 && Main.rand.Next(15) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 292);
					}
					else if (flag14 && !AnyNPCs(290) && num92 == 0 && Main.rand.Next(35) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 290);
					}
					else if (flag14 && (num92 == 1 || num92 == 2) && Main.rand.Next(30) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 289);
					}
					else if (flag14 && Main.rand.Next(20) == 0)
					{
						int num93 = 281;
						if (num92 == 0)
						{
							num93 += 2;
						}
						if (num92 == 2)
						{
							num93 += 4;
						}
						num93 += Main.rand.Next(2);
						if (!AnyNPCs(num93))
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, num93);
						}
					}
					else if (flag14 && Main.rand.Next(3) != 0)
					{
						int num94 = 269;
						if (num92 == 0)
						{
							num94 += 4;
						}
						if (num92 == 2)
						{
							num94 += 8;
						}
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, num94 + Main.rand.Next(4));
					}
					else if (Main.player[k].RollLuck(35) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 71);
					}
					else if (num92 == 1 && Main.rand.Next(3) == 0 && !NearSpikeBall(num, num2))
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 70);
					}
					else if (num92 == 2 && Main.rand.Next(5) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 72);
					}
					else if (num92 == 0 && Main.rand.Next(7) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 34);
					}
					else if (Main.rand.Next(7) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 32);
					}
					else
					{
						switch (Main.rand.Next(5))
						{
						case 0:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 294);
							break;
						case 1:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 295);
							break;
						case 2:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 296);
							break;
						default:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 31);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-14);
							}
							else if (Main.rand.Next(5) == 0)
							{
								Main.npc[newNPC].SetDefaults(-13);
							}
							break;
						}
					}
				}
				else if (Main.player[k].ZoneMeteor)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 23);
				}
				else if (DD2Event.Ongoing && Main.player[k].ZoneOldOneArmy)
				{
					DD2Event.SpawnNPC(ref newNPC);
				}
				else if ((Main.remixWorld || (double)num2 <= Main.worldSurface) && !Main.dayTime && Main.snowMoon)
				{
					int num95 = waveNumber;
					if (Main.rand.Next(30) == 0 && CountNPCS(341) < 4)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 341);
					}
					else if (num95 >= 20)
					{
						int num96 = Main.rand.Next(3);
						if (!(num5 >= (float)num4 * num6))
						{
							newNPC = num96 switch
							{
								0 => NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 345), 
								1 => NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 346), 
								_ => NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 344), 
							};
						}
					}
					else if (num95 >= 19)
					{
						newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 4) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 5) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) != 0 || CountNPCS(344) >= 7) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 343) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 344))));
					}
					else if (num95 >= 18)
					{
						newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 3) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 4) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 6) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 348) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 343) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 351))))));
					}
					else if (num95 >= 17)
					{
						newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 3) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 5) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(4) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 347) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 343) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 351))))));
					}
					else if (num95 >= 16)
					{
						newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 4) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 343) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 352)))));
					}
					else if (num95 >= 15)
					{
						newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 3) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 343) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 347)))));
					}
					else
					{
						switch (num95)
						{
						case 14:
							if (Main.rand.Next(10) == 0 && !AnyNPCs(345))
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 345);
							}
							else if (Main.rand.Next(10) == 0 && !AnyNPCs(346))
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 346);
							}
							else if (Main.rand.Next(10) == 0 && !AnyNPCs(344))
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 344);
							}
							else if (Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 343);
							}
							break;
						case 13:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(3) != 0) ? ((Main.rand.Next(6) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 347) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 342)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 343)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 352))));
							break;
						case 12:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(8) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 342)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 343))));
							break;
						case 11:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(6) != 0) ? ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 342)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 352)));
							break;
						case 10:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(6) != 0) ? ((Main.rand.Next(3) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 347)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 348)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 351))));
							break;
						case 9:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(2) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 342) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 347)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 348))));
							break;
						case 8:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(8) != 0) ? ((Main.rand.Next(3) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 350) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 347)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 348)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 351)));
							break;
						case 7:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(3) != 0) ? ((Main.rand.Next(4) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 350)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 342)));
							break;
						case 6:
							newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(344) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(4) != 0) ? ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 350) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 348)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 347)));
							break;
						case 5:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(4) != 0) ? ((Main.rand.Next(8) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 348)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 350)));
							break;
						case 4:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(4) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 342)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 350)));
							break;
						case 3:
							newNPC = ((Main.rand.Next(8) != 0) ? ((Main.rand.Next(4) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 342)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 350)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 348));
							break;
						case 2:
							newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 350));
							break;
						default:
							newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 342));
							break;
						}
					}
				}
				else if ((Main.remixWorld || (double)num2 <= Main.worldSurface) && !Main.dayTime && Main.pumpkinMoon)
				{
					int num97 = waveNumber;
					if (waveNumber >= 20)
					{
						if (!(num5 >= (float)num4 * num6))
						{
							if (Main.rand.Next(2) == 0 && CountNPCS(327) < 2)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 327);
							}
							else if (Main.rand.Next(3) != 0 && CountNPCS(325) < 2)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 325);
							}
							else if (CountNPCS(315) < 3)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 315);
							}
						}
					}
					else
					{
						switch (num97)
						{
						case 19:
							if (Main.rand.Next(5) == 0 && CountNPCS(327) < 2)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 327);
							}
							else if (Main.rand.Next(5) == 0 && CountNPCS(325) < 2)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 325);
							}
							else if (!(num5 >= (float)num4 * num6) && CountNPCS(315) < 5)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 315);
							}
							break;
						case 18:
							if (Main.rand.Next(7) == 0 && CountNPCS(327) < 2)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 327);
							}
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(7) != 0 || CountNPCS(315) >= 3) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 330) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 315)));
							break;
						case 17:
							if (Main.rand.Next(7) == 0 && CountNPCS(327) < 2)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 327);
							}
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(7) == 0 && CountNPCS(315) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 315) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 329) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 330))));
							break;
						case 16:
							newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(327) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 327) : ((Main.rand.Next(10) == 0 && CountNPCS(315) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 315) : ((Main.rand.Next(6) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 326) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 329)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 330))));
							break;
						case 15:
							if (Main.rand.Next(10) == 0 && !AnyNPCs(327))
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 327);
							}
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(5) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 326)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 330)));
							break;
						case 14:
							if (Main.rand.Next(10) == 0 && !AnyNPCs(327))
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 327);
							}
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(10) == 0 && !AnyNPCs(315)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 315) : ((Main.rand.Next(10) != 0) ? ((Main.rand.Next(7) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 326)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 329)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 330))));
							break;
						case 13:
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(10) == 0 && CountNPCS(315) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 315) : ((Main.rand.Next(6) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 326) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 329)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 330))));
							break;
						case 12:
							newNPC = ((Main.rand.Next(5) != 0 || AnyNPCs(327)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 330) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 327));
							break;
						case 11:
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 326) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 330)));
							break;
						case 10:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(327)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 327) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 329)));
							break;
						case 9:
							newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(8) != 0) ? ((Main.rand.Next(5) != 0) ? ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 326)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 329)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 330)));
							break;
						case 8:
							newNPC = ((Main.rand.Next(8) == 0 && CountNPCS(315) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 315) : ((Main.rand.Next(4) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 329) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 330)));
							break;
						case 7:
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(4) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 329) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 330)));
							break;
						case 6:
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 326)));
							break;
						case 5:
							newNPC = ((Main.rand.Next(10) != 0 || AnyNPCs(315)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 329) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 315));
							break;
						case 4:
							newNPC = ((Main.rand.Next(8) == 0 && !AnyNPCs(325)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 330) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 326)));
							break;
						case 3:
							newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 326) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 329));
							break;
						case 2:
							newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 326));
							break;
						default:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(305, 315));
							break;
						}
					}
				}
				else if (((double)num2 <= Main.worldSurface || (Main.remixWorld && (double)num2 > Main.rockLayer)) && Main.dayTime && Main.eclipse)
				{
					bool flag34 = false;
					if (downedMechBoss1 && downedMechBoss2 && downedMechBoss3)
					{
						flag34 = true;
					}
					newNPC = ((downedPlantBoss && Main.rand.Next(80) == 0 && !AnyNPCs(477)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 477) : ((Main.rand.Next(50) == 0 && !AnyNPCs(251)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 251) : ((downedPlantBoss && Main.rand.Next(5) == 0 && !AnyNPCs(466)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 466) : ((downedPlantBoss && Main.rand.Next(20) == 0 && !AnyNPCs(463)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 463) : ((downedPlantBoss && Main.rand.Next(20) == 0 && CountNPCS(467) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 467) : ((Main.rand.Next(15) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 159) : ((flag34 && Main.rand.Next(13) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 253) : ((Main.rand.Next(8) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 469) : ((downedPlantBoss && Main.rand.Next(7) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 468) : ((downedPlantBoss && Main.rand.Next(5) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 460) : ((Main.rand.Next(4) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 162) : ((Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 461) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 166) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 462))))))))))))));
				}
				else if (SpawnNPC_CheckToSpawnUndergroundFairy(num, num2, k))
				{
					int num98 = Main.rand.Next(583, 586);
					if (Main.tenthAnniversaryWorld && !Main.getGoodWorld && Main.rand.Next(4) != 0)
					{
						num98 = 583;
					}
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, num98);
					Main.npc[newNPC].ai[2] = 2f;
					Main.npc[newNPC].TargetClosest();
					Main.npc[newNPC].ai[3] = 0f;
				}
				else if (!Main.remixWorld && !flag7 && (!Main.dayTime || Main.tile[num, num2].wall > 0) && Main.tile[num8, num9].wall == 244 && !Main.eclipse && !Main.bloodMoon && Main.player[k].RollLuck(30) == 0 && CountNPCS(624) <= Main.rand.Next(3))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 624);
				}
				else if (!Main.player[k].ZoneCorrupt && !Main.player[k].ZoneCrimson && !flag7 && !Main.eclipse && !Main.bloodMoon && Main.player[k].RollLuck(range) == 0 && ((!Main.remixWorld && (double)num2 >= Main.worldSurface * 0.800000011920929 && (double)num2 < Main.worldSurface * 1.100000023841858) || (Main.remixWorld && (double)num2 > Main.rockLayer && num2 < Main.maxTilesY - 350)) && CountNPCS(624) <= Main.rand.Next(3) && (!Main.dayTime || Main.tile[num, num2].wall > 0) && (Main.tile[num, num2].wall == 63 || Main.tile[num, num2].wall == 2 || Main.tile[num, num2].wall == 196 || Main.tile[num, num2].wall == 197 || Main.tile[num, num2].wall == 198 || Main.tile[num, num2].wall == 199))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 624);
				}
				else if (Main.hardMode && num3 == 70 && flag7)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 256);
				}
				else if (num3 == 70 && (double)num2 <= Main.worldSurface && Main.rand.Next(3) != 0)
				{
					if ((!Main.hardMode && Main.rand.Next(6) == 0) || Main.rand.Next(12) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 360);
					}
					else if (Main.rand.Next(3) != 0)
					{
						newNPC = ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 255) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 254));
					}
					else if (Main.rand.Next(4) != 0)
					{
						newNPC = ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 258) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 257));
					}
					else if (Main.hardMode && Main.rand.Next(3) != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 260);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 259);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
				}
				else if (num3 == 70 && Main.hardMode && (double)num2 >= Main.worldSurface && Main.rand.Next(3) != 0 && (!Main.remixWorld || Main.getGoodWorld || num2 < Main.maxTilesY - 360))
				{
					if (Main.hardMode && Main.player[k].RollLuck(5) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 374);
					}
					else if ((!Main.hardMode && Main.rand.Next(4) == 0) || Main.rand.Next(8) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 360);
					}
					else if (Main.rand.Next(4) != 0)
					{
						newNPC = ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 258) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 257));
					}
					else if (Main.hardMode && Main.rand.Next(3) != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 260);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 259);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
				}
				else if (Main.player[k].ZoneCorrupt && Main.rand.Next(maxValue) == 0 && !flag5)
				{
					newNPC = ((!Main.hardMode || Main.rand.Next(4) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 7, 1) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 98, 1));
				}
				else if (Main.remixWorld && !Main.hardMode && (double)num2 > Main.worldSurface && Main.player[k].RollLuck(100) == 0)
				{
					newNPC = ((!Main.player[k].ZoneSnow) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 85) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 629));
				}
				else if (Main.hardMode && (double)num2 > Main.worldSurface && Main.player[k].RollLuck(Main.tenthAnniversaryWorld ? 25 : 75) == 0)
				{
					newNPC = ((Main.rand.Next(2) == 0 && Main.player[k].ZoneCorrupt && !AnyNPCs(473)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 473) : ((Main.rand.Next(2) == 0 && Main.player[k].ZoneCrimson && !AnyNPCs(474)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 474) : ((Main.rand.Next(2) == 0 && Main.player[k].ZoneHallow && !AnyNPCs(475)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 475) : ((Main.tenthAnniversaryWorld && Main.rand.Next(2) == 0 && Main.player[k].ZoneJungle && !AnyNPCs(476)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 476) : ((!Main.player[k].ZoneSnow) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 85) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 629))))));
				}
				else if (Main.hardMode && Main.tile[num, num2].wall == 2 && Main.rand.Next(20) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 85);
				}
				else if (Main.hardMode && (double)num2 <= Main.worldSurface && !Main.dayTime && (Main.rand.Next(20) == 0 || (Main.rand.Next(5) == 0 && Main.moonPhase == 4)))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 82);
				}
				else if (Main.hardMode && Main.halloween && (double)num2 <= Main.worldSurface && !Main.dayTime && Main.rand.Next(10) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 304);
				}
				else if (num49 == 60 && Main.player[k].RollLuck(500) == 0 && !Main.dayTime)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 52);
				}
				else if (num49 == 60 && (double)num2 > Main.worldSurface && Main.rand.Next(60) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 219);
				}
				else if ((double)num2 > Main.worldSurface && num2 < Main.maxTilesY - 210 && !Main.player[k].ZoneSnow && !Main.player[k].ZoneCrimson && !Main.player[k].ZoneCorrupt && !Main.player[k].ZoneJungle && !Main.player[k].ZoneHallow && Main.rand.Next(8) == 0)
				{
					if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 448);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 357);
					}
				}
				else if ((double)num2 > Main.worldSurface && num2 < Main.maxTilesY - 210 && !Main.player[k].ZoneSnow && !Main.player[k].ZoneCrimson && !Main.player[k].ZoneCorrupt && !Main.player[k].ZoneJungle && !Main.player[k].ZoneHallow && Main.rand.Next(13) == 0)
				{
					if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 447);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 300);
					}
				}
				else if ((double)num2 > Main.worldSurface && (double)num2 < (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && !Main.player[k].ZoneSnow && !Main.player[k].ZoneCrimson && !Main.player[k].ZoneCorrupt && !Main.player[k].ZoneHallow && Main.rand.Next(13) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 359);
				}
				else if (flag20 && Main.player[k].ZoneJungle && Main.rand.Next(7) == 0)
				{
					if (Main.dayTime && Main.time < 43200.00064373016 && Main.rand.Next(3) != 0)
					{
						switch (Main.rand.Next(5))
						{
						case 0:
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 671);
							break;
						case 1:
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 672);
							break;
						case 2:
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 673);
							break;
						case 3:
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 674);
							break;
						default:
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 675);
							break;
						}
					}
					else
					{
						SpawnNPC_SpawnFrog(num, num2, k);
					}
				}
				else if (num49 == 225 && Main.rand.Next(2) == 0)
				{
					if (Main.hardMode && Main.rand.Next(4) != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 176);
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-18);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-19);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-20);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-21);
						}
					}
					else
					{
						switch (Main.rand.Next(8))
						{
						case 0:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 231);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-56);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-57);
							}
							break;
						case 1:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 232);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-58);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-59);
							}
							break;
						case 2:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 233);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-60);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-61);
							}
							break;
						case 3:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 234);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-62);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-63);
							}
							break;
						case 4:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 235);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-64);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-65);
							}
							break;
						default:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 42);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-16);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-17);
							}
							break;
						}
					}
				}
				else if (num49 == 60 && Main.hardMode && Main.rand.Next(3) != 0)
				{
					if (flag20 && !Main.dayTime && Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 152);
					}
					else if (flag20 && Main.dayTime && Main.rand.Next(4) != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 177);
					}
					else if ((double)num2 > Main.worldSurface && Main.rand.Next(100) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 205);
					}
					else if ((double)num2 > Main.worldSurface && Main.rand.Next(5) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 236);
					}
					else if ((double)num2 > Main.worldSurface && Main.rand.Next(4) != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 176);
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-18);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-19);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-20);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-21);
						}
					}
					else if (Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 175);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 153);
					}
				}
				else if (((num49 == 226 || num49 == 232) && flag4) || (Main.remixWorld && flag4))
				{
					newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 198) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 226));
				}
				else if (num50 == 86 && Main.rand.Next(8) != 0)
				{
					switch (Main.rand.Next(8))
					{
					case 0:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 231);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-56);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-57);
						}
						break;
					case 1:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 232);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-58);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-59);
						}
						break;
					case 2:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 233);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-60);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-61);
						}
						break;
					case 3:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 234);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-62);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-63);
						}
						break;
					case 4:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 235);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-64);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-65);
						}
						break;
					default:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 42);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-16);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-17);
						}
						break;
					}
				}
				else if (num49 == 60 && ((!Main.remixWorld && (double)num2 > (Main.worldSurface + Main.rockLayer) / 2.0) || (Main.remixWorld && ((double)num2 < Main.rockLayer || Main.rand.Next(2) == 0))))
				{
					if (Main.rand.Next(4) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 204);
					}
					else if (Main.rand.Next(4) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 43);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
					else
					{
						switch (Main.rand.Next(8))
						{
						case 0:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 231);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-56);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-57);
							}
							break;
						case 1:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 232);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-58);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-59);
							}
							break;
						case 2:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 233);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-60);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-61);
							}
							break;
						case 3:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 234);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-62);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-63);
							}
							break;
						case 4:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 235);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-64);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-65);
							}
							break;
						default:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 42);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-16);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-17);
							}
							break;
						}
					}
				}
				else if (num49 == 60 && Main.rand.Next(4) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 51);
				}
				else if (num49 == 60 && Main.rand.Next(8) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 56);
					Main.npc[newNPC].ai[0] = num;
					Main.npc[newNPC].ai[1] = num2;
					Main.npc[newNPC].netUpdate = true;
				}
				else if (Sandstorm.Happening && Main.player[k].ZoneSandstorm && TileID.Sets.Conversion.Sand[num49] && Spawning_SandstoneCheck(num, num2))
				{
					if (!downedBoss1 && !Main.hardMode)
					{
						newNPC = ((Main.rand.Next(2) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 546) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 69) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 61)));
					}
					else if (Main.hardMode && Main.rand.Next(20) == 0 && !AnyNPCs(541))
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 541);
					}
					else if (Main.hardMode && !flag5 && Main.rand.Next(3) == 0 && CountNPCS(510) < 4)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, (num2 + 10) * 16, 510);
					}
					else if (!Main.hardMode || flag5 || Main.rand.Next(2) != 0)
					{
						newNPC = ((Main.hardMode && num49 == 53 && Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 78) : ((Main.hardMode && num49 == 112 && Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 79) : ((Main.hardMode && num49 == 234 && Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 630) : ((Main.hardMode && num49 == 116 && Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 80) : ((Main.rand.Next(2) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 546) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 581) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 580)))))));
					}
					else
					{
						int num99 = 542;
						if (TileID.Sets.Corrupt[num49])
						{
							num99 = 543;
						}
						if (TileID.Sets.Crimson[num49])
						{
							num99 = 544;
						}
						if (TileID.Sets.Hallow[num49])
						{
							num99 = 545;
						}
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, num99);
					}
				}
				else if (Main.hardMode && num49 == 53 && Main.rand.Next(3) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 78);
				}
				else if (Main.hardMode && num49 == 112 && Main.rand.Next(2) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 79);
				}
				else if (Main.hardMode && num49 == 234 && Main.rand.Next(2) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 630);
				}
				else if (Main.hardMode && num49 == 116 && Main.rand.Next(2) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 80);
				}
				else if (Main.hardMode && !flag7 && flag17 && (num49 == 116 || num49 == 117 || num49 == 109 || num49 == 164))
				{
					if (downedPlantBoss && (Main.remixWorld || (!Main.dayTime && Main.time < 16200.0)) && flag20 && Main.player[k].RollLuck(10) == 0 && !AnyNPCs(661))
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 661);
					}
					else if (!(Main.cloudAlpha > 0f) || AnyNPCs(244) || Main.rand.Next(12) != 0)
					{
						newNPC = ((!Main.dayTime && Main.rand.Next(2) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 122) : ((Main.rand.Next(10) != 0 && (!Main.player[k].ZoneWaterCandle || Main.rand.Next(10) != 0)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 75) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 86)));
					}
					else
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 244);
					}
				}
				else if (!flag5 && Main.hardMode && Main.rand.Next(50) == 0 && !flag7 && flag21 && (num49 == 116 || num49 == 117 || num49 == 109 || num49 == 164))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 84);
				}
				else if ((num49 == 204 && Main.player[k].ZoneCrimson) || num49 == 199 || num49 == 200 || num49 == 203 || num49 == 234 || num49 == 662)
				{
					bool flag35 = (double)num2 >= Main.rockLayer;
					if (Main.remixWorld)
					{
						flag35 = (double)num2 <= Main.rockLayer;
					}
					if (Main.hardMode && flag35 && Main.rand.Next(40) == 0 && !flag5)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 179);
					}
					else if (Main.hardMode && flag35 && Main.rand.Next(5) == 0 && !flag5)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 182);
					}
					else if (Main.hardMode && flag35 && Main.rand.Next(2) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 268);
					}
					else if (Main.hardMode && Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 183);
						if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-24);
						}
						else if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-25);
						}
					}
					else if (Main.hardMode && (Main.rand.Next(2) == 0 || ((double)num2 > Main.worldSurface && !Main.remixWorld)))
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 174);
					}
					else if ((Main.tile[num, num2].wall > 0 && Main.rand.Next(4) != 0) || Main.rand.Next(8) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 239);
					}
					else if (Main.rand.Next(2) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 181);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 173);
						if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-22);
						}
						else if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-23);
						}
					}
				}
				else if ((num49 == 22 && Main.player[k].ZoneCorrupt) || num49 == 23 || num49 == 25 || num49 == 112 || num49 == 163 || num49 == 661)
				{
					bool flag36 = (double)num2 >= Main.rockLayer;
					if (Main.remixWorld)
					{
						flag36 = (double)num2 <= Main.rockLayer;
					}
					if (Main.hardMode && flag36 && Main.rand.Next(40) == 0 && !flag5)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 83);
					}
					else if (Main.hardMode && flag36 && Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 101);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
					else if (Main.hardMode && Main.rand.Next(3) == 0)
					{
						newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 81) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 121));
					}
					else if (Main.hardMode && (Main.rand.Next(2) == 0 || flag36))
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 94);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 6);
						if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-11);
						}
						else if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-12);
						}
					}
				}
				else if (flag20)
				{
					bool flag37 = (float)Math.Abs(num - Main.maxTilesX / 2) / (float)(Main.maxTilesX / 2) > 0.33f;
					if (flag37 && AnyDanger())
					{
						flag37 = false;
					}
					if (Main.player[k].ZoneGraveyard && !flag7 && (num3 == 2 || num3 == 477) && Main.rand.Next(10) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 606);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 610);
						}
					}
					else if (Main.player[k].ZoneSnow && Main.hardMode && Main.cloudAlpha > 0f && !AnyNPCs(243) && Main.player[k].RollLuck(20) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 243);
					}
					else if (!Main.player[k].ZoneSnow && Main.hardMode && Main.cloudAlpha > 0f && CountNPCS(250) < 2 && Main.rand.Next(10) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 250);
					}
					else if (flag37 && Main.hardMode && downedGolemBoss && ((!downedMartians && Main.rand.Next(100) == 0) || Main.rand.Next(400) == 0) && !AnyNPCs(399))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 399);
					}
					else if (!Main.player[k].ZoneGraveyard && Main.dayTime)
					{
						int num100 = Math.Abs(num - Main.spawnTileX);
						if (!flag7 && num100 < Main.maxTilesX / 2 && Main.rand.Next(15) == 0 && (num49 == 2 || num49 == 477 || num49 == 109 || num49 == 492 || num49 == 147 || num49 == 161))
						{
							if (num49 == 147 || num49 == 161)
							{
								if (Main.rand.Next(2) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 148);
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 149);
								}
							}
							else if (!tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(stinkBugChance) == 0 && flag20)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 669);
								if (Main.rand.Next(4) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 - 16, num2 * 16, 669);
								}
								if (Main.rand.Next(4) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + 16, num2 * 16, 669);
								}
							}
							else if (!tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(butterflyChance) == 0 && flag20)
							{
								if (Main.player[k].RollLuck(goldCritterChance) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 444);
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 356);
								}
								if (Main.rand.Next(4) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 - 16, num2 * 16, 356);
								}
								if (Main.rand.Next(4) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + 16, num2 * 16, 356);
								}
							}
							else if (tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(butterflyChance / 2) == 0 && flag20)
							{
								if (Main.player[k].RollLuck(goldCritterChance) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 605);
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 604);
								}
								if (Main.rand.Next(3) != 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 604);
								}
								if (Main.rand.Next(2) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 604);
								}
								if (Main.rand.Next(3) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 604);
								}
								if (Main.rand.Next(4) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 604);
								}
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 443);
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0 && (double)num2 <= Main.worldSurface)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 539);
							}
							else if (Main.halloween && Main.rand.Next(3) != 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 303);
							}
							else if (Main.xMas && Main.rand.Next(3) != 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 337);
							}
							else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 540);
							}
							else if (Main.rand.Next(3) == 0 && (double)num2 <= Main.worldSurface)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Utils.SelectRandom(Main.rand, new short[2] { 299, 538 }));
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 46);
							}
						}
						else if (!flag7 && num > WorldGen.beachDistance && num < Main.maxTilesX - WorldGen.beachDistance && Main.rand.Next(12) == 0 && num49 == 53)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(366, 368));
						}
						else if ((num49 == 2 || num49 == 477 || num49 == 53) && !tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(3) != 0 && ((double)num2 <= Main.worldSurface || Main.remixWorld) && FindCattailTop(num, num2, out cattailX, out cattailY))
						{
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8, cattailY * 16, 601);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8, cattailY * 16, RollDragonflyType(num49));
							}
							if (Main.rand.Next(3) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8 - 16, cattailY * 16, RollDragonflyType(num49));
							}
							if (Main.rand.Next(3) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8 + 16, cattailY * 16, RollDragonflyType(num49));
							}
						}
						else if (!flag7 && num100 < Main.maxTilesX / 3 && Main.dayTime && Main.time < 18000.0 && (num49 == 2 || num49 == 477 || num49 == 109 || num49 == 492) && Main.rand.Next(4) == 0 && (double)num2 <= Main.worldSurface && CountNPCS(74) + CountNPCS(297) + CountNPCS(298) < 6)
						{
							int num101 = Main.rand.Next(4);
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 442);
							}
							else
							{
								switch (num101)
								{
								case 0:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 297);
									break;
								case 1:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 298);
									break;
								default:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 74);
									break;
								}
							}
						}
						else if (!flag7 && num100 < Main.maxTilesX / 3 && Main.rand.Next(15) == 0 && (num49 == 2 || num49 == 477 || num49 == 109 || num49 == 492 || num49 == 147))
						{
							int num102 = Main.rand.Next(4);
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 442);
							}
							else
							{
								switch (num102)
								{
								case 0:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 297);
									break;
								case 1:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 298);
									break;
								default:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 74);
									break;
								}
							}
						}
						else if (!flag7 && num100 > Main.maxTilesX / 3 && num49 == 2 && Main.rand.Next(300) == 0 && !AnyNPCs(50))
						{
							SpawnOnPlayer(k, 50);
						}
						else if (!flag15 && num49 == 53 && (num < WorldGen.beachDistance || num > Main.maxTilesX - WorldGen.beachDistance))
						{
							if (!flag7 && Main.rand.Next(10) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 602);
							}
							else if (flag7)
							{
								int num103 = -1;
								int num104 = -1;
								if ((double)num2 < Main.worldSurface && num2 > 50)
								{
									for (int num105 = num2 - 1; num105 > num2 - 50; num105--)
									{
										if (Main.tile[num, num105].liquid == 0 && !WorldGen.SolidTile(num, num105) && !WorldGen.SolidTile(num, num105 + 1) && !WorldGen.SolidTile(num, num105 + 2))
										{
											num103 = num105 + 2;
											if (!WorldGen.SolidTile(num, num103 + 1) && !WorldGen.SolidTile(num, num103 + 2))
											{
												num104 = num103 + 2;
											}
											break;
										}
									}
									if (num103 > num2)
									{
										num103 = num2;
									}
									if (num104 > num2)
									{
										num104 = num2;
									}
								}
								if (Main.rand.Next(10) == 0)
								{
									int num106 = Main.rand.Next(3);
									if (num106 == 0 && num103 > 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num103 * 16, 625);
									}
									else if (num106 == 1 && num104 > 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num104 * 16, 615);
									}
									else if (num106 == 2)
									{
										int num107 = num2;
										if (num104 > 0)
										{
											num107 = num104;
										}
										if (Main.player[k].RollLuck(goldCritterChance) == 0)
										{
											NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num107 * 16, 627);
										}
										else
										{
											NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num107 * 16, 626);
										}
									}
								}
							}
						}
						else if (!flag7 && num49 == 53 && Main.rand.Next(5) == 0 && Spawning_SandstoneCheck(num, num2) && !flag7)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 69);
						}
						else if (num49 == 53 && !flag7)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 61);
						}
						else if (!flag7 && (num100 > Main.maxTilesX / 3 || Main.remixWorld) && (Main.rand.Next(15) == 0 || (!downedGoblins && WorldGen.shadowOrbSmashed && Main.rand.Next(7) == 0)))
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 73);
						}
						else if (Main.raining && Main.rand.Next(4) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 224);
						}
						else if (!flag7 && Main.raining && Main.rand.Next(2) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 225);
						}
						else if (!flag7 && num50 == 0 && isItAHappyWindyDay && flag19 && Main.rand.Next(3) != 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 594);
						}
						else if (!flag7 && num50 == 0 && (num3 == 2 || num3 == 477) && isItAHappyWindyDay && flag19 && Main.rand.Next(10) != 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 628);
						}
						else if (!flag7)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 1);
							switch (num49)
							{
							case 60:
								Main.npc[newNPC].SetDefaults(-10);
								break;
							case 147:
							case 161:
								Main.npc[newNPC].SetDefaults(147);
								break;
							default:
								if (Main.halloween && Main.rand.Next(3) != 0)
								{
									Main.npc[newNPC].SetDefaults(302);
								}
								else if (Main.xMas && Main.rand.Next(3) != 0)
								{
									Main.npc[newNPC].SetDefaults(Main.rand.Next(333, 337));
								}
								else if (Main.rand.Next(3) == 0 || (num100 < 200 && !Main.expertMode))
								{
									Main.npc[newNPC].SetDefaults(-3);
								}
								else if (Main.rand.Next(10) == 0 && (num100 > 400 || Main.expertMode))
								{
									Main.npc[newNPC].SetDefaults(-7);
								}
								break;
							}
						}
					}
					else
					{
						if (!Main.player[k].ZoneGraveyard && !tooWindyForButterflies && (num49 == 2 || num49 == 477 || num49 == 109 || num49 == 492) && !Main.raining && Main.rand.Next(fireFlyChance) == 0 && (double)num2 <= Main.worldSurface)
						{
							int num108 = 355;
							if (num49 == 109)
							{
								num108 = 358;
							}
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, num108);
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 - 16, num2 * 16, num108);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + 16, num2 * 16, num108);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16 - 16, num108);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16 + 16, num108);
							}
						}
						else if ((Main.halloween || Main.player[k].ZoneGraveyard) && Main.rand.Next(12) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 301);
						}
						else if (Main.player[k].ZoneGraveyard && Main.rand.Next(30) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 316);
						}
						else if (Main.player[k].ZoneGraveyard && Main.hardMode && (double)num2 <= Main.worldSurface && Main.rand.Next(10) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 304);
						}
						else if (Main.rand.Next(6) == 0 || (Main.moonPhase == 4 && Main.rand.Next(2) == 0))
						{
							if (Main.hardMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 133);
							}
							else if (Main.halloween && Main.rand.Next(2) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(317, 319));
							}
							else if (Main.rand.Next(2) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 2);
								if (Main.rand.Next(4) == 0)
								{
									Main.npc[newNPC].SetDefaults(-43);
								}
							}
							else
							{
								switch (Main.rand.Next(5))
								{
								case 0:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 190);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-38);
									}
									break;
								case 1:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 191);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-39);
									}
									break;
								case 2:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 192);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-40);
									}
									break;
								case 3:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 193);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-41);
									}
									break;
								case 4:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 194);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-42);
									}
									break;
								}
							}
						}
						else if (Main.hardMode && Main.rand.Next(50) == 0 && Main.bloodMoon && !AnyNPCs(109))
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 109);
						}
						else if (Main.rand.Next(250) == 0 && (Main.bloodMoon || Main.player[k].ZoneGraveyard))
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 53);
						}
						else if (Main.rand.Next(250) == 0 && (Main.bloodMoon || Main.player[k].ZoneGraveyard))
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 536);
						}
						else if (!Main.dayTime && Main.moonPhase == 0 && Main.hardMode && Main.rand.Next(3) != 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 104);
						}
						else if (!Main.dayTime && Main.hardMode && Main.rand.Next(3) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 140);
						}
						else if (Main.bloodMoon && Main.rand.Next(5) < 2)
						{
							newNPC = ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 490) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 489));
						}
						else if (num3 == 147 || num3 == 161 || num3 == 163 || num3 == 164 || num3 == 162)
						{
							newNPC = ((!Main.player[k].ZoneGraveyard && Main.hardMode && Main.rand.Next(4) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 169) : ((!Main.player[k].ZoneGraveyard && Main.hardMode && Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 155) : ((!Main.expertMode || Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 161) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 431))));
						}
						else if (Main.raining && Main.rand.Next(2) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 223);
							if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.npc[newNPC].SetDefaults(-54);
								}
								else
								{
									Main.npc[newNPC].SetDefaults(-55);
								}
							}
						}
						else
						{
							int num109 = Main.rand.Next(7);
							int num110 = 12;
							int maxValue4 = 20;
							if (Main.player[k].statLifeMax <= 100)
							{
								num110 = 5;
								num110 -= Main.CurrentFrameFlags.ActivePlayersCount / 2;
								if (num110 < 2)
								{
									num110 = 2;
								}
							}
							if (Main.player[k].ZoneGraveyard && Main.rand.Next(maxValue4) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 632);
							}
							else if (Main.rand.Next(num110) == 0)
							{
								newNPC = ((!Main.expertMode || Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 590) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 591));
							}
							else if (Main.halloween && Main.rand.Next(2) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(319, 322));
							}
							else if (Main.xMas && Main.rand.Next(2) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(331, 333));
							}
							else if (num109 == 0 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 430);
							}
							else if (num109 == 2 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 432);
							}
							else if (num109 == 3 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 433);
							}
							else if (num109 == 4 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 434);
							}
							else if (num109 == 5 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 435);
							}
							else if (num109 == 6 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 436);
							}
							else
							{
								switch (num109)
								{
								case 0:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 3);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-26);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-27);
										}
									}
									break;
								case 1:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 132);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-28);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-29);
										}
									}
									break;
								case 2:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 186);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-30);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-31);
										}
									}
									break;
								case 3:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 187);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-32);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-33);
										}
									}
									break;
								case 4:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 188);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-34);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-35);
										}
									}
									break;
								case 5:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 189);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-36);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-37);
										}
									}
									break;
								case 6:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 200);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-44);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-45);
										}
									}
									break;
								}
							}
						}
						if (Main.player[k].ZoneGraveyard)
						{
							Main.npc[newNPC].target = k;
						}
					}
				}
				else if (flag17)
				{
					if (!flag5 && Main.rand.Next(50) == 0 && !Main.player[k].ZoneSnow)
					{
						newNPC = ((!Main.hardMode) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 10, 1) : ((Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 10, 1) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 95, 1)));
					}
					else if (Main.hardMode && Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 140);
					}
					else if (Main.hardMode && Main.rand.Next(4) != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 141);
					}
					else if (Main.remixWorld)
					{
						if (num3 == 147 || num3 == 161 || num3 == 163 || num3 == 164 || num3 == 162 || Main.player[k].ZoneSnow)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 147);
						}
						else
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 1);
							if (Main.rand.Next(3) == 0)
							{
								Main.npc[newNPC].SetDefaults(-9);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-8);
							}
						}
					}
					else if (num49 == 147 || num49 == 161 || Main.player[k].ZoneSnow)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 147);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 1);
						if (Main.rand.Next(5) == 0)
						{
							Main.npc[newNPC].SetDefaults(-9);
						}
						else if (Main.rand.Next(2) == 0)
						{
							Main.npc[newNPC].SetDefaults(1);
						}
						else
						{
							Main.npc[newNPC].SetDefaults(-8);
						}
					}
				}
				else if (num2 > Main.maxTilesY - 190)
				{
					newNPC = ((Main.remixWorld && (double)num > (double)Main.maxTilesX * 0.38 + 50.0 && (double)num < (double)Main.maxTilesX * 0.62) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 59) : ((Main.hardMode && !savedTaxCollector && Main.rand.Next(20) == 0 && !AnyNPCs(534)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 534) : ((Main.rand.Next(8) == 0) ? SpawnNPC_SpawnLavaBaitCritters(num, num2) : ((Main.rand.Next(40) == 0 && !AnyNPCs(39)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 39, 1) : ((Main.rand.Next(14) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 24) : ((Main.rand.Next(7) == 0) ? ((Main.rand.Next(10) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 66) : ((!Main.hardMode || !downedMechBossAny || Main.rand.Next(5) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 62) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 156))) : ((Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 59) : ((!Main.hardMode || !downedMechBossAny || Main.rand.Next(5) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 60) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 151)))))))));
				}
				else if (SpawnNPC_CheckToSpawnRockGolem(num, num2, k, num49))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 631);
				}
				else if (Main.rand.Next(60) == 0)
				{
					newNPC = ((!Main.player[k].ZoneSnow) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 217) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 218));
				}
				else if ((num49 == 116 || num49 == 117 || num49 == 164) && Main.hardMode && !flag5 && Main.rand.Next(8) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 120);
				}
				else if ((num3 == 147 || num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164 || num3 == 200) && !flag5 && Main.hardMode && Main.player[k].ZoneCorrupt && Main.rand.Next(30) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 170);
				}
				else if ((num3 == 147 || num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164 || num3 == 200) && !flag5 && Main.hardMode && Main.player[k].ZoneHallow && Main.rand.Next(30) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 171);
				}
				else if ((num3 == 147 || num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164 || num3 == 200) && !flag5 && Main.hardMode && Main.player[k].ZoneCrimson && Main.rand.Next(30) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 180);
				}
				else if (Main.hardMode && Main.player[k].ZoneSnow && Main.rand.Next(10) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 154);
				}
				else if (!flag5 && Main.rand.Next(100) == 0 && !Main.player[k].ZoneHallow)
				{
					newNPC = (Main.hardMode ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 95, 1) : ((!Main.player[k].ZoneSnow) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 10, 1) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 185)));
				}
				else if (Main.player[k].ZoneSnow && Main.rand.Next(20) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 185);
				}
				else if ((!Main.hardMode && Main.rand.Next(10) == 0) || (Main.hardMode && Main.rand.Next(20) == 0))
				{
					if (Main.player[k].ZoneSnow)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 184);
					}
					else if (Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 1);
						Main.npc[newNPC].SetDefaults(-6);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 16);
					}
				}
				else if (!Main.hardMode && Main.rand.Next(4) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 1);
					if (Main.player[k].ZoneJungle)
					{
						Main.npc[newNPC].SetDefaults(-10);
					}
					else if (Main.player[k].ZoneSnow)
					{
						Main.npc[newNPC].SetDefaults(184);
					}
					else
					{
						Main.npc[newNPC].SetDefaults(-6);
					}
				}
				else if (Main.rand.Next(2) != 0)
				{
					newNPC = ((Main.hardMode && (Main.player[k].ZoneHallow & (Main.rand.Next(2) == 0))) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 138) : (Main.player[k].ZoneJungle ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 51) : ((Main.player[k].ZoneGlowshroom && (num3 == 70 || num3 == 190)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 634) : ((Main.hardMode && Main.player[k].ZoneHallow) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 137) : ((Main.hardMode && Main.rand.Next(6) > 0) ? ((Main.rand.Next(3) != 0 || (num3 != 147 && num3 != 161 && num3 != 162)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 93) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 150)) : ((num3 != 147 && num3 != 161 && num3 != 162) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 49) : ((!Main.hardMode) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 150) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 169))))))));
				}
				else if (Main.rand.Next(35) == 0 && CountNPCS(453) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 453);
				}
				else if (Main.rand.Next(80) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 195);
				}
				else if (Main.hardMode && (Main.remixWorld || (double)num2 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0) && Main.rand.Next(200) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 172);
				}
				else if ((Main.remixWorld || (double)num2 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0) && (Main.rand.Next(200) == 0 || (Main.rand.Next(50) == 0 && (Main.player[k].armor[1].type == 4256 || (Main.player[k].armor[1].type >= 1282 && Main.player[k].armor[1].type <= 1287)) && Main.player[k].armor[0].type != 238)))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 45);
				}
				else if (flag10 && Main.rand.Next(4) != 0)
				{
					newNPC = ((Main.rand.Next(6) == 0 || AnyNPCs(480) || !Main.hardMode) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 481) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 480));
				}
				else if (flag9 && Main.rand.Next(5) != 0)
				{
					newNPC = ((Main.rand.Next(6) == 0 || AnyNPCs(483)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 482) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 483));
				}
				else if (Main.hardMode && Main.rand.Next(10) != 0)
				{
					if (Main.rand.Next(2) != 0)
					{
						newNPC = ((!Main.player[k].ZoneSnow) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 110) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 206));
					}
					else if (Main.player[k].ZoneSnow)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 197);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 77);
						if ((Main.remixWorld || (double)num2 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0) && Main.rand.Next(5) == 0)
						{
							Main.npc[newNPC].SetDefaults(-15);
						}
					}
				}
				else if (!flag5 && (Main.halloween || Main.player[k].ZoneGraveyard) && Main.rand.Next(30) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 316);
				}
				else if (Main.rand.Next(20) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 44);
				}
				else if (num3 == 147 || num3 == 161 || num3 == 162)
				{
					newNPC = ((Main.rand.Next(15) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 167) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 185));
				}
				else if (Main.player[k].ZoneSnow)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 185);
				}
				else if (Main.rand.Next(3) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, cavernMonsterType[Main.rand.Next(2), Main.rand.Next(3)]);
				}
				else if (Main.player[k].ZoneGlowshroom && (num3 == 70 || num3 == 190))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 635);
				}
				else if (Main.halloween && Main.rand.Next(2) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, Main.rand.Next(322, 325));
				}
				else if (Main.expertMode && Main.rand.Next(3) == 0)
				{
					int num111 = Main.rand.Next(4);
					newNPC = ((num111 == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 449) : ((num111 == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 450) : ((num111 != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 452) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 451))));
				}
				else
				{
					switch (Main.rand.Next(4))
					{
					case 0:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 21);
						if (Main.rand.Next(3) == 0)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.npc[newNPC].SetDefaults(-47);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-46);
							}
						}
						break;
					case 1:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 201);
						if (Main.rand.Next(3) == 0)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.npc[newNPC].SetDefaults(-49);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-48);
							}
						}
						break;
					case 2:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 202);
						if (Main.rand.Next(3) == 0)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.npc[newNPC].SetDefaults(-51);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-50);
							}
						}
						break;
					case 3:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num2 * 16, 203);
						if (Main.rand.Next(3) == 0)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.npc[newNPC].SetDefaults(-53);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-52);
							}
						}
						break;
					}
				}
				if (Main.npc[newNPC].type == 1 && Main.player[k].RollLuck(180) == 0)
				{
					Main.npc[newNPC].SetDefaults(-4);
				}
				if (Main.tenthAnniversaryWorld && Main.npc[newNPC].type == 1 && Main.player[k].RollLuck(180) == 0)
				{
					Main.npc[newNPC].SetDefaults(667);
				}
				if (Main.netMode == 2 && newNPC < 200)
				{
					NetMessage.SendData(23, -1, -1, null, newNPC);
				}
				if (Main.remixWorld)
				{
					ResetRemixHax();
				}
				break;
			}
		}

		public static void SpawnNPC_SpawnFrog(int spawnTileX, int spawnTileY, int plr)
		{
			if (!unlockedSlimeYellowSpawn && Main.player[plr].RollLuck(50) == 0 && !AnyNPCs(687))
			{
				NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 687);
			}
			else if (Main.player[plr].RollLuck(goldCritterChance) == 0)
			{
				NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 445);
			}
			else
			{
				NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 361);
			}
		}

		public static int SpawnNPC_GetGemBunnyToSpawn()
		{
			int num = Main.rand.Next(100);
			if (num < 5)
			{
				return 651;
			}
			if (num < 13)
			{
				return 652;
			}
			if (num < 23)
			{
				return 650;
			}
			if (num < 35)
			{
				return 649;
			}
			if (num < 51)
			{
				return 648;
			}
			if (num < 72)
			{
				return 647;
			}
			return 646;
		}

		public static int SpawnNPC_GetGemSquirrelToSpawn()
		{
			int num = Main.rand.Next(100);
			if (num < 5)
			{
				return 644;
			}
			if (num < 13)
			{
				return 645;
			}
			if (num < 23)
			{
				return 643;
			}
			if (num < 35)
			{
				return 642;
			}
			if (num < 51)
			{
				return 641;
			}
			if (num < 72)
			{
				return 640;
			}
			return 639;
		}

		private static bool SpawnNPC_CheckToSpawnRockGolem(int spawnTileX, int spawnTileY, int plr, int tileType)
		{
			if (!Main.hardMode || (tileType != 1 && !TileID.Sets.Conversion.Moss[tileType]) || Main.player[plr].ZoneSnow)
			{
				return false;
			}
			if (Main.rand.Next(60) != 0)
			{
				return false;
			}
			if (WorldGen.SolidTile(spawnTileX - 1, spawnTileY - 4) || WorldGen.SolidTile(spawnTileX, spawnTileY - 4) || WorldGen.SolidTile(spawnTileX + 1, spawnTileY - 4))
			{
				return false;
			}
			return true;
		}

		private static bool SpawnNPC_CheckToSpawnUndergroundFairy(int spawnTileX, int spawnTileY, int plr)
		{
			if (!fairyLog)
			{
				return false;
			}
			int num = 500;
			if (Main.tenthAnniversaryWorld && !Main.getGoodWorld)
			{
				num = 250;
			}
			if (Main.hardMode)
			{
				num = (int)((float)num * 1.66f);
			}
			if (Main.player[plr].RollLuck(num) != 0)
			{
				return false;
			}
			if ((double)spawnTileY < (Main.worldSurface + Main.rockLayer) / 2.0 || spawnTileY >= Main.maxTilesY - 300)
			{
				return false;
			}
			if (AnyHelpfulFairies())
			{
				return false;
			}
			return true;
		}

		private static int SpawnNPC_SpawnLavaBaitCritters(int spawnTileX, int spawnTileY)
		{
			if (Main.rand.Next(3) != 0)
			{
				if (Main.dayTime)
				{
					return NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 653);
				}
				if (Main.rand.Next(fireFlyMultiple) == 0)
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8 - 16, spawnTileY * 16, 654);
				}
				if (Main.rand.Next(fireFlyMultiple) == 0)
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8 + 16, spawnTileY * 16, 654);
				}
				if (Main.rand.Next(fireFlyMultiple) == 0)
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16 - 16, 654);
				}
				if (Main.rand.Next(fireFlyMultiple) == 0)
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16 + 16, 654);
				}
				return NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 654);
			}
			return NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 655);
		}

		private static int SpawnNPC_TryFindingProperGroundTileType(int spawnTileType, int x, int y)
		{
			if (!IsValidSpawningGroundTile(x, y))
			{
				for (int i = y + 1; i < y + 30; i++)
				{
					if (IsValidSpawningGroundTile(x, i))
					{
						return Main.tile[x, i].type;
					}
				}
			}
			return spawnTileType;
		}

		public static bool IsValidSpawningGroundTile(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (!tile.nactive())
			{
				return false;
			}
			if (!Main.tileSolid[tile.type] || Main.tileSolidTop[tile.type])
			{
				return false;
			}
			if (TileID.Sets.IsSkippedForNPCSpawningGroundTypeCheck[tile.type])
			{
				return false;
			}
			return true;
		}

		public static bool FindCattailTop(int landX, int landY, out int cattailX, out int cattailY)
		{
			cattailX = landX;
			cattailY = landY;
			if (!WorldGen.InWorld(landX, landY, 31))
			{
				return false;
			}
			int num = 1;
			for (int i = landX - 30; i <= landX + 30; i++)
			{
				for (int j = landY - 20; j <= landY + 20; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile != null && tile.active() && tile.type == 519 && tile.frameX >= 180 && Main.rand.Next(num) == 0)
					{
						cattailX = i;
						cattailY = j;
						num++;
					}
				}
			}
			if (cattailX != landX || cattailY != landY)
			{
				return true;
			}
			return false;
		}

		public static bool FindTreeBranch(int landX, int landY, out int treeBranchX, out int treeBranchY)
		{
			treeBranchX = landX;
			treeBranchY = landY;
			if (!WorldGen.InWorld(landX, landY, 11))
			{
				return false;
			}
			int num = 1;
			for (int i = landX - 10; i <= landX + 10; i++)
			{
				for (int j = landY - 30; j <= landY + 30; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile != null && tile.active() && TileID.Sets.IsATreeTrunk[tile.type])
					{
						int num2 = tile.frameX / 22;
						int num3 = tile.frameY / 66;
						if (((num2 == 3 && num3 == 0) || (num2 == 3 && num3 == 3) || (num2 == 4 && num3 == 1) || (num2 == 4 && num3 == 3) || (num2 == 2 && num3 == 3)) && Main.rand.Next(num) == 0)
						{
							treeBranchX = i;
							treeBranchY = j;
							num++;
						}
					}
				}
			}
			if (treeBranchX != landX || treeBranchY != landY)
			{
				return true;
			}
			return false;
		}

		public static bool AnyDanger(bool quickBossNPCCheck = false, bool ignorePillarsAndMoonlordCountdown = false)
		{
			bool flag = false;
			if (!ignorePillarsAndMoonlordCountdown && MoonLordCountdown > 0)
			{
				flag = true;
			}
			if (Main.invasionType > 0)
			{
				flag = true;
			}
			if (Main.snowMoon || Main.pumpkinMoon || DD2Event.Ongoing)
			{
				flag = true;
			}
			if (!flag)
			{
				if (quickBossNPCCheck)
				{
					flag |= Main.CurrentFrameFlags.AnyActiveBossNPC;
				}
				else
				{
					for (int i = 0; i < 200; i++)
					{
						if (!Main.npc[i].active || (!Main.npc[i].boss && !NPCID.Sets.DangerThatPreventsOtherDangers[Main.npc[i].type]))
						{
							continue;
						}
						if (ignorePillarsAndMoonlordCountdown)
						{
							switch (Main.npc[i].type)
							{
							case 422:
							case 493:
							case 507:
							case 517:
								continue;
							}
						}
						flag = true;
					}
				}
			}
			return flag;
		}

		public static bool AnyoneNearCultists()
		{
			int num = FindFirstNPC(437);
			if (num == -1)
			{
				return false;
			}
			Rectangle rectangle = Utils.CenteredRectangle(Main.npc[num].Center, new Vector2(2500f, 1500f));
			Rectangle r = new Rectangle(0, 0, 2500, 1500);
			Vector2 vector = r.Size() / 2f;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					r.X = (int)Main.player[i].Center.X - (int)vector.X;
					r.Y = (int)Main.player[i].Center.Y - (int)vector.Y;
					if (rectangle.Intersects(r))
					{
						return true;
					}
				}
			}
			return false;
		}

		public static void SpawnWOF(Vector2 pos)
		{
			if (pos.Y / 16f < (float)(Main.maxTilesY - 205) || Main.wofNPCIndex >= 0 || Main.netMode == 1 || AnyNPCs(113))
			{
				return;
			}
			Player.FindClosest(pos, 16, 16);
			int num = 1;
			if (pos.X / 16f > (float)(Main.maxTilesX / 2))
			{
				num = -1;
			}
			bool flag = false;
			int num2 = (int)pos.X;
			int targetPlayerIndex = 0;
			while (!flag)
			{
				flag = true;
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && Main.player[i].position.X > (float)(num2 - 1200) && Main.player[i].position.X < (float)(num2 + 1200))
					{
						num2 -= num * 16;
						flag = false;
						targetPlayerIndex = i;
					}
				}
				if (num2 / 16 < 20 || num2 / 16 > Main.maxTilesX - 20)
				{
					flag = true;
				}
			}
			int num3 = (int)pos.Y;
			int num4 = num2 / 16;
			int num5 = num3 / 16;
			int num6 = 0;
			int num7 = 1000;
			if (!WorldGen.InWorld(num4, num5, 2) || WorldGen.SolidTile(num4, num5) || Main.tile[num4, num5 - num6].liquid >= 100)
			{
				while (true)
				{
					num7--;
					if (num7 <= 0)
					{
						break;
					}
					try
					{
						if (WorldGen.InWorld(num4, num5 - num6, 2) && !WorldGen.SolidTile(num4, num5 - num6) && Main.tile[num4, num5 - num6].liquid < 100)
						{
							num5 -= num6;
							break;
						}
						if (WorldGen.InWorld(num4, num5 + num6, 2) && !WorldGen.SolidTile(num4, num5 + num6) && Main.tile[num4, num5 + num6].liquid < 100)
						{
							num5 += num6;
							break;
						}
						num6++;
						continue;
					}
					catch
					{
					}
					break;
				}
			}
			int num8 = Main.UnderworldLayer + 10;
			int num9 = num8 + 70;
			if (num5 < num8)
			{
				num5 = num8;
			}
			if (num5 > num9)
			{
				num5 = num9;
			}
			num3 = num5 * 16;
			int num10 = NewNPC(GetBossSpawnSource(targetPlayerIndex), num2, num3, 113);
			if (Main.netMode == 0)
			{
				Main.NewText(Language.GetTextValue("Announcement.HasAwoken", Main.npc[num10].TypeName), 175, 75);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num10].GetTypeNetName()), new Color(175, 75, 255));
			}
		}

		public static void SpawnSkeletron(int onWho)
		{
			bool flag = true;
			bool flag2 = false;
			Vector2 zero = Vector2.Zero;
			int num = 0;
			int num2 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == 35)
				{
					flag = false;
					break;
				}
			}
			for (int j = 0; j < 200; j++)
			{
				if (!Main.npc[j].active)
				{
					continue;
				}
				if (Main.npc[j].type == 37)
				{
					flag2 = true;
					Main.npc[j].ai[3] = 1f;
					zero = Main.npc[j].position;
					num = Main.npc[j].width;
					num2 = Main.npc[j].height;
					if (Main.netMode == 2)
					{
						NetMessage.SendData(23, -1, -1, null, j);
					}
				}
				else if (Main.npc[j].type == 54)
				{
					flag2 = true;
					zero = Main.npc[j].position;
					num = Main.npc[j].width;
					num2 = Main.npc[j].height;
				}
			}
			if (flag && flag2)
			{
				int num3 = NewNPC(GetBossSpawnSource(onWho), (int)zero.X + num / 2, (int)zero.Y + num2 / 2, 35);
				Main.npc[num3].netUpdate = true;
				string nPCNameValue = Lang.GetNPCNameValue(35);
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasAwoken", nPCNameValue), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Lang.GetNPCName(35).ToNetworkText()), new Color(175, 75, 255));
				}
			}
		}

		public static void SpawnFaelings(int plr)
		{
			if (AnyNPCs(677))
			{
				return;
			}
			int num = Main.rand.Next(2, 6);
			int num2 = (int)(Main.player[plr].position.X / 16f) - spawnRangeX * 2;
			int num3 = (int)(Main.player[plr].position.X / 16f) + spawnRangeX * 2;
			int num4 = (int)(Main.player[plr].position.Y / 16f) - spawnRangeY * 2;
			int num5 = (int)(Main.player[plr].position.Y / 16f) + spawnRangeY * 2;
			_ = Main.player[plr].position.X / 16f;
			_ = safeRangeX;
			_ = Main.player[plr].position.X / 16f;
			_ = safeRangeX;
			_ = Main.player[plr].position.Y / 16f;
			_ = safeRangeY;
			_ = Main.player[plr].position.Y / 16f;
			_ = safeRangeY;
			if (num2 < 0)
			{
				num2 = 0;
			}
			if (num3 > Main.maxTilesX)
			{
				num3 = Main.maxTilesX;
			}
			if (num4 < 0)
			{
				num4 = 0;
			}
			if (num5 > Main.maxTilesY)
			{
				num5 = Main.maxTilesY;
			}
			for (int i = 0; i < num; i++)
			{
				int num6 = 1000;
				for (int j = 0; j < num6; j++)
				{
					int num7 = Main.rand.Next(num2, num3);
					int num8 = Main.rand.Next(num4, num5);
					if (Main.tile[num7, num8].liquid <= 0 || !Main.tile[num7, num8].shimmer())
					{
						continue;
					}
					while (Main.tile[num7, num8].liquid > 0)
					{
						if (num8 < 50)
						{
							return;
						}
						num8--;
					}
					bool flag = true;
					Rectangle rectangle = new Rectangle(num7 * 16, num8 * 16, 16, 16);
					for (int k = 0; k < 255; k++)
					{
						if (Main.player[k].active)
						{
							Rectangle rectangle2 = new Rectangle((int)(Main.player[k].position.X + (float)(Main.player[k].width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(Main.player[k].position.Y + (float)(Main.player[k].height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
							if (rectangle.Intersects(rectangle2))
							{
								flag = false;
							}
						}
					}
					if (flag)
					{
						int num9 = NewNPC(GetSpawnSourceForNaturalSpawn(), num7 * 16 + 8, num8 * 16, 677);
						if (Main.netMode == 2 && num9 < 200)
						{
							NetMessage.SendData(23, -1, -1, null, num9);
						}
						break;
					}
				}
			}
		}

		public static void SpawnOnPlayer(int plr, int Type)
		{
			if (Main.netMode == 1 || (Type == 262 && AnyNPCs(262)))
			{
				return;
			}
			switch (Type)
			{
			case 245:
				if (AnyNPCs(245))
				{
					return;
				}
				try
				{
					int num2 = (int)Main.player[plr].Center.X / 16;
					int num3 = (int)Main.player[plr].Center.Y / 16;
					int num4 = 0;
					int num5 = 0;
					for (int j = num2 - 20; j < num2 + 20; j++)
					{
						for (int k = num3 - 20; k < num3 + 20; k++)
						{
							if (Main.tile[j, k].active() && Main.tile[j, k].type == 237 && Main.tile[j, k].frameX == 18 && Main.tile[j, k].frameY == 0)
							{
								num4 = j;
								num5 = k;
							}
						}
					}
					if (num4 <= 0 || num5 <= 0)
					{
						return;
					}
					int num6 = num5 - 15;
					int num7 = num5 - 15;
					for (int num8 = num5; num8 > num5 - 50; num8--)
					{
						if (WorldGen.SolidTile(num4, num8))
						{
							num6 = num8;
							break;
						}
					}
					for (int l = num5; l < num5 + 50; l++)
					{
						if (WorldGen.SolidTile(num4, l))
						{
							num7 = l;
							break;
						}
					}
					num5 = (num6 + num6 + num7) / 3;
					int num9 = NewNPC(GetBossSpawnSource(plr), num4 * 16 + 8, num5 * 16, 245);
					Main.npc[num9].target = plr;
					string typeName2 = Main.npc[num9].TypeName;
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Announcement.HasAwoken", typeName2), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num9].GetTypeNetName()), new Color(175, 75, 255));
					}
					return;
				}
				catch
				{
					return;
				}
			case 370:
			{
				Player player2 = Main.player[plr];
				if (!player2.active || player2.dead)
				{
					return;
				}
				for (int i = 0; i < 1000; i++)
				{
					Projectile projectile = Main.projectile[i];
					if (projectile.active && projectile.bobber && projectile.owner == plr)
					{
						int num = NewNPC(GetBossSpawnSource(plr), (int)projectile.Center.X, (int)projectile.Center.Y + 100, 370);
						string typeName = Main.npc[num].TypeName;
						if (Main.netMode == 0)
						{
							Main.NewText(Language.GetTextValue("Announcement.HasAwoken", typeName), 175, 75);
						}
						else if (Main.netMode == 2)
						{
							ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num].GetTypeNetName()), new Color(175, 75, 255));
						}
						break;
					}
				}
				return;
			}
			case 398:
				if (!AnyNPCs(Type))
				{
					Player player = Main.player[plr];
					NewNPC(GetBossSpawnSource(plr), (int)player.Center.X, (int)player.Center.Y - 150, Type);
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Announcement.HasAwoken", Language.GetTextValue("Enemies.MoonLord")), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", NetworkText.FromKey("Enemies.MoonLord")), new Color(175, 75, 255));
					}
				}
				return;
			}
			bool flag = false;
			int num10 = 0;
			int num11 = 0;
			int num12 = (int)(Main.player[plr].position.X / 16f) - spawnRangeX * 2;
			int num13 = (int)(Main.player[plr].position.X / 16f) + spawnRangeX * 2;
			int num14 = (int)(Main.player[plr].position.Y / 16f) - spawnRangeY * 2;
			int num15 = (int)(Main.player[plr].position.Y / 16f) + spawnRangeY * 2;
			int num16 = (int)(Main.player[plr].position.X / 16f) - safeRangeX;
			int num17 = (int)(Main.player[plr].position.X / 16f) + safeRangeX;
			int num18 = (int)(Main.player[plr].position.Y / 16f) - safeRangeY;
			int num19 = (int)(Main.player[plr].position.Y / 16f) + safeRangeY;
			if (num12 < 0)
			{
				num12 = 0;
			}
			if (num13 > Main.maxTilesX)
			{
				num13 = Main.maxTilesX;
			}
			if (num14 < 0)
			{
				num14 = 0;
			}
			if (num15 > Main.maxTilesY)
			{
				num15 = Main.maxTilesY;
			}
			for (int m = 0; m < 1000; m++)
			{
				for (int n = 0; n < 100; n++)
				{
					int num20 = Main.rand.Next(num12, num13);
					int num21 = Main.rand.Next(num14, num15);
					if (!Main.tile[num20, num21].nactive() || !Main.tileSolid[Main.tile[num20, num21].type])
					{
						if ((Main.wallHouse[Main.tile[num20, num21].wall] && m < 999) || (Type == 50 && m < 500 && Main.tile[num21, num21].wall > 0))
						{
							continue;
						}
						for (int num22 = num21; num22 < Main.maxTilesY; num22++)
						{
							if (Main.tile[num20, num22].nactive() && Main.tileSolid[Main.tile[num20, num22].type])
							{
								if ((num20 < num16 || num20 > num17 || num22 < num18 || num22 > num19 || m == 999) && ((num20 >= num12 && num20 <= num13 && num22 >= num14 && num22 <= num15) || m == 999))
								{
									_ = Main.tile[num20, num22].type;
									num10 = num20;
									num11 = num22;
									flag = true;
								}
								break;
							}
						}
						if (flag && Type == 50 && m < 900)
						{
							int num23 = 20;
							if (!Collision.CanHit(new Vector2(num10, num11 - 1) * 16f, 16, 16, new Vector2(num10, num11 - 1 - num23) * 16f, 16, 16) || !Collision.CanHit(new Vector2(num10, num11 - 1 - num23) * 16f, 16, 16, Main.player[plr].Center, 0, 0))
							{
								num10 = 0;
								num11 = 0;
								flag = false;
							}
						}
						if (flag && m < 999)
						{
							int num24 = num10 - spawnSpaceX / 2;
							int num25 = num10 + spawnSpaceX / 2;
							int num26 = num11 - spawnSpaceY;
							int num27 = num11;
							if (num24 < 0)
							{
								flag = false;
							}
							if (num25 > Main.maxTilesX)
							{
								flag = false;
							}
							if (num26 < 0)
							{
								flag = false;
							}
							if (num27 > Main.maxTilesY)
							{
								flag = false;
							}
							if (flag)
							{
								for (int num28 = num24; num28 < num25; num28++)
								{
									for (int num29 = num26; num29 < num27; num29++)
									{
										if (Main.tile[num28, num29].nactive() && Main.tileSolid[Main.tile[num28, num29].type])
										{
											flag = false;
											break;
										}
									}
								}
							}
						}
					}
					if (flag || flag)
					{
						break;
					}
				}
				if (flag && m < 999)
				{
					Rectangle rectangle = new Rectangle(num10 * 16, num11 * 16, 16, 16);
					for (int num30 = 0; num30 < 255; num30++)
					{
						if (Main.player[num30].active)
						{
							Rectangle rectangle2 = new Rectangle((int)(Main.player[num30].position.X + (float)(Main.player[num30].width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(Main.player[num30].position.Y + (float)(Main.player[num30].height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
							if (rectangle.Intersects(rectangle2))
							{
								flag = false;
							}
						}
					}
				}
				if (flag)
				{
					break;
				}
			}
			if (flag)
			{
				int spawnPositionX = num10 * 16 + 8;
				int spawnPositionY = num11 * 16;
				SpawnBoss(spawnPositionX, spawnPositionY, Type, plr);
			}
		}

		public static int GetAvailableAmountOfNPCsToSpawnUpToSlot(int amountWeWant, int highestNPCSlotIndexWeWillPick = 100)
		{
			if (amountWeWant <= 0)
			{
				return 0;
			}
			int num = 0;
			for (int i = 0; i < highestNPCSlotIndexWeWillPick; i++)
			{
				if (!Main.npc[i].active)
				{
					num++;
					if (num >= amountWeWant)
					{
						return amountWeWant;
					}
				}
			}
			return num;
		}

		public static IEntitySource GetBossSpawnSource(int targetPlayerIndex)
		{
			return new EntitySource_BossSpawn(Main.player[targetPlayerIndex]);
		}

		public static void SpawnBoss(int spawnPositionX, int spawnPositionY, int Type, int targetPlayerIndex)
		{
			int num = 200;
			if (Type == 127 && mechQueen != -1)
			{
				num = (mechQueen = NewNPC(GetBossSpawnSource(targetPlayerIndex), spawnPositionX, spawnPositionY, Type, 100));
				Main.npc[mechQueen].ai[3] = mechQueen;
			}
			else
			{
				num = NewNPC(GetBossSpawnSource(targetPlayerIndex), spawnPositionX, spawnPositionY, Type, 1);
			}
			if (num == 200)
			{
				return;
			}
			Main.npc[num].target = targetPlayerIndex;
			Main.npc[num].timeLeft *= 20;
			string typeName = Main.npc[num].TypeName;
			if (Main.netMode == 2 && num < 200)
			{
				NetMessage.SendData(23, -1, -1, null, num);
			}
			if (Type == 134 || Type == 127 || Type == 126 || Type == 125)
			{
				AchievementsHelper.CheckMechaMayhem();
			}
			if (Type == 127 && mechQueen == num)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[107].Value, 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(Lang.misc[107].ToNetworkText(), new Color(175, 75, 255));
				}
				return;
			}
			switch (Type)
			{
			case 125:
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[48].Value, 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(Lang.misc[48].ToNetworkText(), new Color(175, 75, 255));
				}
				return;
			case 50:
			case 82:
			case 126:
			case 316:
			case 398:
			case 551:
			case 662:
				return;
			}
			if (Main.netMode == 0)
			{
				Main.NewText(Language.GetTextValue("Announcement.HasAwoken", typeName), 175, 75);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num].GetTypeNetName()), new Color(175, 75, 255));
			}
		}

		public static int NewNPC(IEntitySource source, int X, int Y, int Type, int Start = 0, float ai0 = 0f, float ai1 = 0f, float ai2 = 0f, float ai3 = 0f, int Target = 255)
		{
			if (Main.getGoodWorld && Main.rand.Next(3) != 0)
			{
				if (Type == 46)
				{
					Type = 614;
				}
				if (Type == 62)
				{
					Type = 66;
				}
			}
			int num = -1;
			if (Type == 222 || Type == 245)
			{
				for (int num2 = 199; num2 >= 0; num2--)
				{
					if (!Main.npc[num2].active)
					{
						num = num2;
						break;
					}
				}
			}
			else
			{
				for (int i = Start; i < 200; i++)
				{
					if (!Main.npc[i].active)
					{
						num = i;
						break;
					}
				}
			}
			if (num >= 0)
			{
				Main.npc[num] = new NPC();
				Main.npc[num].SetDefaults(Type);
				Main.npc[num].whoAmI = num;
				GiveTownUniqueDataToNPCsThatNeedIt(Type, num);
				Main.npc[num].position.X = X - Main.npc[num].width / 2;
				Main.npc[num].position.Y = Y - Main.npc[num].height;
				Main.npc[num].active = true;
				Main.npc[num].timeLeft = (int)((double)activeTime * 1.25);
				Main.npc[num].wet = Collision.WetCollision(Main.npc[num].position, Main.npc[num].width, Main.npc[num].height);
				Main.npc[num].ai[0] = ai0;
				Main.npc[num].ai[1] = ai1;
				Main.npc[num].ai[2] = ai2;
				Main.npc[num].ai[3] = ai3;
				Main.npc[num].target = Target;
				if (Type == 50)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Announcement.HasAwoken", Main.npc[num].TypeName), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num].GetTypeNetName()), new Color(175, 75, 255));
					}
				}
				return num;
			}
			return 200;
		}

		private static void GiveTownUniqueDataToNPCsThatNeedIt(int Type, int nextNPC)
		{
			NPC nPC = Main.npc[nextNPC];
			if (nPC.isLikeATownNPC)
			{
				nPC.GivenName = getNewNPCName(Type);
				if (TownNPCProfiles.Instance.GetProfile(Type, out var profile))
				{
					nPC.townNpcVariationIndex = profile.RollVariation();
					nPC.GivenName = profile.GetNameForVariant(nPC);
				}
				if (ShimmeredTownNPCs.Contains(Type))
				{
					nPC.townNpcVariationIndex = 1;
				}
				nPC.needsUniqueInfoUpdate = true;
			}
		}

		public static void UnlockOrExchangePet(ref bool petBoughtFlag, int npcType, string textKeyForLicense, int netMessageData)
		{
			Color color = new Color(50, 255, 130);
			if (Main.netMode == 1)
			{
				if (!petBoughtFlag || AnyNPCs(npcType))
				{
					NetMessage.SendData(61, -1, -1, null, Main.myPlayer, netMessageData);
				}
			}
			else if (!petBoughtFlag)
			{
				petBoughtFlag = true;
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(textKeyForLicense), color);
				NetMessage.TrySendData(7);
			}
			else if (RerollVariationForNPCType(npcType))
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Misc.PetExchangeSuccess"), color);
			}
			else
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Misc.PetExchangeFail"), color);
			}
		}

		public static bool RerollVariationForNPCType(int npcType)
		{
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.active && nPC.type == npcType)
				{
					return nPC.RerollVariation();
				}
			}
			return false;
		}

		public bool RerollVariation()
		{
			if (!TownNPCProfiles.Instance.GetProfile(type, out var profile))
			{
				return false;
			}
			int num = townNpcVariationIndex;
			int num2 = 0;
			while (num2++ < 100 && townNpcVariationIndex == num)
			{
				townNpcVariationIndex = profile.RollVariation();
			}
			if (num == townNpcVariationIndex)
			{
				return false;
			}
			GivenName = profile.GetNameForVariant(this);
			life = lifeMax;
			if (Main.netMode != 1)
			{
				ParticleOrchestraSettings particleOrchestraSettings = default(ParticleOrchestraSettings);
				particleOrchestraSettings.PositionInWorld = base.Center;
				particleOrchestraSettings.MovementVector = velocity;
				ParticleOrchestraSettings settings = particleOrchestraSettings;
				ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.PetExchange, settings);
			}
			NetMessage.TrySendData(56, -1, -1, null, whoAmI);
			return true;
		}

		public void TransformVisuals(int oldType, int newType)
		{
			position += netOffset;
			if ((oldType == 158 && newType == 159) || (oldType == 159 && newType == 158))
			{
				SoundEngine.PlaySound(SoundID.Item8, position);
				int num = Gore.NewGore(new Vector2(position.X, position.Y - 10f), velocity, 99, scale);
				Main.gore[num].velocity *= 0.3f;
				num = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), velocity, 99, scale);
				Main.gore[num].velocity *= 0.3f;
				num = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 10f), velocity, 99, scale);
				Main.gore[num].velocity *= 0.3f;
			}
			else if (oldType == 478 && newType == 479)
			{
				for (int i = 0; i < 30; i++)
				{
					int num2 = Dust.NewDust(position, width, height, 238, 0f, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num2].noGravity = true;
					}
				}
				Gore.NewGore(position, velocity, 684, scale);
				Gore.NewGore(position, velocity, 685, scale);
				Gore.NewGore(position, velocity, 686, scale);
				Gore.NewGore(position, velocity, 684 + Main.rand.Next(3), scale);
			}
			else if (oldType == 406 && newType == 405)
			{
				float num3 = Main.rand.Next(10, 21);
				float num4 = MathF.PI * 2f * Main.rand.NextFloat();
				Vector2 vector = new Vector2(22f, 22f);
				for (float num5 = 0f; num5 < num3; num5 += 1f)
				{
					Dust dust = Main.dust[Dust.NewDust(base.Center, 0, 0, 229)];
					Vector2 vector2 = Vector2.UnitY.RotatedBy(num5 * (MathF.PI * 2f) / num3 + num4);
					dust.position = base.Center + vector2 * vector / 2f;
					dust.velocity = vector2;
					dust.noGravity = true;
					dust.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
					dust.velocity *= dust.scale;
					dust.fadeIn = Main.rand.NextFloat() * 2f;
				}
			}
			if (oldType == 428 && newType == 427)
			{
				for (int j = 0; j < 20; j++)
				{
					int num6 = Utils.SelectRandom<int>(Main.rand, 229, 240);
					Dust dust2 = Main.dust[Dust.NewDust(position, width, height, num6)];
					dust2.noGravity = true;
					dust2.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
					dust2.fadeIn = 0.25f;
					dust2.velocity *= dust2.scale / 2f;
				}
			}
			if (oldType == 427 && newType == 426)
			{
				for (int k = 0; k < 30; k++)
				{
					int num7 = Utils.SelectRandom<int>(Main.rand, 229, 240, 240);
					Dust dust3 = Main.dust[Dust.NewDust(position, width, height, num7)];
					dust3.noGravity = true;
					dust3.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
					dust3.fadeIn = 0.25f;
					dust3.velocity *= dust3.scale * 0.75f;
				}
			}
			position -= netOffset;
		}

		public void Teleport(Vector2 newPos, int Style = 0, int extraInfo = 0)
		{
			int extraInfo2 = 0;
			if (Style == 4)
			{
				extraInfo2 = lastPortalColorIndex;
			}
			float dustCountMult = ((teleportTime > 0f) ? 0.3f : 1f);
			Vector2 otherPosition = position;
			Main.TeleportEffect(getRect(), Style, extraInfo2, dustCountMult, TeleportationSide.Entry, newPos);
			position = newPos;
			if (Style == 4)
			{
				lastPortalColorIndex = extraInfo;
				extraInfo2 = lastPortalColorIndex;
			}
			Main.TeleportEffect(getRect(), Style, extraInfo2, dustCountMult, TeleportationSide.Exit, otherPosition);
			teleportTime = 1f;
			teleportStyle = Style;
			if (Main.netMode == 2 && Style != 4)
			{
				NetMessage.SendData(65, -1, -1, null, 1, whoAmI, newPos.X, newPos.Y, Style);
			}
		}

		public void Transform(int newType)
		{
			if (Main.netMode != 1)
			{
				int num = extraValue;
				bool flag = false;
				if (value == 0f)
				{
					flag = true;
				}
				int[] array = new int[20];
				int[] array2 = new int[20];
				for (int i = 0; i < 20; i++)
				{
					array[i] = buffType[i];
					array2[i] = buffTime[i];
				}
				float num2 = shimmerTransparency;
				_ = height;
				int oldType = type;
				int num3 = life;
				int num4 = lifeMax;
				Vector2 vector = velocity;
				position.Y += height;
				int num5 = spriteDirection;
				bool spawnedFromStatue = SpawnedFromStatue;
				SetDefaultsKeepPlayerInteraction(newType);
				SpawnedFromStatue = spawnedFromStatue;
				spriteDirection = num5;
				TargetClosest();
				velocity = vector;
				position.Y -= height;
				for (int j = 0; j < 20; j++)
				{
					buffType[j] = array[j];
					buffTime[j] = array2[j];
				}
				if (flag)
				{
					value = 0f;
				}
				if (lifeMax == num4)
				{
					life = num3;
				}
				shimmerTransparency = num2;
				switch (newType)
				{
				case 107:
				case 108:
				case 124:
				case 353:
				case 369:
				case 550:
				case 588:
				case 679:
				case 680:
				case 683:
				case 684:
					UpdateHomeTileState(homeless: true, (int)(position.X + (float)(width / 2)) / 16, (int)(position.Y + (float)height) / 16);
					break;
				}
				extraValue = num;
				if (Main.netMode == 2)
				{
					netUpdate = true;
					NetMessage.SendData(23, -1, -1, null, whoAmI);
					NetMessage.SendData(54, -1, -1, null, whoAmI);
				}
				TransformVisuals(oldType, newType);
				GiveTownUniqueDataToNPCsThatNeedIt(type, whoAmI);
				if (townNPC)
				{
					homeless = true;
					WorldGen.CheckAchievement_RealEstateAndTownSlimes();
				}
				altTexture = 0;
			}
		}

		public int checkArmorPenetration(int armorPenetration, float armorPenetrationPercent)
		{
			if (ichor)
			{
				armorPenetration += 15;
			}
			if (betsysCurse)
			{
				armorPenetration += 40;
			}
			armorPenetration += (int)((float)defense * armorPenetrationPercent);
			if (armorPenetration <= 0 || defense <= 0)
			{
				return 0;
			}
			if (armorPenetration > defense)
			{
				return defense / 2;
			}
			return armorPenetration / 2;
		}

		public double StrikeNPCNoInteraction(int Damage, float knockBack, int hitDirection, bool crit = false, bool noEffect = false, bool fromNet = false)
		{
			if (Main.netMode == 0)
			{
				ignorePlayerInteractions++;
			}
			return StrikeNPC(Damage, knockBack, hitDirection, crit, noEffect, fromNet);
		}

		public double StrikeNPC(int Damage, float knockBack, int hitDirection, bool crit = false, bool noEffect = false, bool fromNet = false)
		{
			bool flag = Main.netMode == 0;
			if (flag && ignorePlayerInteractions > 0)
			{
				ignorePlayerInteractions--;
				flag = false;
			}
			if (!active || life <= 0)
			{
				return 0.0;
			}
			double num = Damage;
			num = Main.CalculateDamageNPCsTake((int)num, defense);
			if (crit)
			{
				num *= 2.0;
			}
			if (takenDamageMultiplier > 1f)
			{
				num *= (double)takenDamageMultiplier;
			}
			if ((takenDamageMultiplier > 1f || Damage != 9999) && lifeMax > 1)
			{
				if (friendly)
				{
					Color color = (crit ? CombatText.DamagedFriendlyCrit : CombatText.DamagedFriendly);
					CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), color, (int)num, crit);
				}
				else
				{
					Color color2 = (crit ? CombatText.DamagedHostileCrit : CombatText.DamagedHostile);
					if (fromNet)
					{
						color2 = (crit ? CombatText.OthersDamagedHostileCrit : CombatText.OthersDamagedHostile);
					}
					CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), color2, (int)num, crit);
				}
			}
			if (num >= 1.0)
			{
				if (flag)
				{
					PlayerInteraction(Main.myPlayer);
				}
				justHit = true;
				if ((type == 438 || type == 379) && Main.netMode != 1)
				{
					int num2 = (int)(0f - ai[3] - 1f);
					if (num2 > -1 && Main.npc[num2].localAI[0] == 0f)
					{
						Main.npc[num2].localAI[0] = 1f;
					}
				}
				if (townNPC)
				{
					if (aiStyle == 7 && (ai[0] == 3f || ai[0] == 4f || ai[0] == 16f || ai[0] == 17f))
					{
						NPC nPC = Main.npc[(int)ai[2]];
						if (nPC.active)
						{
							nPC.ai[0] = 1f;
							nPC.ai[1] = 300 + Main.rand.Next(300);
							nPC.ai[2] = 0f;
							nPC.localAI[3] = 0f;
							nPC.direction = hitDirection;
							nPC.netUpdate = true;
						}
					}
					ai[0] = 1f;
					ai[1] = 300 + Main.rand.Next(300);
					ai[2] = 0f;
					localAI[3] = 0f;
					direction = hitDirection;
					netUpdate = true;
				}
				if (aiStyle == 8 && Main.netMode != 1)
				{
					if (type == 172)
					{
						ai[0] = 450f;
					}
					else if (type == 283 || type == 284)
					{
						if (Main.rand.Next(2) == 0)
						{
							ai[0] = 390f;
							netUpdate = true;
						}
					}
					else if (type == 533)
					{
						if (Main.rand.Next(3) != 0)
						{
							ai[0] = 181f;
							netUpdate = true;
						}
					}
					else
					{
						ai[0] = 400f;
					}
					TargetClosest();
				}
				if (aiStyle == 97 && Main.netMode != 1)
				{
					localAI[1] = 1f;
					TargetClosest();
				}
				if (type == 371)
				{
					num = 0.0;
					ai[0] = 1f;
					ai[1] = 4f;
					dontTakeDamage = true;
				}
				if (type == 346 && (double)life >= (double)lifeMax * 0.5 && (double)life - num < (double)lifeMax * 0.5)
				{
					Gore.NewGore(position, velocity, 517);
				}
				if (type == 184)
				{
					localAI[0] = 60f;
				}
				if (type == 535)
				{
					localAI[0] = 60f;
				}
				if (type == 185)
				{
					localAI[0] = 1f;
				}
				if (!immortal)
				{
					if (realLife >= 0)
					{
						Main.npc[realLife].life -= (int)num;
						life = Main.npc[realLife].life;
						lifeMax = Main.npc[realLife].lifeMax;
					}
					else
					{
						life -= (int)num;
					}
				}
				if (knockBack > 0f && knockBackResist > 0f)
				{
					float num3 = knockBack * knockBackResist;
					if (onFire2)
					{
						num3 *= 1.1f;
					}
					if (num3 > 8f)
					{
						float num4 = num3 - 8f;
						num4 *= 0.9f;
						num3 = 8f + num4;
					}
					if (num3 > 10f)
					{
						float num5 = num3 - 10f;
						num5 *= 0.8f;
						num3 = 10f + num5;
					}
					if (num3 > 12f)
					{
						float num6 = num3 - 12f;
						num6 *= 0.7f;
						num3 = 12f + num6;
					}
					if (num3 > 14f)
					{
						float num7 = num3 - 14f;
						num7 *= 0.6f;
						num3 = 14f + num7;
					}
					if (num3 > 16f)
					{
						num3 = 16f;
					}
					if (crit)
					{
						num3 *= 1.4f;
					}
					int num8 = (int)num * 10;
					if (Main.expertMode)
					{
						num8 = (int)num * 15;
					}
					if (num8 > lifeMax)
					{
						if (hitDirection < 0 && velocity.X > 0f - num3)
						{
							if (velocity.X > 0f)
							{
								velocity.X -= num3;
							}
							velocity.X -= num3;
							if (velocity.X < 0f - num3)
							{
								velocity.X = 0f - num3;
							}
						}
						else if (hitDirection > 0 && velocity.X < num3)
						{
							if (velocity.X < 0f)
							{
								velocity.X += num3;
							}
							velocity.X += num3;
							if (velocity.X > num3)
							{
								velocity.X = num3;
							}
						}
						if (type == 185)
						{
							num3 *= 1.5f;
						}
						num3 = (noGravity ? (num3 * -0.5f) : (num3 * -0.75f));
						if (velocity.Y > num3)
						{
							velocity.Y += num3;
							if (velocity.Y < num3)
							{
								velocity.Y = num3;
							}
						}
					}
					else
					{
						if (!noGravity)
						{
							velocity.Y = (0f - num3) * 0.75f * knockBackResist;
						}
						else
						{
							velocity.Y = (0f - num3) * 0.5f * knockBackResist;
						}
						velocity.X = num3 * (float)hitDirection * knockBackResist;
					}
				}
				if ((type == 113 || type == 114) && life <= 0)
				{
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].active && (Main.npc[i].type == 113 || Main.npc[i].type == 114))
						{
							Main.npc[i].HitEffect(hitDirection, num);
						}
					}
				}
				else
				{
					HitEffect(hitDirection, num);
				}
				if (HitSound != null)
				{
					SoundEngine.PlaySound(HitSound, position);
				}
				if (realLife >= 0)
				{
					Main.npc[realLife].checkDead();
				}
				else
				{
					checkDead();
				}
				return num;
			}
			return 0.0;
		}

		public static void LadyBugKilled(Vector2 Position, bool GoldLadyBug = false)
		{
			Main.ladyBugRainBoost += ladyBugRainTime;
			if (Main.ladyBugRainBoost > maximumAmountOfTimesLadyBugRainCanStack)
			{
				Main.ladyBugRainBoost = maximumAmountOfTimesLadyBugRainCanStack;
			}
			int myPlayer = Main.myPlayer;
			if (!Main.player[myPlayer].active || Main.player[myPlayer].dead)
			{
				return;
			}
			Vector2 vector = Position - Main.player[myPlayer].Center;
			int num = 400;
			if (vector.Length() < (float)num)
			{
				if (vector.Length() < 100f)
				{
					vector = default(Vector2);
				}
				double num2 = 1.0 - (double)vector.Length() / (double)num;
				int num3 = (int)((double)ladyBugBadLuckTime * num2);
				if (GoldLadyBug)
				{
					num3 *= 2;
				}
				if (num3 < Main.player[myPlayer].ladyBugLuckTimeLeft)
				{
					Main.player[myPlayer].ladyBugLuckTimeLeft = num3;
					Main.player[myPlayer].luckNeedsSync = true;
				}
			}
		}

		private void LadyBugLuck(int plr, bool GoldLadyBug = false)
		{
			if (releaseOwner != 255 || Main.player[plr].ladyBugLuckTimeLeft < 0)
			{
				return;
			}
			Vector2 vector = base.Center - Main.player[plr].Center;
			int num = 800;
			if (vector.Length() < (float)num)
			{
				if (vector.Length() < 30f)
				{
					vector = default(Vector2);
				}
				double x = 1.0 - (double)vector.Length() / (double)num;
				x = Math.Pow(x, 6.0);
				int num2 = (int)((double)ladyBugGoodLuckTime * x);
				if (GoldLadyBug)
				{
					num2 *= 2;
				}
				if (num2 > Main.player[plr].ladyBugLuckTimeLeft)
				{
					Main.player[plr].ladyBugLuckTimeLeft = num2;
					Main.player[plr].luckNeedsSync = true;
				}
			}
		}

		private void NPCLuck()
		{
			int myPlayer = Main.myPlayer;
			if (type == 22)
			{
				if (Main.player[myPlayer].ladyBugLuckTimeLeft >= 0 && Main.player[myPlayer].active && !Main.player[myPlayer].dead)
				{
					int num = ladyBugGoodLuckTime / 3;
					if (num > Main.player[myPlayer].ladyBugLuckTimeLeft)
					{
						Main.player[myPlayer].ladyBugLuckTimeLeft = num;
						Main.player[myPlayer].luckNeedsSync = true;
					}
				}
			}
			else if (type != 54 && Main.player[myPlayer].active && !Main.player[myPlayer].dead)
			{
				int num2 = ladyBugBadLuckTime / 3;
				if (num2 < Main.player[myPlayer].ladyBugLuckTimeLeft)
				{
					Main.player[myPlayer].ladyBugLuckTimeLeft = num2;
					Main.player[myPlayer].luckNeedsSync = true;
				}
			}
		}

		public void HitEffect(int hitDirection = 0, double dmg = 10.0)
		{
			//IL_24fe: Unknown result type (might be due to invalid IL or missing references)
			//IL_251d: Unknown result type (might be due to invalid IL or missing references)
			//IL_26fd: Unknown result type (might be due to invalid IL or missing references)
			if (!active)
			{
				return;
			}
			if (townNPC && life <= 0 && UsesPartyHat())
			{
				bool isShimmerVariant = IsShimmerVariant;
				bool flag = true;
				switch (type)
				{
				case 38:
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1298 : 927);
					break;
				case 207:
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1305 : 928);
					break;
				case 17:
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1321 : 929);
					break;
				case 18:
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1325 : 930);
					break;
				case 227:
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1331 : 931);
					break;
				case 229:
					if (!IsShimmerVariant)
					{
						Gore.NewGore(position, velocity, 932);
					}
					break;
				case 142:
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1339 : 933);
					break;
				case 453:
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1343 : 934);
					break;
				case 178:
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1348 : 935);
					break;
				case 353:
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1351 : 936);
					break;
				case 368:
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1363 : 937);
					break;
				case 108:
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1373 : 938);
					break;
				case 588:
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1311 : 1112);
					break;
				default:
					flag = false;
					break;
				}
				if (flag)
				{
					int num = 926;
					switch (GetPartyHatColor())
					{
					case PartyHatColor.Cyan:
						num = 940;
						break;
					case PartyHatColor.Pink:
						num = 939;
						break;
					case PartyHatColor.Purple:
						num = 941;
						break;
					case PartyHatColor.White:
						num = 942;
						break;
					}
					Gore.NewGore(position, velocity, num);
				}
			}
			if (daybreak && life <= 0)
			{
				Rectangle hitbox = base.Hitbox;
				for (int i = 0; i < 20; i++)
				{
					int num2 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num3 = Dust.NewDust(hitbox.TopLeft(), width, height, num2, 0f, -2.5f);
					Main.dust[num3].alpha = 200;
					Dust dust = Main.dust[num3];
					dust.velocity *= 1.4f;
					dust = Main.dust[num3];
					dust.scale += Main.rand.NextFloat();
				}
				if (Main.netMode != 1)
				{
					for (int j = 0; j < 200; j++)
					{
						NPC nPC = Main.npc[j];
						if (nPC.active && !nPC.buffImmune[189] && Distance(nPC.Center) < 100f && !nPC.dontTakeDamage && nPC.lifeMax > 5 && !nPC.friendly && !nPC.townNPC)
						{
							nPC.AddBuff(189, 300);
						}
					}
				}
			}
			if (type == 686 && life <= 0)
			{
				short num4 = 1143;
				Vector2 vector = base.Bottom + (-Vector2.UnitY * 50f).RotatedBy(rotation);
				for (int k = 0; k < 3; k++)
				{
					Vector2 vector2 = vector + Main.rand.NextVector2Circular(15f, 15f);
					Gore gore = Gore.NewGorePerfect(vector2, Main.rand.NextVector2Circular(2f, 2f), num4 + Main.rand.Next(3));
					gore.velocity.Y -= Main.rand.NextFloat();
					Gore gore2 = gore;
					gore2.velocity *= 4f;
				}
				for (int l = 0; l < 1; l++)
				{
					Vector2 vector3 = base.Bottom + (-Vector2.UnitY * 50f).RotatedBy(rotation) + Main.rand.NextVector2Circular(5f, 5f);
					Gore gore3 = Gore.NewGorePerfect(vector3, Main.rand.NextVector2Circular(2f, 2f), 1146);
					gore3.velocity.Y -= Main.rand.NextFloat();
					Gore gore2 = gore3;
					gore2.velocity *= 4f;
				}
				if (Main.netMode != 1)
				{
					Vector2 vector4 = base.Bottom + new Vector2(0f, 48f);
					Vector2 vector5 = velocity;
					Transform(680);
					position = vector4;
					velocity = vector5;
					netUpdate = true;
					if (!unlockedSlimePurpleSpawn)
					{
						unlockedSlimePurpleSpawn = true;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(7);
						}
					}
				}
			}
			if (type == 594 && life <= 0)
			{
				int num5 = 1125;
				num5 += (int)(ai[2] - 1f) * 3;
				Vector2 vector6 = base.Bottom + (-Vector2.UnitY * 50f).RotatedBy(rotation);
				for (int m = 0; m < 3; m++)
				{
					Vector2 vector7 = vector6 + Main.rand.NextVector2Circular(15f, 15f);
					Gore gore4 = Gore.NewGorePerfect(vector7, Main.rand.NextVector2Circular(2f, 2f), num5 + Main.rand.Next(3));
					gore4.velocity.Y -= Main.rand.NextFloat();
					Gore gore2 = gore4;
					gore2.velocity *= 4f;
				}
				for (int n = 0; n < 1; n++)
				{
					Vector2 vector8 = base.Bottom + (-Vector2.UnitY * 50f).RotatedBy(rotation) + Main.rand.NextVector2Circular(5f, 5f);
					Gore gore5 = Gore.NewGorePerfect(vector8, Main.rand.NextVector2Circular(2f, 2f), 1146);
					gore5.velocity.Y -= Main.rand.NextFloat();
					Gore gore2 = gore5;
					gore2.velocity *= 4f;
				}
				NPC nPC2 = AI_113_WindyBalloon_GetSlaveNPC();
				if (nPC2 != null)
				{
					nPC2.ai[0] = 0f;
					nPC2.position.Y -= 10f;
					nPC2.netUpdate = true;
				}
			}
			if (type == 661)
			{
				if (life > 0)
				{
					for (int num6 = 0; (double)num6 < dmg / (double)lifeMax * 100.0; num6++)
					{
						if (Main.rand.Next(5) == 0)
						{
							int num7 = 1;
							Color newColor = Main.hslToRgb((float)num6 / 100f % 1f, 1f, 0.5f) * 0.5f;
							int num8 = Dust.NewDust(position, width, height, 267, 0f, 0f, 0, newColor);
							Main.dust[num8].position = base.Center + Main.rand.NextVector2Circular(width, height);
							Main.dust[num8].velocity = Main.dust[num8].position - base.Center;
							Main.dust[num8].noGravity = true;
							Main.dust[num8].fadeIn = 0.6f + Main.rand.NextFloat() * 0.7f * (float)num7;
							Main.dust[num8].scale = 0.35f;
							if (num8 != 6000)
							{
								Dust dust2 = Dust.CloneDust(num8);
								Dust dust = dust2;
								dust.scale /= 2f;
								dust = dust2;
								dust.fadeIn *= 0.85f;
								dust2.color = new Color(255, 255, 255, 255) * 0.5f;
							}
						}
					}
				}
				else
				{
					for (int num9 = 0; (float)num9 < 100f; num9++)
					{
						if (Main.rand.Next(5) == 0)
						{
							int num10 = 1;
							Color newColor2 = Main.hslToRgb((float)num9 / 100f % 1f, 1f, 0.5f) * 0.5f;
							int num11 = Dust.NewDust(position, width, height, 267, 0f, 0f, 0, newColor2);
							Main.dust[num11].position = base.Center + Main.rand.NextVector2Circular(width, height);
							Main.dust[num11].velocity = (Main.dust[num11].position - base.Center) * 0.6f;
							Main.dust[num11].noGravity = true;
							Main.dust[num11].fadeIn = 0.7f + Main.rand.NextFloat() * 1.1f * (float)num10;
							Main.dust[num11].scale = 0.35f;
							if (num11 != 6000)
							{
								Dust dust3 = Dust.CloneDust(num11);
								Dust dust = dust3;
								dust.scale /= 2f;
								dust = dust3;
								dust.fadeIn *= 0.85f;
								dust3.color = new Color(255, 255, 255, 255) * 0.5f;
							}
						}
					}
				}
			}
			if (type == 521)
			{
				if (life > 0)
				{
					for (int num12 = 0; (double)num12 < dmg / (double)lifeMax * 200.0; num12++)
					{
						Dust dust4 = Dust.NewDustDirect(position, width, height, 228, 6 * hitDirection, velocity.Y, 0, Color.Transparent, 3f);
						dust4.noGravity = true;
						Dust dust = dust4;
						dust.velocity *= 5f;
					}
				}
				else
				{
					for (int num13 = 0; (float)num13 < 200f; num13++)
					{
						Dust dust5 = Dust.NewDustDirect(position, width, height, 228, 6 * hitDirection, velocity.Y, 0, Color.Transparent, 3f);
						dust5.noGravity = true;
						Dust dust = dust5;
						dust.velocity *= 5f;
					}
				}
			}
			if (type == 668)
			{
				if (life > 0)
				{
					for (int num14 = 0; (double)num14 < dmg / (double)lifeMax * 100.0; num14++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f, 0, default(Color), 1.2f);
					}
				}
				else
				{
					int num15 = 15;
					Vector2 vector9 = position - new Vector2(num15, num15);
					for (int num16 = 0; num16 < 120; num16++)
					{
						int num17 = Dust.NewDust(vector9, width + num15 * 2, height + num15 * 2, 5, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num17].velocity = Main.rand.NextVector2Circular(4f, 4f);
					}
					Vector2 vector10 = velocity * 0.6f;
					Gore.NewGore(base.Bottom + new Vector2(-10f, 0f), vector10, 1274, scale);
					Gore.NewGore(base.Bottom + new Vector2(10f, 0f), vector10, 1274, scale);
					Gore.NewGore(base.Center, vector10, 1272, scale);
					Gore.NewGore(base.Center + new Vector2(-10f, 0f), vector10, 1273, scale);
					Gore.NewGore(base.Center + new Vector2(10f, 0f), vector10, 1273, scale);
					Gore.NewGore(base.Top, vector10, 1270, scale);
					Gore.NewGore(base.Top, vector10, 1271, scale);
				}
			}
			if (type == 636)
			{
				if (life > 0)
				{
					for (int num18 = 0; (double)num18 < dmg / (double)lifeMax * 100.0; num18++)
					{
						if (Main.rand.Next(2) == 0)
						{
							Dust.NewDust(position, width, height, 67, hitDirection, -1f);
						}
						else
						{
							Dust.NewDust(position, width, height, 69, hitDirection, -1f);
						}
					}
				}
				else
				{
					for (int num19 = 0; num19 < 50; num19++)
					{
						if (Main.rand.Next(2) == 0)
						{
							Dust.NewDust(position, width, height, 67, hitDirection, -1f);
						}
						else
						{
							Dust.NewDust(position, width, height, 69, 2 * hitDirection, -1f);
						}
					}
					Vector2 vector11 = velocity * 0.6f;
					Gore.NewGore(position + new Vector2(10f, -20f), vector11, 1262, scale);
					Gore.NewGore(position + new Vector2(10f, 40f), vector11, 1263, scale);
					Gore.NewGore(position + new Vector2(50f, 20f), vector11, 1264, scale);
					Gore.NewGore(position + new Vector2(-10f, -20f), vector11, 1265, scale);
					Gore.NewGore(position, vector11, 1266, scale);
					Gore.NewGore(position + new Vector2(-20f, -20f), vector11, 1267, scale);
					Gore.NewGore(position + new Vector2(-20f, 10f), vector11, 1268, scale);
					Gore.NewGore(position + new Vector2(60f, -20f), vector11, 1267, scale);
					Gore.NewGore(position + new Vector2(60f, 10f), vector11, 1268, scale);
				}
			}
			if (type == 657)
			{
				if (life <= 0)
				{
					Gore.NewGore(position, velocity, 1259, 0.8f);
					Gore.NewGore(position + base.Size * 0.5f, velocity, 1259, 0.8f);
					Gore.NewGore(position, velocity, 1258, scale);
					int num20 = 10;
					for (int num21 = 0; num21 < 150; num21++)
					{
						Color newColor3 = AI_121_QueenSlime_GetDustColor();
						newColor3.A = 200;
						int num22 = Dust.NewDust(position - new Vector2(num20, num20), width + num20 * 2, height + num20 * 2, 4, 8f * Main.rand.NextFloatDirection(), -2f + 6f * Main.rand.NextFloatDirection(), 50, newColor3, 1f + Main.rand.NextFloat() * 0.5f);
						Dust dust = Main.dust[num22];
						dust.velocity *= 0.65f;
						dust = Main.dust[num22];
						dust.velocity += velocity * 0.5f;
						if (Main.rand.Next(5) == 0)
						{
							Main.dust[num22].noGravity = true;
							dust = Main.dust[num22];
							dust.scale *= 1.2f;
						}
					}
				}
				else
				{
					for (int num23 = 0; num23 < 12; num23++)
					{
						Color newColor4 = AI_121_QueenSlime_GetDustColor();
						newColor4.A = 150;
						int num24 = Dust.NewDust(position, width, height, 4, 2 * hitDirection, -1f, 50, newColor4);
						Dust dust = Main.dust[num24];
						dust.velocity *= 0.3f;
						dust = Main.dust[num24];
						dust.velocity += velocity * 0.3f;
						if (Main.rand.Next(3) == 0)
						{
							Main.dust[num24].noGravity = true;
							dust = Main.dust[num24];
							dust.scale *= 1.2f;
						}
					}
				}
			}
			if (type >= 658 && type <= 660)
			{
				int num25 = 7;
				float num26 = 1f;
				int num27 = 4;
				Color newColor5 = new Color(78, 136, 255, 150);
				if (type == 659)
				{
					num27 = 243;
					newColor5 = default(Color);
				}
				if (type == 660)
				{
					newColor5 = new Color(150, 100, 200, 150);
				}
				if (life <= 0)
				{
					num26 = 1.5f;
					num25 = 40;
					if (type == 660)
					{
						Gore.NewGore(position, velocity, 1260, scale);
						Gore.NewGore(position, velocity, 1260, scale);
					}
				}
				for (int num28 = 0; num28 < num25; num28++)
				{
					int num29 = Dust.NewDust(position, width, height, num27, 2 * hitDirection, -1f, 80, newColor5, num26);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num29].noGravity = true;
					}
				}
			}
			if (type == 667)
			{
				int num30 = 7;
				float num31 = 1.1f;
				int num32 = 10;
				Color newColor6 = default(Color);
				if (life <= 0)
				{
					num31 = 1.5f;
					num30 = 40;
					for (int num33 = 0; num33 < 8; num33++)
					{
						int num34 = Gore.NewGore(new Vector2(position.X, base.Center.Y - 10f), Vector2.Zero, 1218);
						Main.gore[num34].velocity = new Vector2((float)Main.rand.Next(1, 10) * 0.3f * 2.5f * (float)hitDirection, 0f - (3f + (float)Main.rand.Next(4) * 0.3f));
					}
				}
				else
				{
					for (int num35 = 0; num35 < 3; num35++)
					{
						int num36 = Gore.NewGore(new Vector2(position.X, base.Center.Y - 10f), Vector2.Zero, 1218);
						Main.gore[num36].velocity = new Vector2((float)Main.rand.Next(1, 10) * 0.3f * 2f * (float)hitDirection, 0f - (2.5f + (float)Main.rand.Next(4) * 0.3f));
					}
				}
				for (int num37 = 0; num37 < num30; num37++)
				{
					int num38 = Dust.NewDust(position, width, height, num32, 2 * hitDirection, -1f, 80, newColor6, num31);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num38].noGravity = true;
					}
				}
			}
			if (type == 676)
			{
				int num39 = 8;
				float num40 = 1.1f;
				short num41 = 310;
				if (life <= 0)
				{
					num40 = 1.5f;
					num39 = 40;
				}
				for (int num42 = 0; num42 < num39; num42++)
				{
					Dust dust6 = Main.dust[Dust.NewDust(position, width, height, num41, 2 * hitDirection, -1f, 80, default(Color), num40)];
					if (Main.rand.Next(3) != 0)
					{
						dust6.noGravity = true;
					}
					Dust dust = dust6;
					dust.velocity *= 1.5f;
					dust = dust6;
					dust.velocity += velocity * 0.1f;
				}
			}
			if (type == 552 || type == 553 || type == 554)
			{
				if (life > 0)
				{
					for (int num43 = 0; (double)num43 < dmg / (double)lifeMax * 20.0; num43++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num44 = 0; (float)num44 < 20f; num44++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					int num45 = 983;
					if (type == 553)
					{
						num45 = 1067;
					}
					else if (type == 554)
					{
						num45 = 1071;
					}
					Gore.NewGore(position, velocity, num45, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num45 + 3, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num45 + 2, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num45 + 1, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num45 + 1, scale);
				}
			}
			else if (type == 561 || type == 562 || type == 563)
			{
				if (life > 0)
				{
					for (int num46 = 0; (double)num46 < dmg / (double)lifeMax * 20.0; num46++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num47 = 0; (float)num47 < 20f; num47++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					int num48 = 987;
					if (type == 562)
					{
						num48 = 1055;
					}
					else if (type == 563)
					{
						num48 = 1061;
					}
					Gore.NewGore(position, velocity, num48 + 3, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num48, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num48 + 4, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num48 + 5, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num48 + 2, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num48 + 1, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num48 + 1, scale);
				}
			}
			else if (type == 555 || type == 556 || type == 557)
			{
				if (life > 0)
				{
					for (int num49 = 0; (double)num49 < dmg / (double)lifeMax * 20.0; num49++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					int num50 = 1031;
					if (type == 556)
					{
						num50 = 1034;
					}
					if (type == 557)
					{
						num50 = 1037;
					}
					for (int num51 = 0; (float)num51 < 20f; num51++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, num50, scale);
					Gore.NewGore(new Vector2(position.X + 10f, position.Y + 20f), velocity, num50 + 1, scale);
					Gore.NewGore(new Vector2(position.X + 10f, position.Y + 30f), velocity, num50 + 2, scale);
				}
			}
			else if (type == 551)
			{
				int num52 = (int)((float)life / (float)lifeMax * 100f);
				int num53 = (int)(((double)life + dmg) / (double)(float)lifeMax * 100.0);
				if (num52 != num53 && life > 0 && Main.netMode != 1)
				{
					DD2Event.CheckProgress(type);
				}
				if (life > 0)
				{
					for (int num54 = 0; (double)num54 < dmg / (double)lifeMax * 20.0; num54++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num55 = 0; (float)num55 < 20f; num55++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					if (spriteDirection != -1)
					{
						Gore.NewGore(position + new Vector2(0f, 54f), velocity, 1079, scale);
						Gore.NewGore(position + new Vector2(72f, 90f), velocity, 1080, scale);
						Gore.NewGore(position + new Vector2(102f, 94f), velocity, 1080, scale);
						Gore.NewGore(position + new Vector2(178f, 0f), velocity, 1081, scale);
						Gore.NewGore(position + new Vector2(136f, 12f), velocity, 1082, scale);
						Gore.NewGore(position + new Vector2(82f, 18f), velocity, 1083, scale);
						Gore.NewGore(position + new Vector2(100f, 26f), velocity, 1084, scale);
						Gore.NewGore(position + new Vector2(170f, 16f), velocity, 1085, scale);
						Gore.NewGore(position + new Vector2(190f, 10f), velocity, 1085, scale);
						Gore.NewGore(position + new Vector2(100f, 36f), velocity, 1086, scale);
					}
					else
					{
						Gore.NewGore(position + new Vector2(176f, 54f), velocity, 1079, scale);
						Gore.NewGore(position + new Vector2(158f, 90f), velocity, 1080, scale);
						Gore.NewGore(position + new Vector2(128f, 94f), velocity, 1080, scale);
						Gore.NewGore(position + new Vector2(0f, 0f), velocity, 1081, scale);
						Gore.NewGore(position + new Vector2(60f, 12f), velocity, 1082, scale);
						Gore.NewGore(position + new Vector2(88f, 18f), velocity, 1083, scale);
						Gore.NewGore(position + new Vector2(86f, 26f), velocity, 1084, scale);
						Gore.NewGore(position + new Vector2(40f, 16f), velocity, 1085, scale);
						Gore.NewGore(position + new Vector2(20f, 10f), velocity, 1085, scale);
						Gore.NewGore(position + new Vector2(142f, 36f), velocity, 1086, scale);
					}
				}
			}
			else if (type == 572 || type == 573)
			{
				if (life > 0)
				{
					for (int num56 = 0; (double)num56 < dmg / (double)lifeMax * 20.0; num56++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]))?.Stop();
					SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]))?.Stop();
					for (int num57 = 0; (float)num57 < 20f; num57++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					Vector2 vector12 = base.Center - new Vector2(10f, 10f);
					Gore.NewGore(vector12, velocity, 993, scale);
					Gore.NewGore(new Vector2(vector12.X, vector12.Y + 20f), velocity, 996, scale);
					Gore.NewGore(new Vector2(vector12.X, vector12.Y + 20f), velocity, 995, scale);
					Gore.NewGore(new Vector2(vector12.X, vector12.Y + 34f), velocity, 994, scale);
					Gore.NewGore(new Vector2(vector12.X, vector12.Y + 34f), velocity, 994, scale);
				}
			}
			else if (type == 574 || type == 575)
			{
				if (life > 0)
				{
					for (int num58 = 0; (double)num58 < dmg / (double)lifeMax * 20.0; num58++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]))?.Stop();
					for (int num59 = 0; (float)num59 < 20f; num59++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					int num60 = 1050;
					Vector2 vector13 = base.Center - new Vector2(30f, 10f);
					Gore.NewGore(new Vector2(vector13.X, vector13.Y + 10f), velocity, num60, scale);
					Gore.NewGore(new Vector2(vector13.X, vector13.Y + 30f), velocity, num60 + 1, scale);
					Gore.NewGore(new Vector2(vector13.X, vector13.Y + 30f), velocity, num60 + 2, scale);
					Gore.NewGore(new Vector2(vector13.X, vector13.Y + 0f), velocity, num60 + 3, scale);
					Gore.NewGore(new Vector2(vector13.X, vector13.Y + 0f), velocity, num60 + 4, scale);
				}
			}
			else if (type == 570 || type == 571)
			{
				if (life > 0)
				{
					for (int num61 = 0; (double)num61 < dmg / (double)lifeMax * 20.0; num61++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num62 = 0; (float)num62 < 20f; num62++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					int num63 = ((type == 570) ? 1075 : 979);
					Gore.NewGore(position, velocity, num63, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num63 + 2, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num63 + 2, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num63 + 3, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num63 + 1, scale);
				}
			}
			else if (type == 568 || type == 569)
			{
				if (life > 0)
				{
					for (int num64 = 0; (double)num64 < dmg / (double)lifeMax * 20.0; num64++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num65 = 0; (float)num65 < 20f; num65++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					Gore.NewGore(position, velocity, 1020, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1021, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1023, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 1022, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 1022, scale);
				}
			}
			else if (type == 558 || type == 559 || type == 560)
			{
				if (life > 0)
				{
					for (int num66 = 0; (double)num66 < dmg / (double)lifeMax * 20.0; num66++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num67 = 0; (float)num67 < 20f; num67++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					int num68 = 974;
					if (type == 559)
					{
						num68 = 1040;
					}
					if (type == 560)
					{
						num68 = 1045;
					}
					Gore.NewGore(position, velocity, num68 + 2, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, num68, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, num68, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, num68 + 4, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 24f), velocity, num68 + 1, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 24f), velocity, num68 + 3, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 24f), velocity, num68 + 3, scale);
				}
			}
			else if (type == 566 || type == 567)
			{
				if (life > 0)
				{
					for (int num69 = 0; (double)num69 < dmg / (double)lifeMax * 20.0; num69++)
					{
						Dust.NewDust(position, width, height, 236, hitDirection, -1f);
					}
				}
				else
				{
					for (int num70 = 0; (float)num70 < 20f; num70++)
					{
						Dust.NewDust(position, width, height, 236, hitDirection, -1f);
					}
					Gore.NewGore(position, velocity, 970, scale);
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 972, scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 972, scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 973, scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 973, scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 971, scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 971, scale);
					}
				}
			}
			else if (type == 576 || type == 577)
			{
				if (life > 0)
				{
					for (int num71 = 0; (double)num71 < dmg / (double)lifeMax * 20.0; num71++)
					{
						Dust.NewDust(position, width, height, 273, hitDirection, -1f);
					}
				}
				else
				{
					for (int num72 = 0; (float)num72 < 20f; num72++)
					{
						Dust.NewDust(position, width, height, 273, hitDirection, -1f);
					}
					if (spriteDirection == -1)
					{
						Gore.NewGore(position + new Vector2(0f, 0f), velocity, 1005 + ((Main.rand.Next(5) == 0) ? 1 : 0), scale);
						Gore.NewGore(position + new Vector2(18f, 28f), velocity, 1000, scale);
						int num73 = Gore.NewGore(position + new Vector2(-40f, 70f), velocity, 1001, scale);
						Main.gore[num73].rotation = MathF.PI;
						num73 = Gore.NewGore(position + new Vector2(4f, 28f), velocity, 1002, scale);
						Main.gore[num73].rotation = MathF.PI;
						Gore.NewGore(position + new Vector2(36f, 90f), velocity, 1003, scale);
						Gore.NewGore(position + new Vector2(32f, 90f), velocity, 1004, scale);
					}
					else
					{
						Gore.NewGore(position + new Vector2(48f, 0f), velocity, 1005 + ((Main.rand.Next(5) == 0) ? 1 : 0), scale);
						Gore.NewGore(position + new Vector2(22f, 28f), velocity, 1000, scale);
						Gore.NewGore(position + new Vector2(48f, 70f), velocity, 1001, scale);
						Gore.NewGore(position + new Vector2(4f, 28f), velocity, 1002, scale);
						Gore.NewGore(position + new Vector2(36f, 90f), velocity, 1003, scale);
						Gore.NewGore(position + new Vector2(32f, 90f), velocity, 1004, scale);
					}
				}
			}
			else if (type == 564 || type == 565)
			{
				if (life > 0)
				{
					for (int num74 = 0; (double)num74 < dmg / (double)lifeMax * 20.0; num74++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num75 = 0; (float)num75 < 20f; num75++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					int num76 = 1009;
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, num76, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 15f), velocity, num76 + 1, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 15f), velocity, num76 + 2, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 15f), velocity, num76 + 3, scale);
					Gore.NewGore(new Vector2(position.X - 20f, position.Y + 35f), velocity, num76 + 4, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 35f), velocity, num76 + 5, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 35f), velocity, num76 + 6, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 35f), velocity, num76 + 10, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 25f), velocity, num76 + 7, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 25f), velocity, num76 + 8, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 25f), velocity, num76 + 9, scale);
				}
			}
			else if (type == 578)
			{
				if (life > 0)
				{
					for (int num77 = 0; (double)num77 < dmg / (double)lifeMax * 20.0; num77++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num78 = 0; (float)num78 < 20f; num78++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					Gore.NewGore(position, velocity, 999, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 998, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 998, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 997, scale);
				}
			}
			else if (type == 620)
			{
				if (life > 0)
				{
					for (int num79 = 0; (double)num79 < dmg / (double)lifeMax * 150.0; num79++)
					{
						Dust dust7 = Dust.NewDustDirect(position, width, height, 5, hitDirection, -1f);
						Dust dust = dust7;
						dust.velocity *= 2.5f;
						dust7.scale = 1.7f;
					}
				}
				else
				{
					for (int num80 = 0; (float)num80 < 150f; num80++)
					{
						Dust dust8 = Dust.NewDustDirect(position, width, height, 5, hitDirection, -1f);
						Dust dust = dust8;
						dust.velocity *= 2.5f;
						dust8.scale = 1.7f;
					}
					int num81 = 1183;
					Gore.NewGore(position, velocity, num81, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num81 + 2, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num81 + 3, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num81 + 1, scale);
				}
			}
			else if (type == 619)
			{
				if (life > 0)
				{
					for (int num82 = 0; (double)num82 < dmg / (double)lifeMax * 150.0; num82++)
					{
						Dust dust9 = Dust.NewDustDirect(position, width, height, 5, hitDirection, -1f);
						Dust dust = dust9;
						dust.velocity *= 2.5f;
						dust9.fadeIn = 1.7f;
					}
				}
				else
				{
					for (int num83 = 0; (float)num83 < 150f; num83++)
					{
						Dust dust10 = Dust.NewDustDirect(position, width, height, 5, hitDirection, -1f);
						Dust dust = dust10;
						dust.velocity *= 2.5f;
						dust10.fadeIn = 1.7f;
					}
					int num84 = 1179;
					Gore.NewGore(position, velocity, num84, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num84 + 2, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num84 + 3, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num84 + 1, scale);
				}
			}
			else if (type == 618)
			{
				if (life > 0)
				{
					for (int num85 = 0; (double)num85 < dmg / (double)lifeMax * 200.0; num85++)
					{
						Dust dust11 = Dust.NewDustDirect(position, width, height, 5, hitDirection, -1f);
						Dust dust = dust11;
						dust.velocity *= 2.5f;
						dust11.scale = 2f;
					}
				}
				else
				{
					for (int num86 = 0; (float)num86 < 200f; num86++)
					{
						Dust dust12 = Dust.NewDustDirect(position, width, height, 5, hitDirection, -1f);
						Dust dust = dust12;
						dust.velocity *= 2.5f;
						dust12.scale = 2.5f;
					}
					int num87 = 1172;
					Gore.NewGore(new Vector2(base.Right.X - 30f, position.Y), velocity, num87, scale);
					Gore.NewGore(position, velocity, num87, scale);
					Gore.NewGore(new Vector2(base.Right.X - 30f, position.Y), velocity, num87 + 1, scale);
					Gore.NewGore(position, velocity, num87 + 1, scale);
					Gore.NewGore(position, velocity, num87 + 2, scale);
					Gore.NewGore(position, velocity, num87 + 3, scale);
					Gore.NewGore(position, velocity, num87 + 4, scale);
					Gore.NewGore(position, velocity, num87 + 4, scale);
					Gore.NewGore(position, velocity, num87 + 5, scale);
					Gore.NewGore(position, velocity, num87 + 5, scale);
					Gore.NewGore(position, velocity, num87 + 6, scale);
					Gore.NewGore(position, velocity, num87 + 6, scale);
				}
			}
			else if (type == 541)
			{
				Color color = new Color(222, 108, 48) * 0.7f;
				if (life > 0)
				{
					for (int num88 = 0; (double)num88 < dmg / (double)lifeMax * 200.0; num88++)
					{
						Dust dust13 = Main.dust[Dust.NewDust(position, width, height, 268)];
						dust13.color = color;
						dust13.noGravity = true;
						dust13.scale = 1.5f;
						dust13.fadeIn = 0.7f;
						Dust dust = dust13;
						dust.velocity *= 3f;
						dust13 = Main.dust[Dust.NewDust(position, width, height, 268)];
						dust13.color = color;
						dust13.noGravity = true;
						dust13.scale = 1.5f;
						dust13.fadeIn = 0.7f;
						dust = dust13;
						dust.velocity *= 3f;
					}
				}
				else
				{
					for (int num89 = 0; num89 < 30; num89++)
					{
						Dust dust14 = Main.dust[Dust.NewDust(position, width, height, 268)];
						dust14.color = color;
						dust14.noGravity = true;
						dust14.scale = 1.5f;
						dust14.fadeIn = 0.7f;
						Dust dust = dust14;
						dust.velocity *= 3f;
						dust14 = Main.dust[Dust.NewDust(position, width, height, 268)];
						dust14.color = color;
						dust14.noGravity = true;
						dust14.scale = 1.5f;
						dust14.fadeIn = 0.7f;
						dust = dust14;
						dust.velocity *= 3f;
					}
					Gore.NewGore(position, velocity, 960, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 961, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 963, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 40f), velocity, 962, scale);
				}
			}
			else if (type == 546)
			{
				Color color2 = new Color(150, 108, 78) * 0.7f;
				if (life > 0)
				{
					for (int num90 = 0; (double)num90 < dmg / (double)lifeMax * 50.0; num90++)
					{
						Dust dust15 = Main.dust[Dust.NewDust(position, width, height, 268)];
						dust15.color = color2;
						dust15.noGravity = true;
						dust15.scale = 1.5f;
						dust15.fadeIn = 0.7f;
						Dust dust = dust15;
						dust.velocity *= 3f;
						dust15 = Main.dust[Dust.NewDust(position, width, height, 268)];
						dust15.color = color2;
						dust15.noGravity = true;
						dust15.scale = 1.5f;
						dust15.fadeIn = 0.7f;
						dust = dust15;
						dust.velocity *= 3f;
					}
				}
				else
				{
					for (int num91 = 0; num91 < 20; num91++)
					{
						Dust dust16 = Main.dust[Dust.NewDust(position, width, height, 268)];
						dust16.color = color2;
						dust16.noGravity = true;
						dust16.scale = 1.5f;
						dust16.fadeIn = 0.7f;
						Dust dust = dust16;
						dust.velocity *= 3f;
						dust16 = Main.dust[Dust.NewDust(position, width, height, 268)];
						dust16.color = color2;
						dust16.noGravity = true;
						dust16.scale = 1.5f;
						dust16.fadeIn = 0.7f;
						dust = dust16;
						dust.velocity *= 3f;
					}
					for (int num92 = 0; num92 < 20; num92++)
					{
						int num93 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust = Main.dust[num93];
						dust.velocity *= 2f;
						Main.dust[num93].noGravity = true;
					}
					Gore.NewGore(position, velocity, 964, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 965, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 966, scale);
				}
			}
			if (type == 378)
			{
				if (life > 0)
				{
					for (int num94 = 0; (double)num94 < dmg / (double)lifeMax * 50.0; num94++)
					{
						Dust.NewDust(position, width, height, 7);
					}
				}
				else
				{
					for (int num95 = 0; num95 < 20; num95++)
					{
						Dust.NewDust(position, width, height, 7);
					}
				}
			}
			if (type == 437 && dmg == 9999.0)
			{
				for (int num96 = 0; num96 < 6; num96++)
				{
					int num97 = Gore.NewGore(base.Center - new Vector2(10f), Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 5f, 728 + num96);
				}
			}
			if (type == 398 && dmg == 1337.0 && Main.netMode != 2)
			{
				MoonlordDeathDrama.ThrowPieces(base.Center, Main.rand.Next(100));
			}
			if (type == 488)
			{
				localAI[0] = (int)dmg;
				if (localAI[0] < 20f)
				{
					localAI[0] = 20f;
				}
				if (localAI[0] > 120f)
				{
					localAI[0] = 120f;
				}
				localAI[1] = hitDirection;
			}
			if (type == 583 || type == 584 || type == 585)
			{
				Color value = Color.HotPink;
				Color value2 = Color.LightPink;
				int num98 = 4;
				if (type == 584)
				{
					value = Color.LimeGreen;
					value2 = Color.LightSeaGreen;
				}
				if (type == 585)
				{
					value = Color.RoyalBlue;
					value2 = Color.LightBlue;
				}
				if (life > 0)
				{
					for (int num99 = 0; (double)num99 < dmg / (double)lifeMax * 50.0; num99++)
					{
						Dust dust17 = Dust.NewDustDirect(base.Center - new Vector2(num98) * 0.5f, num98 + 4, num98 + 4, 278, 0f, 0f, 200, Color.Lerp(value, value2, Main.rand.NextFloat()), 0.65f);
						dust17.noGravity = true;
					}
				}
				else
				{
					for (int num100 = 0; num100 < 20; num100++)
					{
						Dust dust18 = Dust.NewDustDirect(base.Center - new Vector2(num98) * 0.5f, num98 + 4, num98 + 4, 278, 0f, 0f, 200, Color.Lerp(value, value2, Main.rand.NextFloat()), 0.65f);
						Dust dust = dust18;
						dust.velocity *= 1.5f;
						dust18.noGravity = true;
					}
				}
			}
			else if (type >= 513 && type <= 515)
			{
				if (life > 0)
				{
					for (int num101 = 0; (double)num101 < dmg / (double)lifeMax * 100.0; num101++)
					{
						Dust.NewDust(position, width, height, 250, hitDirection, -1f, alpha, this.color, scale);
					}
				}
				else
				{
					for (int num102 = 0; num102 < 50; num102++)
					{
						Dust.NewDust(position, width, height, 250, hitDirection, -2f, alpha, this.color, scale);
					}
					int num103 = Gore.NewGore(position, velocity, type - 513 + 822);
					Main.gore[num103].alpha = alpha;
				}
			}
			else if (type >= 510 && type <= 512)
			{
				if (life > 0)
				{
					for (int num104 = 0; (double)num104 < dmg / (double)lifeMax * 100.0; num104++)
					{
						Dust.NewDust(position, width, height, 250, hitDirection, -1f, alpha, this.color, scale);
					}
				}
				else
				{
					for (int num105 = 0; num105 < 50; num105++)
					{
						Dust.NewDust(position, width, height, 250, hitDirection, -2f, alpha, this.color, scale);
					}
					int num106 = Gore.NewGore(position, velocity, type - 510 + 819);
					Main.gore[num106].alpha = alpha;
				}
			}
			else if (type >= 621 && type <= 623)
			{
				if (life > 0)
				{
					for (int num107 = 0; (double)num107 < dmg / (double)lifeMax * 100.0; num107++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f, alpha, this.color, scale);
					}
				}
				else
				{
					for (int num108 = 0; num108 < 50; num108++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -2f, alpha, this.color, scale);
					}
					int num109 = Gore.NewGore(position, velocity, type - 621 + 1187);
					Main.gore[num109].alpha = alpha;
				}
			}
			else if (type == 518 || type == 416)
			{
				if (life > 0)
				{
					for (int num110 = 0; (double)num110 < dmg / (double)lifeMax * 20.0; num110++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust19 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust19.noGravity = true;
							dust19.scale = 1.5f;
							dust19.fadeIn = 1f;
							Dust dust = dust19;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num111 = 0; num111 < 20; num111++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust20 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust20.noGravity = true;
							dust20.scale = 1.5f;
							dust20.fadeIn = 1f;
							Dust dust = dust20;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(position, velocity, 844, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 845, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 847, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 835, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 836, scale);
				}
			}
			else if (type == 419)
			{
				if (life > 0)
				{
					for (int num112 = 0; (double)num112 < dmg / (double)lifeMax * 20.0; num112++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust21 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust21.noGravity = true;
							dust21.scale = 1.5f;
							dust21.fadeIn = 1f;
							Dust dust = dust21;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num113 = 0; num113 < 20; num113++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust22 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust22.noGravity = true;
							dust22.scale = 1.5f;
							dust22.fadeIn = 1f;
							Dust dust = dust22;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(position, velocity, 844, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 845, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 846, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 846, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 847, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 847, scale);
				}
			}
			else if (type == 412 || type == 413 || type == 414)
			{
				if (life > 0)
				{
					for (int num114 = 0; (double)num114 < dmg / (double)lifeMax * 50.0; num114++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					}
				}
				else
				{
					for (int num115 = 0; num115 < 6; num115++)
					{
						Dust.NewDust(position, width, height, 241, 2.5f * (float)hitDirection, -2.5f);
					}
					for (int num116 = 0; num116 < 2; num116++)
					{
						Dust.NewDust(position, width, height, 6, 2.5f * (float)hitDirection, -2.5f, 100, Color.Transparent, 2f);
					}
					Gore.NewGore(position, velocity, type - 412 + 828);
				}
			}
			else if (type == 415)
			{
				if (life > 0)
				{
					for (int num117 = 0; (double)num117 < dmg / (double)lifeMax * 20.0; num117++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust23 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust23.noGravity = true;
							dust23.scale = 1.5f;
							dust23.fadeIn = 1f;
							Dust dust = dust23;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num118 = 0; num118 < 40; num118++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						Dust dust24 = Main.dust[Dust.NewDust(position, width, height, 6)];
						dust24.noGravity = true;
						dust24.scale = 1.5f;
						dust24.fadeIn = 1f;
						Dust dust = dust24;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Center, velocity * 0.8f, 831);
					Gore.NewGore(base.Center, velocity * 0.8f, 832);
					Gore.NewGore(base.Center, velocity * 0.9f, 833);
					Gore.NewGore(base.Center, velocity * 0.9f, 834);
				}
			}
			else if (type == 417)
			{
				if (life > 0)
				{
					for (int num119 = 0; (double)num119 < dmg / (double)lifeMax * 20.0; num119++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust25 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust25.noGravity = true;
							dust25.scale = 1.5f;
							dust25.fadeIn = 1f;
							Dust dust = dust25;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num120 = 0; num120 < 30; num120++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust26 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust26.noGravity = true;
							dust26.scale = 1.5f;
							dust26.fadeIn = 1f;
							Dust dust = dust26;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(position, velocity, 837, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 838, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 838, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 838, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 839, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 839, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 38f), velocity, 840, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 38f), velocity, 840, scale);
				}
			}
			else if (type == 418)
			{
				if (life > 0)
				{
					for (int num121 = 0; (double)num121 < dmg / (double)lifeMax * 20.0; num121++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust27 = Main.dust[Dust.NewDust(position, width, height, 6)];
							dust27.noGravity = true;
							dust27.scale = 1.5f;
							dust27.fadeIn = 1f;
							Dust dust = dust27;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num122 = 0; num122 < 20; num122++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						Dust dust28 = Main.dust[Dust.NewDust(position, width, height, 6)];
						dust28.noGravity = true;
						dust28.scale = 1.5f;
						dust28.fadeIn = 1f;
						Dust dust = dust28;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Center, velocity * 0.8f, 841);
					Gore.NewGore(base.Center, velocity * 0.8f, 842);
					Gore.NewGore(base.Center, velocity * 0.8f, 842);
					Gore.NewGore(base.Center, velocity * 0.9f, 843);
					Gore.NewGore(base.Center, velocity * 0.9f, 843);
				}
			}
			if (type == 516)
			{
				for (int num123 = 0; num123 < 20; num123++)
				{
					int num124 = Dust.NewDust(position, width, height, 6, 2.5f * (float)hitDirection, -2.5f);
					Dust dust = Main.dust[num124];
					dust.velocity *= 3f;
					dust = Main.dust[num124];
					dust.scale += Main.rand.NextFloat();
					if (Main.rand.Next(2) == 0)
					{
						num124 = Dust.NewDust(position, width, height, 259, 2.5f * (float)hitDirection, -2.5f);
						Main.dust[num124].noGravity = true;
					}
				}
			}
			if (type == 519)
			{
				Rectangle hitbox2 = base.Hitbox;
				for (int num125 = 0; num125 < oldPos.Length; num125 += 3)
				{
					hitbox2.X = (int)oldPos[num125].X;
					hitbox2.Y = (int)oldPos[num125].Y;
					for (int num126 = 0; num126 < 5; num126++)
					{
						int num127 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
						int num128 = Dust.NewDust(hitbox2.TopLeft(), width, height, num127, 2.5f * (float)hitDirection, -2.5f);
						Main.dust[num128].alpha = 200;
						Dust dust = Main.dust[num128];
						dust.velocity *= 2.4f;
						dust = Main.dust[num128];
						dust.scale += Main.rand.NextFloat();
					}
				}
			}
			if (type == 522)
			{
				Vector2 spinningpoint = new Vector2(0f, -3f).RotatedByRandom(3.1415927410125732);
				float num129 = 24f;
				Vector2 vector14 = new Vector2(1.05f, 1f);
				for (float num130 = 0f; num130 < num129; num130++)
				{
					int num131 = Dust.NewDust(base.Center, 0, 0, 66, 0f, 0f, 0, Color.Transparent);
					Main.dust[num131].position = base.Center;
					Main.dust[num131].velocity = spinningpoint.RotatedBy(MathF.PI * 2f * num130 / num129) * vector14 * (0.8f + Main.rand.NextFloat() * 0.4f) * 2f;
					Main.dust[num131].color = Color.SkyBlue;
					Main.dust[num131].noGravity = true;
					Dust dust = Main.dust[num131];
					dust.scale += 0.5f + Main.rand.NextFloat();
				}
			}
			else if (type == 426)
			{
				if (life > 0)
				{
					for (int num132 = 0; (double)num132 < dmg / (double)lifeMax * 50.0; num132++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust29 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust29.noGravity = true;
							dust29.scale = 1.5f;
							dust29.fadeIn = 1f;
							Dust dust = dust29;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num133 = 0; num133 < 20; num133++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					}
					for (int num134 = 0; num134 < 30; num134++)
					{
						int num135 = Utils.SelectRandom<int>(Main.rand, 229, 240, 161);
						Dust dust30 = Main.dust[Dust.NewDust(position, width, height, num135)];
						dust30.noGravity = true;
						dust30.scale = 1.25f + Main.rand.NextFloat();
						dust30.fadeIn = 0.25f;
						Dust dust = dust30;
						dust.velocity *= 2f;
						dust30.noLight = true;
					}
					Gore.NewGore(base.Top, velocity * 0.7f, 799);
					Gore.NewGore(base.Center, velocity * 0.8f, 800);
					Gore.NewGore(base.Center, velocity * 0.9f, 801);
					if (Main.netMode != 1)
					{
						int num136 = CountNPCS(428) + CountNPCS(427) + CountNPCS(426) * 3;
						int num137 = 20;
						if (num136 < num137)
						{
							for (int num138 = 0; num138 < 3; num138++)
							{
								int num139 = NewNPC(GetSpawnSource_NPCHurt(), (int)base.Center.X, (int)base.Center.Y, 428, whoAmI);
								Main.npc[num139].velocity = -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * Main.rand.Next(3, 6) - Vector2.UnitY * 2f;
								Main.npc[num139].netUpdate = true;
							}
						}
					}
				}
			}
			else if (type == 427)
			{
				if (life > 0)
				{
					for (int num140 = 0; (double)num140 < dmg / (double)lifeMax * 20.0; num140++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust31 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust31.noGravity = true;
							dust31.scale = 1.5f;
							dust31.fadeIn = 1f;
							Dust dust = dust31;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num141 = 0; num141 < 10; num141++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					}
					for (int num142 = 0; num142 < 20; num142++)
					{
						int num143 = Utils.SelectRandom<int>(Main.rand, 229, 229, 240);
						Dust dust32 = Main.dust[Dust.NewDust(position, width, height, num143)];
						dust32.noGravity = true;
						dust32.scale = 1.25f + Main.rand.NextFloat();
						dust32.fadeIn = 0.25f;
						Dust dust = dust32;
						dust.velocity *= 3f;
						dust32.noLight = true;
					}
					Gore.NewGore(base.Center, velocity * 0.8f, 802);
					Gore.NewGore(base.Center, velocity * 0.9f, 803);
					Gore.NewGore(base.Center, velocity * 0.9f, 804);
					Gore.NewGore(base.Center, velocity * 0.8f, 805);
				}
			}
			else if (type == 429)
			{
				if (life > 0)
				{
					for (int num144 = 0; (double)num144 < dmg / (double)lifeMax * 20.0; num144++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust33 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust33.noGravity = true;
							dust33.scale = 1.5f;
							dust33.fadeIn = 1f;
							Dust dust = dust33;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num145 = 0; num145 < 20; num145++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust34 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust34.noGravity = true;
							dust34.scale = 1.5f;
							dust34.fadeIn = 1f;
							Dust dust = dust34;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(position, velocity, 808, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 809, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 809, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 810, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 810, scale);
					if (Main.netMode != 1)
					{
						Point point = base.Center.ToTileCoordinates();
						Point point2 = Main.player[target].Center.ToTileCoordinates();
						Vector2 vector15 = Main.player[target].Center - base.Center;
						int num146 = 20;
						int num147 = 3;
						int num148 = 7;
						int num149 = 2;
						int num150 = 0;
						bool flag2 = false;
						if (vector15.Length() > 2000f)
						{
							flag2 = true;
						}
						while (!flag2 && num150 < 100)
						{
							num150++;
							int num151 = Main.rand.Next(point2.X - num146, point2.X + num146 + 1);
							int num152 = Main.rand.Next(point2.Y - num146, point2.Y - Math.Abs(num151 - point2.X) + 1);
							if ((num152 < point2.Y - num148 || num152 > point2.Y + num148 || num151 < point2.X - num148 || num151 > point2.X + num148) && (num152 < point.Y - num147 || num152 > point.Y + num147 || num151 < point.X - num147 || num151 > point.X + num147) && !Main.tile[num151, num152].nactive())
							{
								bool flag3 = true;
								if (flag3 && Main.tile[num151, num152].lava())
								{
									flag3 = false;
								}
								if (flag3 && Collision.SolidTiles(num151 - num149, num151 + num149, num152 - num149, num152 + num149))
								{
									flag3 = false;
								}
								if (flag3 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
								{
									flag3 = false;
								}
								if (flag3)
								{
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), num151 * 16 + 8, num152 * 16 + 8, 0f, 0f, 578, 0, 1f, Main.myPlayer);
									flag2 = true;
									break;
								}
							}
						}
					}
				}
			}
			else if (type == 425)
			{
				if (life > 0)
				{
					for (int num153 = 0; (double)num153 < dmg / (double)lifeMax * 20.0; num153++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust35 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust35.noGravity = true;
							dust35.scale = 1.5f;
							dust35.fadeIn = 1f;
							Dust dust = dust35;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num154 = 0; num154 < 20; num154++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust36 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust36.noGravity = true;
							dust36.scale = 1.5f;
							dust36.fadeIn = 1f;
							Dust dust = dust36;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(position, velocity, 796, scale);
					Gore.NewGore(base.Center, velocity, 797, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 798, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 809, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 809, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 810, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 810, scale);
				}
			}
			else if (type == 428)
			{
				if (life > 0)
				{
					for (int num155 = 0; (double)num155 < dmg / (double)lifeMax * 20.0; num155++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					}
				}
				else
				{
					for (int num156 = 0; num156 < 10; num156++)
					{
						Dust.NewDust(position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust.NewDust(position, width, height, 229);
						}
						else
						{
							Dust.NewDust(position, width, height, 240);
						}
					}
					Gore.NewGore(position, velocity * 0.8f, 806);
					Gore.NewGore(position, velocity * 0.8f, 807);
				}
			}
			else if (type == 424)
			{
				if (life > 0)
				{
					for (int num157 = 0; (double)num157 < dmg / (double)lifeMax * 20.0; num157++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust37 = Main.dust[Dust.NewDust(position, width, height, 242)];
							dust37.noGravity = true;
							dust37.scale = 1.5f;
							dust37.fadeIn = 1f;
							Dust dust = dust37;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num158 = 0; num158 < 20; num158++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust38 = Main.dust[Dust.NewDust(position, width, height, 242)];
							dust38.noGravity = true;
							dust38.scale = 1.5f;
							dust38.fadeIn = 1f;
							Dust dust = dust38;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(position, velocity, 793, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 794, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 794, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 795, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 795, scale);
				}
			}
			else if (type == 423)
			{
				if (life > 0)
				{
					for (int num159 = 0; (double)num159 < dmg / (double)lifeMax * 50.0; num159++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust39 = Main.dust[Dust.NewDust(position, width, height, 242)];
							dust39.noGravity = true;
							dust39.scale = 1.5f;
							dust39.fadeIn = 1f;
							Dust dust = dust39;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num160 = 0; num160 < 20; num160++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						Dust dust40 = Main.dust[Dust.NewDust(position, width, height, 242)];
						dust40.noGravity = true;
						dust40.scale = 1.5f;
						dust40.fadeIn = 1f;
						Dust dust = dust40;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Center, velocity * 0.8f, 790);
					Gore.NewGore(base.Center, velocity * 0.8f, 791);
					Gore.NewGore(base.Center, velocity * 0.9f, 792);
				}
			}
			else if (type == 421)
			{
				if (life > 0)
				{
					for (int num161 = 0; (double)num161 < dmg / (double)lifeMax * 20.0; num161++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust41 = Main.dust[Dust.NewDust(position, width, height, 242)];
							dust41.noGravity = true;
							dust41.scale = 1.5f;
							dust41.fadeIn = 1f;
							Dust dust = dust41;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num162 = 0; num162 < 10; num162++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						Dust dust42 = Main.dust[Dust.NewDust(position, width, height, 242)];
						dust42.noGravity = true;
						dust42.scale = 1.5f;
						dust42.fadeIn = 1f;
						Dust dust = dust42;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Center, velocity * 0.8f, 785);
					Gore.NewGore(base.Center, velocity * 0.8f, 786);
					Gore.NewGore(base.Center, velocity * 0.9f, 787);
				}
			}
			else if (type == 420)
			{
				if (life > 0)
				{
					for (int num163 = 0; (double)num163 < dmg / (double)lifeMax * 20.0; num163++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust43 = Main.dust[Dust.NewDust(position, width, height, 242)];
							dust43.noGravity = true;
							dust43.scale = 1.5f;
							dust43.fadeIn = 1f;
							Dust dust = dust43;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num164 = 0; num164 < 10; num164++)
					{
						Dust.NewDust(position, width, height, 249, hitDirection, -1f);
						Dust dust44 = Main.dust[Dust.NewDust(position, width, height, 242)];
						dust44.noGravity = true;
						dust44.scale = 1.5f;
						dust44.fadeIn = 1f;
						Dust dust = dust44;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Center, velocity * 0.8f, 782);
					Gore.NewGore(base.Center, velocity * 0.8f, 783);
					Gore.NewGore(base.Center, velocity * 0.9f, 784);
				}
			}
			else if (type == 406 || type == 405)
			{
				if (life > 0)
				{
					for (int num165 = 0; (double)num165 < 10.0 + dmg / 10.0; num165++)
					{
						int num166 = width / 4;
						Vector2 vector16 = ((float)Main.rand.NextDouble() * (MathF.PI * 2f)).ToRotationVector2() * Main.rand.Next(24, 41) / 8f;
						int num167 = Dust.NewDust(base.Center - Vector2.One * num166, num166 * 2, num166 * 2, 229);
						Dust dust45 = Main.dust[num167];
						Vector2 vector17 = Vector2.Normalize(dust45.position - base.Center);
						dust45.position = base.Center + vector17 * num166 * scale - new Vector2(4f);
						if (num165 < 30)
						{
							dust45.velocity = vector17 * dust45.velocity.Length() * 2f;
						}
						else
						{
							dust45.velocity = 2f * vector17 * Main.rand.Next(45, 91) / 10f;
						}
						dust45.noGravity = true;
						dust45.scale = 0.7f + Main.rand.NextFloat();
					}
				}
				else
				{
					for (int num168 = 0; num168 < 60; num168++)
					{
						int num169 = width / 4;
						Vector2 vector18 = ((float)Main.rand.NextDouble() * (MathF.PI * 2f)).ToRotationVector2() * Main.rand.Next(24, 41) / 8f;
						int num170 = Dust.NewDust(base.Center - Vector2.One * num169, num169 * 2, num169 * 2, 229);
						Dust dust46 = Main.dust[num170];
						Vector2 vector19 = Vector2.Normalize(dust46.position - base.Center);
						dust46.position = base.Center + vector19 * num169 * scale - new Vector2(4f);
						if (num168 < 30)
						{
							dust46.velocity = vector19 * dust46.velocity.Length() * 2f;
						}
						else
						{
							dust46.velocity = 2f * vector19 * Main.rand.Next(45, 91) / 10f;
						}
						dust46.noGravity = true;
						dust46.scale = 0.7f;
					}
					if (type == 405)
					{
						int num171 = CountNPCS(406) + CountNPCS(405);
						int num172 = 4;
						if (num171 >= 4)
						{
							num172 = 3;
						}
						if (num171 >= 7)
						{
							num172 = 2;
						}
						if (num171 >= 10)
						{
							num172 = 1;
						}
						for (int num173 = 0; num173 < num172; num173++)
						{
							Vector2 vector20 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (3f + Main.rand.NextFloat() * 4f);
							int num174 = NewNPC(GetSpawnSource_NPCHurt(), (int)base.Center.X, (int)base.Bottom.Y, 406, whoAmI);
							Main.npc[num174].velocity = vector20;
						}
					}
				}
			}
			else if (type == 409)
			{
				if (life > 0)
				{
					for (int num175 = 0; (double)num175 < dmg / (double)lifeMax * 50.0; num175++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust47 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust47.noGravity = true;
						}
					}
				}
				else
				{
					for (int num176 = 0; num176 < 20; num176++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						Dust dust48 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust48.noGravity = true;
						Dust dust = dust48;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Center, velocity * 0.8f, 775);
					Gore.NewGore(base.Center, velocity * 0.8f, 776);
					Gore.NewGore(base.Center, velocity * 0.9f, 777);
				}
			}
			else if (type == 410)
			{
				if (life > 0)
				{
					for (int num177 = 0; (double)num177 < dmg / (double)lifeMax * 10.0; num177++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust49 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust49.noGravity = true;
						}
					}
				}
				else
				{
					for (int num178 = 0; num178 < 5; num178++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						Dust dust50 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust50.noGravity = true;
						Dust dust = dust50;
						dust.velocity *= 3f;
					}
				}
			}
			else if (type == 407)
			{
				if (life > 0)
				{
					for (int num179 = 0; (double)num179 < dmg / (double)lifeMax * 50.0; num179++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f, 0, Color.Transparent, 0.75f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust51 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust51.noGravity = true;
						}
					}
				}
				else
				{
					for (int num180 = 0; num180 < 20; num180++)
					{
						if (Main.rand.Next(3) != 0)
						{
							Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						}
						Dust dust52 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust52.noGravity = true;
						Dust dust = dust52;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Top, velocity * 0.8f, 778);
					Gore.NewGore(base.Top, velocity * 0.8f, 779);
					Gore.NewGore(base.Center, velocity * 0.9f, 780);
					Gore.NewGore(base.Center, velocity * 0.9f, 781);
					Gore.NewGore(base.Center, velocity * 0.9f, 780);
					Gore.NewGore(base.Center, velocity * 0.9f, 781);
				}
			}
			else if (type == 402)
			{
				if (life > 0)
				{
					for (int num181 = 0; (double)num181 < dmg / (double)lifeMax * 3.0; num181++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust.NewDust(position, width, height, 17, hitDirection, -1f, 0, Color.Transparent, 0.75f);
						}
						if (Main.rand.Next(2) == 0)
						{
							Dust dust53 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust53.noGravity = true;
						}
						for (int num182 = 0; num182 < oldPos.Length; num182++)
						{
							if (Main.rand.Next(4) == 0)
							{
								if (oldPos[num182] == Vector2.Zero)
								{
									break;
								}
								if (Main.rand.Next(3) == 0)
								{
									Dust.NewDust(oldPos[num182], width, height, 17, hitDirection, -1f, 0, Color.Transparent, 0.75f);
								}
								if (Main.rand.Next(2) == 0)
								{
									Dust dust54 = Main.dust[Dust.NewDust(oldPos[num182], width, height, 229)];
									dust54.noGravity = true;
								}
							}
						}
					}
				}
				else
				{
					for (int num183 = 0; num183 < 5; num183++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						}
						Dust dust55 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust55.noGravity = true;
						Dust dust = dust55;
						dust.velocity *= 3f;
					}
					for (int num184 = 0; num184 < oldPos.Length; num184++)
					{
						if (Main.rand.Next(4) != 0)
						{
							continue;
						}
						if (oldPos[num184] == Vector2.Zero)
						{
							break;
						}
						for (int num185 = 0; num185 < 2; num185++)
						{
							if (Main.rand.Next(3) == 0)
							{
								Dust.NewDust(oldPos[num184], width, height, 17, hitDirection, -1f);
							}
							Dust dust56 = Main.dust[Dust.NewDust(oldPos[num184], width, height, 229)];
							dust56.noGravity = true;
							Dust dust = dust56;
							dust.velocity *= 3f;
						}
					}
				}
			}
			else if (type == 411)
			{
				if (life > 0)
				{
					for (int num186 = 0; (double)num186 < dmg / (double)lifeMax * 20.0; num186++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust57 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust57.noGravity = true;
						}
					}
				}
				else
				{
					for (int num187 = 0; num187 < 20; num187++)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust58 = Main.dust[Dust.NewDust(position, width, height, 229)];
							dust58.noGravity = true;
						}
					}
					Gore.NewGore(position, velocity, 772, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 773, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 773, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 774, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 774, scale);
				}
			}
			else if (type == 491)
			{
				if (life <= 0)
				{
					Vector2 vector21 = base.Center - new Vector2(60f);
					Vector2 vector22 = new Vector2((spriteDirection != 1) ? 1 : (-1), 0f).RotatedBy(rotation);
					Gore.NewGore(vector21 + vector22 * (width / 2), velocity, 858, scale);
					Gore.NewGore(vector21 + vector22 * (width / 3), velocity, 857, scale);
					for (int num188 = -1; num188 < 2; num188++)
					{
						Gore.NewGore(vector21 + vector22 * ((float)width * (0.45f + (float)num188 * 0.1f)), velocity, 859, scale);
						Gore.NewGore(vector21 + vector22 * ((float)width * (0.4f + (float)num188 * 0.1f)), velocity, 859, scale);
						Gore.NewGore(vector21 + vector22 * ((float)width * (0.35f + (float)num188 * 0.1f)), velocity, 859, scale);
					}
					for (int num189 = -1; num189 < 2; num189++)
					{
						Gore.NewGore(vector21 + vector22 * ((float)width * 0.35f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
						Gore.NewGore(vector21 + vector22 * ((float)width * 0.15f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
						Gore.NewGore(vector21 + vector22 * ((float)width * -0.35f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
						Gore.NewGore(vector21 + vector22 * ((float)width * -0.15f) - new Vector2(0f, 300f) + Utils.RandomVector2(Main.rand, -40f, 40f), velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
						Gore.NewGore(vector21 + vector22 * ((float)width * -0.15f) - new Vector2(0f, 300f) + Utils.RandomVector2(Main.rand, -40f, 40f), velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
					}
					for (int num190 = 0; num190 < 2; num190++)
					{
						Gore.NewGore(vector21 + vector22 * ((float)width * 0.15f) - new Vector2(0f, 160 + 60 * num190), velocity, 855, scale);
						Gore.NewGore(vector21 + vector22 * ((float)width * -0.15f) - new Vector2(0f, 160 + 60 * num190), velocity, 855, scale);
					}
					for (int num191 = -1; num191 < 2; num191++)
					{
						Gore.NewGore(vector21 + vector22 * ((float)width * (0.25f + (float)num191 * 0.1f)) - new Vector2(0f, 20 + 40 * num191), velocity, 854, scale);
						Gore.NewGore(vector21 + vector22 * ((float)width * (-0.45f + (float)num191 * 0.1f)) - new Vector2(0f, 20 + 40 * num191), velocity, 853, scale);
						Gore.NewGore(vector21 + vector22 * ((float)width * (0.05f + (float)num191 * 0.1f)) - new Vector2(0f, 20 + 40 * num191), velocity, 856, scale);
					}
					for (int num192 = 0; num192 < 30; num192++)
					{
						int num193 = Main.rand.Next(861, 863);
						int num194 = Gore.NewGore(base.Center - new Vector2(60f), Vector2.Zero, num193);
						Main.gore[num194].alpha = 100;
						Main.gore[num194].velocity = Vector2.Transform(new Vector2(4f, 0f), Matrix.CreateRotationZ((float)(Main.rand.NextDouble() * 6.2831854820251465)));
						Main.gore[num194].position = new Vector2(position.X - 20f + ((float)width + 40f) * Main.rand.NextFloat(), position.Y - 240f + (float)(height + 240 - 20) * Main.rand.NextFloat());
					}
					for (int num195 = 0; num195 < 120; num195++)
					{
						int num196 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num196].noGravity = true;
						Dust dust = Main.dust[num196];
						dust.velocity *= 5f;
						num196 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num196];
						dust.velocity *= 4f;
						Main.dust[num196].noGravity = true;
					}
					if (Main.netMode != 1)
					{
						for (int num197 = 0; num197 < 4; num197++)
						{
							float num198 = (float)(num197 < 2).ToDirectionInt() * (MathF.PI / 8f + MathF.PI / 4f * Main.rand.NextFloat());
							Vector2 vector23 = new Vector2(0f, (0f - Main.rand.NextFloat()) * 0.5f - 0.5f).RotatedBy(num198) * 6f;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector23.X, vector23.Y, 594, 0, 0f, Main.myPlayer);
						}
					}
				}
			}
			else if (type == 492)
			{
				if (life <= 0)
				{
					for (int num199 = 0; num199 < 7; num199++)
					{
						int num200 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num200];
						dust.velocity *= 1.4f;
					}
					for (int num201 = 0; num201 < 10; num201++)
					{
						int num202 = Main.rand.Next(61, 64);
						int num203 = Gore.NewGore(position, Vector2.Zero, num202);
						Main.gore[num203].alpha = 100;
						Main.gore[num203].velocity = Vector2.Transform(new Vector2(1f, 0f), Matrix.CreateRotationZ((float)(Main.rand.NextDouble() * 6.2831854820251465)));
					}
				}
			}
			else if (type >= 524 && type <= 527)
			{
				int num204 = 0;
				int num205 = 5;
				int num206 = 863;
				if (type == 525)
				{
					num204 = 75;
					num206 = 867;
				}
				else if (type == 526)
				{
					num204 = 170;
					num206 = 871;
				}
				else if (type == 527)
				{
					num204 = 67;
					num206 = 879;
				}
				if (life > 0)
				{
					for (int num207 = 0; (double)num207 < dmg / (double)lifeMax * 20.0; num207++)
					{
						Dust.NewDust(position, width, height, num205, hitDirection, -1f);
						if (Main.rand.Next(4) == 0 && num204 > 0)
						{
							Dust dust59 = Main.dust[Dust.NewDust(position, width, height, num204)];
							dust59.noGravity = true;
							dust59.scale = 1.5f;
							dust59.fadeIn = 1f;
							Dust dust = dust59;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num208 = 0; num208 < 20; num208++)
					{
						Dust.NewDust(position, width, height, num205, hitDirection, -1f);
						if (Main.rand.Next(3) == 0 && num204 > 0)
						{
							Dust dust60 = Main.dust[Dust.NewDust(position, width, height, num204)];
							dust60.noGravity = true;
							dust60.scale = 1.5f;
							dust60.fadeIn = 1f;
							Dust dust = dust60;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(position, velocity, num206, scale);
					Gore.NewGore(position, velocity, num206 + 1, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num206 + 2, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num206 + 2, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num206 + 3, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num206 + 3, scale);
				}
			}
			else if (type >= 528 && type <= 529)
			{
				int num209 = 5;
				int num210 = 875;
				if (type == 529)
				{
					num210 = 876;
				}
				if (life > 0)
				{
					for (int num211 = 0; (double)num211 < dmg / (double)lifeMax * 20.0; num211++)
					{
						Dust.NewDust(position, width, height, num209, hitDirection, -1f);
					}
				}
				else
				{
					for (int num212 = 0; num212 < 20; num212++)
					{
						Dust.NewDust(position, width, height, num209, hitDirection, -1f);
					}
					Gore.NewGore(position, velocity, num210, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 877, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 877, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 878, scale);
				}
			}
			else if (type == 530 || type == 531)
			{
				if (life > 0)
				{
					for (int num213 = 0; (double)num213 < dmg / (double)lifeMax * 30.0; num213++)
					{
						Dust.NewDust(position, width, height, 250, hitDirection, -1f, 100);
					}
				}
				else
				{
					for (int num214 = 0; num214 < 20; num214++)
					{
						Dust.NewDust(position, width, height, 250, 2.5f * (float)hitDirection, -2.5f, 100);
					}
					Gore.NewGore(position, velocity, 883);
					Gore.NewGore(position, velocity, 884);
					Gore.NewGore(position, velocity, 885);
					Gore.NewGore(position, velocity, 886);
					Gore.NewGore(position, velocity, 887);
				}
			}
			else if (type == 532)
			{
				if (life > 0)
				{
					for (int num215 = 0; (double)num215 < dmg / (double)lifeMax * 50.0; num215++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f, 100);
					}
				}
				else
				{
					for (int num216 = 0; num216 < 50; num216++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f, 100);
					}
					Gore.NewGore(position, velocity, 888);
					Gore.NewGore(position, velocity, 889);
					Gore.NewGore(position, velocity, 890);
					Gore.NewGore(position, velocity, 891);
				}
			}
			else if (type == 533)
			{
				if (life > 0)
				{
					for (int num217 = 0; (double)num217 < dmg / (double)lifeMax * 50.0; num217++)
					{
						int num218 = Dust.NewDust(position, width, height, 27, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust = Main.dust[num218];
						dust.velocity *= 2f;
						Main.dust[num218].noGravity = true;
					}
				}
				else
				{
					for (int num219 = 0; num219 < 40; num219++)
					{
						int num220 = Dust.NewDust(position, width, height, 27, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust = Main.dust[num220];
						dust.velocity *= 2f;
						Main.dust[num220].noGravity = true;
						Main.dust[num220].fadeIn = 1f;
					}
				}
			}
			else if (type == 460)
			{
				if (life > 0)
				{
					for (int num221 = 0; (double)num221 < dmg / (double)lifeMax * 100.0; num221++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num222 = 0; num222 < 50; num222++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 643, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 645, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 644, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 646, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 646, scale);
				}
			}
			else if (type == 477)
			{
				if (life > 0)
				{
					for (int num223 = 0; (double)num223 < dmg / (double)lifeMax * 100.0; num223++)
					{
						Dust.NewDust(position, width, height, 237, hitDirection, -1f);
					}
				}
				else
				{
					for (int num224 = 0; num224 < 50; num224++)
					{
						Dust.NewDust(position, width, height, 237, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 687, scale);
					Gore.NewGore(position, velocity, 688, scale);
					Gore.NewGore(position, velocity, 689, scale);
					Gore.NewGore(position, velocity, 690, scale);
					Gore.NewGore(position, velocity, 691, scale);
				}
			}
			else if (type == 479)
			{
				if (life > 0)
				{
					for (int num225 = 0; (double)num225 < dmg / (double)lifeMax * 100.0; num225++)
					{
						Dust.NewDust(position, width, height, 237, hitDirection, -1f);
					}
				}
				else
				{
					for (int num226 = 0; num226 < 50; num226++)
					{
						Dust.NewDust(position, width, height, 237, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 681, scale);
					Gore.NewGore(position, velocity, 682, scale);
					Gore.NewGore(position, velocity, 683, scale);
				}
			}
			else if (type == 478)
			{
				if (life > 0)
				{
					for (int num227 = 0; num227 < 10; num227++)
					{
						int num228 = Dust.NewDust(position, width, height, 238, hitDirection, -1f);
						Main.dust[num228].noGravity = true;
					}
				}
				else
				{
					for (int num229 = 0; num229 < 50; num229++)
					{
						Dust.NewDust(position, width, height, 237 + Main.rand.Next(2), 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 684, scale);
					Gore.NewGore(position, velocity, 685, scale);
					Gore.NewGore(position, velocity, 686, scale);
					Gore.NewGore(position, velocity, 684 + Main.rand.Next(3), scale);
				}
			}
			else if (type == 466)
			{
				if (life > 0)
				{
					for (int num230 = 0; (double)num230 < dmg / (double)lifeMax * 100.0; num230++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num231 = 0; num231 < 50; num231++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 656, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 657, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 659, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 658, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 658, scale);
				}
			}
			else if (type == 468)
			{
				if (life > 0)
				{
					for (int num232 = 0; (double)num232 < dmg / (double)lifeMax * 100.0; num232++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num233 = 0; num233 < 50; num233++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 662, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 663, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 663, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 664, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 664, scale);
				}
			}
			else if (type == 469)
			{
				if (life > 0)
				{
					for (int num234 = 0; (double)num234 < dmg / (double)lifeMax * 100.0; num234++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num235 = 0; num235 < 50; num235++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 665, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 666, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 666, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 667, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 667, scale);
				}
			}
			else if (type == 463)
			{
				if (life > 0)
				{
					for (int num236 = 0; (double)num236 < dmg / (double)lifeMax * 100.0; num236++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num237 = 0; num237 < 50; num237++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 653, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 654, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 654, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 655, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 655, scale);
				}
			}
			else if (type == 461)
			{
				if (life > 0)
				{
					for (int num238 = 0; (double)num238 < dmg / (double)lifeMax * 100.0; num238++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num239 = 0; num239 < 50; num239++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 647, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 648, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 648, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 649, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 649, scale);
				}
			}
			else if (type == 462)
			{
				if (life > 0)
				{
					for (int num240 = 0; (double)num240 < dmg / (double)lifeMax * 100.0; num240++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num241 = 0; num241 < 50; num241++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 650, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 651, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 651, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 652, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 652, scale);
				}
			}
			else if (type == 379 || type == 438)
			{
				if (life > 0)
				{
					for (int num242 = 0; (double)num242 < dmg / (double)(lifeMax * 50); num242++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num243 = 0; num243 < 30; num243++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 900, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 901, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 901, scale);
				}
			}
			else if (type == 439)
			{
				if (life > 0)
				{
					for (int num244 = 0; (double)num244 < dmg / (double)lifeMax * 100.0; num244++)
					{
						int num245 = Dust.NewDust(position, width, height, 5, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num245];
						dust.velocity *= 1.5f;
						Main.dust[num245].noGravity = true;
					}
				}
				else
				{
					for (int num246 = 0; num246 < 30; num246++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					for (int num247 = 0; num247 < 10; num247++)
					{
						int num248 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num248];
						dust.velocity *= 2f;
						Main.dust[num248].noGravity = true;
					}
					int num249 = Main.rand.Next(1, 4);
					for (int num250 = 0; num250 < num249; num250++)
					{
						int num251 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), Main.rand.Next(11, 14), scale);
						Gore gore2 = Main.gore[num251];
						gore2.velocity *= 0.8f;
					}
					Gore.NewGore(position, velocity, 902, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 903, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 901, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 901, scale);
				}
			}
			else if (type == 440)
			{
				if (life <= 0)
				{
					for (int num252 = 0; num252 < 10; num252++)
					{
						int num253 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num253];
						dust.velocity *= 2f;
						Main.dust[num253].noGravity = true;
					}
					int num254 = Main.rand.Next(1, 4);
					for (int num255 = 0; num255 < num254; num255++)
					{
						int num256 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), Main.rand.Next(11, 14), scale);
						Gore gore2 = Main.gore[num256];
						gore2.velocity *= 0.8f;
					}
				}
			}
			else if (type >= 454 && type <= 459)
			{
				if (life > 0)
				{
					for (int num257 = 0; (double)num257 < dmg / (double)lifeMax * 50.0; num257++)
					{
						int num258 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num258];
						dust.velocity *= 1.5f;
						Main.dust[num258].noGravity = true;
					}
				}
				else
				{
					for (int num259 = 0; num259 < 10; num259++)
					{
						int num260 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num260];
						dust.velocity *= 2f;
						Main.dust[num260].noGravity = true;
					}
					int num261 = Main.rand.Next(1, 4);
					for (int num262 = 0; num262 < num261; num262++)
					{
						int num263 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), Main.rand.Next(11, 14), scale);
						Gore gore2 = Main.gore[num263];
						gore2.velocity *= 0.8f;
					}
				}
			}
			if (type == 372 || type == 373)
			{
				if (life > 0)
				{
					for (int num264 = 0; (double)num264 < dmg / (double)lifeMax * 100.0; num264++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num265 = 0; num265 < 75; num265++)
					{
						int num266 = Dust.NewDust(base.Center - Vector2.One * 25f, 50, 50, 5, 2 * hitDirection, -2f);
						Dust dust = Main.dust[num266];
						dust.velocity /= 2f;
					}
					Gore.NewGore(base.Center, velocity * 0.8f, 583);
					Gore.NewGore(base.Center, velocity * 0.8f, 577);
					Gore.NewGore(base.Center, velocity * 0.9f, 578);
					Gore.NewGore(base.Center, velocity, 579);
				}
			}
			if (type == 371)
			{
				SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 3);
				if (life <= 0)
				{
					Vector2 center = base.Center;
					for (int num267 = 0; num267 < 60; num267++)
					{
						int num268 = 25;
						Vector2 vector24 = ((float)Main.rand.NextDouble() * (MathF.PI * 2f)).ToRotationVector2() * Main.rand.Next(24, 41) / 8f;
						int num269 = Dust.NewDust(base.Center - Vector2.One * num268, num268 * 2, num268 * 2, 212);
						Dust dust61 = Main.dust[num269];
						Vector2 vector25 = Vector2.Normalize(dust61.position - base.Center);
						dust61.position = base.Center + vector25 * 25f * scale;
						if (num267 < 30)
						{
							dust61.velocity = vector25 * dust61.velocity.Length();
						}
						else
						{
							dust61.velocity = vector25 * Main.rand.Next(45, 91) / 10f;
						}
						dust61.color = Main.hslToRgb((float)(0.4000000059604645 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
						dust61.color = Color.Lerp(dust61.color, Color.White, 0.3f);
						dust61.noGravity = true;
						dust61.scale = 0.7f;
					}
				}
			}
			if (type == 370)
			{
				if (life > 0)
				{
					for (int num270 = 0; (double)num270 < dmg / (double)lifeMax * 100.0; num270++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num271 = 0; num271 < 150; num271++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(base.Center - Vector2.UnitX * 20f * direction, velocity, 576, scale);
					Gore.NewGore(base.Center - Vector2.UnitY * 30f, velocity, 574, scale);
					Gore.NewGore(base.Center, velocity, 575, scale);
					Gore.NewGore(base.Center + Vector2.UnitX * 20f * direction, velocity, 573, scale);
					Gore.NewGore(base.Center - Vector2.UnitY * 30f, velocity, 574, scale);
					Gore.NewGore(base.Center, velocity, 575, scale);
				}
			}
			else if (type == 381)
			{
				if (life > 0)
				{
					for (int num272 = 0; (double)num272 < dmg / (double)(lifeMax * 50); num272++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num273 = 0; num273 < 30; num273++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 587, scale);
					Gore.NewGore(position, velocity, 590, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 588, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 589, scale);
				}
			}
			else if (type == 382 || type == 390)
			{
				if (life > 0)
				{
					for (int num274 = 0; (double)num274 < dmg / (double)(lifeMax * 50); num274++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num275 = 0; num275 < 30; num275++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 591, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 592, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 593, scale);
				}
			}
			else if (type == 383)
			{
				if (life > 0)
				{
					for (int num276 = 0; (double)num276 < dmg / (double)(lifeMax * 50); num276++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num277 = 0; num277 < 30; num277++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 594, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 595, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 596, scale);
				}
			}
			else if (type == 384)
			{
				if (life > 0)
				{
					for (int num278 = 0; (double)num278 < dmg / (double)lifeMax * 50.0; num278++)
					{
						int num279 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num279].position = Vector2.Lerp(Main.dust[num279].position, base.Center, 0.25f);
						Main.dust[num279].scale = 0.5f;
					}
				}
				else
				{
					for (int num280 = 0; num280 < 70; num280++)
					{
						int num281 = Dust.NewDust(position, width, height, 226, -2.5f * (float)hitDirection, -2.5f);
						Main.dust[num281].scale = 0.5f;
					}
				}
			}
			else if (type == 385)
			{
				if (life > 0)
				{
					for (int num282 = 0; (double)num282 < dmg / (double)(lifeMax * 50); num282++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num283 = 0; num283 < 30; num283++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 597, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 598, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 599, scale);
				}
			}
			else if (type == 386)
			{
				if (life > 0)
				{
					for (int num284 = 0; (double)num284 < dmg / (double)(lifeMax * 50); num284++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num285 = 0; num285 < 30; num285++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 600, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 601, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 602, scale);
				}
			}
			if (type == 387)
			{
				if (life > 0)
				{
					for (int num286 = 0; (double)num286 < dmg / (double)lifeMax * 20.0; num286++)
					{
						int num287 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num287].position = Vector2.Lerp(Main.dust[num287].position, base.Center, 0.25f);
						Main.dust[num287].scale = 0.5f;
					}
				}
				else
				{
					for (int num288 = 0; num288 < 30; num288++)
					{
						int num289 = Dust.NewDust(position, width, height, 226, -1.5f * (float)hitDirection, -1.5f);
						Main.dust[num289].scale = 0.5f;
					}
					Gore.NewGore(position, velocity, 603, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 603, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 604, scale);
				}
			}
			if (type == 520)
			{
				if (life > 0)
				{
					for (int num290 = 0; (double)num290 < dmg / (double)lifeMax * 20.0; num290++)
					{
						int num291 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num291].position = Vector2.Lerp(Main.dust[num291].position, base.Center, 0.25f);
						Main.dust[num291].scale = 0.5f;
					}
				}
				else
				{
					for (int num292 = 0; num292 < 30; num292++)
					{
						int num293 = Dust.NewDust(position, width, height, 226, -1.5f * (float)hitDirection, -1.5f);
						Main.dust[num293].scale = 0.5f;
					}
					Gore.NewGore(position, velocity, 851, scale);
					Gore.NewGore(position, velocity, 852, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 80f), velocity, 848, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 80f), velocity, 849, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 80f), velocity, 850, scale);
				}
			}
			else if (type == 389)
			{
				if (life > 0)
				{
					for (int num294 = 0; (double)num294 < dmg / (double)(lifeMax * 50); num294++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num295 = 0; num295 < 30; num295++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 904, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 905, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 906, scale);
				}
			}
			else if (type == 388)
			{
				if (life > 0)
				{
					for (int num296 = 0; (double)num296 < dmg / (double)(lifeMax * 50); num296++)
					{
						int num297 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num297].position = Vector2.Lerp(Main.dust[num297].position, base.Center, 0.25f);
						Main.dust[num297].scale = 0.5f;
					}
				}
				else
				{
					for (int num298 = 0; num298 < 10; num298++)
					{
						int num299 = Dust.NewDust(position, width, height, 226, -2.5f * (float)hitDirection, -2.5f);
						Main.dust[num299].scale = 0.5f;
					}
					Vector2 vector26 = velocity;
					if (ai[0] == 3f)
					{
						vector26 = rotation.ToRotationVector2();
						if (spriteDirection == 1)
						{
							vector26.X *= -1f;
						}
						vector26 *= 5f;
					}
					Gore.NewGore(base.Center - new Vector2(10f, 10f), vector26, 605, scale);
					Gore.NewGore(base.Center - new Vector2(10f, 10f), vector26, 606, scale);
				}
			}
			else if (type == 399)
			{
				if (life > 0)
				{
					for (int num300 = 0; (double)num300 < dmg / (double)(lifeMax * 50); num300++)
					{
						int num301 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num301].position = Vector2.Lerp(Main.dust[num301].position, base.Center, 0.25f);
						Main.dust[num301].scale = 0.5f;
					}
				}
				else
				{
					for (int num302 = 0; num302 < 10; num302++)
					{
						int num303 = Dust.NewDust(position, width, height, 226, -2.5f * (float)hitDirection, -2.5f);
						Main.dust[num303].scale = 0.5f;
					}
					Vector2 vector27 = velocity;
					if (ai[0] == 3f)
					{
						vector27 = rotation.ToRotationVector2();
						if (spriteDirection == 1)
						{
							vector27.X *= -1f;
						}
						vector27 *= 5f;
					}
					Gore.NewGore(base.Center - new Vector2(10f, 10f), vector27, 898, scale);
					Gore.NewGore(base.Center - new Vector2(10f, 10f), vector27, 899, scale);
				}
			}
			else if (type == 391)
			{
				if (life > 0)
				{
					for (int num304 = 0; (double)num304 < dmg / (double)(lifeMax * 50); num304++)
					{
						Dust.NewDust(position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num305 = 0; num305 < 30; num305++)
					{
						Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position + Vector2.UnitX * width / 2f, velocity, 607, scale);
					Gore.NewGore(position + Vector2.UnitX * width / 2f, velocity, 608, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 609, scale);
				}
			}
			if (type == 392 || type == 394 || type == 393 || type == 395)
			{
				if (life > 0)
				{
					for (int num306 = 0; (double)num306 < dmg / (double)lifeMax * 20.0; num306++)
					{
						int num307 = Dust.NewDust(position, width, height, 228, -1 * hitDirection, -1f);
						Main.dust[num307].position = Vector2.Lerp(Main.dust[num307].position, base.Center, 0.25f);
						Main.dust[num307].scale = 0.5f;
					}
				}
				else
				{
					for (int num308 = 0; num308 < 30; num308++)
					{
						int num309 = Dust.NewDust(position, width, height, 228, -1.5f * (float)hitDirection, -1.5f);
						Main.dust[num309].scale = 0.5f;
					}
					Vector2 center2 = base.Center;
					if (type == 395)
					{
						Gore.NewGore(center2 + new Vector2(-20f, -10f), velocity, 610, scale);
						Gore.NewGore(center2 + new Vector2(20f, -10f), velocity, 611, scale);
						Gore.NewGore(center2 + new Vector2(-50f, 0f), velocity, 612, scale);
						Gore.NewGore(center2 + new Vector2(50f, 0f), velocity, 613, scale);
						Gore.NewGore(center2 + new Vector2(-60f, 10f), velocity, 614, scale);
						Gore.NewGore(center2 + new Vector2(0f, 30f), velocity, 615, scale);
					}
					if (type == 393)
					{
						Gore.NewGore(center2, velocity, 616, scale);
					}
					if (type == 394)
					{
						Gore.NewGore(center2, velocity, 617, scale);
					}
				}
			}
			else if (type == 482 || type == 483)
			{
				if (life > 0)
				{
					for (int num310 = 0; (double)num310 < dmg / (double)(lifeMax * 50); num310++)
					{
						Dust.NewDust(position, width, height, 240, hitDirection, -1f);
					}
				}
				else
				{
					for (int num311 = 0; num311 < 30; num311++)
					{
						Dust.NewDust(position, width, height, 240, 2.5f * (float)hitDirection, -2.5f);
					}
					if (type == 482)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 718, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 719, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 720, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 40f), velocity, 721, scale);
					}
				}
			}
			else if (type == 631)
			{
				if (life > 0)
				{
					for (int num312 = 0; (double)num312 < dmg / (double)(lifeMax * 50); num312++)
					{
						Dust.NewDust(position, width, height, 1, hitDirection, -1f);
					}
				}
				else
				{
					for (int num313 = 0; num313 < 30; num313++)
					{
						Dust.NewDust(position, width, height, 1, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1210, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 1211, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1212, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 40f), velocity, 1213, scale);
				}
			}
			if ((type >= 442 && type <= 448) || type == 539 || type == 592 || type == 593 || type == 601 || type == 605 || type == 627)
			{
				if (life > 0)
				{
					for (int num314 = 0; num314 < 10; num314++)
					{
						Dust.NewDust(position, width, height, Main.rand.Next(232, 234), hitDirection, -1f);
					}
				}
				else
				{
					for (int num315 = 0; num315 < 20; num315++)
					{
						Dust.NewDust(position, width, height, Main.rand.Next(232, 234), 2 * hitDirection, -2f);
					}
				}
			}
			if (type == 653 && life <= 0)
			{
				for (int num316 = 0; num316 < 6; num316++)
				{
					int num317 = Dust.NewDust(position, width, height, 174, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num317].noGravity = true;
						Main.dust[num317].scale = 1.5f * scale;
					}
					else
					{
						Main.dust[num317].scale = 0.8f * scale;
					}
				}
			}
			if (type == 333 || type == 334 || type == 335 || type == 336)
			{
				Color newColor7 = Color.White;
				if (type == 333)
				{
					newColor7 = new Color(73, 147, 221, 200);
				}
				if (type == 334)
				{
					newColor7 = new Color(24, 146, 79, 200);
				}
				if (type == 335)
				{
					newColor7 = new Color(194, 46, 50, 200);
				}
				if (type == 336)
				{
					newColor7 = new Color(228, 200, 1, 200);
				}
				if (life > 0)
				{
					for (int num318 = 0; (double)num318 < dmg / (double)lifeMax * 100.0; num318++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, 150, newColor7);
					}
				}
				else
				{
					for (int num319 = 0; num319 < 50; num319++)
					{
						Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 150, newColor7);
					}
				}
			}
			if (type == 537)
			{
				if (life > 0)
				{
					for (int num320 = 0; (double)num320 < dmg / (double)lifeMax * 100.0; num320++)
					{
						Dust.NewDust(position, width, height, 32, hitDirection, -1f);
					}
				}
				else
				{
					for (int num321 = 0; num321 < 50; num321++)
					{
						Dust.NewDust(position, width, height, 32, 2 * hitDirection, -2f);
					}
				}
			}
			if (type == 1 || type == 16 || type == 71 || type == 244 || type == 535)
			{
				if (life > 0)
				{
					for (int num322 = 0; (double)num322 < dmg / (double)lifeMax * 100.0; num322++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, alpha, this.color);
					}
				}
				else
				{
					for (int num323 = 0; num323 < 50; num323++)
					{
						Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, alpha, this.color);
					}
					if (Main.netMode != 1 && type == 16)
					{
						int num324 = Main.rand.Next(2) + 2;
						for (int num325 = 0; num325 < num324; num325++)
						{
							int num326 = NewNPC(GetSpawnSource_NPCHurt(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 1);
							Main.npc[num326].SetDefaults(-5);
							Main.npc[num326].velocity.X = velocity.X * 2f;
							Main.npc[num326].velocity.Y = velocity.Y;
							Main.npc[num326].velocity.X += (float)Main.rand.Next(-20, 20) * 0.1f + (float)(num325 * direction) * 0.3f;
							Main.npc[num326].velocity.Y -= (float)Main.rand.Next(0, 10) * 0.1f + (float)num325;
							Main.npc[num326].ai[0] = -1000 * Main.rand.Next(3);
							if (Main.netMode == 2 && num326 < 200)
							{
								NetMessage.SendData(23, -1, -1, null, num326);
							}
						}
					}
				}
			}
			if (type == 352)
			{
				if (life > 0)
				{
					for (int num327 = 0; (double)num327 < dmg / (double)lifeMax * 100.0; num327++)
					{
						int num328 = Dust.NewDust(position, width, height, 67, hitDirection, -1f);
						Main.dust[num328].noGravity = true;
					}
				}
				else
				{
					for (int num329 = 0; num329 < 60; num329++)
					{
						int num330 = Dust.NewDust(position, width, height, 67, 2 * hitDirection, -2f);
						Main.dust[num330].noGravity = true;
					}
				}
			}
			if (type >= 305 && type <= 314)
			{
				if (life > 0)
				{
					for (int num331 = 0; (double)num331 < dmg / (double)lifeMax * 100.0; num331++)
					{
						Dust.NewDust(position, width, height, 194, hitDirection, -1f, 0, default(Color), 1.1f);
					}
				}
				else
				{
					for (int num332 = 0; num332 < 60; num332++)
					{
						Dust.NewDust(position, width, height, 194, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
					}
					Gore.NewGore(position, velocity, 441, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 442, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 443, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 444, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 445, scale);
				}
			}
			if (type == 327)
			{
				if (life > 0)
				{
					for (int num333 = 0; (double)num333 < dmg / (double)lifeMax * 100.0; num333++)
					{
						Dust.NewDust(position, width, height, 189, hitDirection, -1f, 0, default(Color), 1.1f);
					}
				}
				else
				{
					for (int num334 = 0; num334 < 60; num334++)
					{
						Dust.NewDust(position, width, height, 189, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
					}
					for (int num335 = 476; num335 <= 484; num335++)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, num335, scale);
					}
				}
			}
			if (type == 325)
			{
				if (life > 0)
				{
					for (int num336 = 0; (double)num336 < dmg / (double)lifeMax * 100.0; num336++)
					{
						Dust.NewDust(position, width, height, 191, hitDirection, -1f, 0, default(Color), 1.1f);
					}
				}
				else
				{
					for (int num337 = 0; num337 < 60; num337++)
					{
						Dust.NewDust(position, width, height, 191, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
					}
					for (int num338 = 469; num338 <= 475; num338++)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, num338, scale);
					}
				}
			}
			if (type == 345 && life <= 0)
			{
				Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, 513, scale);
				Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, 514, scale);
				Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, 514, scale);
				Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, 515, scale);
				Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, 516, scale);
			}
			if (type == 344)
			{
				if (life > 0)
				{
					for (int num339 = 0; (double)num339 < dmg / (double)lifeMax * 100.0; num339++)
					{
						Dust.NewDust(position, width, height, 196, hitDirection, -1f);
					}
				}
				else
				{
					for (int num340 = 0; num340 < 60; num340++)
					{
						Dust.NewDust(position, width, height, 196, 2 * hitDirection, -2f);
					}
					for (int num341 = 508; num341 <= 512; num341++)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, num341, scale);
					}
					for (int num342 = 509; num342 <= 512; num342++)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, num342, scale);
					}
				}
			}
			if (type == 326)
			{
				if (life > 0)
				{
					for (int num343 = 0; (double)num343 < dmg / (double)lifeMax * 100.0; num343++)
					{
						Dust.NewDust(position, width, height, 191, hitDirection, -1f, 0, default(Color), 1.1f);
					}
				}
				else
				{
					for (int num344 = 0; num344 < 60; num344++)
					{
						Dust.NewDust(position, width, height, 191, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
					}
				}
			}
			if (type == 304)
			{
				if (life > 0)
				{
					for (int num345 = 0; (double)num345 < dmg / (double)lifeMax * 100.0; num345++)
					{
						Dust.NewDust(position, width, height, 189, hitDirection, -1f, 0, default(Color), 1.3f);
					}
				}
				else
				{
					for (int num346 = 0; num346 < 60; num346++)
					{
						Dust.NewDust(position, width, height, 189, 2 * hitDirection, -2f, 0, default(Color), 1.3f);
					}
				}
			}
			if (type == 302)
			{
				if (life > 0)
				{
					for (int num347 = 0; (double)num347 < dmg / (double)lifeMax * 100.0; num347++)
					{
						Dust.NewDust(position, width, height, 192, hitDirection, -1f, 100, new Color(100, 100, 100, 100));
					}
				}
				else
				{
					for (int num348 = 0; num348 < 50; num348++)
					{
						Dust.NewDust(position, width, height, 192, 2 * hitDirection, -2f, 100, new Color(100, 100, 100, 100));
					}
					Gore.NewGore(position, velocity, 440, scale);
				}
			}
			if (type >= 245 && type <= 249)
			{
				if (life > 0)
				{
					for (int num349 = 0; (double)num349 < dmg / (double)lifeMax * 100.0; num349++)
					{
						Dust.NewDust(position, width, height, 148, hitDirection, -1f);
					}
				}
				else if (type == 246)
				{
					if (Main.netMode != 1)
					{
						NewNPC(GetSpawnSource_NPCHurt(), (int)base.Center.X, (int)position.Y + height, 249, whoAmI);
					}
				}
				else
				{
					for (int num350 = 0; num350 < 50; num350++)
					{
						Dust.NewDust(position, width, height, 148, 2 * hitDirection, -2f);
					}
					if (type == 245)
					{
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 368, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 370, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 368, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 370, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 368, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 370, scale);
						Gore.NewGore(position, velocity, 360, scale);
						Gore.NewGore(position, velocity, 361, scale);
						Gore.NewGore(position, velocity, 362, scale);
						Gore.NewGore(position, velocity, 363, scale);
						Gore.NewGore(position, velocity, 364, scale);
						Gore.NewGore(position, velocity, 367, scale);
						Gore.NewGore(position, velocity, 366, scale);
					}
					else if (type == 249)
					{
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 368, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 370, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 368, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 370, scale);
						Gore.NewGore(position, velocity, 365, scale);
						Gore.NewGore(position, velocity, 363, scale);
						Gore.NewGore(position, velocity, 362, scale);
					}
					else
					{
						Gore.NewGore(position, velocity, 369, scale);
						Gore.NewGore(position, velocity, 371, scale);
						Gore.NewGore(position, velocity, 370, scale);
					}
				}
			}
			if (type == 288 && life <= 0)
			{
				for (int num351 = 0; num351 < 50; num351++)
				{
					int num352 = Dust.NewDust(position, width, height, 180, velocity.X, velocity.Y);
					Dust dust = Main.dust[num352];
					dust.velocity *= 2f;
					Main.dust[num352].noGravity = true;
					Main.dust[num352].scale = 1.4f;
				}
			}
			if (type == 204)
			{
				if (life > 0)
				{
					for (int num353 = 0; (double)num353 < dmg / (double)lifeMax * 100.0; num353++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, 100, new Color(149, 208, 104));
					}
				}
				else
				{
					for (int num354 = 0; num354 < 50; num354++)
					{
						Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 100, new Color(149, 208, 104));
					}
				}
			}
			if (type == 225)
			{
				if (life > 0)
				{
					for (int num355 = 0; (double)num355 < dmg / (double)lifeMax * 100.0; num355++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, 100, new Color(0, 80, 255, 100));
					}
				}
				else
				{
					for (int num356 = 0; num356 < 50; num356++)
					{
						Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 100, new Color(0, 80, 255, 100));
					}
					Gore.NewGore(position, velocity, 314, scale);
				}
			}
			if (type == 243)
			{
				if (life > 0)
				{
					for (int num357 = 0; (double)num357 < dmg / (double)lifeMax * 150.0; num357++)
					{
						Dust.NewDust(position, width, height, 161, hitDirection, -1f);
					}
				}
				else
				{
					for (int num358 = 0; num358 < 200; num358++)
					{
						Dust.NewDust(position, width, height, 161, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 359, scale);
				}
			}
			if ((type == 210 || type == 211) && life <= 0)
			{
				for (int num359 = 0; num359 < 6; num359++)
				{
					int num360 = Dust.NewDust(position, width, height, 150, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num360].noGravity = true;
						Main.dust[num360].scale = 1.5f;
					}
					else
					{
						Main.dust[num360].scale = 0.8f;
					}
				}
			}
			if ((type == 355 || type == 358 || type == 654) && life <= 0)
			{
				for (int num361 = 0; num361 < 6; num361++)
				{
					int num362 = Dust.NewDust(position, width, height, 198, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num362].noGravity = true;
						Main.dust[num362].scale = 1.5f * scale;
					}
					else
					{
						Main.dust[num362].scale = 0.8f * scale;
					}
				}
			}
			if (type == 677 && life <= 0)
			{
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.ShimmerArrow, new ParticleOrchestraSettings
				{
					PositionInWorld = base.Center,
					MovementVector = velocity
				});
				for (int num363 = 0; num363 < 6; num363++)
				{
					int num364 = Dust.NewDust(position, width, height, 310, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num364].noGravity = true;
						Main.dust[num364].scale = 1.5f * scale;
					}
					else
					{
						Main.dust[num364].scale = 0.8f * scale;
					}
				}
			}
			if (type == 604 && life <= 0)
			{
				for (int num365 = 0; num365 < 6; num365++)
				{
					int num366 = Dust.NewDust(position, width, height, 198, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num366].noGravity = true;
						Main.dust[num366].scale = 1.5f * scale;
					}
					else
					{
						Main.dust[num366].scale = 0.8f * scale;
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					Gore.NewGore(position, velocity, 1148);
				}
				if (Main.rand.Next(2) == 0)
				{
					Gore.NewGore(position, velocity, 1149);
				}
			}
			if (type == 669 && life <= 0)
			{
				for (int num367 = 0; num367 < 6; num367++)
				{
					int num368 = Dust.NewDust(position, width, height, 198, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num368].noGravity = true;
						Main.dust[num368].scale = 1.5f * scale;
					}
					else
					{
						Main.dust[num368].scale = 0.8f * scale;
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					Gore.NewGore(position, velocity, 1275);
				}
				if (Main.rand.Next(2) == 0)
				{
					Gore.NewGore(position, velocity, 1276);
				}
			}
			if (type == 356 && life <= 0)
			{
				for (int num369 = 0; num369 < 6; num369++)
				{
					int num370 = Dust.NewDust(position, width, height, 199, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num370].noGravity = true;
						Main.dust[num370].scale = 1.5f * scale;
					}
					else
					{
						Main.dust[num370].scale = 0.8f * scale;
					}
				}
			}
			if (type >= 484 && type <= 487 && life <= 0)
			{
				for (int num371 = 0; num371 < 6; num371++)
				{
					int num372 = Dust.NewDust(position, width, height, 248 + type - 484, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num372].noGravity = true;
						Main.dust[num372].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num372].scale = 0.7f * scale;
					}
				}
			}
			if (type == 357 && life <= 0)
			{
				for (int num373 = 0; num373 < 6; num373++)
				{
					int num374 = Dust.NewDust(position, width, height, 200, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num374].noGravity = true;
						Main.dust[num374].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num374].scale = 0.7f * scale;
					}
				}
			}
			if (type == 606 && life <= 0)
			{
				for (int num375 = 0; num375 < 6; num375++)
				{
					int num376 = Dust.NewDust(position, width, height, 124, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num376].noGravity = true;
						Main.dust[num376].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num376].scale = 0.7f * scale;
					}
				}
			}
			if (type == 377 && life <= 0)
			{
				for (int num377 = 0; num377 < 6; num377++)
				{
					int num378 = Dust.NewDust(position, width, height, 40, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num378].noGravity = true;
						Main.dust[num378].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num378].scale = 0.7f * scale;
					}
				}
			}
			if (type == 374 || type == 375)
			{
				for (int num379 = 0; num379 < 6; num379++)
				{
					int num380 = Dust.NewDust(position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust = Main.dust[num380];
					dust.velocity *= 2f;
					Main.dust[num380].noGravity = true;
				}
			}
			if (type == 359)
			{
				if (life <= 0)
				{
					for (int num381 = 0; num381 < 6; num381++)
					{
						int num382 = Dust.NewDust(position, width, height, 201, 2 * hitDirection, -2f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num382].noGravity = true;
							Main.dust[num382].scale = 1.2f * scale;
						}
						else
						{
							Main.dust[num382].scale = 0.7f * scale;
						}
					}
				}
				Gore.NewGore(position, velocity, 547, scale);
				Gore.NewGore(position, velocity, 548, scale);
			}
			if (type == 360)
			{
				if (life <= 0)
				{
					for (int num383 = 0; num383 < 6; num383++)
					{
						int num384 = Dust.NewDust(position, width, height, 202, 2 * hitDirection, -2f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num384].noGravity = true;
							Main.dust[num384].scale = 1.2f * scale;
						}
						else
						{
							Main.dust[num384].scale = 0.7f * scale;
						}
					}
				}
				Gore.NewGore(position, velocity, 549, scale);
				Gore.NewGore(position, velocity, 550, scale);
			}
			if (type == 655)
			{
				if (life <= 0)
				{
					for (int num385 = 0; num385 < 6; num385++)
					{
						int num386 = Dust.NewDust(position, width, height, 174, 2 * hitDirection, -2f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num386].noGravity = true;
							Main.dust[num386].scale = 1.2f * scale;
						}
						else
						{
							Main.dust[num386].scale = 0.7f * scale;
						}
					}
				}
				Gore.NewGore(position, velocity, 1256, scale);
			}
			if (type == 154)
			{
				if (life > 0)
				{
					for (int num387 = 0; (double)num387 < dmg / (double)lifeMax * 50.0; num387++)
					{
						int num388 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 67, velocity.X, velocity.Y, 90, default(Color), 1.5f);
						Main.dust[num388].noGravity = true;
						Dust dust = Main.dust[num388];
						dust.velocity *= 0.2f;
					}
				}
				else
				{
					for (int num389 = 0; num389 < 50; num389++)
					{
						int num390 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 67, velocity.X, velocity.Y, 90, default(Color), 1.5f);
						Main.dust[num390].noGravity = true;
						Dust dust = Main.dust[num390];
						dust.velocity *= 0.2f;
					}
					Gore.NewGore(position, velocity, 180, scale);
				}
			}
			if (type == 147 || type == 184)
			{
				if (life > 0)
				{
					for (int num391 = 0; (double)num391 < dmg / (double)lifeMax * 50.0; num391++)
					{
						int num392 = Dust.NewDust(position, width, height, 76, hitDirection, -1f);
						Main.dust[num392].noGravity = true;
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, 100, new Color(97, 200, 255, 100));
					}
				}
				else
				{
					for (int num393 = 0; num393 < 30; num393++)
					{
						int num394 = Dust.NewDust(position, width, height, 76, hitDirection, -2f);
						Main.dust[num394].noGravity = true;
						Dust.NewDust(position, width, height, 4, hitDirection, -2f, 100, new Color(97, 200, 255, 100));
					}
				}
			}
			if (type == 143 || type == 144 || type == 145)
			{
				if (life > 0)
				{
					for (int num395 = 0; (double)num395 < dmg / (double)lifeMax * 100.0; num395++)
					{
						int num396 = Dust.NewDust(position, width, height, 76, hitDirection, -1f);
						Main.dust[num396].noGravity = true;
					}
				}
				else
				{
					for (int num397 = 0; num397 < 50; num397++)
					{
						int num398 = Dust.NewDust(position, width, height, 76, hitDirection, -1f);
						Main.dust[num398].noGravity = true;
						Dust dust = Main.dust[num398];
						dust.scale *= 1.2f;
					}
				}
			}
			if (type == 141)
			{
				if (life > 0)
				{
					for (int num399 = 0; (double)num399 < dmg / (double)lifeMax * 100.0; num399++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, alpha, new Color(210, 230, 140));
					}
				}
				else
				{
					for (int num400 = 0; num400 < 50; num400++)
					{
						Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, alpha, new Color(210, 230, 140));
					}
				}
			}
			if (type == 112 || type == 666)
			{
				for (int num401 = 0; num401 < 20; num401++)
				{
					int num402 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 18, 0f, 0f, 100, default(Color), 2f);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust = Main.dust[num402];
						dust.scale *= 0.6f;
					}
					else
					{
						Dust dust = Main.dust[num402];
						dust.velocity *= 1.4f;
						Main.dust[num402].noGravity = true;
					}
				}
			}
			if (type == 183)
			{
				if (life > 0)
				{
					for (int num403 = 0; (double)num403 < dmg / (double)lifeMax * 100.0; num403++)
					{
						Dust.NewDust(position, width, height, 136, 0f, 0f, alpha, this.color);
					}
				}
				else
				{
					for (int num404 = 0; num404 < 50; num404++)
					{
						int num405 = Dust.NewDust(position, width, height, 136, hitDirection, 0f, alpha, this.color);
						Dust dust = Main.dust[num405];
						dust.velocity *= 2f;
					}
				}
			}
			if (type == 81 || type == 121)
			{
				if (life > 0)
				{
					for (int num406 = 0; (double)num406 < dmg / (double)lifeMax * 100.0; num406++)
					{
						Dust.NewDust(position, width, height, 14, 0f, 0f, alpha, this.color);
					}
				}
				else
				{
					for (int num407 = 0; num407 < 50; num407++)
					{
						int num408 = Dust.NewDust(position, width, height, 14, hitDirection, 0f, alpha, this.color);
						Dust dust = Main.dust[num408];
						dust.velocity *= 2f;
					}
					if (Main.netMode != 1)
					{
						if (type == 121)
						{
							int num409 = NewNPC(GetSpawnSource_NPCHurt(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 81);
							Main.npc[num409].SetDefaults(-2);
							Main.npc[num409].velocity.X = velocity.X;
							Main.npc[num409].velocity.Y = velocity.Y;
							Gore.NewGore(position, velocity, 94, scale);
							if (Main.netMode == 2 && num409 < 200)
							{
								NetMessage.SendData(23, -1, -1, null, num409);
							}
						}
						else if (scale >= 1f)
						{
							int num410 = Main.rand.Next(2) + 2;
							for (int num411 = 0; num411 < num410; num411++)
							{
								int num412 = NewNPC(GetSpawnSource_NPCHurt(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 1);
								Main.npc[num412].SetDefaults(-1);
								Main.npc[num412].velocity.X = velocity.X * 3f;
								Main.npc[num412].velocity.Y = velocity.Y;
								Main.npc[num412].velocity.X += (float)Main.rand.Next(-10, 10) * 0.1f + (float)(num411 * direction) * 0.3f;
								Main.npc[num412].velocity.Y -= (float)Main.rand.Next(0, 10) * 0.1f + (float)num411;
								Main.npc[num412].ai[1] = num411;
								if (Main.netMode == 2 && num412 < 200)
								{
									NetMessage.SendData(23, -1, -1, null, num412);
								}
							}
						}
					}
				}
			}
			if (type == 120 || type == 137 || type == 138)
			{
				if (life > 0)
				{
					for (int num413 = 0; (double)num413 < dmg / (double)lifeMax * 50.0; num413++)
					{
						int num414 = Dust.NewDust(position, width, height, 71, 0f, 0f, 200);
						Dust dust = Main.dust[num414];
						dust.velocity *= 1.5f;
					}
				}
				else
				{
					for (int num415 = 0; num415 < 50; num415++)
					{
						int num416 = Dust.NewDust(position, width, height, 71, hitDirection, 0f, 200);
						Dust dust = Main.dust[num416];
						dust.velocity *= 1.5f;
					}
				}
			}
			if (type == 122)
			{
				if (life > 0)
				{
					for (int num417 = 0; (double)num417 < dmg / (double)lifeMax * 50.0; num417++)
					{
						int num418 = Dust.NewDust(position, width, height, 72, 0f, 0f, 200);
						Dust dust = Main.dust[num418];
						dust.velocity *= 1.5f;
					}
				}
				else
				{
					for (int num419 = 0; num419 < 50; num419++)
					{
						int num420 = Dust.NewDust(position, width, height, 72, hitDirection, 0f, 200);
						Dust dust = Main.dust[num420];
						dust.velocity *= 1.5f;
					}
				}
			}
			if (type == 75)
			{
				if (life > 0)
				{
					for (int num421 = 0; (double)num421 < dmg / (double)lifeMax * 50.0; num421++)
					{
						Dust.NewDust(position, width, height, 55, 0f, 0f, 200, this.color);
					}
				}
				else
				{
					for (int num422 = 0; num422 < 50; num422++)
					{
						int num423 = Dust.NewDust(position, width, height, 55, hitDirection, 0f, 200, this.color);
						Dust dust = Main.dust[num423];
						dust.velocity *= 2f;
					}
				}
			}
			if (type == 63 || type == 64 || type == 103)
			{
				Color newColor8 = new Color(50, 120, 255, 100);
				if (type == 64)
				{
					newColor8 = new Color(225, 70, 140, 100);
				}
				if (type == 103)
				{
					newColor8 = new Color(70, 225, 140, 100);
				}
				if (life > 0)
				{
					for (int num424 = 0; (double)num424 < dmg / (double)lifeMax * 50.0; num424++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, 0, newColor8);
					}
				}
				else
				{
					for (int num425 = 0; num425 < 25; num425++)
					{
						Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 0, newColor8);
					}
				}
			}
			else
			{
				if (type == 59 || type == 60 || type == 151)
				{
					if (life > 0)
					{
						for (int num426 = 0; (double)num426 < dmg / (double)lifeMax * 80.0; num426++)
						{
							int num427 = Dust.NewDust(position, width, height, 6, hitDirection * 2, -1f, alpha, default(Color), 1.5f);
							if (Main.rand.Next(8) != 0)
							{
								Main.dust[num427].noGravity = true;
							}
						}
						return;
					}
					for (int num428 = 0; num428 < 40; num428++)
					{
						int num429 = Dust.NewDust(position, width, height, 6, hitDirection * 2, -1f, alpha, default(Color), 1.5f);
						if (Main.rand.Next(8) != 0)
						{
							Main.dust[num429].noGravity = true;
						}
					}
					if (Main.expertMode && type == 59 && Main.netMode != 1 && !Main.remixWorld)
					{
						try
						{
							int num430 = (int)(base.Center.X / 16f);
							int num431 = (int)(base.Center.Y / 16f);
							if (!WorldGen.SolidTile(num430, num431) && Main.tile[num430, num431].liquid == 0)
							{
								Main.tile[num430, num431].liquid = (byte)Main.rand.Next(50, 150);
								Main.tile[num430, num431].lava(lava: true);
								Main.tile[num430, num431].honey(honey: false);
								WorldGen.SquareTileFrame(num430, num431);
							}
						}
						catch
						{
						}
					}
					if ((type != 151 && type != 60) || Main.netMode == 1 || !Main.remixWorld || !Main.getGoodWorld)
					{
						return;
					}
					try
					{
						int num432 = (int)(base.Center.X / 16f);
						int num433 = (int)(base.Center.Y / 16f);
						if (!WorldGen.SolidTile(num432, num433) && Main.tile[num432, num433].liquid == 0)
						{
							Main.tile[num432, num433].liquid = (byte)Main.rand.Next(50, 150);
							Main.tile[num432, num433].lava(lava: true);
							Main.tile[num432, num433].honey(honey: false);
							WorldGen.SquareTileFrame(num432, num433);
						}
						return;
					}
					catch
					{
						return;
					}
				}
				if (type == 50)
				{
					if (life > 0)
					{
						for (int num434 = 0; (double)num434 < dmg / (double)lifeMax * 300.0; num434++)
						{
							Dust.NewDust(position, width, height, 4, hitDirection, -1f, 175, new Color(0, 80, 255, 100));
						}
						return;
					}
					for (int num435 = 0; num435 < 200; num435++)
					{
						Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 175, new Color(0, 80, 255, 100));
					}
					Gore.NewGore(base.Center + new Vector2(-40f, -height / 2), velocity, 734);
					if (Main.netMode == 1)
					{
						return;
					}
					int num436 = Main.rand.Next(4) + 4;
					for (int num437 = 0; num437 < num436; num437++)
					{
						int x = (int)(position.X + (float)Main.rand.Next(width - 32));
						int y = (int)(position.Y + (float)Main.rand.Next(height - 32));
						int num438 = NewNPC(GetSpawnSource_NPCHurt(), x, y, 1, whoAmI + 1);
						Main.npc[num438].SetDefaults(1);
						Main.npc[num438].velocity.X = (float)Main.rand.Next(-15, 16) * 0.1f;
						Main.npc[num438].velocity.Y = (float)Main.rand.Next(-30, 1) * 0.1f;
						Main.npc[num438].ai[0] = -1000 * Main.rand.Next(3);
						Main.npc[num438].ai[1] = 0f;
						if (Main.netMode == 2 && num438 < 200)
						{
							NetMessage.SendData(23, -1, -1, null, num438);
						}
					}
				}
				else if (type == 153)
				{
					if (life > 0)
					{
						for (int num439 = 0; (double)num439 < dmg / (double)lifeMax * 30.0; num439++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num440 = 0; num440 < 15; num440++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 177);
					Gore.NewGore(position, velocity, 178);
					Gore.NewGore(position, velocity, 179);
					Gore.NewGore(position, velocity, 179);
				}
				else if (type == 177)
				{
					if (life > 0)
					{
						for (int num441 = 0; (double)num441 < dmg / (double)lifeMax * 30.0; num441++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num442 = 0; num442 < 15; num442++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 234);
					Gore.NewGore(position, velocity, 235);
					Gore.NewGore(position, velocity, 236);
					Gore.NewGore(position, velocity, 236);
				}
				else if (type >= 494 && type <= 495)
				{
					if (life > 0)
					{
						for (int num443 = 0; (double)num443 < dmg / (double)lifeMax * 30.0; num443++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num444 = 0; num444 < 15; num444++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					int num445 = (type - 494) * 2;
					Gore.NewGore(position, velocity, 736 + num445);
					Gore.NewGore(position, velocity, 735 + num445);
				}
				else if (type >= 496 && type <= 497)
				{
					if (life > 0)
					{
						for (int num446 = 0; (double)num446 < dmg / (double)lifeMax * 30.0; num446++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num447 = 0; num447 < 15; num447++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					int num448 = type - 496;
					Gore.NewGore(position, velocity, 739 + num448);
				}
				else if (type >= 498 && type <= 506)
				{
					if (life > 0)
					{
						for (int num449 = 0; (double)num449 < dmg / (double)lifeMax * 30.0; num449++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num450 = 0; num450 < 15; num450++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					int num451 = type - 498;
					Gore.NewGore(position, velocity, 750 + num451);
					Gore.NewGore(new Vector2(position.X, position.Y + 16f), velocity, 741 + num451);
					Gore.NewGore(new Vector2(position.X, position.Y + 18f), velocity, 759 + num451);
				}
				else if (type == 49 || type == 51 || type == 93 || type == 150 || type == 152 || type == 226)
				{
					if (life > 0)
					{
						for (int num452 = 0; (double)num452 < dmg / (double)lifeMax * 30.0; num452++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num453 = 0; num453 < 15; num453++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					if (type == 51)
					{
						Gore.NewGore(position, velocity, 83);
					}
					else if (type == 93)
					{
						Gore.NewGore(position, velocity, 107);
					}
					else if (type == 150)
					{
						Gore.NewGore(position, velocity, 164);
						Gore.NewGore(position, velocity, 165);
					}
					else if (type == 152)
					{
						Gore.NewGore(position, velocity, 175);
						Gore.NewGore(position, velocity, 176);
						Gore.NewGore(position, velocity, 176);
					}
					else if (type == 226)
					{
						Gore.NewGore(position, velocity, 317);
						Gore.NewGore(position, velocity, 318);
						Gore.NewGore(position, velocity, 318);
						Gore.NewGore(position, velocity, 319);
					}
					else
					{
						Gore.NewGore(position, velocity, 82);
					}
				}
				else if (type == 611)
				{
					if (life > 0)
					{
						for (int num454 = 0; (double)num454 < dmg / (double)lifeMax * 30.0; num454++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num455 = 0; num455 < 15; num455++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 1164);
					Gore.NewGore(position, velocity, 1164);
					Gore.NewGore(position, velocity, 1165);
				}
				else if (type == 624)
				{
					if (life > 0)
					{
						for (int num456 = 0; (double)num456 < dmg / (double)lifeMax * 20.0; num456++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num457 = 0; num457 < 10; num457++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 1190);
					Gore.NewGore(position, velocity, 1191);
					Gore.NewGore(position, velocity, 1192);
					Gore.NewGore(position, velocity, 1193);
				}
				else if (type == 628)
				{
					if (life > 0)
					{
						for (int num458 = 0; (double)num458 < dmg / (double)lifeMax * 20.0; num458++)
						{
							Dust.NewDust(position, width, height, 3, hitDirection, -1f);
						}
						return;
					}
					for (int num459 = 0; num459 < 10; num459++)
					{
						Dust.NewDust(position, width, height, 3, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 1205);
					Gore.NewGore(position, velocity, 1206);
					Gore.NewGore(position, velocity, 1206);
					Gore.NewGore(position, velocity, 1207);
				}
				else if (type >= 646 && type <= 652)
				{
					int num460 = 138;
					if (type < 652)
					{
						num460 = 86 + (type - 646);
					}
					if (life > 0)
					{
						for (int num461 = 0; (double)num461 < dmg / (double)lifeMax * 20.0; num461++)
						{
							Dust.NewDust(position, width, height, num460, hitDirection, -1f);
						}
						return;
					}
					for (int num462 = 0; num462 < 10; num462++)
					{
						Dust.NewDust(position, width, height, num460, 2 * hitDirection, -2f);
					}
					int num463 = (type - 646) * 2;
					Gore.NewGore(position, velocity, 1234 + num463);
					Gore.NewGore(position, velocity, 1235 + num463);
				}
				else if (type >= 639 && type <= 645)
				{
					int num464 = 138;
					if (type < 645)
					{
						num464 = 86 + (type - 639);
					}
					if (life > 0)
					{
						for (int num465 = 0; (double)num465 < dmg / (double)lifeMax * 20.0; num465++)
						{
							Dust.NewDust(position, width, height, num464, hitDirection, -1f);
						}
						return;
					}
					for (int num466 = 0; num466 < 10; num466++)
					{
						Dust.NewDust(position, width, height, num464, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 1227 + (type - 639));
				}
				else if (type == 46 || type == 55 || type == 67 || type == 74 || type == 102 || type == 224 || type == 230 || type == 297 || type == 298 || type == 299 || type == 300 || type == 303 || type == 337 || type == 538 || type == 540 || type == 587 || type == 610 || type == 614 || type == 616 || type == 617 || type == 625 || type == 626 || type == 627 || type == 615 || type == 671 || type == 672 || type == 673 || type == 674 || type == 675)
				{
					if (life > 0)
					{
						for (int num467 = 0; (double)num467 < dmg / (double)lifeMax * 20.0; num467++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num468 = 0; num468 < 10; num468++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					if (type == 46 || type == 303 || type == 337 || type == 540)
					{
						Gore.NewGore(position, velocity, 76);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 77);
						if (type == 303)
						{
							for (int num469 = 0; num469 < 10; num469++)
							{
								Dust.NewDust(position, width, height, 193, 2 * hitDirection, -2f);
							}
						}
						if (type == 540)
						{
							Gore.NewGore(position, velocity, 926);
						}
					}
					else if (type == 67)
					{
						Gore.NewGore(position, velocity, 95);
						Gore.NewGore(position, velocity, 95);
						Gore.NewGore(position, velocity, 96);
					}
					else if (type == 55 || type == 230)
					{
						Gore.NewGore(position, velocity, 553);
						Gore.NewGore(position, velocity, 554);
					}
					else if (type == 615)
					{
						Gore.NewGore(position, velocity, 1198);
						Gore.NewGore(position, velocity, 1199);
						Gore.NewGore(position, velocity, 1200);
						Gore.NewGore(position, velocity, 1200);
					}
					else if (type == 74)
					{
						Gore.NewGore(position, velocity, 100);
					}
					else if (type == 297)
					{
						Gore.NewGore(position, velocity, 431);
					}
					else if (type == 298)
					{
						Gore.NewGore(position, velocity, 432);
					}
					else if (type == 671)
					{
						Gore.NewGore(position, velocity, 1277);
						Gore.NewGore(base.Center + new Vector2(4f, 0f), velocity, 1279);
						Gore.NewGore(base.Center + new Vector2(-4f, 0f), velocity, 1279);
					}
					else if (type == 672)
					{
						Gore.NewGore(position, velocity, 1280);
						Gore.NewGore(base.Center + new Vector2(4f, 0f), velocity, 1281);
						Gore.NewGore(base.Center + new Vector2(-4f, 0f), velocity, 1281);
					}
					else if (type == 673)
					{
						Gore.NewGore(position, velocity, 1282);
						Gore.NewGore(base.Center + new Vector2(4f, 0f), velocity, 1283);
						Gore.NewGore(base.Center + new Vector2(-4f, 0f), velocity, 1283);
					}
					else if (type == 674)
					{
						Gore.NewGore(position, velocity, 1284);
						Gore.NewGore(base.Center + new Vector2(4f, 0f), velocity, 1285);
						Gore.NewGore(base.Center + new Vector2(-4f, 0f), velocity, 1285);
					}
					else if (type == 675)
					{
						Gore.NewGore(position, velocity, 1286);
						Gore.NewGore(base.Center + new Vector2(4f, 0f), velocity, 1287);
						Gore.NewGore(base.Center + new Vector2(-4f, 0f), velocity, 1287);
					}
					else if (type == 299)
					{
						Gore.NewGore(position, velocity, 433);
					}
					else if (type == 538)
					{
						Gore.NewGore(position, velocity, 897);
					}
					else if (type == 300)
					{
						Gore.NewGore(position, velocity, 434);
					}
					else if (type == 610)
					{
						Gore.NewGore(position, velocity, 1163);
					}
					else if (type == 626)
					{
						Gore.NewGore(position, velocity, 1197);
					}
					else if (type == 102)
					{
						Gore.NewGore(position, velocity, 116);
					}
					else if (type == 224)
					{
						Gore.NewGore(position, velocity, 312);
						Gore.NewGore(position, velocity, 313);
					}
					else if (type == 587)
					{
						for (int num470 = 0; num470 < 50; num470++)
						{
							Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
						}
						Gore.NewGore(position, velocity, 1104);
						Gore.NewGore(position, velocity, 1105);
					}
					else if (type == 616)
					{
						Gore.NewGore(position, velocity, 1166);
						Gore.NewGore(position, velocity, 1167);
						Gore.NewGore(position, velocity, 1168);
						Gore.NewGore(position, velocity, 1168);
					}
					else if (type == 617)
					{
						Gore.NewGore(position, velocity, 1169);
						Gore.NewGore(position, velocity, 1170);
						Gore.NewGore(position, velocity, 1171);
						Gore.NewGore(position, velocity, 1171);
					}
					else if (type == 625)
					{
						Gore.NewGore(position, velocity, 1194);
						Gore.NewGore(position, velocity, 1195);
						Gore.NewGore(position, velocity, 1196);
						Gore.NewGore(position, velocity, 1196);
					}
				}
				else if (type == 148 || type == 149 || type == 168 || type == 470)
				{
					if (life > 0)
					{
						for (int num471 = 0; (double)num471 < dmg / (double)lifeMax * 20.0; num471++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num472 = 0; num472 < 10; num472++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					if (type == 148)
					{
						Gore.NewGore(position, velocity, 160);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 161);
					}
					else if (type == 149)
					{
						Gore.NewGore(position, velocity, 162);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 163);
					}
					else if (type == 168)
					{
						Gore.NewGore(position, velocity, 215);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 216);
					}
					else if (type == 470)
					{
						Gore.NewGore(position, velocity, 673);
						Gore.NewGore(position, velocity, 672);
						Gore.NewGore(position, velocity, 674);
					}
				}
				else if (type == 361)
				{
					if (life > 0)
					{
						for (int num473 = 0; (double)num473 < dmg / (double)lifeMax * 20.0; num473++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num474 = 0; num474 < 10; num474++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 551);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 552);
				}
				else if (type == 687)
				{
					if (life > 0)
					{
						for (int num475 = 0; (double)num475 < dmg / (double)lifeMax * 20.0; num475++)
						{
							Dust.NewDust(position, width, height, 16, hitDirection, -1f);
						}
					}
					else
					{
						Vector2 vector28 = base.Center - new Vector2(20f);
						Utils.PoofOfSmoke(vector28);
					}
				}
				else if (type == 685)
				{
					if (life > 0)
					{
						for (int num476 = 0; (double)num476 < dmg / (double)lifeMax * 20.0; num476++)
						{
							Dust.NewDust(position, width, height, 0, hitDirection, -1f);
						}
					}
					else
					{
						Vector2 vector29 = base.Center - new Vector2(20f);
						Utils.PoofOfSmoke(vector29);
					}
				}
				else if (type == 607)
				{
					if (life > 0)
					{
						for (int num477 = 0; (double)num477 < dmg / (double)lifeMax * 20.0; num477++)
						{
							Dust.NewDust(position, width, height, 45, hitDirection, -1f);
						}
						return;
					}
					for (int num478 = 0; num478 < 10; num478++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 1152);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1153);
				}
				else if (type == 366 || type == 367)
				{
					if (life > 0)
					{
						for (int num479 = 0; (double)num479 < dmg / (double)lifeMax * 20.0; num479++)
						{
							Dust.NewDust(position, width, height, 203, hitDirection, -1f);
						}
						return;
					}
					for (int num480 = 0; num480 < 10; num480++)
					{
						Dust.NewDust(position, width, height, 203, 2 * hitDirection, -2f);
					}
					if (type == 366)
					{
						Gore.NewGore(position, velocity, 561);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 562);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 563);
					}
					else
					{
						Gore.NewGore(position, velocity, 564);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 565);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 566);
					}
				}
				else if (type >= 362 && type <= 365)
				{
					if (life > 0)
					{
						for (int num481 = 0; (double)num481 < dmg / (double)lifeMax * 20.0; num481++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num482 = 0; num482 < 10; num482++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					if (type == 362 || type == 363)
					{
						Gore.NewGore(position, velocity, 555);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 556);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 557);
					}
					else
					{
						Gore.NewGore(position, velocity, 558);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 559);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 560);
					}
				}
				else if (type == 602 || type == 603)
				{
					if (life > 0)
					{
						for (int num483 = 0; (double)num483 < dmg / (double)lifeMax * 20.0; num483++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num484 = 0; num484 < 10; num484++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					if (type == 602 || type == 603)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1150);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1151);
					}
				}
				else if (type == 608 || type == 609)
				{
					if (life > 0)
					{
						for (int num485 = 0; (double)num485 < dmg / (double)lifeMax * 20.0; num485++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num486 = 0; num486 < 10; num486++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					if (type == 608 || type == 609)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1154);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1155);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1156);
					}
				}
				else if (type == 348 || type == 349)
				{
					if (life > 0)
					{
						for (int num487 = 0; (double)num487 < dmg / (double)lifeMax * 20.0; num487++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num488 = 0; num488 < 10; num488++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 528);
					Gore.NewGore(position, velocity, 529);
					Gore.NewGore(position, velocity, 530);
					Gore.NewGore(position, velocity, 531);
					Gore.NewGore(position, velocity, 532);
				}
				else if (type == 351)
				{
					if (life > 0)
					{
						for (int num489 = 0; (double)num489 < dmg / (double)lifeMax * 20.0; num489++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num490 = 0; num490 < 10; num490++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 538);
					Gore.NewGore(position, velocity, 539);
					Gore.NewGore(position, velocity, 540);
					Gore.NewGore(position, velocity, 541);
					Gore.NewGore(position, velocity, 542);
				}
				else if (type == 350)
				{
					if (life > 0)
					{
						for (int num491 = 0; (double)num491 < dmg / (double)lifeMax * 20.0; num491++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num492 = 0; num492 < 10; num492++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 533);
					Gore.NewGore(position, velocity, 534);
					Gore.NewGore(position, velocity, 535);
					Gore.NewGore(position, velocity, 536);
				}
				else if (type == 47 || type == 57 || type == 58 || type == 464 || type == 465)
				{
					if (life > 0)
					{
						for (int num493 = 0; (double)num493 < dmg / (double)lifeMax * 20.0; num493++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num494 = 0; num494 < 10; num494++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					if (type == 57)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 84);
					}
					else if (type == 58)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 85);
					}
					else if (type == 464)
					{
						Gore.NewGore(position, velocity, 668);
						Gore.NewGore(position, velocity, 669);
					}
					else if (type == 465)
					{
						Gore.NewGore(position, velocity, 670);
						Gore.NewGore(position, velocity, 671);
					}
					else
					{
						Gore.NewGore(position, velocity, 78);
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 79);
					}
				}
				else if (type == 173 || type == 174 || type == 181 || type == 182 || type == 268)
				{
					if (life > 0)
					{
						for (int num495 = 0; (double)num495 < dmg / (double)lifeMax * 100.0; num495++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f, alpha);
						}
						return;
					}
					for (int num496 = 0; num496 < 50; num496++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f, alpha);
					}
					if (type == 173)
					{
						Gore.NewGore(position, velocity, 223);
						Gore.NewGore(position, velocity, 224);
					}
					else if (type == 174)
					{
						Gore.NewGore(position, velocity, 225);
						Gore.NewGore(position, velocity, 226);
					}
					else if (type == 181)
					{
						Gore.NewGore(position, velocity, 237);
					}
					else if (type == 182)
					{
						Gore.NewGore(position, velocity, 238);
						Gore.NewGore(position, velocity, 239);
					}
					else if (type == 268)
					{
						Gore.NewGore(position, velocity, 403);
						Gore.NewGore(position, velocity, 404);
						Gore.NewGore(position, velocity, 405);
					}
				}
				else if (type == 2 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 317 || type == 318)
				{
					if (life > 0)
					{
						for (int num497 = 0; (double)num497 < dmg / (double)lifeMax * 100.0; num497++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num498 = 0; num498 < 50; num498++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					if (type == 190)
					{
						Gore.NewGore(position, velocity, 249, scale);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 2, scale);
					}
					else if (type == 191)
					{
						Gore.NewGore(position, velocity, 248, scale);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 2, scale);
					}
					else if (type == 192)
					{
						Gore.NewGore(position, velocity, 247, scale);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 2, scale);
					}
					else if (type == 193)
					{
						Gore.NewGore(position, velocity, 252, scale);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 253, scale);
					}
					else if (type == 194)
					{
						Gore.NewGore(position, velocity, 250, scale);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 251, scale);
					}
					else if (type == 317)
					{
						Gore.NewGore(position, velocity, 447, scale);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 448, scale);
					}
					else if (type == 318)
					{
						Gore.NewGore(position, velocity, 449, scale);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 450, scale);
					}
					else
					{
						Gore.NewGore(position, velocity, 1, scale);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 2, scale);
					}
				}
				else if (type == 157)
				{
					if (life > 0)
					{
						for (int num499 = 0; (double)num499 < dmg / (double)lifeMax * 100.0; num499++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num500 = 0; num500 < 50; num500++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 186);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 187);
				}
				else if (type == 133)
				{
					if (life > 0)
					{
						for (int num501 = 0; (double)num501 < dmg / (double)lifeMax * 100.0; num501++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						if ((float)life < (float)lifeMax * 0.5f && localAI[0] == 0f)
						{
							localAI[0] = 1f;
							Gore.NewGore(position, velocity, 1);
						}
					}
					else
					{
						for (int num502 = 0; num502 < 50; num502++)
						{
							Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
						}
						Gore.NewGore(position, velocity, 155);
						Gore.NewGore(new Vector2(position.X, position.Y + 14f), velocity, 155);
					}
				}
				else if (type == 69 || type == 581 || type == 580 || type == 508 || type == 509 || type == 582)
				{
					float num503 = 100f;
					float num504 = 50f;
					if (type == 582)
					{
						num503 = 30f;
						num504 = 10f;
					}
					if (life > 0)
					{
						for (int num505 = 0; (double)num505 < dmg / (double)lifeMax * (double)num503; num505++)
						{
							Dust.NewDust(position, width, height, 250, hitDirection, -1f);
						}
						return;
					}
					for (int num506 = 0; (float)num506 < num504; num506++)
					{
						Dust.NewDust(position, width, height, 250, 2 * hitDirection, -2f);
					}
					if (type == 69)
					{
						Gore.NewGore(position, velocity, 97);
						Gore.NewGore(position, velocity, 98);
					}
					else if (type == 580)
					{
						Gore.NewGore(position, velocity, 1094);
						Gore.NewGore(position, velocity, 1095);
						Gore.NewGore(position, velocity, 1096);
						Gore.NewGore(position, velocity, 1097);
					}
					else if (type == 581)
					{
						Gore.NewGore(position, velocity, 1098);
						Gore.NewGore(position, velocity, 1099);
						Gore.NewGore(position, velocity, 1100);
						Gore.NewGore(position, velocity, 1101);
						Gore.NewGore(position, velocity, 1101);
					}
					else if (type == 508)
					{
						Gore.NewGore(position, velocity, 811);
						Gore.NewGore(position, velocity, 812);
						Gore.NewGore(position, velocity, 813);
						Gore.NewGore(position, velocity, 814);
					}
					else if (type == 509)
					{
						Gore.NewGore(position, velocity, 815);
						Gore.NewGore(position, velocity, 816);
						Gore.NewGore(position, velocity, 817);
						Gore.NewGore(position, velocity, 818);
						Gore.NewGore(position, velocity, 818);
					}
					else if (type == 582)
					{
						Gore.NewGore(position, velocity, 1102);
						Gore.NewGore(position, velocity, 1103);
					}
				}
				else if (type == 61)
				{
					if (life > 0)
					{
						for (int num507 = 0; (double)num507 < dmg / (double)lifeMax * 100.0; num507++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num508 = 0; num508 < 50; num508++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 86);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 87);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 88);
				}
				else if (type == 301)
				{
					if (life > 0)
					{
						for (int num509 = 0; (double)num509 < dmg / (double)lifeMax * 100.0; num509++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num510 = 0; num510 < 50; num510++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 438);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 439);
				}
				else if (type == 252)
				{
					if (life > 0)
					{
						for (int num511 = 0; (double)num511 < dmg / (double)lifeMax * 100.0; num511++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num512 = 0; num512 < 50; num512++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 373);
					Gore.NewGore(position, velocity, 374);
				}
				else if (type == 489 || type == 586)
				{
					if (life > 0)
					{
						for (int num513 = 0; (double)num513 < dmg / (double)lifeMax * 100.0; num513++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num514 = 0; num514 < 50; num514++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (type == 489)
					{
						Gore.NewGore(position, velocity, 722, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 723, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 723, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 724, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 724, scale);
					}
					if (type == 586)
					{
						Gore.NewGore(position, velocity, 1106, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1107, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1107, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 1108, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 1108, scale);
					}
				}
				else if (type == 534)
				{
					if (life > 0)
					{
						for (int num515 = 0; (double)num515 < dmg / (double)lifeMax * 100.0; num515++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num516 = 0; num516 < 50; num516++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 894, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 895, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 895, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 896, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 896, scale);
				}
				else if (type == 490)
				{
					if (life > 0)
					{
						for (int num517 = 0; (double)num517 < dmg / (double)lifeMax * 100.0; num517++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num518 = 0; num518 < 50; num518++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 725, scale);
					Gore.NewGore(position, velocity, 726, scale);
					Gore.NewGore(position, velocity, 727, scale);
					Gore.NewGore(position, velocity, 725 + Main.rand.Next(3), scale);
					Gore.NewGore(position, velocity, 725 + Main.rand.Next(3), scale);
				}
				else if (type == 65 || (type >= 542 && type <= 545))
				{
					if (life > 0)
					{
						for (int num519 = 0; (double)num519 < dmg / (double)lifeMax * 150.0; num519++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num520 = 0; num520 < 75; num520++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					if (type == 65)
					{
						Gore.NewGore(position, velocity * 0.8f, 89);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 90);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 91);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 92);
					}
					if (type == 542)
					{
						Gore.NewGore(position, velocity * 0.8f, 944);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 945);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 946);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 947);
					}
					if (type == 543)
					{
						Gore.NewGore(position, velocity * 0.8f, 948);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 949);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 950);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 951);
					}
					if (type == 544)
					{
						Gore.NewGore(position, velocity * 0.8f, 952);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 953);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 954);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 955);
					}
					if (type == 545)
					{
						Gore.NewGore(position, velocity * 0.8f, 956);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 957);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 958);
						Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 959);
					}
				}
				else if (type == 195 || type == 196)
				{
					if (life > 0)
					{
						for (int num521 = 0; (double)num521 < dmg / (double)lifeMax * 150.0; num521++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num522 = 0; num522 < 75; num522++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 254, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 255, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 255, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 256, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 256, scale);
				}
				else if (type == 198 || type == 199)
				{
					if (life > 0)
					{
						for (int num523 = 0; (double)num523 < dmg / (double)lifeMax * 150.0; num523++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num524 = 0; num524 < 75; num524++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 258, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 259, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 259, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 260, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 260, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 261, scale);
				}
				else if (type == 206)
				{
					if (life > 0)
					{
						for (int num525 = 0; (double)num525 < dmg / (double)lifeMax * 150.0; num525++)
						{
							Dust.NewDust(position, width, height, 137, hitDirection, -1f);
						}
						return;
					}
					for (int num526 = 0; num526 < 75; num526++)
					{
						Dust.NewDust(position, width, height, 137, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 273, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 274, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 274, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 275, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 275, scale);
				}
				else if (type == 342)
				{
					if (life > 0)
					{
						for (int num527 = 0; (double)num527 < dmg / (double)lifeMax * 100.0; num527++)
						{
							Dust.NewDust(position, width, height, 0, hitDirection, -1f);
						}
						return;
					}
					for (int num528 = 0; num528 < 50; num528++)
					{
						Dust.NewDust(position, width, height, 0, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 500, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 501, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 501, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 502, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 502, scale);
				}
				else if (type >= 338 && type <= 340)
				{
					if (life > 0)
					{
						for (int num529 = 0; (double)num529 < dmg / (double)lifeMax * 100.0; num529++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num530 = 0; num530 < 50; num530++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (type == 338)
					{
						Gore.NewGore(position, velocity, 494, scale);
					}
					if (type == 339)
					{
						Gore.NewGore(position, velocity, 495, scale);
					}
					if (type == 340)
					{
						Gore.NewGore(position, velocity, 496, scale);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 497, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 498, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 499, scale);
				}
				else if (type == 343)
				{
					if (life > 0)
					{
						for (int num531 = 0; (double)num531 < dmg / (double)lifeMax * 100.0; num531++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num532 = 0; num532 < 50; num532++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 503, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 504, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 505, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 506, scale);
				}
				else if ((type >= 430 && type <= 436) || type == 590 || type == 591 || type == 3 || type == 52 || type == 53 || type == 536 || type == 104 || type == 109 || type == 331 || type == 332 || type == 132 || type == 161 || type == 162 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 251 || type == 319 || type == 320 || type == 321 || type == 632)
				{
					if (life > 0)
					{
						for (int num533 = 0; (double)num533 < dmg / (double)lifeMax * 100.0; num533++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						if (type == 186 && Main.rand.Next(5) == 0)
						{
							Gore.NewGore(position, velocity, 242);
						}
						if (type == 632 && Main.rand.Next(5) == 0)
						{
							Gore.NewGore(position, velocity, 1217);
						}
						if (type == 187)
						{
							for (int num534 = 0; (double)num534 < dmg / (double)lifeMax * 200.0; num534++)
							{
								Dust.NewDust(position, width, 24, 4, hitDirection, -1f, 125, new Color(0, 80, 255, 100));
							}
						}
						if ((type == 590 || type == 591) && !wet)
						{
							for (int num535 = 0; num535 < 3; num535++)
							{
								Dust.NewDust(position, width, 24, 6, hitDirection, -1f, 125, new Color(0, 80, 255, 100));
							}
						}
						return;
					}
					for (int num536 = 0; num536 < 50; num536++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (type == 187 || type == 433)
					{
						for (int num537 = 0; num537 < 25; num537++)
						{
							Dust.NewDust(position, width, 24, 4, hitDirection, -1f, 125, new Color(0, 80, 255, 100));
						}
					}
					if (type == 104)
					{
						Gore.NewGore(position, velocity, 117, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 118, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 118, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 119, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 119, scale);
						return;
					}
					if (type == 632)
					{
						Gore.NewGore(position, velocity, 1214, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1215, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1215, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 1216, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 1216, scale);
						if (Main.netMode != 1)
						{
							int num538 = Main.rand.Next(2) + 2;
							for (int num539 = 0; num539 < num538; num539++)
							{
								Vector2 vector30 = new Vector2((float)Main.rand.Next(-10, 10) * 0.2f, -3.5f - (float)Main.rand.Next(5, 10) * 0.3f - (float)num539 * 0.5f);
								int num540 = NewNPC(GetSpawnSource_NPCHurt(), (int)(position.X + (float)(width / 2)), (int)position.Y + Main.rand.Next(height / 2) + 10, 606);
								Main.npc[num540].velocity = vector30;
								Main.npc[num540].netUpdate = true;
							}
						}
						return;
					}
					if (type == 331)
					{
						Gore.NewGore(position, velocity, 488, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 489, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 489, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 490, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 490, scale);
						return;
					}
					if (type == 332)
					{
						Gore.NewGore(position, velocity, 491, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 492, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 492, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 493, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 493, scale);
						return;
					}
					if (type == 109)
					{
						Gore.NewGore(position, velocity, 121, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 122, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 122, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 123, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 123, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 46f), velocity, 120, scale);
						return;
					}
					if (type == 161 || type == 431)
					{
						Gore.NewGore(position, velocity, 191, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 192, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 192, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 193, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 193, scale);
						return;
					}
					if (type == 162)
					{
						Gore.NewGore(position, velocity, 194, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 195, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 195, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 196, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 196, scale);
						return;
					}
					if (type == 188 || type == 434)
					{
						Gore.NewGore(position, velocity, 243, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 244, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 244, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 245, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 245, scale);
						return;
					}
					if (type == 200 || type == 436)
					{
						Gore.NewGore(position, velocity, 262, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 263, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 263, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 264, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 264, scale);
						return;
					}
					if (type == 319)
					{
						Gore.NewGore(position, velocity, 451, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 453, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 453, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 452, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 452, scale);
						return;
					}
					if (type == 320)
					{
						Gore.NewGore(position, velocity, 454, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 455, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 456, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 456, scale);
						return;
					}
					if (type == 321)
					{
						Gore.NewGore(position, velocity, 457, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 458, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 458, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 459, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 459, scale);
						return;
					}
					if (type == 223)
					{
						Gore.NewGore(position, velocity, 309, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 310, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 310, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 311, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 311, scale);
						return;
					}
					if (type == 132)
					{
						Gore.NewGore(position, velocity, 154);
					}
					else if (type == 186 || type == 432)
					{
						Gore.NewGore(position, velocity, 241);
					}
					else if (type == 189 || type == 435)
					{
						Gore.NewGore(position, velocity, 246);
					}
					else if (type == 251)
					{
						Gore.NewGore(position, velocity, 372);
					}
					else if (type != 187 && type != 433)
					{
						Gore.NewGore(position, velocity, 3);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 4);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 4);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 5);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 5);
					if (type == 186 || type == 432)
					{
						Gore.NewGore(position, velocity, 242);
					}
					if ((type == 186 || type == 432) && Main.rand.Next(2) == 0)
					{
						Gore.NewGore(position, velocity, 242);
					}
				}
				else if (type == 83 || type == 84 || type == 179)
				{
					if (life > 0)
					{
						for (int num541 = 0; (double)num541 < dmg / (double)lifeMax * 50.0; num541++)
						{
							int num542 = Dust.NewDust(position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
							Main.dust[num542].noGravity = true;
						}
						return;
					}
					for (int num543 = 0; num543 < 20; num543++)
					{
						int num544 = Dust.NewDust(position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num544];
						dust.velocity *= 2f;
						Main.dust[num544].noGravity = true;
					}
					int num545 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(Main.rand.Next(-2, 3), Main.rand.Next(-2, 3)), 61, scale);
					Gore gore2 = Main.gore[num545];
					gore2.velocity *= 0.5f;
					num545 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(Main.rand.Next(-2, 3), Main.rand.Next(-2, 3)), 61, scale);
					gore2 = Main.gore[num545];
					gore2.velocity *= 0.5f;
					num545 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(Main.rand.Next(-2, 3), Main.rand.Next(-2, 3)), 61, scale);
					gore2 = Main.gore[num545];
					gore2.velocity *= 0.5f;
				}
				else if (type == 262 || type == 263 || type == 264)
				{
					if (life > 0)
					{
						for (int num546 = 0; (double)num546 < dmg / (double)lifeMax * 100.0; num546++)
						{
							if (type == 262 && life > lifeMax / 2 && Main.rand.Next(3) != 0)
							{
								Dust.NewDust(position, width, height, 166, hitDirection, -1f);
							}
							else if (type == 265 && Main.rand.Next(3) != 0)
							{
								Dust.NewDust(position, width, height, 166, hitDirection, -1f);
							}
							else
							{
								Dust.NewDust(position, width, height, 167, hitDirection, -1f);
							}
						}
						return;
					}
					for (int num547 = 0; num547 < 150; num547++)
					{
						if (type == 265 && Main.rand.Next(3) != 0)
						{
							Dust.NewDust(position, width, height, 166, 2 * hitDirection, -2f);
						}
						else
						{
							Dust.NewDust(position, width, height, 167, 2 * hitDirection, -2f);
						}
					}
					if (type == 262)
					{
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 381, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 382, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 383, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 384, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 385, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 386, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 386, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 387, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 387, scale);
					}
					if (type == 263)
					{
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 390, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 391, scale);
					}
					if (type == 264)
					{
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 388, scale);
						Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 389, scale);
					}
				}
				else if (type == 265)
				{
					if (life >= 0)
					{
						return;
					}
					for (int num548 = 0; num548 < 15; num548++)
					{
						if (Main.rand.Next(3) != 0)
						{
							Dust.NewDust(position, width, height, 166, hitDirection, -1f);
						}
						else
						{
							Dust.NewDust(position, width, height, 167, hitDirection, -1f);
						}
					}
				}
				else if (type == 266)
				{
					if (life > 0)
					{
						for (int num549 = 0; (double)num549 < dmg / (double)lifeMax * 100.0; num549++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num550 = 0; num550 < 150; num550++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 396);
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 397);
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 398);
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 399);
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 400);
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 401);
				}
				else if (type == 267)
				{
					if (life > 0)
					{
						for (int num551 = 0; (double)num551 < dmg / (double)lifeMax * 50.0; num551++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num552 = 0; num552 < 20; num552++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 402);
				}
				else if (type == 4 || type == 126 || type == 125)
				{
					if (life > 0)
					{
						for (int num553 = 0; (double)num553 < dmg / (double)lifeMax * 100.0; num553++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num554 = 0; num554 < 150; num554++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					for (int num555 = 0; num555 < 2; num555++)
					{
						Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 2);
						Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
						Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 9);
						if (type == 4)
						{
							Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 10);
							SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
						}
						else if (type == 125)
						{
							Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 146);
						}
						else if (type == 126)
						{
							Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 145);
						}
					}
					if (type == 125 || type == 126)
					{
						for (int num556 = 0; num556 < 10; num556++)
						{
							int num557 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num557];
							dust.velocity *= 1.4f;
						}
						for (int num558 = 0; num558 < 5; num558++)
						{
							int num559 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num559].noGravity = true;
							Dust dust = Main.dust[num559];
							dust.velocity *= 5f;
							num559 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num559];
							dust.velocity *= 3f;
						}
						int num560 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore2 = Main.gore[num560];
						gore2.velocity *= 0.4f;
						Main.gore[num560].velocity.X += 1f;
						Main.gore[num560].velocity.Y += 1f;
						num560 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num560];
						gore2.velocity *= 0.4f;
						Main.gore[num560].velocity.X -= 1f;
						Main.gore[num560].velocity.Y += 1f;
						num560 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num560];
						gore2.velocity *= 0.4f;
						Main.gore[num560].velocity.X += 1f;
						Main.gore[num560].velocity.Y -= 1f;
						num560 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num560];
						gore2.velocity *= 0.4f;
						Main.gore[num560].velocity.X -= 1f;
						Main.gore[num560].velocity.Y -= 1f;
					}
				}
				else if (type == 5)
				{
					if (life > 0)
					{
						for (int num561 = 0; (double)num561 < dmg / (double)lifeMax * 50.0; num561++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num562 = 0; num562 < 20; num562++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 6);
					Gore.NewGore(position, velocity, 7);
				}
				else if (type == 113 || type == 114)
				{
					if (life > 0)
					{
						for (int num563 = 0; num563 < 20; num563++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num564 = 0; num564 < 50; num564++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -1f);
					}
					if (type == 114)
					{
						Gore.NewGore(new Vector2(position.X, position.Y), velocity, 137, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2)), velocity, 139, scale);
						Gore.NewGore(new Vector2(position.X + (float)(width / 2), position.Y), velocity, 139, scale);
						Gore.NewGore(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), velocity, 137, scale);
						return;
					}
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 137, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2)), velocity, 138, scale);
					Gore.NewGore(new Vector2(position.X + (float)(width / 2), position.Y), velocity, 138, scale);
					Gore.NewGore(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), velocity, 137, scale);
					if (!(Main.player[Main.myPlayer].position.Y / 16f > (float)(Main.maxTilesY - 250)))
					{
						return;
					}
					int num565 = (int)Main.screenPosition.Y;
					int num566 = num565 + Main.screenWidth;
					int num567 = (int)position.X;
					if (direction > 0)
					{
						num567 -= 80;
					}
					int num568 = num567 + 140;
					int num569 = num567;
					for (int num570 = num565; num570 < num566; num570 += 50)
					{
						for (; num569 < num568; num569 += 46)
						{
							for (int num571 = 0; num571 < 5; num571++)
							{
								Dust.NewDust(new Vector2(num569, num570), 32, 32, 5, (float)Main.rand.Next(-60, 61) * 0.1f, (float)Main.rand.Next(-60, 61) * 0.1f);
							}
							Gore.NewGore(Velocity: new Vector2((float)Main.rand.Next(-80, 81) * 0.1f, (float)Main.rand.Next(-60, 21) * 0.1f), Position: new Vector2(num569, num570), Type: Main.rand.Next(140, 143));
						}
						num569 = num567;
					}
				}
				else if (type == 115 || type == 116)
				{
					if (life > 0)
					{
						for (int num572 = 0; num572 < 5; num572++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					if (type == 115 && Main.netMode != 1)
					{
						NewNPC(GetSpawnSource_NPCHurt(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 116);
						for (int num573 = 0; num573 < 10; num573++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num574 = 0; num574 < 20; num574++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					Gore.NewGore(position, velocity, 132, scale);
					Gore.NewGore(position, velocity, 133, scale);
				}
				else if (type >= 117 && type <= 119)
				{
					if (life > 0)
					{
						for (int num575 = 0; num575 < 5; num575++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num576 = 0; num576 < 10; num576++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					Gore.NewGore(position, velocity, 134 + type - 117, scale);
				}
				else if (type == 217 || type == 218 || type == 219)
				{
					if (life > 0)
					{
						for (int num577 = 0; (double)num577 < dmg / (double)lifeMax * 100.0; num577++)
						{
							Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
						}
						return;
					}
					for (int num578 = 0; num578 < 50; num578++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
					}
					if (type == 217)
					{
						int num579 = Gore.NewGore(position, velocity, 292, scale);
						num579 = Gore.NewGore(position, velocity, 293, scale);
					}
					if (type == 218)
					{
						int num579 = Gore.NewGore(position, velocity, 295, scale);
						num579 = Gore.NewGore(position, velocity, 296, scale);
					}
					if (type == 219)
					{
						int num579 = Gore.NewGore(position, velocity, 294, scale);
					}
				}
				else if (type == 222)
				{
					if (life > 0)
					{
						for (int num580 = 0; (double)num580 < dmg / (double)lifeMax * 100.0; num580++)
						{
							Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
						}
						return;
					}
					for (int num581 = 0; num581 < 50; num581++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
					}
					Gore.NewGore(new Vector2(position.X, position.Y - 35f), velocity, 303, scale);
					Gore.NewGore(new Vector2(position.X, position.Y - 45f), velocity, 304, scale);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 305, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 306, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 307, scale);
					Gore.NewGore(new Vector2(position.X, position.Y - 10f), velocity, 308, scale);
				}
				else if (type == 6 || type == 94 || type == 166)
				{
					if (life > 0)
					{
						for (int num582 = 0; (double)num582 < dmg / (double)lifeMax * 100.0; num582++)
						{
							Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
						}
						return;
					}
					for (int num583 = 0; num583 < 50; num583++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
					}
					if (type == 94)
					{
						int num584 = Gore.NewGore(position, velocity, 108, scale);
						num584 = Gore.NewGore(position, velocity, 108, scale);
						num584 = Gore.NewGore(position, velocity, 109, scale);
						num584 = Gore.NewGore(position, velocity, 110, scale);
					}
					else if (type == 166)
					{
						int num584 = Gore.NewGore(position, velocity, 209, scale);
						num584 = Gore.NewGore(position, velocity, 210, scale);
						num584 = Gore.NewGore(position, velocity, 211, scale);
					}
					else
					{
						int num584 = Gore.NewGore(position, velocity, 14, scale);
						Main.gore[num584].alpha = alpha;
						num584 = Gore.NewGore(position, velocity, 15, scale);
						Main.gore[num584].alpha = alpha;
					}
				}
				else if (type == 101)
				{
					if (life > 0)
					{
						for (int num585 = 0; (double)num585 < dmg / (double)lifeMax * 100.0; num585++)
						{
							Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
						}
						return;
					}
					for (int num586 = 0; num586 < 50; num586++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
					}
					int num587 = Gore.NewGore(position, velocity, 110, scale);
					num587 = Gore.NewGore(position, velocity, 114, scale);
					num587 = Gore.NewGore(position, velocity, 114, scale);
					num587 = Gore.NewGore(position, velocity, 115, scale);
				}
				else if (type == 7 || type == 8 || type == 9)
				{
					if (life > 0)
					{
						for (int num588 = 0; (double)num588 < dmg / (double)lifeMax * 100.0; num588++)
						{
							Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
						}
						return;
					}
					for (int num589 = 0; num589 < 50; num589++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
					}
					int num590 = Gore.NewGore(position, velocity, type - 7 + 18);
					Main.gore[num590].alpha = alpha;
				}
				else if (type == 98 || type == 99 || type == 100)
				{
					if (life > 0)
					{
						for (int num591 = 0; (double)num591 < dmg / (double)lifeMax * 100.0; num591++)
						{
							Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
						}
						return;
					}
					for (int num592 = 0; num592 < 50; num592++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
					}
					int num593 = Gore.NewGore(position, velocity, 110);
					Main.gore[num593].alpha = alpha;
				}
				else if (type == 10 || type == 11 || type == 12)
				{
					if (life > 0)
					{
						for (int num594 = 0; (double)num594 < dmg / (double)lifeMax * 50.0; num594++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num595 = 0; num595 < 10; num595++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, type - 7 + 18);
				}
				else if (type == 95 || type == 96 || type == 97)
				{
					if (life > 0)
					{
						for (int num596 = 0; (double)num596 < dmg / (double)lifeMax * 50.0; num596++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num597 = 0; num597 < 10; num597++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, type - 95 + 111);
				}
				else if (type == 13 || type == 14 || type == 15)
				{
					if (life > 0)
					{
						for (int num598 = 0; (double)num598 < dmg / (double)lifeMax * 100.0; num598++)
						{
							Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
						}
						return;
					}
					for (int num599 = 0; num599 < 50; num599++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
					}
					if (type == 13)
					{
						Gore.NewGore(position, velocity, 24);
						Gore.NewGore(position, velocity, 25);
					}
					else if (type == 14)
					{
						Gore.NewGore(position, velocity, 26);
						Gore.NewGore(position, velocity, 27);
					}
					else
					{
						Gore.NewGore(position, velocity, 28);
						Gore.NewGore(position, velocity, 29);
					}
				}
				else if (type == 17)
				{
					if (life > 0)
					{
						for (int num600 = 0; (double)num600 < dmg / (double)lifeMax * 100.0; num600++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num601 = 0; num601 < 50; num601++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (altTexture == 0)
					{
						Gore.NewGore(position, velocity, IsShimmerVariant ? 1320 : 30);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1322 : 31);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1322 : 31);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1323 : 32);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1323 : 32);
				}
				else if (type == 441)
				{
					if (life > 0)
					{
						for (int num602 = 0; (double)num602 < dmg / (double)lifeMax * 100.0; num602++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num603 = 0; num603 < 50; num603++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1358 : 768);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1359 : 769);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1361 : 770);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1360 : 771);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1360 : 771);
				}
				else if (type == 86)
				{
					if (life > 0)
					{
						for (int num604 = 0; (double)num604 < dmg / (double)lifeMax * 100.0; num604++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num605 = 0; num605 < 50; num605++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 101);
					Gore.NewGore(position, velocity, 102);
					Gore.NewGore(position, velocity, 103);
					Gore.NewGore(position, velocity, 103);
					Gore.NewGore(position, velocity, 104);
					Gore.NewGore(position, velocity, 104);
					Gore.NewGore(position, velocity, 105);
				}
				else if (type == 155)
				{
					if (life > 0)
					{
						for (int num606 = 0; (double)num606 < dmg / (double)lifeMax * 100.0; num606++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num607 = 0; num607 < 50; num607++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 181);
					Gore.NewGore(position, velocity, 182);
					Gore.NewGore(position, velocity, 183);
				}
				else if (type == 329)
				{
					if (life > 0)
					{
						for (int num608 = 0; (double)num608 < dmg / (double)lifeMax * 100.0; num608++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num609 = 0; num609 < 50; num609++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 485);
					Gore.NewGore(position, velocity, 486);
					Gore.NewGore(position, velocity, 487);
				}
				else if (type == 163 || type == 238)
				{
					if (life > 0)
					{
						for (int num610 = 0; (double)num610 < dmg / (double)lifeMax * 100.0; num610++)
						{
							Dust.NewDust(position, width, height, 18, hitDirection, -1f);
						}
						return;
					}
					for (int num611 = 0; num611 < 50; num611++)
					{
						Dust.NewDust(position, width, height, 18, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 205);
					Gore.NewGore(position, velocity, 206);
					Gore.NewGore(position, velocity, 206);
					Gore.NewGore(position, velocity, 206);
					Gore.NewGore(position, velocity, 206);
				}
				else if (type == 164 || type == 165)
				{
					if (life > 0)
					{
						for (int num612 = 0; (double)num612 < dmg / (double)lifeMax * 100.0; num612++)
						{
							Dust.NewDust(position, width, height, 18, hitDirection, -1f);
						}
						return;
					}
					for (int num613 = 0; num613 < 50; num613++)
					{
						Dust.NewDust(position, width, height, 18, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 207);
					Gore.NewGore(position, velocity, 208);
					Gore.NewGore(position, velocity, 208);
					Gore.NewGore(position, velocity, 208);
					Gore.NewGore(position, velocity, 208);
				}
				else if (type == 239 || type == 240)
				{
					if (life > 0)
					{
						for (int num614 = 0; (double)num614 < dmg / (double)lifeMax * 100.0; num614++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num615 = 0; num615 < 50; num615++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 351);
					Gore.NewGore(position, velocity, 352);
					Gore.NewGore(position, velocity, 352);
					Gore.NewGore(position, velocity, 353);
					Gore.NewGore(position, velocity, 353);
				}
				else if (type == 236 || type == 237)
				{
					if (life > 0)
					{
						for (int num616 = 0; (double)num616 < dmg / (double)lifeMax * 100.0; num616++)
						{
							Dust.NewDust(position, width, height, 18, hitDirection, -1f);
						}
						return;
					}
					for (int num617 = 0; num617 < 50; num617++)
					{
						Dust.NewDust(position, width, height, 18, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 332);
					Gore.NewGore(position, velocity, 333);
					Gore.NewGore(position, velocity, 334);
					Gore.NewGore(position, velocity, 335);
					Gore.NewGore(position, velocity, 335);
				}
				else if (type == 241)
				{
					if (life > 0)
					{
						for (int num618 = 0; (double)num618 < dmg / (double)lifeMax * 100.0; num618++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num619 = 0; num619 < 50; num619++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 354);
					Gore.NewGore(position, velocity, 355);
				}
				else if (type == 242)
				{
					if (life > 0)
					{
						for (int num620 = 0; (double)num620 < dmg / (double)lifeMax * 100.0; num620++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num621 = 0; num621 < 50; num621++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 356);
					Gore.NewGore(position, velocity, 357);
					Gore.NewGore(position, velocity, 357);
					Gore.NewGore(position, velocity, 358);
					Gore.NewGore(position, velocity, 358);
				}
				else if (type >= 105 && type <= 108)
				{
					if (life > 0)
					{
						for (int num622 = 0; (double)num622 < dmg / (double)lifeMax * 100.0; num622++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num623 = 0; num623 < 50; num623++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (type == 105 || type == 107)
					{
						Gore.NewGore(position, velocity, IsShimmerVariant ? 1308 : 124);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1309 : 125);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1309 : 125);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1310 : 126);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1310 : 126);
						return;
					}
					if (altTexture == 0 || type == 106)
					{
						Gore.NewGore(position, velocity, IsShimmerVariant ? 1373 : 127);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1374 : 128);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1375 : 128);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1376 : 129);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1376 : 129);
				}
				else if (type == 123 || type == 124)
				{
					if (life > 0)
					{
						for (int num624 = 0; (double)num624 < dmg / (double)lifeMax * 100.0; num624++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num625 = 0; num625 < 50; num625++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1317 : 151);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1318 : 152);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1318 : 152);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1319 : 153);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1319 : 153);
				}
				else if (type == 22)
				{
					if (life > 0)
					{
						for (int num626 = 0; (double)num626 < dmg / (double)lifeMax * 100.0; num626++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num627 = 0; num627 < 50; num627++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1314 : 73);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1315 : 74);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1315 : 74);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1316 : 75);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1316 : 75);
				}
				else if (type == 550)
				{
					if (life > 0)
					{
						for (int num628 = 0; (double)num628 < dmg / (double)lifeMax * 100.0; num628++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num629 = 0; num629 < 50; num629++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 0f), velocity, IsShimmerVariant ? 1355 : 967);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1356 : 968);
					Gore.NewGore(new Vector2(position.X + 8f, position.Y + 20f), velocity, IsShimmerVariant ? 1356 : 968);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1357 : 969);
					Gore.NewGore(new Vector2(position.X + 8f, position.Y + 34f), velocity, IsShimmerVariant ? 1357 : 969);
				}
				else if (type == 588 || type == 589)
				{
					if (life > 0)
					{
						for (int num630 = 0; (double)num630 < dmg / (double)lifeMax * 100.0; num630++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num631 = 0; num631 < 50; num631++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (altTexture == 0)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 0f), velocity, IsShimmerVariant ? 1311 : 1109);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1312 : 1110);
					Gore.NewGore(new Vector2(position.X + 8f, position.Y + 20f), velocity, IsShimmerVariant ? 1312 : 1110);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1313 : 1111);
					Gore.NewGore(new Vector2(position.X + 8f, position.Y + 34f), velocity, IsShimmerVariant ? 1313 : 1111);
				}
				else if (type == 633)
				{
					if (life > 0)
					{
						for (int num632 = 0; (double)num632 < dmg / (double)lifeMax * 100.0; num632++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num633 = 0; num633 < 50; num633++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					int num634 = 1219;
					int num635 = 1220;
					if (altTexture == 2)
					{
						num634 = 1223;
						num635 = 1224;
					}
					if (IsShimmerVariant)
					{
						num634 = 1377;
						num635 = 1379;
						if (altTexture == 2)
						{
							num634 = 1378;
							num635 = 1380;
						}
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 0f), velocity, num634);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num635);
					Gore.NewGore(new Vector2(position.X + 8f, position.Y + 20f), velocity, num635);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1382 : 1221);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1381 : 1222);
					Gore.NewGore(new Vector2(position.X + 8f, position.Y + 34f), velocity, IsShimmerVariant ? 1381 : 1222);
				}
				else if (type == 368)
				{
					if (life > 0)
					{
						for (int num636 = 0; (double)num636 < dmg / (double)lifeMax * 100.0; num636++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num637 = 0; num637 < 50; num637++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (altTexture == 0)
					{
						Gore.NewGore(position, velocity, IsShimmerVariant ? 1362 : 567);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1364 : 568);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1364 : 568);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1365 : 569);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1365 : 569);
				}
				else if (type == 369 || type == 376 || type == 663 || NPCID.Sets.IsTownPet[type])
				{
					if (life <= 0)
					{
						for (int num638 = 0; num638 < 25; num638++)
						{
							int num639 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 2f);
							Dust dust = Main.dust[num639];
							dust.velocity *= 1.4f;
							Main.dust[num639].noLight = true;
							Main.dust[num639].noGravity = true;
						}
						int num640 = 0;
						num640 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num640].scale = 1f;
						Main.gore[num640].velocity.X += 1f;
						Main.gore[num640].velocity.Y += 1f;
						num640 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num640].scale = 1f;
						Main.gore[num640].velocity.X -= 1f;
						Main.gore[num640].velocity.Y += 1f;
						num640 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num640].scale = 1f;
						Main.gore[num640].velocity.X += 1f;
						Main.gore[num640].velocity.Y -= 1f;
						num640 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num640].scale = 1f;
						Main.gore[num640].velocity.X -= 1f;
						Main.gore[num640].velocity.Y -= 1f;
					}
				}
				else if (type == 227)
				{
					if (life > 0)
					{
						for (int num641 = 0; (double)num641 < dmg / (double)lifeMax * 100.0; num641++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num642 = 0; num642 < 50; num642++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (altTexture == 0)
					{
						Gore.NewGore(position, velocity, IsShimmerVariant ? 1331 : 320);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1334 : 321);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1333 : 322);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1332 : 323);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1332 : 323);
				}
				else if (type == 228)
				{
					if (life > 0)
					{
						for (int num643 = 0; (double)num643 < dmg / (double)lifeMax * 100.0; num643++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num644 = 0; num644 < 50; num644++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1369 : 324);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1370 : 325);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1372 : 326);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1371 : 327);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1371 : 327);
				}
				else if (type == 229)
				{
					if (life > 0)
					{
						for (int num645 = 0; (double)num645 < dmg / (double)lifeMax * 100.0; num645++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					if (IsShimmerVariant)
					{
						for (int num646 = 0; num646 < 50; num646++)
						{
							int num647 = Dust.NewDust(position, width, height, 180, velocity.X, velocity.Y);
							Dust dust = Main.dust[num647];
							dust.velocity *= 2f;
							Main.dust[num647].noGravity = true;
							Main.dust[num647].scale = 1.4f;
						}
						return;
					}
					for (int num648 = 0; num648 < 50; num648++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (altTexture == 0)
					{
						Gore.NewGore(position, velocity, 328);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 329);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 329);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 330);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 330);
				}
				else if (type == 142)
				{
					if (life > 0)
					{
						for (int num649 = 0; (double)num649 < dmg / (double)lifeMax * 100.0; num649++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num650 = 0; num650 < 50; num650++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (altTexture == 0)
					{
						Gore.NewGore(position, velocity, IsShimmerVariant ? 1338 : 157);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1340 : 158);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1340 : 158);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1341 : 159);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1341 : 159);
				}
				else if (type == 178)
				{
					if (life > 0)
					{
						for (int num651 = 0; (double)num651 < dmg / (double)lifeMax * 100.0; num651++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num652 = 0; num652 < 50; num652++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (altTexture == 0)
					{
						Gore.NewGore(position, velocity, IsShimmerVariant ? 1348 : 231);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1349 : 232);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1349 : 232);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1350 : 233);
				}
				else if (type == 353 || type == 354)
				{
					if (life > 0)
					{
						for (int num653 = 0; (double)num653 < dmg / (double)lifeMax * 100.0; num653++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num654 = 0; num654 < 50; num654++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (altTexture == 0)
					{
						Gore.NewGore(position, velocity, IsShimmerVariant ? 1353 : 544);
					}
					if (!IsShimmerVariant)
					{
						Gore.NewGore(position, velocity, 543);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1353 : 546);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1353 : 546);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1354 : 545);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1354 : 545);
				}
				else if (type == 37)
				{
					if (life > 0)
					{
						for (int num655 = 0; (double)num655 < dmg / (double)lifeMax * 100.0; num655++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num656 = 0; num656 < 50; num656++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1328 : 58);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1329 : 59);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1329 : 59);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1330 : 60);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1330 : 60);
				}
				else if (type == 54)
				{
					if (life > 0)
					{
						for (int num657 = 0; (double)num657 < dmg / (double)lifeMax * 100.0; num657++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num658 = 0; num658 < 50; num658++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1291 : 58);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1292 : 59);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1292 : 59);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1293 : 60);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1293 : 60);
				}
				else if (type == 160)
				{
					if (life > 0)
					{
						for (int num659 = 0; (double)num659 < dmg / (double)lifeMax * 100.0; num659++)
						{
							Dust.NewDust(position, width, height, 26, hitDirection, -1f);
						}
						return;
					}
					for (int num660 = 0; num660 < 50; num660++)
					{
						Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1366 : 188);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1367 : 189);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1367 : 189);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1368 : 190);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1368 : 190);
				}
				else if (type == 18)
				{
					if (life > 0)
					{
						for (int num661 = 0; (double)num661 < dmg / (double)lifeMax * 100.0; num661++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num662 = 0; num662 < 50; num662++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (altTexture == 0)
					{
						Gore.NewGore(position, velocity, IsShimmerVariant ? 1324 : 33);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1326 : 34);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1326 : 34);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1327 : 35);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1327 : 35);
				}
				else if (type == 19)
				{
					if (life > 0)
					{
						for (int num663 = 0; (double)num663 < dmg / (double)lifeMax * 100.0; num663++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num664 = 0; num664 < 50; num664++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1288 : 36);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1289 : 37);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1289 : 37);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1290 : 38);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1290 : 38);
				}
				else if (type == 38)
				{
					if (life > 0)
					{
						for (int num665 = 0; (double)num665 < dmg / (double)lifeMax * 100.0; num665++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num666 = 0; num666 < 50; num666++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (altTexture == 0)
					{
						Gore.NewGore(position, velocity, IsShimmerVariant ? 1297 : 64);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1299 : 65);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1299 : 65);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1300 : 66);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1300 : 66);
				}
				else if (type == 20)
				{
					if (life > 0)
					{
						for (int num667 = 0; (double)num667 < dmg / (double)lifeMax * 100.0; num667++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num668 = 0; num668 < 50; num668++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1301 : 39);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1302 : 40);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1302 : 40);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1303 : 41);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1303 : 41);
				}
				else if (type == 207)
				{
					if (life > 0)
					{
						for (int num669 = 0; (double)num669 < dmg / (double)lifeMax * 100.0; num669++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num670 = 0; num670 < 50; num670++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (altTexture == 0)
					{
						Gore.NewGore(position, velocity, IsShimmerVariant ? 1304 : 283);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1306 : 284);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1306 : 284);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1307 : 285);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1307 : 285);
				}
				else if (type == 208)
				{
					if (life > 0)
					{
						for (int num671 = 0; (double)num671 < dmg / (double)lifeMax * 100.0; num671++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num672 = 0; num672 < 50; num672++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1335 : 286);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1336 : 287);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1336 : 287);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1337 : 288);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1337 : 288);
				}
				else if (type == 663)
				{
					if (life > 0)
					{
						for (int num673 = 0; (double)num673 < dmg / (double)lifeMax * 100.0; num673++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
					}
					else
					{
						for (int num674 = 0; num674 < 50; num674++)
						{
							Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
						}
					}
				}
				else if (type == 209)
				{
					if (life > 0)
					{
						for (int num675 = 0; (double)num675 < dmg / (double)lifeMax * 100.0; num675++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num676 = 0; num676 < 50; num676++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1294 : 289);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1295 : 290);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1295 : 290);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1296 : 291);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1296 : 291);
				}
				else if (type >= 212 && type <= 216)
				{
					if (life > 0)
					{
						for (int num677 = 0; (double)num677 < dmg / (double)lifeMax * 100.0; num677++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num678 = 0; num678 < 50; num678++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					if (type == 212)
					{
						Gore.NewGore(position, velocity, 336);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 337);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 337);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 338);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 338);
					}
					else if (type == 213)
					{
						Gore.NewGore(position, velocity, 339);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 340);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 340);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 341);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 341);
					}
					else if (type == 214)
					{
						Gore.NewGore(position, velocity, 342);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 343);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 343);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 344);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 344);
					}
					else if (type == 215)
					{
						Gore.NewGore(position, velocity, 345);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 346);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 346);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 347);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 347);
					}
					else if (type == 216)
					{
						Gore.NewGore(position, velocity, 348);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 349);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 349);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 350);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 350);
					}
				}
				else if (type == 220 || type == 221)
				{
					if (life > 0)
					{
						for (int num679 = 0; (double)num679 < dmg / (double)lifeMax * 50.0; num679++)
						{
							Dust.NewDust(position, width, height, 151, hitDirection, -1f, 0, default(Color), 0.7f);
						}
						return;
					}
					for (int num680 = 0; num680 < 20; num680++)
					{
						Dust.NewDust(position, width, height, 151, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 0.7f);
					}
					if (type == 221)
					{
						Gore.NewGore(position, velocity, 298, scale);
						Gore.NewGore(position, velocity, 299, scale);
					}
					else
					{
						Gore.NewGore(position, velocity, 297, scale);
					}
				}
				else if (type == 21 || type == 31 || type == 294 || type == 295 || type == 296 || type == 32 || type == 44 || type == 45 || type == 77 || type == 110 || type == 167 || type == 197 || type == 201 || type == 202 || type == 203 || type == 287 || type == 291 || type == 292 || type == 293 || (type >= 322 && type <= 324) || type == 481 || (type >= 449 && type <= 452))
				{
					if (life > 0)
					{
						for (int num681 = 0; (double)num681 < dmg / (double)lifeMax * 50.0; num681++)
						{
							Dust.NewDust(position, width, height, 26, hitDirection, -1f);
						}
						return;
					}
					for (int num682 = 0; num682 < 20; num682++)
					{
						Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
					}
					if (type == 167)
					{
						Gore.NewGore(position, velocity, 213, scale);
						Gore.NewGore(position, velocity, 214, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 212, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 212, scale);
						return;
					}
					if (type == 197)
					{
						Gore.NewGore(position, velocity, 257, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 212, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 212, scale);
						return;
					}
					if (type == 481)
					{
						Gore.NewGore(position, velocity, 695, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 696, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 696, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 697, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 697, scale);
						return;
					}
					if (type == 201 || type == 450)
					{
						Gore.NewGore(position, velocity, 265, scale);
						Gore.NewGore(position, velocity, 267, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
						return;
					}
					if (type == 202 || type == 451)
					{
						Gore.NewGore(position, velocity, 268, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
						return;
					}
					if (type == 203 || type == 452)
					{
						Gore.NewGore(position, velocity, 269, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 266, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 266, scale);
						return;
					}
					if (type == 322)
					{
						Gore.NewGore(position, velocity, 460, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 461, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 462, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 461, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 462, scale);
						return;
					}
					if (type == 323)
					{
						Gore.NewGore(position, velocity, 463, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 465, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 464, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 464, scale);
						return;
					}
					if (type == 324)
					{
						Gore.NewGore(position, velocity, 466, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 467, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 467, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 468, scale);
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 468, scale);
						return;
					}
					Gore.NewGore(position, velocity, 42, scale);
					if (type == 77)
					{
						Gore.NewGore(position, velocity, 106, scale);
					}
					if (type == 110)
					{
						Gore.NewGore(position, velocity, 130, scale);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					if (type == 110)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 131, scale);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
				}
				else if (type == 453)
				{
					if (life > 0)
					{
						for (int num683 = 0; (double)num683 < dmg / (double)lifeMax * 50.0; num683++)
						{
							Dust.NewDust(position, width, height, 26, hitDirection, -1f);
						}
						return;
					}
					for (int num684 = 0; num684 < 20; num684++)
					{
						Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
					}
					if (altTexture == 0)
					{
						Gore.NewGore(position, velocity, IsShimmerVariant ? 1342 : 638, scale);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1346 : 639, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1345 : 640, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1344 : 641, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1347 : 642, scale);
				}
				else if ((type >= 269 && type <= 276) || (type >= 281 && type <= 286))
				{
					if (life > 0)
					{
						for (int num685 = 0; (double)num685 < dmg / (double)lifeMax * 50.0; num685++)
						{
							Dust.NewDust(position, width, height, 26, hitDirection, -1f);
						}
						return;
					}
					for (int num686 = 0; num686 < 20; num686++)
					{
						Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 42, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
					if (type == 269)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 406, scale);
					}
					if (type == 270)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 407, scale);
					}
					if (type == 271 || type == 272)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 408, scale);
					}
					if (type == 274)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 409, scale);
					}
					if (type == 276)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 410, scale);
					}
				}
				else if (type >= 277 && type <= 280)
				{
					if (life > 0)
					{
						for (int num687 = 0; (double)num687 < dmg / (double)lifeMax * 100.0; num687++)
						{
							int num688 = Dust.NewDust(position, width, height, 174, hitDirection, -1f);
							Main.dust[num688].scale = 1.1f;
							Main.dust[num688].noGravity = true;
						}
						return;
					}
					for (int num689 = 0; num689 < 75; num689++)
					{
						int num690 = Dust.NewDust(position, width, height, 174, 1.5f * (float)hitDirection, -0.5f);
						Dust dust = Main.dust[num690];
						dust.velocity *= 2f;
						Main.dust[num690].scale = 1.4f;
						Main.dust[num690].noGravity = true;
					}
				}
				else if (type == 341)
				{
					int num691 = 196;
					if (life > 0)
					{
						for (int num692 = 0; (double)num692 < dmg / (double)lifeMax * 50.0; num692++)
						{
							Dust.NewDust(position, width, height, num691);
						}
						return;
					}
					for (int num693 = 0; num693 < 20; num693++)
					{
						Dust.NewDust(position, width, height, num691);
					}
					int num694 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 61, scale);
					Gore gore2 = Main.gore[num694];
					gore2.velocity *= 0.3f;
					num694 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), 62, scale);
					gore2 = Main.gore[num694];
					gore2.velocity *= 0.3f;
					num694 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 10f), new Vector2(hitDirection, 0f), 63, scale);
					gore2 = Main.gore[num694];
					gore2.velocity *= 0.3f;
				}
				else if (type == 85 || type == 629)
				{
					int num695 = 7;
					if (ai[3] == 2f)
					{
						num695 = 10;
					}
					if (ai[3] == 3f)
					{
						num695 = 37;
					}
					if (life > 0)
					{
						for (int num696 = 0; (double)num696 < dmg / (double)lifeMax * 50.0; num696++)
						{
							Dust.NewDust(position, width, height, num695);
						}
						return;
					}
					for (int num697 = 0; num697 < 20; num697++)
					{
						Dust.NewDust(position, width, height, num695);
					}
					int num698 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 61, scale);
					Gore gore2 = Main.gore[num698];
					gore2.velocity *= 0.3f;
					num698 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), 62, scale);
					gore2 = Main.gore[num698];
					gore2.velocity *= 0.3f;
					num698 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 10f), new Vector2(hitDirection, 0f), 63, scale);
					gore2 = Main.gore[num698];
					gore2.velocity *= 0.3f;
				}
				else if (type == 473 || type == 474 || type == 475 || type == 476)
				{
					int num699 = 31;
					if (life > 0)
					{
						for (int num700 = 0; (double)num700 < dmg / (double)lifeMax * 50.0; num700++)
						{
							Dust.NewDust(position, width, height, num699);
						}
						return;
					}
					for (int num701 = 0; num701 < 20; num701++)
					{
						Dust.NewDust(position, width, height, num699);
					}
					int num702 = Gore.NewGore(base.Center, new Vector2(hitDirection, 0f), 61, scale);
					Gore gore2 = Main.gore[num702];
					gore2.velocity *= 0.3f;
					num702 = Gore.NewGore(base.Center, new Vector2(hitDirection, 0f), 62, scale);
					gore2 = Main.gore[num702];
					gore2.velocity *= 0.3f;
					num702 = Gore.NewGore(base.Center, new Vector2(hitDirection, 0f), 63, scale);
					gore2 = Main.gore[num702];
					gore2.velocity *= 0.3f;
				}
				else if (type == 169)
				{
					if (life > 0)
					{
						for (int num703 = 0; (double)num703 < dmg / (double)lifeMax * 50.0; num703++)
						{
							int num704 = Dust.NewDust(position, width, height, 92, 0f, 0f, 0, default(Color), 1.5f);
							Dust dust = Main.dust[num704];
							dust.velocity *= 1.5f;
							Main.dust[num704].noGravity = true;
						}
						return;
					}
					for (int num705 = 0; num705 < 100; num705++)
					{
						int num706 = Dust.NewDust(position, width, height, 92, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num706].scale = 1.5f;
						Dust dust = Main.dust[num706];
						dust.velocity *= 2f;
						Main.dust[num706].noGravity = true;
					}
				}
				else if (type == 170 || type == 180)
				{
					if (life > 0)
					{
						for (int num707 = 0; (double)num707 < dmg / (double)lifeMax * 50.0; num707++)
						{
							int num708 = Dust.NewDust(position, width, height, 54, 0f, 0f, 0, default(Color), 1.5f);
							Dust dust = Main.dust[num708];
							dust.velocity *= 1.5f;
							Main.dust[num708].noGravity = true;
						}
						return;
					}
					for (int num709 = 0; num709 < 10; num709++)
					{
						int num710 = Dust.NewDust(position, width, height, 54, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num710];
						dust.velocity *= 2f;
						Main.dust[num710].noGravity = true;
					}
					for (int num711 = 0; num711 < 4; num711++)
					{
						int num712 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), 99, scale);
						Gore gore2 = Main.gore[num712];
						gore2.velocity *= 0.3f;
					}
				}
				else if (type == 171)
				{
					if (life > 0)
					{
						for (int num713 = 0; (double)num713 < dmg / (double)lifeMax * 50.0; num713++)
						{
							int num714 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
							Dust dust = Main.dust[num714];
							dust.velocity *= 1.5f;
							Main.dust[num714].noGravity = true;
						}
						return;
					}
					for (int num715 = 0; num715 < 10; num715++)
					{
						int num716 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num716];
						dust.velocity *= 2f;
						Main.dust[num716].noGravity = true;
					}
					for (int num717 = 0; num717 < 4; num717++)
					{
						int num718 = 11 + num717;
						if (num718 > 13)
						{
							num718 = Main.rand.Next(11, 14);
						}
						int num719 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), num718, scale);
						Gore gore2 = Main.gore[num719];
						gore2.velocity *= 0.3f;
					}
				}
				else if (type == 290)
				{
					if (life <= 0)
					{
						for (int num720 = 0; num720 < 10; num720++)
						{
							int num721 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
							Dust dust = Main.dust[num721];
							dust.velocity *= 2f;
							Main.dust[num721].noGravity = true;
						}
						int num722 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(11, 14), scale);
						Gore gore2 = Main.gore[num722];
						gore2.velocity *= 0.5f;
						num722 = Gore.NewGore(new Vector2(position.X, position.Y + 20f), default(Vector2), Main.rand.Next(11, 14), scale);
						gore2 = Main.gore[num722];
						gore2.velocity *= 0.5f;
						num722 = Gore.NewGore(new Vector2(position.X, position.Y + 40f), default(Vector2), Main.rand.Next(11, 14), scale);
						gore2 = Main.gore[num722];
						gore2.velocity *= 0.5f;
					}
				}
				else if (type >= 87 && type <= 92)
				{
					if (life > 0)
					{
						for (int num723 = 0; (double)num723 < dmg / (double)lifeMax * 50.0; num723++)
						{
							int num724 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
							Dust dust = Main.dust[num724];
							dust.velocity *= 1.5f;
							Main.dust[num724].noGravity = true;
						}
						return;
					}
					for (int num725 = 0; num725 < 10; num725++)
					{
						int num726 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num726];
						dust.velocity *= 2f;
						Main.dust[num726].noGravity = true;
					}
					int num727 = Main.rand.Next(1, 4);
					for (int num728 = 0; num728 < num727; num728++)
					{
						int num729 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), Main.rand.Next(11, 14), scale);
						Gore gore2 = Main.gore[num729];
						gore2.velocity *= 0.8f;
					}
				}
				else if (type == 78 || type == 79 || type == 80 || type == 630)
				{
					if (life > 0)
					{
						for (int num730 = 0; (double)num730 < dmg / (double)lifeMax * 50.0; num730++)
						{
							int num731 = Dust.NewDust(position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
							Dust dust = Main.dust[num731];
							dust.velocity *= 2f;
							Main.dust[num731].noGravity = true;
						}
						return;
					}
					for (int num732 = 0; num732 < 20; num732++)
					{
						int num733 = Dust.NewDust(position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num733];
						dust.velocity *= 2f;
						Main.dust[num733].noGravity = true;
					}
					int num734 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 61, scale);
					Gore gore2 = Main.gore[num734];
					gore2.velocity *= 0.3f;
					num734 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), 62, scale);
					gore2 = Main.gore[num734];
					gore2.velocity *= 0.3f;
					num734 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 10f), new Vector2(hitDirection, 0f), 63, scale);
					gore2 = Main.gore[num734];
					gore2.velocity *= 0.3f;
				}
				else if (type == 82 || type == 158 || type == 159 || type == 250 || type == 253)
				{
					if (life > 0)
					{
						for (int num735 = 0; (double)num735 < dmg / (double)lifeMax * 50.0; num735++)
						{
							int num736 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
							Dust dust = Main.dust[num736];
							dust.velocity *= 2f;
							Main.dust[num736].noGravity = true;
						}
						return;
					}
					for (int num737 = 0; num737 < 20; num737++)
					{
						int num738 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust = Main.dust[num738];
						dust.velocity *= 2f;
						Main.dust[num738].noGravity = true;
					}
					int num739 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 99, scale);
					Gore gore2 = Main.gore[num739];
					gore2.velocity *= 0.3f;
					num739 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 15f), new Vector2(hitDirection, 0f), 99, scale);
					gore2 = Main.gore[num739];
					gore2.velocity *= 0.3f;
					num739 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 20f), new Vector2(hitDirection, 0f), 99, scale);
					gore2 = Main.gore[num739];
					gore2.velocity *= 0.3f;
				}
				else if (type == 316 || type == 330)
				{
					if (life > 0)
					{
						for (int num740 = 0; (double)num740 < dmg / (double)lifeMax * 100.0; num740++)
						{
							int num741 = Dust.NewDust(position, width, height, 192, hitDirection, -1f, 100, new Color(100, 100, 100, 100));
							Main.dust[num741].noGravity = true;
						}
					}
					else
					{
						for (int num742 = 0; num742 < 50; num742++)
						{
							int num743 = Dust.NewDust(position, width, height, 192, 2 * hitDirection, -2f, 100, new Color(100, 100, 100, 100));
							Main.dust[num743].noGravity = true;
						}
					}
				}
				else if (type == 662)
				{
					if (life > 0)
					{
						for (int num744 = 0; (double)num744 < dmg / (double)lifeMax * 100.0; num744++)
						{
							int num745 = Dust.NewDust(position, width, height, 180, velocity.X, velocity.Y);
							Dust dust = Main.dust[num745];
							dust.velocity *= 2f;
							Main.dust[num745].noGravity = true;
							Main.dust[num745].scale = 1.4f;
						}
					}
					else
					{
						for (int num746 = 0; num746 < 50; num746++)
						{
							int num747 = Dust.NewDust(position, width, height, 180, velocity.X, velocity.Y);
							Dust dust = Main.dust[num747];
							dust.velocity *= 2f;
							Main.dust[num747].noGravity = true;
							Main.dust[num747].scale = 1.4f;
						}
					}
				}
				else if (type == 315)
				{
					if (life > 0)
					{
						for (int num748 = 0; (double)num748 < dmg / (double)lifeMax * 50.0; num748++)
						{
							int num749 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
							Dust dust = Main.dust[num749];
							dust.velocity *= 2f;
							Main.dust[num749].noGravity = true;
						}
						return;
					}
					for (int num750 = 0; num750 < 20; num750++)
					{
						int num751 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust = Main.dust[num751];
						dust.velocity *= 2f;
						Main.dust[num751].noGravity = true;
					}
					int num752 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 99, scale);
					Gore gore2 = Main.gore[num752];
					gore2.velocity *= 0.3f;
					num752 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 15f), new Vector2(hitDirection, 0f), 99, scale);
					gore2 = Main.gore[num752];
					gore2.velocity *= 0.3f;
					num752 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 20f), new Vector2(hitDirection, 0f), 99, scale);
					gore2 = Main.gore[num752];
					gore2.velocity *= 0.3f;
					num752 = Gore.NewGore(new Vector2(position.X, position.Y), new Vector2(hitDirection, 0f), 446, scale);
					gore2 = Main.gore[num752];
					gore2.velocity *= 0.1f;
				}
				else if (type == 254 || type == 255 || type == 256 || type == 257 || type == 258 || type == 259 || type == 260 || type == 261 || type == 634 || type == 635)
				{
					if (life > 0)
					{
						for (int num753 = 0; (double)num753 < dmg / (double)lifeMax * 50.0; num753++)
						{
							int num754 = Dust.NewDust(position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
							Dust dust = Main.dust[num754];
							dust.velocity *= 2f;
							Main.dust[num754].noGravity = true;
						}
						return;
					}
					for (int num755 = 0; num755 < 20; num755++)
					{
						int num756 = Dust.NewDust(position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust = Main.dust[num756];
						dust.velocity *= 2f;
						Main.dust[num756].noGravity = true;
					}
					if (type != 261)
					{
						int num757 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 375, scale);
						Gore gore2 = Main.gore[num757];
						gore2.velocity *= 0.3f;
						num757 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 15f), new Vector2(hitDirection, 0f), 376, scale);
						gore2 = Main.gore[num757];
						gore2.velocity *= 0.3f;
						num757 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 20f), new Vector2(hitDirection, 0f), 377, scale);
						gore2 = Main.gore[num757];
						gore2.velocity *= 0.3f;
					}
				}
				else if (type == 140)
				{
					if (life <= 0)
					{
						for (int num758 = 0; num758 < 20; num758++)
						{
							int num759 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
							Dust dust = Main.dust[num759];
							dust.velocity *= 2f;
							Main.dust[num759].noGravity = true;
						}
						int num760 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2(hitDirection, 0f), 99, scale);
						Gore gore2 = Main.gore[num760];
						gore2.velocity *= 0.3f;
						num760 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 15f), new Vector2(hitDirection, 0f), 99, scale);
						gore2 = Main.gore[num760];
						gore2.velocity *= 0.3f;
						num760 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 20f), new Vector2(hitDirection, 0f), 99, scale);
						gore2 = Main.gore[num760];
						gore2.velocity *= 0.3f;
					}
				}
				else if (type == 39 || type == 40 || type == 41)
				{
					if (life > 0)
					{
						for (int num761 = 0; (double)num761 < dmg / (double)lifeMax * 50.0; num761++)
						{
							Dust.NewDust(position, width, height, 26, hitDirection, -1f);
						}
						return;
					}
					for (int num762 = 0; num762 < 20; num762++)
					{
						Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, type - 39 + 67);
				}
				else if (type == 34)
				{
					if (life > 0)
					{
						for (int num763 = 0; (double)num763 < dmg / (double)lifeMax * 30.0; num763++)
						{
							int num764 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 15, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1.8f);
							Main.dust[num764].noLight = true;
							Main.dust[num764].noGravity = true;
							Dust dust = Main.dust[num764];
							dust.velocity *= 1.3f;
							num764 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 0, default(Color), 0.9f);
							Main.dust[num764].noLight = true;
							dust = Main.dust[num764];
							dust.velocity *= 1.3f;
						}
					}
					else
					{
						for (int num765 = 0; num765 < 15; num765++)
						{
							int num766 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 15, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1.8f);
							Main.dust[num766].noLight = true;
							Main.dust[num766].noGravity = true;
							Dust dust = Main.dust[num766];
							dust.velocity *= 1.3f;
							num766 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 0, default(Color), 0.9f);
							Main.dust[num766].noLight = true;
							dust = Main.dust[num766];
							dust.velocity *= 1.3f;
						}
					}
				}
				else if (type == 289)
				{
					if (life > 0)
					{
						for (int num767 = 0; (double)num767 < dmg / (double)lifeMax * 30.0; num767++)
						{
							int num768 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 181, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1.8f);
							Main.dust[num768].noLight = true;
							Main.dust[num768].noGravity = true;
							Dust dust = Main.dust[num768];
							dust.velocity *= 1.3f;
						}
					}
					else
					{
						for (int num769 = 0; num769 < 50; num769++)
						{
							int num770 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 181, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1.8f);
							Main.dust[num770].noLight = true;
							Main.dust[num770].noGravity = true;
							Dust dust = Main.dust[num770];
							dust.velocity *= 1.3f;
						}
					}
				}
				else if (type == 35 || type == 36)
				{
					if (life > 0)
					{
						for (int num771 = 0; (double)num771 < dmg / (double)lifeMax * 100.0; num771++)
						{
							Dust.NewDust(position, width, height, 26, hitDirection, -1f);
						}
						return;
					}
					for (int num772 = 0; num772 < 150; num772++)
					{
						Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
					}
					if (type == 35)
					{
						Gore.NewGore(position, velocity, 54);
						Gore.NewGore(position, velocity, 55);
						return;
					}
					Gore.NewGore(position, velocity, 56);
					Gore.NewGore(position, velocity, 57);
					Gore.NewGore(position, velocity, 57);
					Gore.NewGore(position, velocity, 57);
				}
				else if (type == 139)
				{
					if (life <= 0)
					{
						for (int num773 = 0; num773 < 10; num773++)
						{
							int num774 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num774];
							dust.velocity *= 1.4f;
						}
						for (int num775 = 0; num775 < 5; num775++)
						{
							int num776 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num776].noGravity = true;
							Dust dust = Main.dust[num776];
							dust.velocity *= 5f;
							num776 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num776];
							dust.velocity *= 3f;
						}
						int num777 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore2 = Main.gore[num777];
						gore2.velocity *= 0.4f;
						Main.gore[num777].velocity.X += 1f;
						Main.gore[num777].velocity.Y += 1f;
						num777 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num777];
						gore2.velocity *= 0.4f;
						Main.gore[num777].velocity.X -= 1f;
						Main.gore[num777].velocity.Y += 1f;
						num777 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num777];
						gore2.velocity *= 0.4f;
						Main.gore[num777].velocity.X += 1f;
						Main.gore[num777].velocity.Y -= 1f;
						num777 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num777];
						gore2.velocity *= 0.4f;
						Main.gore[num777].velocity.X -= 1f;
						Main.gore[num777].velocity.Y -= 1f;
					}
				}
				else if (type == 467)
				{
					if (life <= 0)
					{
						for (int num778 = 0; num778 < 7; num778++)
						{
							int num779 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num779];
							dust.velocity *= 1.4f;
						}
						for (int num780 = 0; num780 < 3; num780++)
						{
							int num781 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num781].noGravity = true;
							Dust dust = Main.dust[num781];
							dust.velocity *= 5f;
							num781 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num781];
							dust.velocity *= 3f;
						}
						Gore.NewGore(position, velocity, 660);
						Gore.NewGore(position, velocity, 660);
					}
				}
				else if (type >= 134 && type <= 136)
				{
					if (type == 135 && life > 0 && Main.netMode != 1 && ai[2] == 0f && Main.rand.Next(25) == 0)
					{
						ai[2] = 1f;
						int num782 = NewNPC(GetSpawnSource_NPCHurt(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 139);
						if (Main.netMode == 2 && num782 < 200)
						{
							NetMessage.SendData(23, -1, -1, null, num782);
						}
						netUpdate = true;
					}
					if (life > 0)
					{
						return;
					}
					Gore.NewGore(position, velocity, 156);
					if (Main.rand.Next(2) == 0)
					{
						for (int num783 = 0; num783 < 10; num783++)
						{
							int num784 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num784];
							dust.velocity *= 1.4f;
						}
						for (int num785 = 0; num785 < 5; num785++)
						{
							int num786 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num786].noGravity = true;
							Dust dust = Main.dust[num786];
							dust.velocity *= 5f;
							num786 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num786];
							dust.velocity *= 3f;
						}
						int num787 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore2 = Main.gore[num787];
						gore2.velocity *= 0.4f;
						Main.gore[num787].velocity.X += 1f;
						Main.gore[num787].velocity.Y += 1f;
						num787 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num787];
						gore2.velocity *= 0.4f;
						Main.gore[num787].velocity.X -= 1f;
						Main.gore[num787].velocity.Y += 1f;
						num787 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num787];
						gore2.velocity *= 0.4f;
						Main.gore[num787].velocity.X += 1f;
						Main.gore[num787].velocity.Y -= 1f;
						num787 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num787];
						gore2.velocity *= 0.4f;
						Main.gore[num787].velocity.X -= 1f;
						Main.gore[num787].velocity.Y -= 1f;
					}
				}
				else if (type == 347)
				{
					if (life <= 0)
					{
						Gore.NewGore(position, velocity, 524);
						Gore.NewGore(position, velocity, 525);
						Gore.NewGore(position, velocity, 526);
						Gore.NewGore(position, velocity, 527);
						for (int num788 = 0; num788 < 7; num788++)
						{
							int num789 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num789];
							dust.velocity *= 1.4f;
						}
						for (int num790 = 0; num790 < 4; num790++)
						{
							int num791 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num791].noGravity = true;
							Dust dust = Main.dust[num791];
							dust.velocity *= 5f;
							num791 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num791];
							dust.velocity *= 3f;
						}
						int num792 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore2 = Main.gore[num792];
						gore2.velocity *= 0.4f;
						Main.gore[num792].velocity.X += 1f;
						Main.gore[num792].velocity.Y += 1f;
						num792 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num792];
						gore2.velocity *= 0.4f;
						Main.gore[num792].velocity.X -= 1f;
						Main.gore[num792].velocity.Y -= 1f;
					}
				}
				else if (type == 346)
				{
					if (life <= 0)
					{
						Gore.NewGore(position, velocity, 518);
						Gore.NewGore(position, velocity, 519);
						Gore.NewGore(position, velocity, 520);
						Gore.NewGore(position, velocity, 521);
						Gore.NewGore(position, velocity, 522);
						Gore.NewGore(position, velocity, 523);
						for (int num793 = 0; num793 < 10; num793++)
						{
							int num794 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num794];
							dust.velocity *= 1.4f;
						}
						for (int num795 = 0; num795 < 5; num795++)
						{
							int num796 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num796].noGravity = true;
							Dust dust = Main.dust[num796];
							dust.velocity *= 5f;
							num796 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num796];
							dust.velocity *= 3f;
						}
						int num797 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore2 = Main.gore[num797];
						gore2.velocity *= 0.4f;
						Main.gore[num797].velocity.X += 1f;
						Main.gore[num797].velocity.Y += 1f;
						num797 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num797];
						gore2.velocity *= 0.4f;
						Main.gore[num797].velocity.X -= 1f;
						Main.gore[num797].velocity.Y += 1f;
						num797 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num797];
						gore2.velocity *= 0.4f;
						Main.gore[num797].velocity.X += 1f;
						Main.gore[num797].velocity.Y -= 1f;
						num797 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num797];
						gore2.velocity *= 0.4f;
						Main.gore[num797].velocity.X -= 1f;
						Main.gore[num797].velocity.Y -= 1f;
					}
				}
				else if (type == 127)
				{
					if (life <= 0)
					{
						Gore.NewGore(position, velocity, 149);
						Gore.NewGore(position, velocity, 150);
						for (int num798 = 0; num798 < 10; num798++)
						{
							int num799 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num799];
							dust.velocity *= 1.4f;
						}
						for (int num800 = 0; num800 < 5; num800++)
						{
							int num801 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num801].noGravity = true;
							Dust dust = Main.dust[num801];
							dust.velocity *= 5f;
							num801 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num801];
							dust.velocity *= 3f;
						}
						int num802 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore2 = Main.gore[num802];
						gore2.velocity *= 0.4f;
						Main.gore[num802].velocity.X += 1f;
						Main.gore[num802].velocity.Y += 1f;
						num802 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num802];
						gore2.velocity *= 0.4f;
						Main.gore[num802].velocity.X -= 1f;
						Main.gore[num802].velocity.Y += 1f;
						num802 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num802];
						gore2.velocity *= 0.4f;
						Main.gore[num802].velocity.X += 1f;
						Main.gore[num802].velocity.Y -= 1f;
						num802 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num802];
						gore2.velocity *= 0.4f;
						Main.gore[num802].velocity.X -= 1f;
						Main.gore[num802].velocity.Y -= 1f;
					}
				}
				else if (type >= 128 && type <= 131)
				{
					if (life <= 0)
					{
						Gore.NewGore(position, velocity, 147);
						Gore.NewGore(position, velocity, 148);
						for (int num803 = 0; num803 < 10; num803++)
						{
							int num804 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num804];
							dust.velocity *= 1.4f;
						}
						for (int num805 = 0; num805 < 5; num805++)
						{
							int num806 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num806].noGravity = true;
							Dust dust = Main.dust[num806];
							dust.velocity *= 5f;
							num806 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num806];
							dust.velocity *= 3f;
						}
						int num807 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore2 = Main.gore[num807];
						gore2.velocity *= 0.4f;
						Main.gore[num807].velocity.X += 1f;
						Main.gore[num807].velocity.Y += 1f;
						num807 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num807];
						gore2.velocity *= 0.4f;
						Main.gore[num807].velocity.X -= 1f;
						Main.gore[num807].velocity.Y += 1f;
						num807 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num807];
						gore2.velocity *= 0.4f;
						Main.gore[num807].velocity.X += 1f;
						Main.gore[num807].velocity.Y -= 1f;
						num807 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore2 = Main.gore[num807];
						gore2.velocity *= 0.4f;
						Main.gore[num807].velocity.X -= 1f;
						Main.gore[num807].velocity.Y -= 1f;
					}
				}
				else if (type == 23)
				{
					if (life > 0)
					{
						for (int num808 = 0; (double)num808 < dmg / (double)lifeMax * 100.0; num808++)
						{
							int num809 = 25;
							if (Main.rand.Next(2) == 0)
							{
								num809 = 6;
							}
							Dust.NewDust(position, width, height, num809, hitDirection, -1f);
							int num810 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
							Main.dust[num810].noGravity = true;
						}
						return;
					}
					for (int num811 = 0; num811 < 50; num811++)
					{
						int num812 = 25;
						if (Main.rand.Next(2) == 0)
						{
							num812 = 6;
						}
						Dust.NewDust(position, width, height, num812, 2 * hitDirection, -2f);
					}
					for (int num813 = 0; num813 < 50; num813++)
					{
						int num814 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2.5f);
						Dust dust = Main.dust[num814];
						dust.velocity *= 6f;
						Main.dust[num814].noGravity = true;
					}
				}
				else if (type == 24)
				{
					if (life > 0)
					{
						for (int num815 = 0; (double)num815 < dmg / (double)lifeMax * 100.0; num815++)
						{
							int num816 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X, velocity.Y, 100, default(Color), 2.5f);
							Main.dust[num816].noGravity = true;
						}
						return;
					}
					for (int num817 = 0; num817 < 50; num817++)
					{
						int num818 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X, velocity.Y, 100, default(Color), 2.5f);
						Main.dust[num818].noGravity = true;
						Dust dust = Main.dust[num818];
						dust.velocity *= 2f;
					}
					Gore.NewGore(position, velocity, 45);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 46);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 46);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 47);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 47);
				}
				else if (type == 25)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num819 = 0; num819 < 20; num819++)
					{
						int num820 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f);
						Main.dust[num820].noGravity = true;
						Dust dust = Main.dust[num820];
						dust.velocity *= 2f;
						num820 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
						dust = Main.dust[num820];
						dust.velocity *= 2f;
					}
				}
				else if (type == 33)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num821 = 0; num821 < 20; num821++)
					{
						int num822 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1.2f);
						Main.dust[num822].noGravity = true;
						Dust dust = Main.dust[num822];
						dust.velocity *= 2f;
						num822 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 0.6f);
						dust = Main.dust[num822];
						dust.velocity *= 2f;
					}
				}
				else if (type == 26 || type == 27 || type == 28 || type == 29 || type == 73 || type == 111)
				{
					if (life > 0)
					{
						for (int num823 = 0; (double)num823 < dmg / (double)lifeMax * 100.0; num823++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num824 = 0; num824 < 50; num824++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					int num825 = 48;
					int num826 = 49;
					int num827 = 50;
					if (type == 111)
					{
						num825 = 623;
						num826 = 624;
						num827 = 625;
					}
					else if (type == 26)
					{
						num825 = 626;
						num826 = 627;
						num827 = 628;
					}
					else if (type == 73)
					{
						num825 = 629;
						num826 = 630;
						num827 = 631;
					}
					else if (type == 27)
					{
						num825 = 632;
						num826 = 633;
						num827 = 634;
					}
					else if (type == 28)
					{
						num825 = 635;
						num826 = 636;
						num827 = 637;
					}
					Gore.NewGore(position, velocity, num825, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num826, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num826, scale);
					if (type == 111)
					{
						Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 131, scale);
					}
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num827, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num827, scale);
				}
				else if (type == 471)
				{
					if (life > 0)
					{
						for (int num828 = 0; (double)num828 < dmg / (double)lifeMax * 100.0; num828++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num829 = 0; num829 < 50; num829++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 675, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 676, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 677, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 678, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 678, scale);
				}
				else if (type == 472)
				{
					if (life > 0)
					{
						for (int num830 = 0; (double)num830 < dmg / (double)lifeMax * 100.0; num830++)
						{
							int num831 = Dust.NewDust(position, width, height, 5, hitDirection, -1f);
							if (Main.rand.Next(3) != 0)
							{
								Main.dust[num831].noGravity = true;
							}
							Main.dust[num831].alpha = 100;
						}
						return;
					}
					for (int num832 = 0; num832 < 50; num832++)
					{
						int num833 = Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num833].noGravity = true;
						}
						Main.dust[num833].alpha = 100;
					}
					Gore.NewGore(position, velocity, 679, scale);
					Gore.NewGore(position, velocity, 680, scale);
				}
				else if (type == 480)
				{
					if (life > 0)
					{
						for (int num834 = 0; (double)num834 < dmg / (double)lifeMax * 100.0; num834++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num835 = 0; num835 < 50; num835++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 692, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 693, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 693, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 694, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 694, scale);
				}
				else if (type == 185)
				{
					if (life > 0)
					{
						for (int num836 = 0; (double)num836 < dmg / (double)lifeMax * 100.0; num836++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num837 = 0; num837 < 50; num837++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 240, scale);
				}
				else if (type == 30 || type == 665)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num838 = 0; num838 < 20; num838++)
					{
						int num839 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f);
						Main.dust[num839].noGravity = true;
						Dust dust = Main.dust[num839];
						dust.velocity *= 2f;
						num839 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
						dust = Main.dust[num839];
						dust.velocity *= 2f;
					}
				}
				else if (type == 42 || type == 176 || type == 205 || (type >= 231 && type <= 235))
				{
					if (life > 0)
					{
						for (int num840 = 0; (double)num840 < dmg / (double)lifeMax * 100.0; num840++)
						{
							Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
						}
						return;
					}
					for (int num841 = 0; num841 < 50; num841++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
					}
					if (type == 205)
					{
						Gore.NewGore(position, velocity, 270, scale);
						Gore.NewGore(position, velocity, 271, scale);
						Gore.NewGore(position, velocity, 271, scale);
						Gore.NewGore(position, velocity, 272, scale);
					}
					else if (type == 176)
					{
						Gore.NewGore(position, velocity, 229, scale);
						Gore.NewGore(position, velocity, 230, scale);
					}
					else
					{
						Gore.NewGore(position, velocity, 70, scale);
						Gore.NewGore(position, velocity, 71, scale);
					}
				}
				else if (type == 43 || type == 56)
				{
					if (life > 0)
					{
						for (int num842 = 0; (double)num842 < dmg / (double)lifeMax * 100.0; num842++)
						{
							Dust.NewDust(position, width, height, 40, hitDirection, -1f, alpha, this.color, 1.2f);
						}
						return;
					}
					for (int num843 = 0; num843 < 50; num843++)
					{
						Dust.NewDust(position, width, height, 40, hitDirection, -2f, alpha, this.color, 1.2f);
					}
					Gore.NewGore(position, velocity, 72);
					Gore.NewGore(position, velocity, 72);
				}
				else if (type == 175)
				{
					if (life > 0)
					{
						for (int num844 = 0; (double)num844 < dmg / (double)lifeMax * 100.0; num844++)
						{
							Dust.NewDust(position, width, height, 40, hitDirection, -1f, alpha, this.color, 1.2f);
						}
						return;
					}
					for (int num845 = 0; num845 < 50; num845++)
					{
						Dust.NewDust(position, width, height, 40, hitDirection, -2f, alpha, this.color, 1.2f);
					}
					Gore.NewGore(position, velocity, 227);
					Gore.NewGore(position, velocity, 228);
				}
				else if (type == 48)
				{
					if (life > 0)
					{
						for (int num846 = 0; (double)num846 < dmg / (double)lifeMax * 100.0; num846++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num847 = 0; num847 < 50; num847++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 80);
					Gore.NewGore(position, velocity, 81);
				}
				else if (type == 62 || type == 66)
				{
					if (life > 0)
					{
						for (int num848 = 0; (double)num848 < dmg / (double)lifeMax * 100.0; num848++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num849 = 0; num849 < 50; num849++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 93);
					Gore.NewGore(position, velocity, 94);
					Gore.NewGore(position, velocity, 94);
				}
				else
				{
					if (type != 156)
					{
						return;
					}
					if (life > 0)
					{
						for (int num850 = 0; (double)num850 < dmg / (double)lifeMax * 100.0; num850++)
						{
							Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						}
						return;
					}
					for (int num851 = 0; num851 < 50; num851++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 184);
					Gore.NewGore(position, velocity, 185);
					Gore.NewGore(position, velocity, 185);
				}
			}
		}

		public static int CountNPCS(int Type)
		{
			int num = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == Type)
				{
					num++;
				}
			}
			return num;
		}

		public static bool AnyHelpfulFairies()
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && (Main.npc[i].type == 583 || Main.npc[i].type == 584 || Main.npc[i].type == 585) && Main.npc[i].ai[2] > 1f)
				{
					return true;
				}
			}
			return false;
		}

		public static bool AnyNPCs(int Type)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == Type)
				{
					return true;
				}
			}
			return false;
		}

		public static int FindFirstNPC(int Type)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == Type)
				{
					return i;
				}
			}
			return -1;
		}

		public static bool NearSpikeBall(int x, int y)
		{
			Rectangle rectangle = new Rectangle(x * 16 - 300, y * 16 - 300, 600, 600);
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].aiStyle == 20)
				{
					Rectangle rectangle2 = new Rectangle((int)Main.npc[i].ai[1], (int)Main.npc[i].ai[2], 20, 20);
					if (rectangle.Intersects(rectangle2))
					{
						return true;
					}
				}
			}
			return false;
		}

		public int FindBuffIndex(int type)
		{
			if (buffImmune[type])
			{
				return -1;
			}
			for (int i = 0; i < 20; i++)
			{
				if (buffTime[i] >= 1 && buffType[i] == type)
				{
					return i;
				}
			}
			return -1;
		}

		public void AddBuff(int type, int time, bool quiet = false)
		{
			if (buffImmune[type])
			{
				return;
			}
			if (!quiet)
			{
				if (Main.netMode == 1)
				{
					NetMessage.SendData(53, -1, -1, null, whoAmI, type, time);
				}
				else if (Main.netMode == 2)
				{
					NetMessage.SendData(54, -1, -1, null, whoAmI);
				}
			}
			int num = -1;
			for (int i = 0; i < 20; i++)
			{
				if (buffType[i] == type)
				{
					if (buffTime[i] < time)
					{
						buffTime[i] = time;
					}
					return;
				}
			}
			while (num == -1)
			{
				int num2 = -1;
				for (int j = 0; j < 20; j++)
				{
					if (!Main.debuff[buffType[j]])
					{
						num2 = j;
						break;
					}
				}
				if (num2 == -1)
				{
					return;
				}
				for (int k = num2; k < 20; k++)
				{
					if (buffType[k] == 0)
					{
						num = k;
						break;
					}
				}
				if (num == -1)
				{
					DelBuff(num2);
				}
			}
			buffType[num] = type;
			buffTime[num] = time;
		}

		public void RequestBuffRemoval(int buffTypeToRemove)
		{
			if (buffTypeToRemove < 0 || buffTypeToRemove >= 355 || !BuffID.Sets.CanBeRemovedByNetMessage[buffTypeToRemove])
			{
				return;
			}
			int num = FindBuffIndex(buffTypeToRemove);
			if (num != -1)
			{
				DelBuff(num);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(137, -1, -1, null, whoAmI, buffTypeToRemove);
				}
			}
		}

		public void DelBuff(int buffIndex)
		{
			buffTime[buffIndex] = 0;
			buffType[buffIndex] = 0;
			for (int i = 0; i < 19; i++)
			{
				if (buffTime[i] == 0 || buffType[i] == 0)
				{
					for (int j = i + 1; j < 20; j++)
					{
						buffTime[j - 1] = buffTime[j];
						buffType[j - 1] = buffType[j];
						buffTime[j] = 0;
						buffType[j] = 0;
					}
				}
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendData(54, -1, -1, null, whoAmI);
			}
		}

		public Rectangle getRect()
		{
			return new Rectangle((int)position.X, (int)position.Y, width, height);
		}

		public bool CanBeChasedBy(object attacker = null, bool ignoreDontTakeDamage = false)
		{
			if (active && chaseable && lifeMax > 5 && (!dontTakeDamage || ignoreDontTakeDamage) && !friendly)
			{
				return !immortal;
			}
			return false;
		}

		public bool HittableForOnHitRewards()
		{
			if (CountsAsACritter || immortal)
			{
				return false;
			}
			return true;
		}

		public void moneyPing(Vector2 pos)
		{
			SoundEngine.PlaySound(38, pos);
			int num = 244;
			if (extraValue >= 1000000)
			{
				num = 247;
			}
			else if (extraValue >= 10000)
			{
				num = 246;
			}
			else if (extraValue >= 100)
			{
				num = 245;
			}
			for (int i = 0; i < 20; i++)
			{
				int num2 = Dust.NewDust(pos - new Vector2(1f, 2f), 10, 14, num, 0f, 0f, 254, default(Color), 0.25f);
				Main.dust[num2].velocity *= 0.2f;
			}
		}

		public void IdleSounds()
		{
			if (!(shimmerTransparency > 0f))
			{
				if ((type == 239 || type == 240) && Main.rand.Next(900) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(24, 26));
				}
				else if ((type == 62 || type == 156) && Main.rand.Next(700) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(26, 30));
				}
				else if (type == 177 && Main.rand.Next(600) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(30, 32));
				}
				else if (type == 226 && Main.rand.Next(800) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 32);
				}
				else if (type == 153 && Main.rand.Next(1000) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 33);
				}
				else if (wet && (type == 63 || type == 64 || type == 103) && Main.rand.Next(1000) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(34, 36));
				}
				else if ((type == 198 || type == 199) && Main.rand.Next(1000) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(36, 38));
				}
				else if ((type == 170 || type == 180 || type == 171) && Main.rand.Next(600) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(38, 41));
				}
				else if (type == 250 && Main.rand.Next(700) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(41, 44));
				}
				else if (type == 580 && Main.rand.Next(800) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 44);
				}
				else if (type == 582 && Main.rand.Next(800) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 44);
				}
				else if (type == 581 && Main.rand.Next(800) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(44, 47));
				}
				else if (type == 508 && Main.rand.Next(800) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 44);
				}
				else if (type == 509 && Main.rand.Next(800) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(44, 47));
				}
				else if (type == 494 && Main.rand.Next(600) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 47);
				}
				else if (type == 467 && Main.rand.Next(700) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(48, 50));
				}
				else if (type == 468 && Main.rand.Next(700) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(50, 53));
				}
				else if (type == 288 && Main.rand.Next(400) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(53, 55));
				}
				else if ((type == 524 || type == 525 || type == 526 || type == 527) && Main.rand.Next(700) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(55, 57));
				}
				else if ((type == 496 || type == 497) && Main.rand.Next(600) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(57, 59));
				}
				else if (type == 389 && Main.rand.Next(800) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(59, 61));
				}
				else if (type == 471 && Main.rand.Next(600) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(61, 63));
				}
				else if (type == 482 && Main.rand.Next(600) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(63, 66));
				}
				else if (type == 388 && Main.rand.Next(700) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(66, 69));
				}
				else if (type == 520 && Main.rand.Next(800) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(69, 73));
				}
				else if (type == 477 && Main.rand.Next(600) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 73);
				}
				else if (type == 258 && Main.rand.Next(700) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(74, 78));
				}
				else if (type == 252 && Main.rand.Next(700) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 78);
				}
				else if (type == 469 && Main.rand.Next(700) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(79, 81));
				}
				else if ((type == 253 || type == 82) && Main.rand.Next(700) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(81, 84));
				}
				else if (type >= 498 && type <= 506 && Main.rand.Next(600) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(84, 86));
				}
				else if (type == 391 && Main.rand.Next(700) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(86, 87));
				}
			}
		}

		public void UpdateAltTexture()
		{
			if (townNPC)
			{
				int oldAltTexture = altTexture;
				bool flag = BirthdayParty.PartyIsUp || ForcePartyHatOn;
				if (type == 441 || type == 453 || type == 633)
				{
					flag = false;
				}
				altTexture = 0;
				if (flag)
				{
					altTexture = 1;
				}
				if (type == 633 && ShouldBestiaryGirlBeLycantrope())
				{
					altTexture = 2;
				}
				if (!ForcePartyHatOn)
				{
					MakeTransitionEffectsForTextureChanges(oldAltTexture, altTexture);
				}
			}
		}

		private void MakeTransitionEffectsForTextureChanges(int oldAltTexture, int currentAltTexture)
		{
			if (oldAltTexture == 0 && currentAltTexture == 1)
			{
				for (int i = 0; i < 20; i++)
				{
					Dust.NewDust(position, width, height / 4, 139 + Main.rand.Next(4), 0f, -2f);
				}
			}
			if (oldAltTexture == 1 && currentAltTexture == 0)
			{
				Utils.PoofOfSmoke(position);
			}
			if (type != 633)
			{
				return;
			}
			int num = 2;
			if ((oldAltTexture == 0 && currentAltTexture == num) || (oldAltTexture == num && currentAltTexture == 0))
			{
				for (int j = 0; j < 20; j++)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 262, 0f, -2f);
					dust.noGravity = true;
					dust.scale = 2f;
				}
			}
		}

		public static void ResetNetOffsets()
		{
			offSetDelayTime = 180;
			for (int i = 0; i < 200; i++)
			{
				Main.npc[i].netOffset *= 0f;
			}
		}

		public void UpdateNPC(int i)
		{
			whoAmI = i;
			if (!active)
			{
				return;
			}
			if (offSetDelayTime > 0)
			{
				netOffset *= 0f;
			}
			else if (Main.netMode == 2)
			{
				netOffset *= 0f;
			}
			else if (Main.multiplayerNPCSmoothingRange <= 0)
			{
				netOffset *= 0f;
			}
			else if (netOffset != new Vector2(0f, 0f))
			{
				if (NPCID.Sets.NoMultiplayerSmoothingByType[type])
				{
					netOffset *= 0f;
				}
				else if (NPCID.Sets.NoMultiplayerSmoothingByAI[aiStyle])
				{
					netOffset *= 0f;
				}
				else
				{
					float num = 2f;
					float num2 = Main.multiplayerNPCSmoothingRange;
					float num3 = netOffset.Length();
					if (num3 > num2)
					{
						netOffset.Normalize();
						netOffset *= num2;
						num3 = netOffset.Length();
					}
					num += num3 / num2 * num;
					Vector2 vector = netOffset;
					vector.Normalize();
					vector *= num;
					netOffset -= vector;
					if (netOffset.Length() < num)
					{
						netOffset *= 0f;
					}
					if (townNPC)
					{
						if (Vector2.Distance(position, new Vector2(homeTileX * 16 + 8 - width / 2, (float)(homeTileY * 16 - height) - 0.1f)) < 1f)
						{
							netOffset *= 0f;
						}
						if (ai[0] == 25f)
						{
							netOffset *= 0f;
						}
					}
				}
			}
			UpdateAltTexture();
			if (type == 368)
			{
				travelNPC = true;
			}
			if (Main.netMode != 2)
			{
				UpdateNPC_CastLights();
			}
			UpdateNPC_TeleportVisuals();
			UpdateNPC_CritterSounds();
			TrySyncingUniqueTownNPCData(i);
			if (aiStyle == 7 && position.Y > Main.bottomWorld - 640f + (float)height && Main.netMode != 1 && !Main.xMas)
			{
				StrikeNPCNoInteraction(9999, 0f, 0);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(28, -1, -1, null, whoAmI, 9999f);
				}
			}
			if (Main.netMode == 1)
			{
				bool flag = false;
				int num4 = (int)(position.X + (float)(width / 2)) / 16;
				int num5 = (int)(position.Y + (float)(height / 2)) / 16;
				try
				{
					if (num4 >= 4 && num4 <= Main.maxTilesX - 4 && num5 >= 4 && num5 <= Main.maxTilesY - 4)
					{
						if (Main.tile[num4, num5] == null)
						{
							flag = true;
						}
						else if (Main.tile[num4 - 3, num5] == null)
						{
							flag = true;
						}
						else if (Main.tile[num4 + 3, num5] == null)
						{
							flag = true;
						}
						else if (Main.tile[num4, num5 - 3] == null)
						{
							flag = true;
						}
						else if (Main.tile[num4, num5 + 3] == null)
						{
							flag = true;
						}
					}
				}
				catch
				{
					flag = true;
				}
				if (flag)
				{
					return;
				}
			}
			UpdateNPC_BuffFlagsReset();
			UpdateNPC_BuffSetFlags();
			UpdateNPC_SoulDrainDebuff();
			UpdateNPC_BuffClearExpiredBuffs();
			UpdateNPC_BuffApplyDOTs();
			UpdateNPC_BuffApplyVFX();
			UpdateNPC_BloodMoonTransformations();
			UpdateNPC_UpdateGravity(out var maxFallSpeed);
			if (soundDelay > 0)
			{
				soundDelay--;
			}
			if (life <= 0)
			{
				active = false;
				UpdateNetworkCode(i);
				netUpdate = false;
				justHit = false;
				return;
			}
			oldTarget = target;
			oldDirection = direction;
			oldDirectionY = directionY;
			float num6 = 1f + Math.Abs(velocity.X) / 3f;
			if (gfxOffY > 0f)
			{
				gfxOffY -= num6 * stepSpeed;
				if (gfxOffY < 0f)
				{
					gfxOffY = 0f;
				}
			}
			else if (gfxOffY < 0f)
			{
				gfxOffY += num6 * stepSpeed;
				if (gfxOffY > 0f)
				{
					gfxOffY = 0f;
				}
			}
			if (gfxOffY > 16f)
			{
				gfxOffY = 16f;
			}
			if (gfxOffY < -16f)
			{
				gfxOffY = -16f;
			}
			TryPortalJumping();
			IdleSounds();
			AI();
			SubAI_HandleTemporaryCatchableNPCPlayerInvulnerability();
			if (Main.netMode != 2 && extraValue > 0)
			{
				int num7 = 244;
				float num8 = 30f;
				if (extraValue >= 1000000)
				{
					num7 = 247;
					num8 *= 0.25f;
				}
				else if (extraValue >= 10000)
				{
					num7 = 246;
					num8 *= 0.5f;
				}
				else if (extraValue >= 100)
				{
					num7 = 245;
					num8 *= 0.75f;
				}
				if (Main.rand.Next((int)num8) == 0)
				{
					position += netOffset;
					int num9 = Dust.NewDust(position, width, height, num7, 0f, 0f, 254, default(Color), 0.25f);
					Main.dust[num9].velocity *= 0.1f;
					position -= netOffset;
				}
			}
			for (int j = 0; j < 256; j++)
			{
				if (immune[j] > 0)
				{
					immune[j]--;
				}
			}
			if (!noGravity && !noTileCollide)
			{
				int num10 = (int)(position.X + (float)(width / 2)) / 16;
				int num11 = (int)(position.Y + (float)(height / 2)) / 16;
				if (WorldGen.InWorld(num10, num11) && Main.tile[num10, num11] == null)
				{
					gravity = 0f;
					velocity.X = 0f;
					velocity.Y = 0f;
				}
			}
			if (!noGravity)
			{
				velocity.Y += gravity;
				if (velocity.Y > maxFallSpeed)
				{
					velocity.Y = maxFallSpeed;
				}
			}
			if ((double)velocity.X < 0.005 && (double)velocity.X > -0.005)
			{
				velocity.X = 0f;
			}
			if (Main.netMode != 1 && type != 37 && (friendly || NPCID.Sets.TakesDamageFromHostilesWithoutBeingFriendly[type]))
			{
				if (townNPC)
				{
					CheckDrowning();
				}
				CheckLifeRegen();
				GetHurtByOtherNPCs(NPCID.Sets.AllNPCs);
			}
			if (Main.netMode != 1 && (npcsFoundForCheckActive[210] || npcsFoundForCheckActive[211]) && !NPCID.Sets.HurtingBees[type])
			{
				GetHurtByOtherNPCs(NPCID.Sets.HurtingBees);
			}
			if (!noTileCollide)
			{
				UpdateCollision();
			}
			else
			{
				oldPosition = position;
				oldDirection = direction;
				position += velocity;
				if (onFire && boss && Main.netMode != 1 && Collision.WetCollision(position, width, height))
				{
					for (int k = 0; k < 20; k++)
					{
						if (buffType[k] == 24)
						{
							DelBuff(k);
						}
					}
				}
			}
			if (Main.netMode != 1 && !noTileCollide && lifeMax > 1 && Collision.SwitchTiles(position, width, height, oldPosition, 2) && (type == 46 || type == 148 || type == 149 || type == 303 || type == 361 || type == 362 || type == 364 || type == 366 || type == 367 || (type >= 442 && type <= 448) || type == 602 || type == 608 || type == 614 || type == 687))
			{
				ai[0] = 1f;
				ai[1] = 400f;
				ai[2] = 0f;
			}
			FindFrame();
			UpdateNPC_UpdateTrails();
			UpdateNetworkCode(i);
			CheckActive();
			netUpdate = false;
			justHit = false;
		}

		private void SubAI_HandleTemporaryCatchableNPCPlayerInvulnerability()
		{
			if (type >= 0 && type < 688 && Main.npcCatchable[type])
			{
				if (releaseOwner != 255 || SpawnedFromStatue)
				{
					catchableNPCTempImmunityCounter = 0;
				}
				bool num = friendly;
				if (catchableNPCTempImmunityCounter > 0)
				{
					catchableNPCTempImmunityCounter--;
					friendly = true;
				}
				else
				{
					friendly = false;
				}
				if (num != friendly)
				{
					netUpdate = true;
				}
			}
		}

		private void TrySyncingUniqueTownNPCData(int npcIndex)
		{
			if (Main.netMode == 1 && needsUniqueInfoUpdate && isLikeATownNPC)
			{
				needsUniqueInfoUpdate = false;
				NetMessage.SendData(56, -1, -1, null, npcIndex);
			}
		}

		private void UpdateNetworkCode(int i)
		{
			if (!active)
			{
				netUpdate = true;
			}
			if (Main.netMode != 2)
			{
				return;
			}
			if (Main.npcStreamSpeed > 0 && !townNPC && NPCID.Sets.UsesMultiplayerProximitySyncing[type] && (double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) >= 0.5)
			{
				netStream++;
				if (netStream >= Main.npcStreamSpeed)
				{
					for (int j = 0; j < 255; j++)
					{
						if (Main.player[j].active)
						{
							netStream = 0;
							float num = Math.Abs(base.Center.X - Main.player[j].Center.X) + Math.Abs(base.Center.Y - Main.player[j].Center.Y);
							if (num < 250f)
							{
								streamPlayer[j] -= 8;
							}
							else if (num < 500f)
							{
								streamPlayer[j] -= 4;
							}
							else if (num < 1000f)
							{
								streamPlayer[j] -= 2;
							}
							else if (num < 1500f)
							{
								streamPlayer[j]--;
							}
							if (streamPlayer[j] <= 0)
							{
								streamPlayer[j] = 8;
								NetMessage.SendData(23, j, -1, null, i);
							}
						}
					}
				}
			}
			if (townNPC || aiStyle == 16)
			{
				netSpam = 0;
			}
			if (netUpdate2)
			{
				netUpdate = true;
			}
			if (!active)
			{
				netSpam = 0;
			}
			if (netUpdate)
			{
				if (boss)
				{
					_ = oldPosition - position;
					if (netSpam <= 15)
					{
						netSpam += 5;
						NetMessage.SendData(23, -1, -1, null, i);
						netUpdate2 = false;
					}
					else
					{
						netUpdate2 = true;
					}
				}
				else if (netSpam <= 90)
				{
					netSpam += 30;
					NetMessage.SendData(23, -1, -1, null, i);
					netUpdate2 = false;
				}
				else
				{
					netUpdate2 = true;
				}
			}
			if (netSpam > 0)
			{
				netSpam--;
			}
			if (active && townNPC && TypeToDefaultHeadIndex(type) > 0)
			{
				if (homeless != oldHomeless || homeTileX != oldHomeTileX || homeTileY != oldHomeTileY)
				{
					byte householdStatus = WorldGen.TownManager.GetHouseholdStatus(this);
					NetMessage.SendData(60, -1, -1, null, i, Main.npc[i].homeTileX, Main.npc[i].homeTileY, (int)householdStatus);
				}
				oldHomeless = homeless;
				oldHomeTileX = homeTileX;
				oldHomeTileY = homeTileY;
			}
		}

		public IEntitySource GetItemSource_Misc(int itemSourceId)
		{
			return new EntitySource_ByItemSourceId(this, itemSourceId);
		}

		public static IEntitySource GetSpawnSource_NPCRelease(int whoReleasedIt)
		{
			return new EntitySource_Parent(Main.player[whoReleasedIt]);
		}

		public static IEntitySource GetSpawnSource_NPCCatch(int whoCatchedIt)
		{
			return new EntitySource_Parent(Main.player[whoCatchedIt]);
		}

		public IEntitySource GetSpawnSource_NPCHurt()
		{
			return new EntitySource_Parent(this);
		}

		public IEntitySource GetSpawnSource_ForProjectile()
		{
			return new EntitySource_Parent(this);
		}

		public IEntitySource GetSpawnSourceForProjectileNPC()
		{
			return new EntitySource_Parent(this);
		}

		public static IEntitySource GetSpawnSourceForNaturalSpawn()
		{
			return new EntitySource_SpawnNPC();
		}

		public static IEntitySource GetSpawnSourceForTownSpawn()
		{
			return new EntitySource_SpawnNPC();
		}

		public IEntitySource GetSpawnSourceForNPCFromNPCAI()
		{
			return new EntitySource_Parent(this);
		}

		public IEntitySource GetItemSource_Loot()
		{
			return new EntitySource_Loot(this);
		}

		private void UpdateNPC_UpdateTrails()
		{
			int num = NPCID.Sets.TrailingMode[type];
			if (num == 0)
			{
				if (localAI[3] <= 0f)
				{
					localAI[3] = 2f;
					for (int num2 = oldPos.Length - 1; num2 > 0; num2--)
					{
						oldPos[num2] = oldPos[num2 - 1];
					}
					oldPos[0] = position + netOffset;
				}
				localAI[3] -= 1f;
			}
			if (num == 1)
			{
				for (int num3 = oldPos.Length - 1; num3 > 0; num3--)
				{
					oldPos[num3] = oldPos[num3 - 1];
				}
				oldPos[0] = position + netOffset;
			}
			if (num == 2)
			{
				if ((int)ai[0] == 4 || ai[0] == 5f || ai[0] == 6f)
				{
					for (int num4 = oldPos.Length - 1; num4 > 0; num4--)
					{
						oldPos[num4] = oldPos[num4 - 1];
						oldRot[num4] = oldRot[num4 - 1];
					}
					oldPos[0] = position + netOffset;
					oldRot[0] = rotation;
				}
				else
				{
					for (int num5 = oldPos.Length - 1; num5 >= 0; num5--)
					{
						oldPos[num5] = position + netOffset;
						oldRot[num5] = rotation;
					}
				}
			}
			if (num == 3)
			{
				for (int num6 = oldPos.Length - 1; num6 > 0; num6--)
				{
					oldPos[num6] = oldPos[num6 - 1];
					oldRot[num6] = oldRot[num6 - 1];
				}
				oldPos[0] = position + netOffset;
				oldRot[0] = rotation;
			}
			switch (num)
			{
			case 4:
			{
				for (int num9 = oldPos.Length - 1; num9 > 0; num9--)
				{
					oldPos[num9] = oldPos[num9 - 1];
					Lighting.AddLight((int)position.X / 16, (int)position.Y / 16, 0.3f, 0f, 0.2f);
				}
				oldPos[0] = position + netOffset;
				break;
			}
			case 5:
			{
				for (int num8 = oldPos.Length - 1; num8 > 0; num8--)
				{
					oldPos[num8] = oldPos[num8 - 1];
				}
				oldPos[0] = position + netOffset;
				break;
			}
			case 6:
			{
				for (int num10 = oldPos.Length - 1; num10 > 0; num10--)
				{
					oldPos[num10] = oldPos[num10 - 1];
				}
				oldPos[0] = position + netOffset;
				break;
			}
			case 7:
			{
				for (int num7 = oldPos.Length - 1; num7 > 0; num7--)
				{
					oldPos[num7] = oldPos[num7 - 1];
					oldRot[num7] = oldRot[num7 - 1];
				}
				oldPos[0] = position + netOffset;
				oldRot[0] = rotation;
				break;
			}
			}
		}

		private void UpdateNPC_UpdateGravity(out float maxFallSpeed)
		{
			maxFallSpeed = 10f;
			gravity = 0.3f;
			if (type == 258)
			{
				gravity = 0.1f;
				if (velocity.Y > 3f)
				{
					velocity.Y = 3f;
				}
			}
			else if (type == 425 && ai[2] == 1f)
			{
				gravity = 0.1f;
			}
			else if ((type == 576 || type == 577) && ai[0] > 0f && ai[1] == 2f)
			{
				gravity = 0.45f;
				if (velocity.Y > 32f)
				{
					velocity.Y = 32f;
				}
			}
			else if (type == 427 && ai[2] == 1f)
			{
				gravity = 0.1f;
				if (velocity.Y > 4f)
				{
					velocity.Y = 4f;
				}
			}
			else if (type == 426)
			{
				gravity = 0.1f;
				if (velocity.Y > 3f)
				{
					velocity.Y = 3f;
				}
			}
			else if (type == 541)
			{
				gravity = 0f;
			}
			else if (aiStyle == 7 && ai[0] == 25f)
			{
				gravity = 0f;
			}
			float num = (float)Main.maxTilesX / 4200f;
			num *= num;
			float num2 = (float)((double)(position.Y / 16f - (60f + 10f * num)) / (Main.worldSurface / 6.0));
			if ((double)num2 < 0.25)
			{
				num2 = 0.25f;
			}
			if (num2 > 1f)
			{
				num2 = 1f;
			}
			gravity *= num2;
			if (wet)
			{
				if (shimmerWet)
				{
					gravity = 0.15f;
					maxFallSpeed = 5.5f;
				}
				else if (honeyWet)
				{
					gravity = 0.1f;
					maxFallSpeed = 4f;
				}
				else
				{
					gravity = 0.2f;
					maxFallSpeed = 7f;
				}
			}
		}

		private void UpdateNPC_SoulDrainDebuff()
		{
			if (!soulDrain)
			{
				return;
			}
			int num = 1100;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].dead && (base.Center - Main.player[i].position).Length() < (float)num && Main.player[i].inventory[Main.player[i].selectedItem].type == 3006 && Main.player[i].itemAnimation > 0)
				{
					if (i == Main.myPlayer)
					{
						Main.player[i].soulDrain++;
					}
					if (Main.rand.Next(3) != 0)
					{
						Vector2 center = base.Center;
						center.X += (float)Main.rand.Next(-100, 100) * 0.05f;
						center.Y += (float)Main.rand.Next(-100, 100) * 0.05f;
						center += velocity;
						int num2 = Dust.NewDust(center, 1, 1, 235);
						Main.dust[num2].velocity *= 0f;
						Main.dust[num2].scale = (float)Main.rand.Next(70, 85) * 0.01f;
						Main.dust[num2].fadeIn = i + 1;
					}
				}
			}
		}

		public static Color buffColor(Color newColor, float R, float G, float B, float A)
		{
			newColor.R = (byte)((float)(int)newColor.R * R);
			newColor.G = (byte)((float)(int)newColor.G * G);
			newColor.B = (byte)((float)(int)newColor.B * B);
			newColor.A = (byte)((float)(int)newColor.A * A);
			return newColor;
		}

		public Color GetNPCColorTintedByBuffs(Color npcColor)
		{
			float num = 1f;
			float num2 = 1f;
			float num3 = 1f;
			float a = 1f;
			if (poisoned)
			{
				num *= 0.65f;
				num3 *= 0.75f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (venom)
			{
				num2 *= 0.45f;
				num *= 0.75f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (midas)
			{
				num3 *= 0.3f;
				num *= 0.85f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (betsysCurse)
			{
				num *= 0.8f;
				num2 *= 0.6f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (oiled)
			{
				num *= 0.7f;
				num2 *= 0.7f;
				num3 *= 0.7f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (stinky)
			{
				num *= 0.7f;
				num3 *= 0.55f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (drippingSlime)
			{
				num *= 0.8f;
				num2 *= 0.8f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (drippingSparkleSlime)
			{
				num3 *= 0.85f;
				num2 *= 0.75f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (ichor)
			{
				npcColor = new Color(255, 255, 0, 255);
			}
			if (Main.player[Main.myPlayer].detectCreature && lifeMax > 1)
			{
				byte b;
				byte b2;
				byte b3;
				if (friendly || catchItem > 0 || (damage == 0 && lifeMax == 5))
				{
					b = 50;
					b2 = byte.MaxValue;
					b3 = 50;
				}
				else
				{
					b = byte.MaxValue;
					b2 = 50;
					b3 = 50;
				}
				if (npcColor.R < b)
				{
					npcColor.R = b;
				}
				if (npcColor.G < b2)
				{
					npcColor.G = b2;
				}
				if (npcColor.B < b3)
				{
					npcColor.B = b3;
				}
			}
			return npcColor;
		}

		private void UpdateNPC_BuffApplyVFX()
		{
			position += netOffset;
			if (markedByScytheWhip && Main.rand.Next(3) == 0)
			{
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.BlackLightningSmall, new ParticleOrchestraSettings
				{
					MovementVector = Main.rand.NextVector2Circular(1f, 1f),
					PositionInWorld = Main.rand.NextVector2FromRectangle(base.Hitbox)
				});
			}
			if (poisoned && Main.rand.Next(30) == 0)
			{
				Dust dust = Dust.NewDustDirect(position, width, height, 46, 0f, 0f, 120, default(Color), 0.2f);
				dust.noGravity = true;
				dust.fadeIn = 1.9f;
			}
			if (venom && Main.rand.Next(10) == 0)
			{
				Dust dust2 = Dust.NewDustDirect(position, width, height, 171, 0f, 0f, 100, default(Color), 0.5f);
				dust2.noGravity = true;
				dust2.fadeIn = 1.5f;
			}
			if (shadowFlame && Main.rand.Next(5) < 4)
			{
				Dust dust3 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 27, velocity.X * 0.4f, velocity.Y * 0.4f, 180, default(Color), 1.95f);
				dust3.noGravity = true;
				dust3.velocity *= 0.75f;
				dust3.velocity.X *= 0.75f;
				dust3.velocity.Y -= 1f;
				if (Main.rand.Next(4) == 0)
				{
					dust3.noGravity = false;
					dust3.scale *= 0.5f;
				}
			}
			if (onFire)
			{
				if (Main.rand.Next(4) < 3)
				{
					Dust dust4 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 6, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
					dust4.noGravity = true;
					dust4.velocity *= 1.8f;
					dust4.velocity.Y -= 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						dust4.noGravity = false;
						dust4.scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (onFire3)
			{
				if (Main.rand.Next(4) < 3)
				{
					Dust dust5 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 6, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
					dust5.noGravity = true;
					dust5.velocity *= 1.8f;
					dust5.velocity.Y -= 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						dust5.noGravity = false;
						dust5.scale *= 0.5f;
					}
					dust5.customData = 0;
				}
				Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (daybreak)
			{
				if (Main.rand.Next(4) < 3)
				{
					Dust dust6 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 158, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
					dust6.noGravity = true;
					dust6.velocity *= 2.8f;
					dust6.velocity.Y -= 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						dust6.noGravity = false;
						dust6.scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (betsysCurse)
			{
				if (Main.rand.Next(4) < 3)
				{
					Dust dust7 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 55, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
					dust7.noGravity = true;
					dust7.velocity *= 2.8f;
					dust7.velocity.Y -= 1.5f;
					dust7.noGravity = false;
					dust7.scale = 0.9f;
					dust7.color = new Color(0, 0, 180, 255);
					dust7.velocity *= 0.2f;
				}
				Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 0.6f, 0.1f, 0.9f);
			}
			if (oiled && Main.rand.Next(3) != 0)
			{
				int num = 175;
				Color newColor = new Color(0, 0, 0, 140);
				Vector2 vector = position;
				vector.X -= 2f;
				vector.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					Dust dust8 = Dust.NewDustDirect(vector, width + 4, height + 2, 4, 0f, 0f, num, newColor, 1.4f);
					if (Main.rand.Next(2) == 0)
					{
						dust8.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust8.alpha += 25;
					}
					dust8.noLight = true;
					dust8.velocity *= 0.2f;
					dust8.velocity.Y += 0.2f;
					dust8.velocity += velocity;
				}
			}
			if (dryadWard && velocity.X != 0f && Main.rand.Next(4) == 0)
			{
				Dust dust9 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y + (float)height - 2f), width + 4, 4, 163, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.5f);
				dust9.noGravity = true;
				dust9.noLight = true;
				dust9.velocity *= 0f;
			}
			if (dryadBane && Main.rand.Next(4) == 0)
			{
				Dust dust10 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y), width + 4, height, 163, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.5f);
				dust10.noGravity = true;
				dust10.velocity *= new Vector2(Main.rand.NextFloat() * 4f - 2f, 0f);
				dust10.noLight = true;
			}
			if (loveStruck && Main.rand.Next(5) == 0)
			{
				Vector2 vector2 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
				vector2.Normalize();
				vector2.X *= 0.66f;
				int num2 = Gore.NewGore(position + new Vector2(Main.rand.Next(width + 1), Main.rand.Next(height + 1)), vector2 * Main.rand.Next(3, 6) * 0.33f, 331, (float)Main.rand.Next(40, 121) * 0.01f);
				Main.gore[num2].sticky = false;
				Main.gore[num2].velocity *= 0.4f;
				Main.gore[num2].velocity.Y -= 0.6f;
			}
			if (stinky && Main.rand.Next(5) == 0)
			{
				Vector2 vector3 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
				vector3.Normalize();
				vector3.X *= 0.66f;
				vector3.Y = Math.Abs(vector3.Y);
				Vector2 vector4 = vector3 * Main.rand.Next(3, 5) * 0.25f;
				Dust dust11 = Dust.NewDustDirect(position, width, height, 188, vector4.X, vector4.Y * 0.5f, 100, default(Color), 1.5f);
				dust11.velocity *= 0.1f;
				dust11.velocity.Y -= 0.5f;
			}
			if (dripping && Main.rand.Next(4) != 0)
			{
				Vector2 vector5 = position;
				vector5.X -= 2f;
				vector5.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					Dust dust12 = Dust.NewDustDirect(vector5, width + 4, height + 2, 211, 0f, 0f, 50, default(Color), 0.8f);
					if (Main.rand.Next(2) == 0)
					{
						dust12.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust12.alpha += 25;
					}
					dust12.noLight = true;
					dust12.velocity *= 0.2f;
					dust12.velocity.Y += 0.2f;
					dust12.velocity += velocity;
				}
				else
				{
					Dust dust13 = Dust.NewDustDirect(vector5, width + 8, height + 8, 211, 0f, 0f, 50, default(Color), 1.1f);
					if (Main.rand.Next(2) == 0)
					{
						dust13.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust13.alpha += 25;
					}
					dust13.noLight = true;
					dust13.noGravity = true;
					dust13.velocity *= 0.2f;
					dust13.velocity.Y += 1f;
					dust13.velocity += velocity;
				}
			}
			if (drippingSlime && Main.rand.Next(4) != 0)
			{
				int num3 = 175;
				Color newColor2 = new Color(0, 80, 255, 100);
				Vector2 vector6 = position;
				vector6.X -= 2f;
				vector6.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					Dust dust14 = Dust.NewDustDirect(vector6, width + 4, height + 2, 4, 0f, 0f, num3, newColor2, 1.4f);
					if (Main.rand.Next(2) == 0)
					{
						dust14.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust14.alpha += 25;
					}
					dust14.noLight = true;
					dust14.velocity *= 0.2f;
					dust14.velocity.Y += 0.2f;
					dust14.velocity += velocity;
				}
			}
			if (drippingSparkleSlime && Main.rand.Next(4) != 0)
			{
				int num4 = 150;
				Vector2 vector7 = position;
				vector7.X -= 2f;
				vector7.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					Dust dust15 = Dust.NewDustDirect(vector7, width + 4, height + 2, 243, 0f, 0f, num4);
					if (Main.rand.Next(2) == 0)
					{
						dust15.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust15.alpha += 25;
					}
					dust15.noLight = true;
					dust15.velocity *= 0.2f;
					dust15.velocity.Y += 0.2f;
					dust15.velocity += velocity;
				}
			}
			if (onFrostBurn)
			{
				if (Main.rand.Next(4) < 3)
				{
					Dust dust16 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 135, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
					dust16.noGravity = true;
					dust16.velocity *= 1.8f;
					dust16.velocity.Y -= 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						dust16.noGravity = false;
						dust16.scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 0.1f, 0.6f, 1f);
			}
			if (onFrostBurn2)
			{
				if (Main.rand.Next(4) < 3)
				{
					Dust dust17 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 135, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
					dust17.noGravity = true;
					dust17.velocity *= 1.8f;
					dust17.velocity.Y -= 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						dust17.noGravity = false;
						dust17.scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 0.1f, 0.6f, 1f);
			}
			if (onFire2)
			{
				if (Main.rand.Next(4) < 3)
				{
					Dust dust18 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 75, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
					dust18.noGravity = true;
					dust18.velocity *= 1.8f;
					dust18.velocity.Y -= 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						dust18.noGravity = false;
						dust18.scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			netShimmer = false;
			if (shimmering)
			{
				shimmerTransparency += 0.01f;
				if (Main.netMode != 1 && (double)shimmerTransparency > 0.9)
				{
					GetShimmered();
				}
				if (shimmerTransparency > 1f)
				{
					shimmerTransparency = 1f;
				}
			}
			else if (shimmerTransparency > 0f)
			{
				if (justHit)
				{
					shimmerTransparency -= 0.1f;
				}
				if (buffImmune[353])
				{
					shimmerTransparency -= 0.015f;
				}
				else
				{
					shimmerTransparency -= 0.001f;
				}
				if (shimmerTransparency < 0f)
				{
					shimmerTransparency = 0f;
				}
			}
			position -= netOffset;
		}

		private void GetShimmered()
		{
			if (SpawnedFromStatue)
			{
				if (Main.netMode == 0)
				{
					Item.ShimmerEffect(base.Center);
				}
				else
				{
					NetMessage.SendData(146, -1, -1, null, 0, (int)base.Center.X, (int)base.Center.Y);
				}
				noSpawnCycle = true;
				active = false;
				if (Main.netMode == 2)
				{
					netSkip = -1;
					life = 0;
					NetMessage.SendData(23, -1, -1, null, whoAmI);
				}
			}
			else if (NPCID.Sets.ShimmerTransformToNPC[type] >= 0)
			{
				Transform(NPCID.Sets.ShimmerTransformToNPC[type]);
				if (Main.netMode == 0)
				{
					Item.ShimmerEffect(base.Center);
				}
				else
				{
					NetMessage.SendData(146, -1, -1, null, 0, (int)base.Center.X, (int)base.Center.Y);
				}
			}
			else if (NPCID.Sets.ShimmerTransformToItem[type] >= 0)
			{
				int num = Item.NewItem(GetItemSource_Misc(8), (int)position.X, (int)position.Y, width, height, NPCID.Sets.ShimmerTransformToItem[type]);
				Main.item[num].stack = 1;
				Main.item[num].shimmerTime = 1f;
				Main.item[num].shimmered = true;
				Main.item[num].shimmerWet = true;
				Main.item[num].wet = true;
				Main.item[num].velocity *= 0.1f;
				Main.item[num].playerIndexTheItemIsReservedFor = Main.myPlayer;
				NetMessage.SendData(145, -1, -1, null, num, 1f);
				if (Main.netMode == 0)
				{
					Item.ShimmerEffect(base.Center);
				}
				else
				{
					NetMessage.SendData(146, -1, -1, null, 0, (int)base.Center.X, (int)base.Center.Y);
				}
				noSpawnCycle = true;
				active = false;
				if (Main.netMode == 2)
				{
					netSkip = -1;
					life = 0;
					NetMessage.SendData(23, -1, -1, null, whoAmI);
				}
			}
			else if (NPCID.Sets.ShimmerTownTransform[type])
			{
				ai[0] = 25f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] = 0f;
				netUpdate = true;
				shimmerTransparency = 0.89f;
				int num2 = FindBuffIndex(353);
				if (num2 != -1)
				{
					DelBuff(num2);
				}
			}
		}

		private void UpdateNPC_BuffApplyDOTs()
		{
			if (dontTakeDamage)
			{
				return;
			}
			int num = lifeRegenExpectedLossPerSecond;
			if (poisoned)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 12;
			}
			if (onFire)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 8;
			}
			if (onFire3)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 30;
				if (num < 5)
				{
					num = 5;
				}
			}
			if (onFrostBurn)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 16;
				if (num < 2)
				{
					num = 2;
				}
			}
			if (onFrostBurn2)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 50;
				if (num < 10)
				{
					num = 10;
				}
			}
			if (onFire2)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 48;
				if (num < 10)
				{
					num = 10;
				}
			}
			if (venom)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 60;
				if (num < 15)
				{
					num = 15;
				}
			}
			if (shadowFlame)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 30;
				if (num < 5)
				{
					num = 5;
				}
			}
			if (oiled && (onFire || onFire2 || onFire3 || onFrostBurn || onFrostBurn2 || shadowFlame))
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 50;
				if (num < 10)
				{
					num = 10;
				}
			}
			if (javelined)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				int num2 = 0;
				int num3 = 1;
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].type == 598 && Main.projectile[i].ai[0] == 1f && Main.projectile[i].ai[1] == (float)whoAmI)
					{
						num2++;
					}
				}
				lifeRegen -= num2 * 2 * 3;
				if (num < num2 * 3 / num3)
				{
					num = num2 * 3 / num3;
				}
			}
			if (tentacleSpiked)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				int num4 = 0;
				int num5 = 1;
				for (int j = 0; j < 1000; j++)
				{
					if (Main.projectile[j].active && Main.projectile[j].type == 971 && Main.projectile[j].ai[0] == 1f && Main.projectile[j].ai[1] == (float)whoAmI)
					{
						num4++;
					}
				}
				lifeRegen -= num4 * 2 * 3;
				if (num < num4 * 3 / num5)
				{
					num = num4 * 3 / num5;
				}
			}
			if (bloodButchered)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				int num6 = 0;
				int num7 = 1;
				for (int k = 0; k < 1000; k++)
				{
					if (Main.projectile[k].active && Main.projectile[k].type == 975 && Main.projectile[k].ai[0] == 1f && Main.projectile[k].ai[1] == (float)whoAmI)
					{
						num6++;
					}
				}
				lifeRegen -= num6 * 2 * 4;
				if (num < num6 * 4 / num7)
				{
					num = num6 * 4 / num7;
				}
			}
			if (daybreak)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				int num8 = 0;
				int num9 = 4;
				for (int l = 0; l < 1000; l++)
				{
					if (Main.projectile[l].active && Main.projectile[l].type == 636 && Main.projectile[l].ai[0] == 1f && Main.projectile[l].ai[1] == (float)whoAmI)
					{
						num8++;
					}
				}
				if (num8 == 0)
				{
					num8 = 1;
				}
				lifeRegen -= num8 * 2 * 100;
				if (num < num8 * 100 / num9)
				{
					num = num8 * 100 / num9;
				}
			}
			if (celled)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				int num10 = 0;
				for (int m = 0; m < 1000; m++)
				{
					if (Main.projectile[m].active && Main.projectile[m].type == 614 && Main.projectile[m].ai[0] == 1f && Main.projectile[m].ai[1] == (float)whoAmI)
					{
						num10++;
					}
				}
				lifeRegen -= num10 * 2 * 20;
				if (num < num10 * 20)
				{
					num = num10 * 20 / 2;
				}
			}
			if (dryadBane)
			{
				int num11 = 4;
				float num12 = 1f;
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				if (downedBoss1)
				{
					num12 += 0.1f;
				}
				if (downedBoss2)
				{
					num12 += 0.1f;
				}
				if (downedBoss3)
				{
					num12 += 0.1f;
				}
				if (downedQueenBee)
				{
					num12 += 0.1f;
				}
				if (Main.hardMode)
				{
					num12 += 0.4f;
				}
				if (downedMechBoss1)
				{
					num12 += 0.15f;
				}
				if (downedMechBoss2)
				{
					num12 += 0.15f;
				}
				if (downedMechBoss3)
				{
					num12 += 0.15f;
				}
				if (downedPlantBoss)
				{
					num12 += 0.15f;
				}
				if (downedGolemBoss)
				{
					num12 += 0.15f;
				}
				if (downedAncientCultist)
				{
					num12 += 0.15f;
				}
				if (Main.expertMode)
				{
					num12 *= Main.GameModeInfo.TownNPCDamageMultiplier;
				}
				num11 = (int)((float)num11 * num12);
				lifeRegen -= 2 * num11;
				if (num < num11)
				{
					num = num11 / 3;
				}
			}
			if (soulDrain && realLife == -1)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 50;
				if (num < 5)
				{
					num = 5;
				}
			}
			if (lifeRegen <= -240 && num < 2)
			{
				num = 2;
			}
			lifeRegenCount += lifeRegen;
			while (lifeRegenCount >= 120)
			{
				lifeRegenCount -= 120;
				if (!immortal)
				{
					if (life < lifeMax)
					{
						life++;
					}
					if (life > lifeMax)
					{
						life = lifeMax;
					}
				}
			}
			if (num > 0)
			{
				while (lifeRegenCount <= -120 * num)
				{
					lifeRegenCount += 120 * num;
					int num13 = whoAmI;
					if (realLife >= 0)
					{
						num13 = realLife;
					}
					if (!Main.npc[num13].immortal)
					{
						Main.npc[num13].life -= num;
					}
					CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.LifeRegenNegative, num, dramatic: false, dot: true);
					if (Main.npc[num13].life > 0 || Main.npc[num13].immortal)
					{
						continue;
					}
					Main.npc[num13].life = 1;
					if (Main.netMode != 1)
					{
						Main.npc[num13].StrikeNPCNoInteraction(9999, 0f, 0);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(28, -1, -1, null, num13, 9999f);
						}
					}
				}
				return;
			}
			while (lifeRegenCount <= -120)
			{
				lifeRegenCount += 120;
				int num14 = whoAmI;
				if (realLife >= 0)
				{
					num14 = realLife;
				}
				if (!Main.npc[num14].immortal)
				{
					Main.npc[num14].life--;
				}
				CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.LifeRegenNegative, 1, dramatic: false, dot: true);
				if (Main.npc[num14].life > 0 || Main.npc[num14].immortal)
				{
					continue;
				}
				Main.npc[num14].life = 1;
				if (Main.netMode != 1)
				{
					Main.npc[num14].StrikeNPCNoInteraction(9999, 0f, 0);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(28, -1, -1, null, num14, 9999f);
					}
				}
			}
		}

		private void UpdateNPC_BuffClearExpiredBuffs()
		{
			if (Main.netMode == 1)
			{
				return;
			}
			for (int i = 0; i < 20; i++)
			{
				if (buffType[i] > 0 && buffTime[i] <= 0)
				{
					DelBuff(i);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(54, -1, -1, null, whoAmI);
					}
				}
			}
		}

		private void UpdateNPC_BloodMoonTransformations()
		{
			if (Main.netMode != 1 && Main.bloodMoon)
			{
				bool flag = false;
				if (value == 0f)
				{
					flag = true;
				}
				AttemptToConvertNPCToEvil(WorldGen.crimson);
				if (flag)
				{
					value = 0f;
				}
			}
		}

		public void AttemptToConvertNPCToEvil(bool crimson)
		{
			if (type == 46 || type == 303 || type == 337 || type == 443 || type == 540)
			{
				if (crimson)
				{
					Transform(464);
				}
				else
				{
					Transform(47);
				}
			}
			else if (type == 55 || type == 230 || type == 592 || type == 593)
			{
				if (crimson)
				{
					Transform(465);
				}
				else
				{
					Transform(57);
				}
			}
			else if (type == 148 || type == 149)
			{
				if (crimson)
				{
					Transform(470);
				}
				else
				{
					Transform(168);
				}
			}
		}

		public void UpdateNPC_BuffSetFlags(bool lowerBuffTime = true)
		{
			for (int i = 0; i < 20; i++)
			{
				if (buffType[i] <= 0 || buffTime[i] <= 0)
				{
					continue;
				}
				if (lowerBuffTime)
				{
					buffTime[i]--;
				}
				if (buffType[i] == 20)
				{
					poisoned = true;
				}
				if (buffType[i] == 70)
				{
					venom = true;
				}
				if (buffType[i] == 24)
				{
					onFire = true;
				}
				if (buffType[i] == 72)
				{
					midas = true;
				}
				if (buffType[i] == 69)
				{
					ichor = true;
				}
				if (buffType[i] == 31)
				{
					confused = true;
				}
				if (buffType[i] == 39)
				{
					onFire2 = true;
				}
				if (buffType[i] == 44)
				{
					onFrostBurn = true;
				}
				if (buffType[i] == 103)
				{
					dripping = true;
				}
				if (buffType[i] == 137)
				{
					drippingSlime = true;
				}
				if (buffType[i] == 320)
				{
					drippingSparkleSlime = true;
				}
				if (buffType[i] == 119)
				{
					loveStruck = true;
				}
				if (buffType[i] == 120)
				{
					stinky = true;
				}
				if (buffType[i] == 151)
				{
					soulDrain = true;
				}
				if (buffType[i] == 153)
				{
					shadowFlame = true;
				}
				if (buffType[i] == 165)
				{
					dryadWard = true;
				}
				if (buffType[i] == 169)
				{
					javelined = true;
				}
				if (buffType[i] == 337)
				{
					tentacleSpiked = true;
				}
				if (buffType[i] == 344)
				{
					bloodButchered = true;
				}
				if (buffType[i] == 183)
				{
					celled = true;
				}
				if (buffType[i] == 186)
				{
					dryadBane = true;
				}
				if (buffType[i] == 189)
				{
					daybreak = true;
				}
				if (buffType[i] == 203)
				{
					betsysCurse = true;
				}
				if (buffType[i] == 204)
				{
					oiled = true;
				}
				if (buffType[i] == 310)
				{
					markedByScytheWhip = true;
				}
				if (buffType[i] == 323)
				{
					onFire3 = true;
				}
				if (buffType[i] == 324)
				{
					onFrostBurn2 = true;
				}
				if (buffType[i] == 353)
				{
					if (buffImmune[353])
					{
						DelBuff(i);
					}
					else
					{
						shimmering = true;
					}
				}
			}
		}

		private void UpdateNPC_BuffFlagsReset()
		{
			lifeRegen = 0;
			soulDrain = false;
			poisoned = false;
			venom = false;
			shadowFlame = false;
			onFire = false;
			midas = false;
			ichor = false;
			onFrostBurn = false;
			onFrostBurn2 = false;
			onFire2 = false;
			onFire3 = false;
			confused = false;
			loveStruck = false;
			dryadWard = false;
			stinky = false;
			dripping = false;
			drippingSlime = false;
			drippingSparkleSlime = false;
			daybreak = false;
			javelined = false;
			tentacleSpiked = false;
			bloodButchered = false;
			celled = false;
			dryadBane = false;
			betsysCurse = false;
			oiled = false;
			markedByScytheWhip = false;
			shimmering = false;
			lifeRegenExpectedLossPerSecond = -1;
		}

		private void UpdateNPC_TeleportVisuals()
		{
			if (!(teleportTime > 0f))
			{
				return;
			}
			if (teleportStyle == 0)
			{
				if ((float)Main.rand.Next(100) <= 100f * teleportTime * 2f)
				{
					int num = Dust.NewDust(new Vector2(getRect().X, getRect().Y), getRect().Width, getRect().Height, 159);
					Main.dust[num].scale = teleportTime * 1.5f;
					Main.dust[num].noGravity = true;
					Main.dust[num].velocity *= 1.1f;
				}
			}
			else if (teleportStyle == 4)
			{
				teleportTime -= 0.02f;
				if ((float)Main.rand.Next(100) <= 100f * teleportTime)
				{
					Dust obj = Main.dust[Dust.NewDust(position, width, height, 263)];
					obj.color = PortalHelper.GetPortalColor(lastPortalColorIndex);
					obj.noLight = true;
					obj.noGravity = true;
					obj.scale = 1.2f;
					obj.fadeIn = 0.4f;
				}
			}
			else if (teleportStyle == 12)
			{
				teleportTime -= 0.02f;
				if ((float)Main.rand.Next(100) <= 100f * teleportTime)
				{
					Dust obj2 = Main.dust[Dust.NewDust(position, width, height, 263)];
					obj2.color = Main.hslToRgb((float)(Main.timeForVisualEffects / 60.0) % 1f, 1f, 0.75f, 0);
					obj2.noLight = true;
					obj2.noGravity = true;
					obj2.scale = 1.2f;
					obj2.fadeIn = 0.4f;
				}
			}
			teleportTime -= 0.005f;
		}

		private void UpdateNPC_CritterSounds()
		{
			if (Main.netMode == 2)
			{
				return;
			}
			if (type == 611 && !Main.dayTime && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(46, (int)position.X, (int)position.Y);
			}
			if (type >= 602 && type <= 603 && Main.dayTime && Main.rand.Next(1200) == 0)
			{
				SoundEngine.PlaySound(44, (int)position.X, (int)position.Y);
			}
			if (type >= 362 && type <= 365)
			{
				if (Main.dayTime && Main.rand.Next(200) == 0)
				{
					SoundEngine.PlaySound(30, (int)position.X, (int)position.Y);
				}
			}
			else if (type == 361 || type == 445 || type == 687)
			{
				if ((double)Math.Abs(velocity.X) < 0.5 && (!Main.dayTime || (double)position.Y > Main.worldSurface * 16.0) && Main.rand.Next(200) == 0)
				{
					SoundEngine.PlaySound(31, (int)position.X, (int)position.Y);
				}
			}
			else if (type == 74 || type == 297 || type == 298 || type == 442 || type == 671 || type == 672 || type == 673 || type == 674 || type == 675)
			{
				if (!Main.dayTime || !(Main.time < 18000.0))
				{
					return;
				}
				int maxValue = 400;
				if (Main.rand.Next(maxValue) != 0)
				{
					return;
				}
				if (type == 74)
				{
					if (Main.rand.Next(3) != 0)
					{
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 14);
					}
					else
					{
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 18);
					}
				}
				if (type == 297)
				{
					SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 16);
				}
				if (type == 298)
				{
					if (Main.rand.Next(3) != 0)
					{
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 17);
					}
					else
					{
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 19);
					}
				}
				if (type == 674 || type == 675)
				{
					SoundEngine.PlaySound(67, (int)position.X, (int)position.Y);
				}
				if (type == 671 || type == 672)
				{
					SoundEngine.PlaySound(68, (int)position.X, (int)position.Y);
				}
				if (type == 673)
				{
					SoundEngine.PlaySound(69, (int)position.X, (int)position.Y);
				}
				if (type == 442)
				{
					switch (Main.rand.Next(5))
					{
					case 0:
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 16);
						break;
					case 1:
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 17);
						break;
					case 2:
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 19);
						break;
					case 3:
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 14);
						break;
					default:
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 18);
						break;
					}
				}
			}
			else if ((type == 300 || type == 447 || type == 610) && Main.rand.Next(1800) == 0)
			{
				SoundEngine.PlaySound(33, (int)position.X, (int)position.Y);
			}
		}

		private void UpdateNPC_CastLights()
		{
			if ((type >= 442 && type <= 448) || type == 539 || type == 592 || type == 593 || type == 601 || type == 605 || type == 627)
			{
				position += netOffset;
				Color color = Lighting.GetColor((int)base.Center.X / 16, (int)base.Center.Y / 16);
				if (color.R > 20 || color.B > 20 || color.G > 20)
				{
					int num = color.R;
					if (color.G > num)
					{
						num = color.G;
					}
					if (color.B > num)
					{
						num = color.B;
					}
					num /= 30;
					if (Main.rand.Next(300) < num)
					{
						int num2 = Dust.NewDust(position, width, height, 43, 0f, 0f, 254, new Color(255, 255, 0), 0.5f);
						Main.dust[num2].velocity *= 0f;
					}
				}
				position -= netOffset;
			}
			if (type == 160)
			{
				float num3 = (float)Main.rand.Next(28, 42) * 0.005f;
				num3 += (float)(270 - Main.mouseTextColor) / 500f;
				float num4 = 0.1f;
				float num5 = 0.3f + num3 / 2f;
				float num6 = 0.6f + num3;
				if (townNpcVariationIndex == 1)
				{
					float num7 = num4;
					num4 = num6;
					num6 = num7;
				}
				float num8 = 0.35f;
				num4 *= num8;
				num5 *= num8;
				num6 *= num8;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num4, num5, num6);
			}
			if ((type >= 254 && type <= 261) || type == 634 || type == 635)
			{
				float num9 = (float)Main.rand.Next(28, 42) * 0.005f;
				num9 += (float)(270 - Main.mouseTextColor) / 500f;
				float num10 = 0.1f;
				float num11 = 0.3f + num9 / 2f;
				float num12 = 0.6f + num9;
				float num13 = 0.35f;
				if (type == 634)
				{
					num13 = 0.65f;
				}
				num10 *= num13;
				num11 *= num13;
				num12 *= num13;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num10, num11, num12);
			}
			if (type == 209)
			{
				float num14 = (float)Main.rand.Next(28, 42) * 0.005f;
				num14 += (float)(270 - Main.mouseTextColor) / 500f;
				float num15 = 0.1f;
				float num16 = 0.3f + num14 / 2f;
				float num17 = 0.4f + num14 / 2f;
				float num18 = 0.35f;
				num15 *= num18;
				num16 *= num18;
				num17 *= num18;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num15, num16, num17);
				if (ai[0] == 12f)
				{
					Lighting.AddLight(base.Top, 0.3f, 0.1f, 0.1f);
				}
			}
			if (type == 44)
			{
				Lighting.AddLight((int)(position.X + (float)(width / 2)) / 16, (int)(position.Y + 4f) / 16, 0.9f, 0.75f, 0.5f);
			}
		}

		private void GetHurtByOtherNPCs(bool[] acceptableNPCIDs)
		{
			if (dontTakeDamage || dontTakeDamageFromHostiles || immortal)
			{
				return;
			}
			int specialHitSetter = 1;
			float damageMultiplier = 1f;
			if (immune[255] != 0)
			{
				return;
			}
			Rectangle hitbox = base.Hitbox;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (acceptableNPCIDs[nPC.type] && nPC.active && !nPC.friendly && nPC.damage > 0)
				{
					Rectangle npcRect = nPC.Hitbox;
					GetMeleeCollisionData(hitbox, i, ref specialHitSetter, ref damageMultiplier, ref npcRect);
					if (hitbox.Intersects(npcRect) && (type != 453 || !NPCID.Sets.Skeletons[nPC.type]) && nPC.type != 624)
					{
						BeHurtByOtherNPC(i, nPC);
						break;
					}
				}
			}
		}

		private void BeHurtByOtherNPC(int npcIndex, NPC thatNPC)
		{
			int num = 30;
			if (type == 548)
			{
				num = 20;
			}
			int num2 = Main.DamageVar(thatNPC.damage);
			int num3 = 6;
			int num4 = ((!(thatNPC.Center.X > base.Center.X)) ? 1 : (-1));
			double num5 = StrikeNPCNoInteraction(num2, num3, num4);
			if (Main.netMode != 0)
			{
				NetMessage.SendData(28, -1, -1, null, whoAmI, num2, num3, num4);
			}
			netUpdate = true;
			immune[255] = num;
			if (dryadWard)
			{
				num2 = (int)num5 / 3;
				num3 = 6;
				num4 *= -1;
				thatNPC.StrikeNPCNoInteraction(num2, num3, num4);
				if (Main.netMode != 0)
				{
					NetMessage.SendData(28, -1, -1, null, npcIndex, num2, num3, num4);
				}
				thatNPC.netUpdate = true;
				thatNPC.immune[255] = num;
			}
			if (NPCID.Sets.HurtingBees[thatNPC.type])
			{
				num2 = damage;
				num3 = 6;
				num4 *= -1;
				thatNPC.StrikeNPCNoInteraction(num2, num3, num4);
				if (Main.netMode != 0)
				{
					NetMessage.SendData(28, -1, -1, null, npcIndex, num2, num3, num4);
				}
				thatNPC.netUpdate = true;
				thatNPC.immune[255] = num;
			}
		}

		private void CheckLifeRegen()
		{
			if (life < lifeMax)
			{
				friendlyRegen++;
				if (dryadWard)
				{
					friendlyRegen += 10;
				}
				if (friendlyRegen > 180)
				{
					friendlyRegen = 0;
					life++;
					netUpdate = true;
				}
			}
		}

		public void GetImmuneTime(int fromWho, int time)
		{
			if (fromWho == -1)
			{
				for (int i = 0; i < immune.Length; i++)
				{
					immune[i] = time;
				}
			}
			else if (fromWho >= 0 && fromWho < immune.Length)
			{
				immune[fromWho] = time;
			}
		}

		private void UpdateCollision()
		{
			Collision_WalkDownSlopes();
			bool lava = Collision_LavaCollision();
			lava = Collision_WaterCollision(lava);
			if (!wet)
			{
				lavaWet = false;
				honeyWet = false;
				shimmerWet = false;
			}
			if (wetCount > 0)
			{
				wetCount--;
			}
			bool fall = Collision_DecideFallThroughPlatforms();
			oldVelocity = velocity;
			collideX = false;
			collideY = false;
			FishTransformationDuringRain();
			GetTileCollisionParameters(out var cPosition, out var cWidth, out var cHeight);
			Vector2 oldDryVelocity = velocity;
			ApplyTileCollision(fall, cPosition, cWidth, cHeight);
			if (wet)
			{
				if (shimmerWet)
				{
					Collision_MoveWhileWet(oldDryVelocity, shimmerMovementSpeed);
				}
				else if (honeyWet)
				{
					Collision_MoveWhileWet(oldDryVelocity, honeyMovementSpeed);
				}
				else if (lavaWet)
				{
					Collision_MoveWhileWet(oldDryVelocity, lavaMovementSpeed);
				}
				else
				{
					Collision_MoveWhileWet(oldDryVelocity, waterMovementSpeed);
				}
			}
			else
			{
				Collision_MoveWhileDry();
			}
			if (aiStyle == 67)
			{
				Collision_MoveSnailOnSlopes();
			}
			else if (type != 72 && type != 247 && type != 248 && (type < 542 || type > 545) && (!NPCID.Sets.BelongsToInvasionOldOnesArmy[type] || !noGravity))
			{
				Collision_MoveSlopesAndStairFall(fall);
				if (townNPC)
				{
					Collision.StepConveyorBelt(this, 1f);
				}
			}
		}

		private void Collision_MoveWhileDry()
		{
			if (Collision.up)
			{
				velocity.Y = 0.01f;
			}
			if (oldVelocity.X != velocity.X)
			{
				collideX = true;
			}
			if (oldVelocity.Y != velocity.Y)
			{
				collideY = true;
			}
			oldPosition = position;
			oldDirection = direction;
			position += velocity;
		}

		private void ApplyTileCollision(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			if (type == 72)
			{
				Collision_MoveBlazingWheel();
			}
			else if (type >= 542 && type <= 545)
			{
				Collision_MoveSandshark(fall, cPosition, cWidth, cHeight);
			}
			else if (type == 405 || type == 406)
			{
				Collision_MoveStardustCell(fall, cPosition, cWidth, cHeight);
			}
			else if (type == 417)
			{
				Collision_MoveSolarSroller(fall, cPosition, cWidth, cHeight);
			}
			else
			{
				Collision_MoveNormal(fall, cPosition, cWidth, cHeight);
			}
		}

		private void Collision_MoveSlopesAndStairFall(bool fall)
		{
			if (fall)
			{
				stairFall = true;
			}
			if (aiStyle == 7)
			{
				int num = (int)base.Center.X / 16;
				int num2 = (int)position.Y / 16;
				if (WorldGen.InWorld(num, num2))
				{
					int num3 = 16;
					bool flag = false;
					if (Main.tile[num, num2] != null && Main.tile[num, num2].active() && Main.tileSolid[Main.tile[num, num2].type])
					{
						flag = true;
					}
					if (!townNPC)
					{
						flag = false;
					}
					if (!Main.dayTime || Main.eclipse)
					{
						flag = true;
					}
					else
					{
						int num4 = (int)(position.Y + (float)height) / 16;
						if (homeTileY - num4 > num3)
						{
							flag = true;
						}
					}
					if (flag)
					{
						if ((position.Y + (float)height - 8f) / 16f < (float)homeTileY)
						{
							stairFall = true;
						}
						else
						{
							stairFall = false;
						}
					}
				}
			}
			GetTileCollisionParameters(out var cPosition, out var cWidth, out var cHeight);
			Vector2 vector = position - cPosition;
			Vector4 vector2 = Collision.SlopeCollision(cPosition, velocity, cWidth, cHeight, gravity, stairFall);
			if (Collision.stairFall)
			{
				stairFall = true;
			}
			else if (!fall)
			{
				stairFall = false;
			}
			if (Collision.stair && Math.Abs(vector2.Y - position.Y) > 8f)
			{
				gfxOffY -= vector2.Y - position.Y;
				stepSpeed = 2f;
			}
			position.X = vector2.X;
			position.Y = vector2.Y;
			velocity.X = vector2.Z;
			velocity.Y = vector2.W;
			position += vector;
		}

		private void Collision_MoveSnailOnSlopes()
		{
			Vector4 vector = Collision.SlopeCollision(position, velocity, width, height, gravity);
			if (position.X != vector.X || position.Y != vector.Y)
			{
				if (ai[2] == 0f && velocity.Y > 0f && ((direction < 0 && rotation == 1.57f && spriteDirection == 1) || (direction > 0 && rotation == 4.71f && spriteDirection == -1)))
				{
					direction *= -direction;
				}
				ai[2] = 2f;
				directionY = 1;
				rotation = 0f;
			}
			position.X = vector.X;
			position.Y = vector.Y;
			velocity.X = vector.Z;
			velocity.Y = vector.W;
		}

		private void Collision_MoveNormal(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			velocity = Collision.TileCollision(cPosition, velocity, cWidth, cHeight, fall, fall);
		}

		private void Collision_MoveSandshark(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			if (!Main.remixWorld)
			{
				velocity = Collision.AdvancedTileCollision(TileID.Sets.ForAdvancedCollision.ForSandshark, cPosition, velocity, cWidth, cHeight, fall, fall);
			}
		}

		private void Collision_MoveSolarSroller(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			velocity = Collision.TileCollision(cPosition, velocity, cWidth, cHeight, fall, fall);
			if (ai[0] != 6f || !(velocity != oldVelocity))
			{
				return;
			}
			ai[2] -= 1f;
			ai[3] = 1f;
			if (ai[2] > 0f)
			{
				if (velocity.X != 0f && velocity.X != oldVelocity.X)
				{
					velocity.X = (0f - oldVelocity.X) * 0.9f;
					direction *= -1;
				}
				if (velocity.Y != 0f && velocity.Y != oldVelocity.Y)
				{
					velocity.Y = (0f - oldVelocity.Y) * 0.9f;
				}
			}
		}

		private void Collision_MoveStardustCell(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			velocity = Collision.TileCollision(cPosition, velocity, cWidth, cHeight, fall, fall);
			if (velocity != oldVelocity)
			{
				if (velocity.X != 0f && velocity.X != oldVelocity.X)
				{
					velocity.X = (0f - oldVelocity.X) * 0.8f;
				}
				if (velocity.Y != 0f && velocity.Y != oldVelocity.Y)
				{
					velocity.Y = (0f - oldVelocity.Y) * 0.8f;
				}
			}
		}

		private void Collision_MoveBlazingWheel()
		{
			Vector2 vector = new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2));
			int num = 12;
			int num2 = 12;
			vector.X -= num / 2;
			vector.Y -= num2 / 2;
			velocity = Collision.noSlopeCollision(vector, velocity, num, num2, fallThrough: true, fall2: true);
		}

		private void Collision_MoveWhileWet(Vector2 oldDryVelocity, float Slowdown = 0.5f)
		{
			if (Collision.up)
			{
				velocity.Y = 0.01f;
			}
			Vector2 vector = velocity * Slowdown;
			if (velocity.X != oldDryVelocity.X)
			{
				vector.X = velocity.X;
				collideX = true;
			}
			if (velocity.Y != oldDryVelocity.Y)
			{
				vector.Y = velocity.Y;
				collideY = true;
			}
			oldPosition = position;
			oldDirection = direction;
			position += vector;
		}

		public void GetTileCollisionParameters(out Vector2 cPosition, out int cWidth, out int cHeight)
		{
			cPosition = position;
			cWidth = width;
			cHeight = height;
			if (type == 594)
			{
				int num = (int)(44f + 20f * ai[1]);
				cPosition.Y += num;
				cHeight += num;
				cPosition.X += cWidth / 2;
				cWidth = (int)(6f + 26f * ai[1]);
				cPosition.X -= cWidth / 2;
			}
			if (type == 686)
			{
				int num2 = 64;
				cPosition.Y += num2;
				cHeight += num2;
				cPosition.X += cWidth / 2;
				cWidth = 32;
				cPosition.X -= cWidth / 2;
			}
			if (type == 243)
			{
				cHeight = 90;
			}
			if (type == 290)
			{
				cHeight = 40;
			}
			if (type == 351)
			{
				cHeight = 40;
			}
			if (type == 482)
			{
				cHeight = 40;
			}
			if (type == 351 || type == 343 || type == 348 || type == 349)
			{
				cHeight = 40;
			}
			if (type == 391)
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && Main.npc[i].type == 390 && Main.npc[i].ai[0] == (float)whoAmI)
					{
						cHeight = 62;
						break;
					}
				}
			}
			if (type == 415)
			{
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j].active && Main.npc[j].type == 416 && Main.npc[j].ai[0] == (float)whoAmI)
					{
						cHeight = 62;
						break;
					}
				}
			}
			if (type == 576 || type == 577)
			{
				cPosition.X += 32f;
				cWidth -= 64;
			}
			if (cHeight != height)
			{
				cPosition.Y += height - cHeight;
			}
		}

		private void FishTransformationDuringRain()
		{
			if (Main.netMode == 1)
			{
				return;
			}
			if (type == 230 && wet)
			{
				int num = direction;
				Vector2 vector = velocity;
				Transform(55);
				direction = num;
				velocity = vector;
				wet = true;
				if (velocity.Y < 0f)
				{
					velocity.Y = 0f;
				}
			}
			else if (type == 55 && !wet && Main.raining)
			{
				int num2 = direction;
				Vector2 vector2 = velocity;
				Transform(230);
				direction = num2;
				velocity = vector2;
				UpdateHomeTileState(homeless, (int)(position.X / 16f) + 10 * direction, homeTileY);
			}
			else if (type == 593 && wet)
			{
				int num3 = direction;
				Vector2 vector3 = velocity;
				Transform(592);
				direction = num3;
				velocity = vector3;
				wet = true;
				if (velocity.Y < 0f)
				{
					velocity.Y = 0f;
				}
			}
			else if (type == 592 && !wet && Main.raining)
			{
				int num4 = direction;
				Vector2 vector4 = velocity;
				Transform(593);
				direction = num4;
				velocity = vector4;
				UpdateHomeTileState(homeless, (int)(position.X / 16f) + 10 * direction, homeTileY);
			}
		}

		private bool Collision_DecideFallThroughPlatforms()
		{
			bool result = false;
			if (type == 2 || type == -43 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 317 || type == 318 || type == 133)
			{
				result = true;
			}
			if (aiStyle == 10)
			{
				result = true;
			}
			if (aiStyle == 5)
			{
				result = true;
			}
			if (aiStyle == 40)
			{
				result = true;
			}
			if (aiStyle == 44)
			{
				result = true;
			}
			if (type == 467)
			{
				result = true;
			}
			if (type == 477)
			{
				result = true;
			}
			if (aiStyle == 22)
			{
				result = true;
			}
			if (aiStyle == 49)
			{
				result = true;
			}
			if (aiStyle == 14)
			{
				result = true;
			}
			if (type == 173)
			{
				result = true;
			}
			if (type == 469 && ai[2] == 1f)
			{
				result = true;
			}
			if (aiStyle == 3 && directionY == 1)
			{
				result = true;
			}
			if (type == 210 || type == 211)
			{
				result = true;
			}
			if (type == 50 && target >= 0 && Main.player[target].position.Y > position.Y + (float)height)
			{
				result = true;
			}
			if (type == 657 && target >= 0 && Main.player[target].position.Y > base.Bottom.Y)
			{
				result = true;
			}
			if (aiStyle == 26 && target >= 0 && Main.player[target].Bottom.Y - velocity.Y > base.Bottom.Y)
			{
				result = true;
			}
			if (type == 247 || type == 248)
			{
				result = true;
			}
			if (type == 245 && target >= 0 && Main.player[target].position.Y > position.Y + (float)height)
			{
				result = true;
			}
			if (type >= 542 && type <= 545)
			{
				result = true;
			}
			if (aiStyle == 107 && directionY == 1)
			{
				result = true;
			}
			if (type == 418)
			{
				result = true;
			}
			if (aiStyle == 87 && Main.player[target].position.Y > position.Y + (float)height)
			{
				result = true;
			}
			if (type == 405 || type == 406)
			{
				result = true;
			}
			if (type == 490)
			{
				result = true;
			}
			if (type == 301)
			{
				result = true;
			}
			if (aiStyle == 7)
			{
				int num = 16;
				bool flag = false;
				if (townNPC && (!Main.dayTime || Main.invasionType > 0 || Main.eclipse))
				{
					flag = true;
				}
				else
				{
					int num2 = (int)(position.Y + (float)height) / 16;
					if (homeTileY - num2 > num)
					{
						result = true;
					}
				}
				if (flag && (position.Y + (float)height - 8f) / 16f < (float)(homeTileY - 1))
				{
					result = true;
				}
			}
			if (type == 620)
			{
				result = ((target >= 0 && Main.player[target].position.Y > base.Bottom.Y) ? true : false);
			}
			return result;
		}

		private bool Collision_WaterCollision(bool lava)
		{
			bool flag = false;
			if (type == 72 || aiStyle == 21 || aiStyle == 67 || type == 376 || type == 579 || type == 541 || (aiStyle == 7 && ai[0] == 25f))
			{
				flag = false;
				wetCount = 0;
				lava = false;
			}
			else
			{
				flag = Collision.WetCollision(position, width, height);
				if (Collision.honey)
				{
					honeyWet = true;
				}
				if (Collision.shimmer)
				{
					shimmerWet = true;
					AddBuff(353, 100);
				}
			}
			if (aiStyle == 116)
			{
				wetCount = 10;
			}
			if (flag)
			{
				if (onFire && !lavaWet && Main.netMode != 1)
				{
					for (int i = 0; i < 20; i++)
					{
						if (buffType[i] == 24)
						{
							DelBuff(i);
						}
					}
				}
				if (!wet && wetCount == 0)
				{
					wetCount = 10;
					if (!lava)
					{
						if (shimmerWet)
						{
							if (type != 617 && type != 616 && type != 625)
							{
								for (int j = 0; j < 30; j++)
								{
									int num = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 308);
									Main.dust[num].velocity.Y -= 4f;
									Main.dust[num].velocity.X *= 2.5f;
									Main.dust[num].scale = 0.8f;
									Main.dust[num].noGravity = true;
									switch (Main.rand.Next(6))
									{
									case 0:
										Main.dust[num].color = new Color(255, 255, 210);
										break;
									case 1:
										Main.dust[num].color = new Color(190, 245, 255);
										break;
									case 2:
										Main.dust[num].color = new Color(255, 150, 255);
										break;
									default:
										Main.dust[num].color = new Color(190, 175, 255);
										break;
									}
								}
								if ((type != 376 && type != 579 && aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && aiStyle != 68 && type != 362 && type != 364 && type != 361 && type != 445 && !noGravity) || type == 615)
								{
									SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 4);
								}
							}
						}
						else if (honeyWet)
						{
							for (int k = 0; k < 10; k++)
							{
								int num2 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
								Main.dust[num2].velocity.Y -= 1f;
								Main.dust[num2].velocity.X *= 2.5f;
								Main.dust[num2].scale = 1.3f;
								Main.dust[num2].alpha = 100;
								Main.dust[num2].noGravity = true;
							}
							if (aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && !noGravity)
							{
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
						else if (type != 617 && type != 616 && type != 625)
						{
							for (int l = 0; l < 30; l++)
							{
								int num3 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, Dust.dustWater());
								Main.dust[num3].velocity.Y -= 4f;
								Main.dust[num3].velocity.X *= 2.5f;
								Main.dust[num3].scale *= 0.8f;
								Main.dust[num3].alpha = 100;
								Main.dust[num3].noGravity = true;
							}
							if ((type != 376 && type != 579 && aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && aiStyle != 68 && type != 362 && type != 364 && type != 361 && type != 445 && !noGravity) || type == 615)
							{
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 0);
							}
						}
					}
					else
					{
						for (int m = 0; m < 10; m++)
						{
							int num4 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
							Main.dust[num4].velocity.Y -= 1.5f;
							Main.dust[num4].velocity.X *= 2.5f;
							Main.dust[num4].scale = 1.3f;
							Main.dust[num4].alpha = 100;
							Main.dust[num4].noGravity = true;
						}
						if (aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && !noGravity)
						{
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
						}
					}
				}
				wet = true;
			}
			else if (wet)
			{
				velocity.X *= 0.5f;
				wet = false;
				if (type == 620 && GetTargetData().Center.Y < base.Center.Y)
				{
					velocity.Y -= 8f;
				}
				if (wetCount == 0)
				{
					wetCount = 10;
					if (!lavaWet)
					{
						if (shimmerWet)
						{
							if (type != 617 && type != 616 && type != 625)
							{
								for (int n = 0; n < 30; n++)
								{
									int num5 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 308);
									Main.dust[num5].velocity.Y -= 4f;
									Main.dust[num5].velocity.X *= 2.5f;
									Main.dust[num5].scale = 0.8f;
									Main.dust[num5].noGravity = true;
									switch (Main.rand.Next(6))
									{
									case 0:
										Main.dust[num5].color = new Color(255, 255, 210);
										break;
									case 1:
										Main.dust[num5].color = new Color(190, 245, 255);
										break;
									case 2:
										Main.dust[num5].color = new Color(255, 150, 255);
										break;
									default:
										Main.dust[num5].color = new Color(190, 175, 255);
										break;
									}
								}
								if ((type != 376 && type != 579 && aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && aiStyle != 68 && type != 362 && type != 364 && type != 361 && type != 445 && !noGravity) || type == 615)
								{
									SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 5);
								}
							}
						}
						else if (honeyWet)
						{
							for (int num6 = 0; num6 < 10; num6++)
							{
								int num7 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
								Main.dust[num7].velocity.Y -= 1f;
								Main.dust[num7].velocity.X *= 2.5f;
								Main.dust[num7].scale = 1.3f;
								Main.dust[num7].alpha = 100;
								Main.dust[num7].noGravity = true;
							}
							if (aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 300 && type != 59 && aiStyle != 39 && !noGravity)
							{
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
						else if (type != 617 && type != 616 && type != 625)
						{
							for (int num8 = 0; num8 < 30; num8++)
							{
								int num9 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, Dust.dustWater());
								Main.dust[num9].velocity.Y -= 4f;
								Main.dust[num9].velocity.X *= 2.5f;
								Main.dust[num9].scale *= 0.8f;
								Main.dust[num9].alpha = 100;
								Main.dust[num9].noGravity = true;
							}
							if ((type != 376 && type != 579 && aiStyle != 1 && type != 1 && type != 16 && type != 59 && type != 300 && aiStyle != 39 && aiStyle != 68 && type != 362 && type != 364 && type != 361 && type != 445 && !noGravity) || type == 615)
							{
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 0);
							}
						}
					}
					else
					{
						for (int num10 = 0; num10 < 10; num10++)
						{
							int num11 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
							Main.dust[num11].velocity.Y -= 1.5f;
							Main.dust[num11].velocity.X *= 2.5f;
							Main.dust[num11].scale = 1.3f;
							Main.dust[num11].alpha = 100;
							Main.dust[num11].noGravity = true;
						}
						if (aiStyle != 1 && type != 1 && type != 16 && type != 59 && type != 300 && aiStyle != 39 && !noGravity)
						{
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
						}
					}
				}
			}
			return lava;
		}

		private bool Collision_LavaCollision()
		{
			bool flag = Collision.LavaCollision(position, width, height);
			if (type == 441)
			{
				flag = false;
			}
			if (flag)
			{
				lavaWet = true;
				if (!lavaImmune && !dontTakeDamage && Main.netMode != 1 && immune[255] == 0)
				{
					immune[255] = 30;
					if (Main.remixWorld && !friendly)
					{
						AddBuff(24, 180);
					}
					else
					{
						AddBuff(24, 420);
						StrikeNPCNoInteraction(50, 0f, 0);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(28, -1, -1, null, whoAmI, 50f);
						}
					}
				}
			}
			return flag;
		}

		private void Collision_WalkDownSlopes()
		{
			_ = velocity;
			Vector4 vector = Collision.WalkDownSlope(position, velocity, width, height, gravity);
			position.X = vector.X;
			position.Y = vector.Y;
			velocity.X = vector.Z;
			velocity.Y = vector.W;
		}

		public static void setFireFlyChance()
		{
			if (Main.rand == null)
			{
				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			}
			if (WorldGen.genRand.Next(9) == 0)
			{
				fireFlyChance = Main.rand.Next(5, 10);
				fireFlyFriendly = Main.rand.Next(1, 4);
				fireFlyMultiple = Main.rand.Next(3, 8);
			}
			else if (WorldGen.genRand.Next(3) == 0)
			{
				fireFlyChance = 999999;
				fireFlyFriendly = 999999;
				fireFlyMultiple = 999999;
			}
			else
			{
				fireFlyChance = Main.rand.Next(10, 60);
				fireFlyFriendly = Main.rand.Next(2, 15);
				fireFlyMultiple = Main.rand.Next(6, 30);
			}
			if (Main.rand.Next(3) == 0)
			{
				butterflyChance = 999999;
				stinkBugChance = Main.rand.Next(1, 21);
				if (WorldGen.genRand.Next(5) == 0)
				{
					stinkBugChance = 999999;
				}
			}
			else
			{
				stinkBugChance = 999999;
				butterflyChance = Main.rand.Next(1, 21);
				if (WorldGen.genRand.Next(5) == 0)
				{
					butterflyChance = 999999;
				}
			}
			if (Main.tenthAnniversaryWorld)
			{
				fireFlyChance = Math.Max(1, (int)((float)fireFlyChance * 0.5f));
				butterflyChance = Math.Max(1, (int)((float)butterflyChance * 0.5f));
			}
		}

		public Color GetBestiaryEntryColor()
		{
			return Color.White;
		}

		public Color GetAlpha(Color newColor)
		{
			if (IsABestiaryIconDummy)
			{
				newColor = Color.White;
			}
			float num = (float)(255 - alpha) / 255f;
			int num2 = (int)((float)(int)newColor.R * num);
			int num3 = (int)((float)(int)newColor.G * num);
			int num4 = (int)((float)(int)newColor.B * num);
			int num5 = newColor.A - alpha;
			if (type == 402)
			{
				return new Color(255, 255, 255, 255);
			}
			if (type == 484)
			{
				return new Color(250, 250, 250, 200);
			}
			if (type >= 542 && type <= 545 && num2 + num3 + num4 > 10 && num2 + num3 + num4 >= 60)
			{
				num2 *= 2;
				num3 *= 2;
				num4 *= 2;
				if (num2 > 255)
				{
					num2 = 255;
				}
				if (num3 > 255)
				{
					num3 = 255;
				}
				if (num4 > 255)
				{
					num4 = 255;
				}
			}
			if (type == 681)
			{
				return Color.Lerp(newColor, Color.White, 0.4f) * Opacity;
			}
			if (type == 683 || type == 687)
			{
				float num6 = Utils.Remap(Utils.WrappedLerp(0.75f, 1f, (float)Main.timeForVisualEffects % 120f / 120f), 0f, 1f, 0.5f, 1f);
				Color result = Color.Lerp(newColor, new Color(255, 255, 100), 0.4f * num6) * Opacity;
				if (result.B < num4)
				{
					result.B = (byte)num4;
				}
				return result;
			}
			if (type == 658 || type == 659 || type == 660)
			{
				return Color.Lerp(newColor, Color.White, 0.4f) * Opacity;
			}
			if (type == 662)
			{
				Color color = Color.Lerp(Color.White, Color.Cyan, 0.5f);
				color.A /= 4;
				return color * Opacity;
			}
			if ((type >= 454 && type <= 459) || type == 521)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.4f);
				newColor.A = 150;
				newColor *= (float)num5 / 255f;
				return newColor;
			}
			if (type == 636)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.25f);
				return newColor * Opacity;
			}
			if (type == 440)
			{
				byte b = 180;
				if (Main.expertMode)
				{
					b = 210;
				}
				b = (byte)((float)(int)b * num);
				return new Color(b, b, b, b);
			}
			if (type == 583 || type == 584 || type == 585)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.5f);
				return newColor;
			}
			if (type == 516)
			{
				return new Color(alpha, alpha, alpha, alpha);
			}
			if (type == 522)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 523)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 395 || type == 519)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.4f);
				return newColor;
			}
			if (type == 370 && ai[0] != -1f && ai[0] < 9f)
			{
				float num7 = MathHelper.Lerp(num, 1f, 0.25f);
				if (num7 > 1f)
				{
					num7 = 1f;
				}
				num4 = (int)((float)(int)newColor.B * num7);
			}
			if (type == 30 || type == 665)
			{
				return new Color(250, 250, 250, 100);
			}
			if (!IsABestiaryIconDummy && (type == 25 || type == 30 || type == 665 || type == 59 || type == 60))
			{
				return new Color(200, 200, 200, 0);
			}
			if (type == 360)
			{
				num2 = newColor.R;
				num3 = newColor.G;
				num4 = newColor.B;
				if (num2 < 75)
				{
					num2 = 75;
				}
				if (num3 < 175)
				{
					num3 = 175;
				}
				if (num4 < 255)
				{
					num4 = 255;
				}
				return new Color(num2, num3, num4, 255);
			}
			if (type == 655)
			{
				num2 = newColor.R;
				num3 = newColor.G;
				num4 = newColor.B;
				if (num2 < 255)
				{
					num2 = 255;
				}
				if (num3 < 100)
				{
					num3 = 100;
				}
				if (num4 < 50)
				{
					num4 = 50;
				}
				return new Color(num2, num3, num4, 255);
			}
			if (type == 352)
			{
				return new Color(255, 255, 255, 200);
			}
			if (type == 72)
			{
				num2 = newColor.R;
				num3 = newColor.G;
				num4 = newColor.B;
			}
			else
			{
				if (type == 288)
				{
					return new Color(200, 200, 200, 0);
				}
				if (type == 289)
				{
					return new Color(250, 250, 250, 50);
				}
				if (type >= 254 && type <= 261)
				{
					num4 = 255;
					if (num2 < 100)
					{
						num2 = 100;
					}
					if (num3 < 150)
					{
						num3 = 150;
					}
				}
				else if (type == 374 || type == 634 || type == 635)
				{
					num4 = 255;
					if (num2 < 100)
					{
						num2 = 100;
					}
					if (num3 < 150)
					{
						num3 = 150;
					}
				}
				else
				{
					if (type == 549)
					{
						newColor = Color.Lerp(newColor, Color.White, 0.4f);
						newColor *= (float)num5 / 255f;
						return newColor;
					}
					if (type == 64 || type == 63 || type == 75 || type == 103 || type == 400)
					{
						num2 = (int)((double)(int)newColor.R * 1.5);
						num3 = (int)((double)(int)newColor.G * 1.5);
						num4 = (int)((double)(int)newColor.B * 1.5);
						if (num2 > 255)
						{
							num2 = 255;
						}
						if (num3 > 255)
						{
							num3 = 255;
						}
						if (num4 > 255)
						{
							num4 = 255;
						}
					}
				}
			}
			if (shimmerTransparency > 0f && !Main.player[Main.myPlayer].detectCreature)
			{
				num2 = (byte)((float)num2 * (1f - shimmerTransparency));
				num3 = (byte)((float)num3 * (1f - shimmerTransparency));
				num4 = (byte)((float)num4 * (1f - shimmerTransparency));
				num5 = (byte)((float)num5 * (1f - shimmerTransparency));
			}
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num5 > 255)
			{
				num5 = 255;
			}
			return new Color(num2, num3, num4, num5);
		}

		public Color GetShimmerColor(Color newColor)
		{
			if (shimmerTransparency > 0f && !Main.player[Main.myPlayer].detectCreature)
			{
				newColor.R = (byte)((float)(int)newColor.R * (1f - shimmerTransparency));
				newColor.G = (byte)((float)(int)newColor.G * (1f - shimmerTransparency));
				newColor.B = (byte)((float)(int)newColor.B * (1f - shimmerTransparency));
				newColor.A = (byte)((float)(int)newColor.A * (1f - shimmerTransparency));
			}
			return newColor;
		}

		public Color GetColor(Color newColor)
		{
			if (IsABestiaryIconDummy)
			{
				newColor = GetBestiaryEntryColor();
			}
			int num = color.R - (255 - newColor.R);
			int num2 = color.G - (255 - newColor.G);
			int num3 = color.B - (255 - newColor.B);
			int num4 = color.A - (255 - newColor.A);
			if (num < 0)
			{
				num = 0;
			}
			if (num > 255)
			{
				num = 255;
			}
			if (num2 < 0)
			{
				num2 = 0;
			}
			if (num2 > 255)
			{
				num2 = 255;
			}
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num3 > 255)
			{
				num3 = 255;
			}
			if (num4 < 0)
			{
				num4 = 0;
			}
			if (num4 > 255)
			{
				num4 = 255;
			}
			if (shimmerTransparency > 0f && !Main.player[Main.myPlayer].detectCreature)
			{
				num = (byte)((float)num * (1f - shimmerTransparency));
				num2 = (byte)((float)num2 * (1f - shimmerTransparency));
				num3 = (byte)((float)num3 * (1f - shimmerTransparency));
				num4 = (byte)((float)num4 * (1f - shimmerTransparency));
			}
			return new Color(num, num2, num3, num4);
		}

		public bool ShouldBestiaryGirlBeLycantrope()
		{
			if (!Main.bloodMoon || Main.dayTime)
			{
				if (Main.moonPhase == 0)
				{
					return !Main.dayTime;
				}
				return false;
			}
			return true;
		}

		public string GetChat()
		{
			PreventJojaColaDialog = false;
			RerollDryadText = 0;
			Recipe.FindRecipes();
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = false;
			bool flag16 = false;
			bool flag17 = false;
			object obj = Lang.CreateDialogSubstitutionObject(this);
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					if (Main.npc[i].type == 17)
					{
						flag = true;
					}
					else if (Main.npc[i].type == 18)
					{
						flag2 = true;
					}
					else if (Main.npc[i].type == 19)
					{
						flag3 = true;
					}
					else if (Main.npc[i].type == 20)
					{
						flag4 = true;
					}
					else if (Main.npc[i].type == 37)
					{
						flag5 = true;
					}
					else if (Main.npc[i].type == 38)
					{
						flag6 = true;
					}
					else if (Main.npc[i].type == 124)
					{
						flag7 = true;
					}
					else if (Main.npc[i].type == 107)
					{
						flag8 = true;
					}
					else if (Main.npc[i].type == 54)
					{
						flag9 = true;
					}
					else if (Main.npc[i].type == 160)
					{
						flag10 = true;
					}
					else if (Main.npc[i].type == 178)
					{
						flag11 = true;
					}
					else if (Main.npc[i].type == 229)
					{
						flag12 = true;
					}
					else if (Main.npc[i].type == 209)
					{
						flag13 = true;
					}
					else if (Main.npc[i].type == 208)
					{
						flag14 = true;
					}
					else if (Main.npc[i].type == 353)
					{
						flag15 = true;
					}
					else if (Main.npc[i].type == 22)
					{
						flag16 = true;
					}
					else if (Main.npc[i].type == 441)
					{
						flag17 = true;
					}
				}
			}
			string result = "";
			string specialEventText = "";
			if (type == 17)
			{
				result = (HasSpecialEventText("Merchant", out specialEventText) ? specialEventText : ((!downedBoss1 && Main.rand.Next(3) == 0) ? ((Main.player[Main.myPlayer].statLifeMax < 200) ? Lang.dialog(1) : ((Main.player[Main.myPlayer].statDefense > 10) ? Lang.dialog(3) : Lang.dialog(2))) : (Main.dayTime ? ((Main.time < 16200.0) ? (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(4), 
					1 => Lang.dialog(5), 
					_ => Lang.dialog(6), 
				}) : ((Main.time > 37800.0) ? (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(7), 
					1 => Lang.dialog(8), 
					_ => Lang.dialog(9), 
				}) : (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(10), 
					1 => Lang.dialog(11), 
					_ => Lang.dialog(12), 
				}))) : (Main.bloodMoon ? ((flag2 && flag7 && Main.rand.Next(3) == 0) ? Lang.dialog(13) : (Main.rand.Next(4) switch
				{
					0 => Lang.dialog(14), 
					1 => Lang.dialog(15), 
					2 => Lang.dialog(16), 
					_ => Lang.dialog(17), 
				})) : ((Main.time < 9720.0) ? ((Main.rand.Next(2) != 0) ? Lang.dialog(19) : Lang.dialog(18)) : ((Main.time > 22680.0) ? ((Main.rand.Next(2) != 0) ? Lang.dialog(21) : Lang.dialog(20)) : (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(22), 
					1 => Lang.dialog(23), 
					_ => Lang.dialog(24), 
				})))))));
			}
			else if (type == 18)
			{
				if (HasSpecialEventText("Nurse", out specialEventText))
				{
					result = specialEventText;
				}
				else if (Main.bloodMoon)
				{
					result = (((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.66) ? (Main.rand.Next(3) switch
					{
						0 => Lang.dialog(25), 
						1 => Lang.dialog(26), 
						_ => Lang.dialog(27), 
					}) : (Main.rand.Next(4) switch
					{
						0 => Lang.dialog(28), 
						1 => Lang.dialog(29), 
						2 => Lang.dialog(30), 
						_ => Lang.dialog(31), 
					}));
				}
				else if (Main.rand.Next(5) == 0 && Main.LocalPlayer.numberOfDeathsPVE > 1)
				{
					int numberOfDeathsPVE = Main.LocalPlayer.numberOfDeathsPVE;
					int num = 25;
					int num2 = 100;
					string text = "Low";
					if (numberOfDeathsPVE >= num2)
					{
						text = "High";
					}
					else if (numberOfDeathsPVE >= num)
					{
						text = "Medium";
					}
					result = Language.GetTextValueWith("NurseSpecialText.DeathCount" + text, obj);
				}
				else if (Main.rand.Next(3) == 0 && !downedBoss3)
				{
					result = Lang.dialog(32);
				}
				else if (flag6 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(33);
				}
				else if (flag3 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(34);
				}
				else if (flag16 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(35);
				}
				else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.33)
				{
					result = Main.rand.Next(5) switch
					{
						0 => Lang.dialog(36), 
						1 => Lang.dialog(37), 
						2 => Lang.dialog(38), 
						3 => Lang.dialog(39), 
						_ => Lang.dialog(40), 
					};
				}
				else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.66)
				{
					result = Main.rand.Next(7) switch
					{
						0 => Lang.dialog(41), 
						1 => Lang.dialog(42), 
						2 => Lang.dialog(43), 
						3 => Lang.dialog(44), 
						4 => Lang.dialog(45), 
						5 => Lang.dialog(46), 
						_ => Lang.dialog(47), 
					};
				}
				else
				{
					LocalizedText[] array = Language.FindAll(Lang.CreateDialogFilter("NurseChatter.", obj));
					int num3 = Main.rand.Next(4 + array.Length);
					result = ((num3 >= 4) ? array[num3 - 4].FormatWith(obj) : (num3 switch
					{
						0 => Lang.dialog(48), 
						1 => Lang.dialog(49), 
						2 => Lang.dialog(50), 
						_ => Lang.dialog(51), 
					}));
				}
			}
			else if (type == 19)
			{
				result = (HasSpecialEventText("ArmsDealer", out specialEventText) ? specialEventText : ((flag16 && downedBoss3 && !Main.hardMode) ? Lang.dialog(58) : ((flag2 && Main.rand.Next(5) == 0) ? Lang.dialog(59) : ((flag2 && Main.rand.Next(5) == 0) ? Lang.dialog(60) : ((flag4 && Main.rand.Next(5) == 0) ? Lang.dialog(61) : ((flag6 && Main.rand.Next(5) == 0) ? Lang.dialog(62) : ((flag6 && Main.rand.Next(5) == 0) ? Lang.dialog(63) : (Main.bloodMoon ? ((Main.rand.Next(2) != 0) ? Lang.dialog(65) : Lang.dialog(64)) : (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(66), 
					1 => Lang.dialog(67), 
					_ => Lang.dialog(68), 
				})))))))));
			}
			else if (type == 20)
			{
				result = (HasSpecialEventText("Dryad", out specialEventText) ? specialEventText : ((DD2Event.DownedInvasionT1 && Main.rand.Next(6) == 0) ? ((!DD2Event.DownedInvasionT2) ? Language.GetTextValueWith("DryadSpecialText.AfterDD2Tier1", obj) : Language.GetTextValueWith("DryadSpecialText.AfterDD2Tier2", obj)) : ((!downedBoss2 && Main.rand.Next(3) == 0) ? ((!WorldGen.crimson) ? Lang.dialog(69) : Lang.dialog(332)) : ((flag3 && Main.rand.Next(6) == 0) ? Lang.dialog(70) : ((flag && Main.rand.Next(6) == 0) ? Lang.dialog(71) : ((flag5 && Main.rand.Next(6) == 0) ? Lang.dialog(72) : ((flag10 && Main.rand.Next(6) == 0) ? Lang.dialog(238) : (Main.bloodMoon ? (Main.rand.Next(4) switch
				{
					0 => Lang.dialog(73), 
					1 => Lang.dialog(74), 
					2 => Lang.dialog(75), 
					_ => Lang.dialog(76), 
				}) : (Main.rand.Next(5) switch
				{
					0 => (!WorldGen.crimson) ? Lang.dialog(77) : Lang.dialog(333), 
					1 => Lang.dialog(78), 
					2 => Lang.dialog(79), 
					3 => Lang.dialog(80), 
					_ => Lang.dialog(81), 
				})))))))));
				if (Main.LocalPlayer.HasItem(5275))
				{
					result = Language.GetTextValue("StardewTalk.PlayerHasColaButIsNotHoldingIt");
				}
			}
			else if (type == 37)
			{
				result = ((!Main.dayTime || Main.remixWorld) ? ((Main.player[Main.myPlayer].statLifeMax < 300 || Main.player[Main.myPlayer].statDefense < 10) ? (Main.rand.Next(4) switch
				{
					0 => Lang.dialog(85), 
					1 => Lang.dialog(86), 
					2 => Lang.dialog(87), 
					_ => Lang.dialog(88), 
				}) : (Main.rand.Next(4) switch
				{
					0 => Lang.dialog(89), 
					1 => Lang.dialog(90), 
					2 => Lang.dialog(91), 
					_ => Lang.dialog(92), 
				})) : (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(82), 
					1 => Lang.dialog(83), 
					_ => Lang.dialog(84), 
				}));
			}
			else if (type == 38)
			{
				result = (HasSpecialEventText("Demolitionist", out specialEventText) ? specialEventText : ((!downedBoss2 && Main.rand.Next(3) == 0) ? Lang.dialog(93) : (Main.bloodMoon ? (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(94), 
					1 => Lang.dialog(95), 
					_ => Lang.dialog(96), 
				}) : (((DD2Event.DownedInvasionT1 || DD2Event.Ongoing) && Main.rand.Next(5) == 0) ? Language.GetTextValueWith("DemolitionistSpecialText.AfterDD2Start", obj) : ((flag3 && Main.rand.Next(5) == 0) ? Lang.dialog(97) : ((flag3 && Main.rand.Next(5) == 0) ? Lang.dialog(98) : ((flag2 && Main.rand.Next(4) == 0) ? Lang.dialog(99) : ((flag4 && Main.rand.Next(4) == 0) ? Lang.dialog(100) : ((!Main.dayTime) ? (Main.rand.Next(4) switch
				{
					0 => Lang.dialog(101), 
					1 => Lang.dialog(102), 
					2 => Lang.dialog(103), 
					_ => Lang.dialog(104), 
				}) : (Main.rand.Next(5) switch
				{
					0 => Lang.dialog(105), 
					1 => Lang.dialog(106), 
					2 => Lang.dialog(107), 
					3 => Lang.dialog(108), 
					_ => Lang.dialog(109), 
				}))))))))));
			}
			else if (type == 54)
			{
				result = (HasSpecialEventText("Clothier", out specialEventText) ? specialEventText : ((!flag7 && Main.rand.Next(2) == 0) ? Lang.dialog(110) : ((flag10 && Main.rand.Next(6) == 0) ? Lang.dialog(237) : (Main.bloodMoon ? Lang.dialog(111) : ((flag2 && Main.rand.Next(4) == 0) ? Lang.dialog(112) : ((Main.player[Main.myPlayer].head == 24) ? Lang.dialog(113) : (Main.rand.Next(6) switch
				{
					0 => Lang.dialog(114), 
					1 => Lang.dialog(115), 
					2 => Lang.dialog(116), 
					3 => Lang.dialog(117), 
					4 => Lang.dialog(118), 
					_ => Lang.dialog(119), 
				})))))));
			}
			else if (type == 105)
			{
				result = Lang.dialog(120);
			}
			else if (type == 107)
			{
				if (homeless)
				{
					result = Main.rand.Next(5) switch
					{
						0 => Lang.dialog(121), 
						1 => Lang.dialog(122), 
						2 => Lang.dialog(123), 
						3 => Lang.dialog(124), 
						_ => Lang.dialog(125), 
					};
				}
				else if (HasSpecialEventText("GoblinTinkerer", out specialEventText))
				{
					result = specialEventText;
				}
				else if (flag7 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(126);
				}
				else if (flag15 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(309);
				}
				else
				{
					LocalizedText[] array2 = Language.FindAll(Lang.CreateDialogFilter("GoblinTinkererChatter.", obj));
					int num4 = Main.rand.Next(array2.Length + 5);
					result = ((num4 >= 5) ? array2[num4 - 5].FormatWith(obj) : ((!Main.dayTime) ? (num4 switch
					{
						0 => Lang.dialog(127), 
						1 => Lang.dialog(128), 
						2 => Lang.dialog(129), 
						3 => Lang.dialog(130), 
						_ => Lang.dialog(131), 
					}) : (num4 switch
					{
						0 => Lang.dialog(132), 
						1 => Lang.dialog(133), 
						2 => Lang.dialog(134), 
						3 => Lang.dialog(135), 
						_ => Lang.dialog(136), 
					})));
				}
			}
			else if (type == 106)
			{
				result = Lang.dialog(137);
			}
			else if (type == 108)
			{
				if (homeless)
				{
					int num5 = Main.rand.Next(3);
					if (num5 == 0)
					{
						result = Lang.dialog(138);
					}
					else if (num5 == 1 && !Main.player[Main.myPlayer].Male)
					{
						result = Lang.dialog(139);
					}
					else
					{
						switch (num5)
						{
						case 1:
							result = Lang.dialog(140);
							break;
						case 2:
							result = Lang.dialog(141);
							break;
						}
					}
				}
				else if (HasLuckTextForWizard(out specialEventText))
				{
					result = specialEventText;
				}
				else if (HasSpecialEventText("Wizard", out specialEventText))
				{
					result = specialEventText;
				}
				else if (DD2Event.DownedInvasionT1 && Main.rand.Next(6) == 0)
				{
					result = Language.GetTextValueWith("WizardSpecialText.AfterDD2Tier1", obj);
				}
				else if (Main.player[Main.myPlayer].Male && flag16 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(142);
				}
				else if (Main.player[Main.myPlayer].Male && flag6 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(143);
				}
				else if (Main.player[Main.myPlayer].Male && flag8 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(144);
				}
				else if (!Main.player[Main.myPlayer].Male && flag2 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(145);
				}
				else if (!Main.player[Main.myPlayer].Male && flag7 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(146);
				}
				else if (!Main.player[Main.myPlayer].Male && flag4 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(147);
				}
				else if (Main.dayTime)
				{
					result = Main.rand.Next(5) switch
					{
						0 => Lang.dialog(151), 
						1 => Lang.dialog(152), 
						2 => Lang.dialog(153), 
						3 => Lang.dialog(154), 
						_ => Lang.dialog(155), 
					};
				}
				else
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(148);
						break;
					case 1:
						result = Lang.dialog(149);
						break;
					case 2:
						result = Lang.dialog(150);
						break;
					}
				}
			}
			else if (type == 123)
			{
				result = Lang.dialog(156);
			}
			else if (type == 124)
			{
				if (homeless)
				{
					result = Main.rand.Next(4) switch
					{
						0 => Lang.dialog(157), 
						1 => Lang.dialog(158), 
						2 => Lang.dialog(159), 
						_ => Lang.dialog(160), 
					};
				}
				else if (HasSpecialEventText("Mechanic", out specialEventText))
				{
					result = specialEventText;
				}
				else if (Main.bloodMoon)
				{
					result = Main.rand.Next(4) switch
					{
						0 => Lang.dialog(161), 
						1 => Lang.dialog(162), 
						2 => Lang.dialog(163), 
						_ => Lang.dialog(164), 
					};
				}
				else if (flag8 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(165);
				}
				else if (flag3 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(166);
				}
				else
				{
					LocalizedText[] array3 = Language.FindAll(Lang.CreateDialogFilter("MechanicChatter.", obj));
					int num6 = Main.rand.Next(3 + array3.Length);
					result = ((num6 >= 3) ? array3[num6 - 3].FormatWith(obj) : (num6 switch
					{
						0 => Lang.dialog(167), 
						1 => Lang.dialog(168), 
						_ => Lang.dialog(169), 
					}));
				}
			}
			else if (type == 22)
			{
				result = (HasSpecialEventText("Guide", out specialEventText) ? specialEventText : (Main.bloodMoon ? (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(170), 
					1 => Lang.dialog(171), 
					_ => Lang.dialog(172), 
				}) : ((LanternNight.LanternsUp && !downedMoonlord) ? Language.GetTextValue("GuideSpecialText.Lantern1") : ((LanternNight.LanternsUp && downedMoonlord) ? Language.GetTextValue("GuideSpecialText.Lantern2") : (Main.eclipse ? Language.GetTextValue("GuideSpecialText.Eclipse") : (Main.slimeRain ? Language.GetTextValue("GuideSpecialText.SlimeRain") : ((!Main.dayTime) ? Lang.dialog(173) : ((Main.hardMode && flag17 && Main.rand.Next(8) == 0) ? Language.GetTextValueWith("GuideChatter.Chatter_1", obj) : ((Main.hardMode && Main.rand.Next(8) == 0) ? Language.GetTextValue("GuideChatter.Chatter_2") : (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(174), 
					1 => Lang.dialog(175), 
					_ => Lang.dialog(176), 
				}))))))))));
			}
			else if (type == 142)
			{
				int num7 = Main.rand.Next(3);
				if (HasSpecialEventText("Santa", out specialEventText))
				{
					result = specialEventText;
				}
				else
				{
					switch (num7)
					{
					case 0:
						result = Lang.dialog(224);
						break;
					case 1:
						result = Lang.dialog(225);
						break;
					case 2:
						result = Lang.dialog(226);
						break;
					}
				}
			}
			else if (type == 160)
			{
				int num8 = Main.rand.Next(6);
				if (HasSpecialEventText("Truffle", out specialEventText))
				{
					result = specialEventText;
				}
				else if (flag4 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(232);
				}
				else if (flag9 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(236);
				}
				else
				{
					switch (num8)
					{
					case 0:
						result = Lang.dialog(231);
						break;
					case 1:
						result = Lang.dialog(233);
						break;
					case 2:
						result = Lang.dialog(234);
						break;
					case 3:
						result = Lang.dialog(235);
						break;
					case 4:
						result = Lang.dialog(240);
						break;
					case 5:
						result = Lang.dialog(241);
						break;
					}
				}
			}
			else if (type == 178)
			{
				int num9 = Main.rand.Next(5);
				if (HasSpecialEventText("Steampunker", out specialEventText))
				{
					result = specialEventText;
				}
				else if (Main.bloodMoon && Main.rand.Next(3) == 0)
				{
					result = Lang.dialog(245);
				}
				else if (flag13 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(246);
				}
				else if (flag12 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(247);
				}
				else
				{
					switch (num9)
					{
					case 0:
						result = Lang.dialog(242);
						break;
					case 1:
						result = Lang.dialog(243);
						break;
					case 2:
						result = Lang.dialog(244);
						break;
					case 3:
						result = Lang.dialog(248);
						break;
					case 4:
						result = Lang.dialog(249);
						break;
					}
				}
			}
			else if (type == 207)
			{
				int num10 = Main.rand.Next(3);
				if (HasSpecialEventText("DyeTrader", out specialEventText))
				{
					result = specialEventText;
				}
				else if (flag12 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(260);
				}
				else
				{
					switch (num10)
					{
					case 0:
						result = Lang.dialog(257);
						break;
					case 1:
						result = Lang.dialog(258);
						break;
					case 2:
						result = Lang.dialog(259);
						break;
					}
				}
			}
			else if (type == 208)
			{
				if (freeCake)
				{
					int num11 = Main.rand.Next(1, 4);
					result = Language.GetTextValueWith("PartyGirlSpecialText.Cake" + num11, obj);
				}
				else
				{
					int num12 = Main.rand.Next(7);
					if (HasSpecialEventText("PartyGirl", out specialEventText))
					{
						result = specialEventText;
					}
					else if (DD2Event.DownedInvasionT1 && Main.rand.Next(5) == 0)
					{
						result = Language.GetTextValueWith("PartyGirlSpecialText.AfterDD2Tier1", obj);
					}
					else if (Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
					{
						result = Lang.dialog(268);
					}
					else if (flag15 && Main.rand.Next(5) == 0)
					{
						result = Lang.dialog(310);
					}
					else
					{
						switch (num12)
						{
						case 0:
							result = Lang.dialog(265);
							break;
						case 1:
							result = Lang.dialog(266);
							break;
						case 2:
							result = Lang.dialog(267);
							break;
						case 3:
							result = Lang.dialog(269);
							break;
						case 4:
							result = Lang.dialog(270);
							break;
						case 5:
							result = Lang.dialog(271);
							break;
						case 6:
							result = Lang.dialog(272);
							break;
						}
					}
				}
			}
			else if (type == 209)
			{
				if (HasSpecialEventText("Cyborg", out specialEventText))
				{
					result = specialEventText;
				}
				else if (flag12 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(284);
				}
				else if (flag11 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(283);
				}
				else
				{
					LocalizedText[] array4 = Language.FindAll(Lang.CreateDialogFilter("CyborgChatter.", obj));
					int num13 = Main.rand.Next(5 + array4.Length);
					if (num13 >= 5)
					{
						result = array4[num13 - 5].FormatWith(obj);
					}
					else
					{
						switch (num13)
						{
						case 0:
							result = Lang.dialog(280);
							break;
						case 1:
							result = Lang.dialog(281);
							break;
						case 2:
							result = Lang.dialog(282);
							break;
						case 3:
							result = Lang.dialog(285);
							break;
						case 4:
							result = Lang.dialog(286);
							break;
						}
					}
				}
			}
			else if (type == 227)
			{
				int num14 = Main.rand.Next(5);
				if (HasSpecialEventText("Painter", out specialEventText))
				{
					result = specialEventText;
				}
				else if (Main.hardMode && Main.rand.Next(7) == 0)
				{
					result = Lang.dialog(250);
				}
				else if (flag14 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(251);
				}
				else
				{
					switch (num14)
					{
					case 0:
						result = Lang.dialog(252);
						break;
					case 1:
						result = Lang.dialog(253);
						break;
					case 2:
						result = Lang.dialog(254);
						break;
					case 3:
						result = Lang.dialog(255);
						break;
					case 4:
						result = Lang.dialog(256);
						break;
					}
				}
			}
			else if (type == 228)
			{
				int num15 = Main.rand.Next(4);
				if (HasSpecialEventText("WitchDoctor", out specialEventText))
				{
					result = specialEventText;
				}
				else if (flag2 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(263);
				}
				else
				{
					switch (num15)
					{
					case 0:
						result = Lang.dialog(261);
						break;
					case 1:
						result = Lang.dialog(262);
						break;
					case 2:
						result = Lang.dialog(264);
						break;
					case 3:
						result = Language.GetTextValueWith("WitchDoctorSpecialText.AfterDD2Tier1", obj);
						break;
					}
				}
			}
			else if (type == 229)
			{
				LocalizedText[] array5 = Language.FindAll(Lang.CreateDialogFilter("PirateChatter.", obj));
				int num16 = Main.rand.Next(6 + array5.Length);
				if (num16 >= 6)
				{
					result = array5[num16 - 6].FormatWith(obj);
				}
				else if (HasSpecialEventText("Pirate", out specialEventText))
				{
					result = specialEventText;
				}
				else if (!Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(276);
				}
				else
				{
					switch (num16)
					{
					case 0:
						result = Lang.dialog(273);
						break;
					case 1:
						result = Lang.dialog(274);
						break;
					case 2:
						result = Lang.dialog(275);
						break;
					case 3:
						result = Lang.dialog(277);
						break;
					case 4:
						result = Lang.dialog(278);
						break;
					case 5:
						result = Lang.dialog(279);
						break;
					}
				}
			}
			else if (type == 354)
			{
				result = Lang.dialog(Main.rand.Next(315, 319));
			}
			else if (type == 353)
			{
				if (HasSpecialEventText("Stylist", out specialEventText))
				{
					result = specialEventText;
				}
				else if (Main.bloodMoon)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(304);
						break;
					case 1:
						result = Lang.dialog(305);
						break;
					case 2:
						result = Lang.dialog(306);
						break;
					}
				}
				else if (Main.dayTime && Main.time < 16200.0 && Main.rand.Next(3) == 0)
				{
					result = Lang.dialog(311);
				}
				else if (Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
				{
					switch (Main.rand.Next(2))
					{
					case 0:
						result = Lang.dialog(293);
						break;
					case 1:
						result = Lang.dialog(300);
						break;
					}
				}
				else if (!Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(291);
						break;
					case 1:
						result = Lang.dialog(292);
						break;
					case 2:
						result = Lang.dialog(312);
						break;
					}
				}
				else if (flag14 && flag7 && flag2 && flag3 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(307);
				}
				else if (flag14 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(302);
				}
				else if (flag6 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(303);
				}
				else if (flag13 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(308);
				}
				else
				{
					LocalizedText[] array6 = Language.FindAll(Lang.CreateDialogFilter("StylistChatter.", obj));
					int num17 = ((Main.moonPhase < 3) ? 5 : 4);
					int num18 = Main.rand.Next(num17 + array6.Length);
					if (num18 >= num17)
					{
						result = array6[num18 - num17].FormatWith(obj);
					}
					else if (Main.moonPhase < 3)
					{
						switch (num18)
						{
						case 0:
							result = Lang.dialog(287);
							break;
						case 1:
							result = Lang.dialog(288);
							break;
						case 2:
							result = Lang.dialog(289);
							break;
						case 3:
							result = Lang.dialog(290);
							break;
						case 4:
							result = Lang.dialog(294);
							break;
						}
					}
					else if (Main.moonPhase < 6)
					{
						switch (num18)
						{
						case 0:
							result = Lang.dialog(295);
							break;
						case 1:
							result = Lang.dialog(296);
							break;
						case 2:
							result = Lang.dialog(297);
							break;
						case 3:
							result = Lang.dialog(298);
							break;
						}
					}
					else
					{
						switch (num18)
						{
						case 0:
							result = Lang.dialog(299);
							break;
						case 1:
							result = Lang.dialog(301);
							break;
						case 2:
							result = Lang.dialog(313);
							break;
						case 3:
							result = Lang.dialog(314);
							break;
						}
					}
				}
			}
			else if (type == 368)
			{
				result = (HasSpecialEventText("TravellingMerchant", out specialEventText) ? specialEventText : ((flag16 && Main.rand.Next(5) == 0) ? Lang.dialog(319) : ((flag && Main.rand.Next(5) == 0) ? Lang.dialog(320) : ((!flag9 || Main.rand.Next(5) != 0) ? Lang.dialog(Main.rand.Next(322, 331)) : Lang.dialog(321)))));
			}
			else if (type == 376)
			{
				result = Lang.dialog(Main.rand.Next(353, 356));
			}
			else if (type == 369)
			{
				result = ((Main.rand.Next(5) == 0 && Main.LocalPlayer.anglerQuestsFinished > 1) ? Lang.AnglerQuestCountChat(this) : (HasSpecialEventText("Angler", out specialEventText) ? specialEventText : (Main.bloodMoon ? ((Main.rand.Next(3) == 0) ? Language.SelectRandom(Lang.CreateDialogFilter("AnglerSpecialText.BloodMoonFishing")).FormatWith(obj) : (Main.anglerQuestFinished ? Lang.dialog(Main.rand.Next(350, 353)) : Lang.dialog(Main.rand.Next(348, 350)))) : ((!Main.anglerQuestFinished) ? Lang.dialog(Main.rand.Next(334, 338)) : ((!flag4 || Main.rand.Next(5) != 0) ? Language.SelectRandom(Lang.CreateDialogFilter("AnglerChatter.", obj)).FormatWith(obj) : Lang.dialog(347))))));
			}
			else if (type == 453)
			{
				result = ((!HasSpecialEventText("SkeletonMerchant", out specialEventText)) ? Lang.dialog(Main.rand.Next(356, 364)) : specialEventText);
			}
			else if (type == 441)
			{
				result = (HasSpecialEventText("TaxCollector", out specialEventText) ? specialEventText : ((Main.rand.Next(6) == 0 && flag4) ? Lang.dialog(371) : ((Main.rand.Next(6) == 0 && flag3) ? Lang.dialog(372) : ((Main.rand.Next(6) == 0 && flag6) ? Lang.dialog(373) : ((!(Main.rand.Next(6) == 0 && flag)) ? Lang.dialog(Main.rand.Next(364, 370)) : Lang.dialog(374))))));
			}
			else if (type == 579)
			{
				result = Language.GetTextValue("BartenderSpecialText.FirstMeeting");
			}
			else if (type == 550)
			{
				result = ((!HasSpecialEventText("Bartender", out specialEventText)) ? Lang.BartenderChat(this) : specialEventText);
			}
			else if (type == 589)
			{
				result = ((Main.rand.Next(2) != 0) ? Language.GetTextValue("GolferSpecialText.FirstMeeting2") : Language.GetTextValue("GolferSpecialText.FirstMeeting1"));
			}
			else if (type == 588)
			{
				if (Main.rand.Next(3) != 0 && HasSpecialEventText("Golfer", out specialEventText))
				{
					result = specialEventText;
				}
				else if (Main.rand.Next(3) == 0)
				{
					string text2 = ((Main.LocalPlayer.golferScoreAccumulated >= 2000) ? "GolferQuestsChatterMaster" : ((Main.LocalPlayer.golferScoreAccumulated >= 1000) ? "GolferQuestsChatterJourneyman" : ((Main.LocalPlayer.golferScoreAccumulated < 500) ? "GolferQuestsChatterBeginner" : "GolferQuestsChatterApprentice")));
					result = Language.SelectRandom(Lang.CreateDialogFilter(text2 + ".")).FormatWith(obj);
				}
				else
				{
					result = Lang.GolferChat(this);
				}
			}
			else if (type == 633)
			{
				result = ((ShouldBestiaryGirlBeLycantrope() || !HasSpecialEventText("BestiaryGirl", out specialEventText)) ? Lang.BestiaryGirlChat(this) : specialEventText);
			}
			else if (type == 663)
			{
				result = ((!HasSpecialEventText("Princess", out specialEventText)) ? Lang.PrincessChat(this) : specialEventText);
			}
			else if (type == 637)
			{
				result = ((!HasSpecialEventText("Cat", out specialEventText)) ? Lang.CatChat(this) : specialEventText);
			}
			else if (type == 638)
			{
				result = ((!HasSpecialEventText("Dog", out specialEventText)) ? Lang.DogChat(this) : specialEventText);
			}
			else if (type == 656)
			{
				result = ((!HasSpecialEventText("Bunny", out specialEventText)) ? Lang.BunnyChat(this) : specialEventText);
			}
			else if (NPCID.Sets.IsTownSlime[type])
			{
				result = ((!HasSpecialEventText("Slime", out specialEventText)) ? Lang.SlimeChat(this) : specialEventText);
			}
			return result;
		}

		public object Clone()
		{
			return MemberwiseClone();
		}

		public bool HasLuckTextForWizard(out string specialEventText)
		{
			specialEventText = null;
			object obj = Lang.CreateDialogSubstitutionObject(this);
			if (Main.rand.Next(3) == 0)
			{
				float normalizedLuck = Main.player[Main.myPlayer].NormalizedLuck;
				if (normalizedLuck == 0f)
				{
					return false;
				}
				string text = null;
				text = ((normalizedLuck < -0.6f) ? "WizardSpecialText.LuckIsCursed" : ((normalizedLuck < -0.4f) ? "WizardSpecialText.LuckIsTerrible" : ((normalizedLuck < -0.2f) ? "WizardSpecialText.LuckIsPoor" : ((normalizedLuck < 0f) ? "WizardSpecialText.LuckIsBad" : ((normalizedLuck < 0.25f) ? "WizardSpecialText.LuckIsGood" : ((normalizedLuck < 0.5f) ? "WizardSpecialText.LuckIsGreat" : ((!(normalizedLuck < 0.75f)) ? "WizardSpecialText.LuckIsGodly" : "WizardSpecialText.LuckIsAmazing")))))));
				specialEventText = Language.SelectRandom(Lang.CreateDialogFilter(text)).FormatWith(obj);
				return true;
			}
			return false;
		}

		public bool HasSpecialEventText(string specialTextCategoryKey, out string specialEventText)
		{
			specialEventText = null;
			object substitutes = Lang.CreateDialogSubstitutionObject(this);
			if (Main.LocalPlayer.ZoneGraveyard && Main.rand.Next(3) == 0 && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Graveyard", substitutes, ref specialEventText))
			{
				return true;
			}
			if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0 && !NPCID.Sets.HasNoPartyText[type] && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Party", substitutes, ref specialEventText))
			{
				return true;
			}
			if (Main.raining && !Main.IsItStorming && Main.rand.Next(3) == 0 && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Rain", substitutes, ref specialEventText))
			{
				return true;
			}
			if (Main.IsItAHappyWindyDay && Main.rand.Next(3) == 0 && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Windy", substitutes, ref specialEventText))
			{
				return true;
			}
			if (Main.IsItStorming && Main.rand.Next(3) == 0 && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Storm", substitutes, ref specialEventText))
			{
				return true;
			}
			return false;
		}

		public bool GetSpecialEventTextIfNotEmpty(string specialTextKey, object substitutes, ref string specialEventText)
		{
			LocalizedText localizedText = Language.SelectRandom(Lang.CreateDialogFilter(specialTextKey));
			if (localizedText != LocalizedText.Empty)
			{
				specialEventText = localizedText.FormatWith(substitutes);
				return true;
			}
			return false;
		}

		public void CheckDrowning()
		{
			bool flag = Collision.DrownCollision(position, width, height, 1f);
			if (Main.netMode != 1)
			{
				if (flag)
				{
					if (++breathCounter >= 7)
					{
						breathCounter = 0;
						breath--;
						if (breath <= 0)
						{
							friendlyRegen = 0;
							breath = 0;
							life -= 2;
							if (life % 24 < 2)
							{
								netUpdate = true;
							}
							if (life <= 0)
							{
								life = 1;
								StrikeNPCNoInteraction(2, 0f, 0);
								if (Main.netMode != 0)
								{
									NetMessage.SendData(28, -1, -1, null, whoAmI, 2f);
								}
							}
						}
					}
				}
				else
				{
					breath += 3;
					if (breath > 200)
					{
						breath = 200;
					}
					breathCounter = 0;
				}
			}
			if (flag && Main.rand.Next(20) == 0 && !lavaWet && !honeyWet && !shimmerWet)
			{
				int num = 0;
				int num2 = 0;
				if (type == 369)
				{
					num2 = 8;
				}
				Dust.NewDust(new Vector2(position.X + (float)((10 + num) * direction), position.Y + (float)num2 + 4f), width - 8, 8, 34, 0f, 0f, 0, default(Color), 1.2f);
			}
		}

		public void TryPortalJumping()
		{
			if (townNPC && Main.netMode != 1)
			{
				PortalHelper.TryGoingThroughPortals(this);
			}
		}

		public static void GetMeleeCollisionData(Rectangle victimHitbox, int enemyIndex, ref int specialHitSetter, ref float damageMultiplier, ref Rectangle npcRect)
		{
			NPC nPC = Main.npc[enemyIndex];
			if (((nPC.type >= 430 && nPC.type <= 436) || nPC.type == 591) && nPC.ai[2] > 5f)
			{
				int num = 34;
				if (nPC.spriteDirection < 0)
				{
					npcRect.X -= num;
					npcRect.Width += num;
				}
				else
				{
					npcRect.Width += num;
				}
				damageMultiplier *= 1.25f;
			}
			else if (nPC.type >= 494 && nPC.type <= 495 && nPC.ai[2] > 5f)
			{
				int num2 = 18;
				if (nPC.spriteDirection < 0)
				{
					npcRect.X -= num2;
					npcRect.Width += num2;
				}
				else
				{
					npcRect.Width += num2;
				}
				damageMultiplier *= 1.25f;
			}
			else if (nPC.type == 460)
			{
				Rectangle rectangle = new Rectangle(0, 0, 30, 14);
				rectangle.X = (int)nPC.Center.X;
				if (nPC.direction < 0)
				{
					rectangle.X -= rectangle.Width;
				}
				rectangle.Y = (int)nPC.position.Y + nPC.height - 20;
				if (victimHitbox.Intersects(rectangle))
				{
					npcRect = rectangle;
					damageMultiplier *= 1.35f;
				}
			}
			else if (nPC.type == 417 && nPC.ai[0] == 6f && nPC.ai[3] > 0f && nPC.ai[3] < 4f)
			{
				Rectangle rectangle2 = Utils.CenteredRectangle(nPC.Center, new Vector2(100f));
				if (victimHitbox.Intersects(rectangle2))
				{
					npcRect = rectangle2;
					damageMultiplier *= 1.35f;
				}
			}
			else if (nPC.type == 466)
			{
				Rectangle rectangle3 = new Rectangle(0, 0, 30, 8);
				rectangle3.X = (int)nPC.Center.X;
				if (nPC.direction < 0)
				{
					rectangle3.X -= rectangle3.Width;
				}
				rectangle3.Y = (int)nPC.position.Y + nPC.height - 32;
				if (victimHitbox.Intersects(rectangle3))
				{
					npcRect = rectangle3;
					damageMultiplier *= 1.75f;
				}
			}
			else if (nPC.type == 576 || nPC.type == 577)
			{
				NPC nPC2 = nPC;
				bool flag = true;
				int y = nPC2.frame.Y;
				int num3 = 0;
				int num4 = 0;
				Rectangle rectangle4 = new Rectangle(0, 0, 30, 8);
				switch (y)
				{
				case 15:
					specialHitSetter = 2;
					rectangle4.Width = 120;
					rectangle4.Height = 30;
					num4 = 24;
					break;
				case 16:
					specialHitSetter = 2;
					rectangle4.Width = 120;
					rectangle4.Height = 60;
					num3 = 10;
					break;
				case 17:
					specialHitSetter = 2;
					rectangle4.Width = 100;
					rectangle4.Height = 90;
					num3 = 50;
					break;
				case 18:
					specialHitSetter = 2;
					rectangle4.Width = 100;
					rectangle4.Height = 50;
					num3 = 90;
					num4 = 10;
					break;
				default:
					flag = false;
					break;
				}
				if (flag)
				{
					rectangle4.X = (int)nPC2.Center.X - num3 * nPC2.direction;
					if (nPC2.direction < 0)
					{
						rectangle4.X -= rectangle4.Width;
					}
					rectangle4.Y = (int)nPC2.Center.Y - rectangle4.Height + num4;
					if (victimHitbox.Intersects(rectangle4))
					{
						npcRect = rectangle4;
						damageMultiplier *= 1.75f;
					}
				}
			}
			else if ((nPC.type == 552 || nPC.type == 553 || nPC.type == 554) && nPC.ai[0] > 0f && nPC.ai[0] < 24f)
			{
				Rectangle rectangle5 = new Rectangle(0, 0, 34, 14);
				rectangle5.X = (int)nPC.Center.X;
				if (nPC.direction < 0)
				{
					rectangle5.X -= rectangle5.Width;
				}
				rectangle5.Y = (int)nPC.position.Y + nPC.height - 20;
				if (victimHitbox.Intersects(rectangle5))
				{
					npcRect = rectangle5;
					damageMultiplier *= 1.35f;
				}
			}
			else
			{
				if (nPC.type != 668)
				{
					return;
				}
				npcRect.Height -= 80;
				NPC nPC3 = nPC;
				bool flag2 = true;
				int y2 = nPC3.frame.Y;
				int num5 = 0;
				int num6 = 0;
				Rectangle rectangle6 = new Rectangle(0, 0, 30, 8);
				if (y2 == 15)
				{
					rectangle6.Width = 64;
					rectangle6.Height = 180;
					num6 = 80;
					num5 = -42;
					if (nPC3.ai[0] == 4f)
					{
						flag2 = false;
					}
				}
				else
				{
					flag2 = false;
				}
				if (flag2)
				{
					rectangle6.X = (int)nPC3.Center.X - num5 * nPC3.direction;
					if (nPC3.direction < 0)
					{
						rectangle6.X -= rectangle6.Width;
					}
					rectangle6.Y = (int)nPC3.Center.Y - rectangle6.Height + num6;
					if (victimHitbox.Intersects(rectangle6))
					{
						npcRect = rectangle6;
					}
				}
			}
		}

		public string GetBestiaryCreditId()
		{
			return ContentSamples.NpcBestiaryCreditIdsByNpcNetIds[netID];
		}

		public override string ToString()
		{
			return "name:" + TypeName + ", active:" + active.ToString() + ", whoAmI:" + whoAmI;
		}
	}
}
